// Generated from G:/Projects/Java/plsqlParser/src/main/java/com/ekazantsev/grammar\PLSQL.g4 by ANTLR 4.9
package com.ekazantsev.grammar;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.misc.*;
import org.antlr.v4.runtime.tree.*;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class PLSQLParser extends Parser {
	static { RuntimeMetaData.checkVersion("4.9", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		T__0=1, T__1=2, T__2=3, A_LETTER=4, ADD=5, AFTER=6, AGENT=7, AGGREGATE=8, 
		ALL=9, ALLOCATE=10, ALLOW=11, ALTER=12, ALWAYS=13, ANALYZE=14, AND=15, 
		ANY=16, ANYSCHEMA=17, ARCHIVE=18, ARRAY=19, AS=20, ASC=21, ASSOCIATE=22, 
		AT=23, ATTRIBUTE=24, AUDIT=25, AUTHID=26, AUTO=27, AUTOMATIC=28, AUTONOMOUS_TRANSACTION=29, 
		BASIC=30, BASICFILE=31, BATCH=32, BEFORE=33, BEGIN=34, BETWEEN=35, BFILE=36, 
		BINARY=37, BINARY_DOUBLE=38, BINARY_FLOAT=39, BINARY_INTEGER=40, BITMAP=41, 
		BUFFER_POOL=42, BUILD=43, BLOB=44, BLOCK=45, BODY=46, BOOLEAN=47, BOTH=48, 
		BREADTH=49, BULK=50, BY=51, BYTE=52, C_LETTER=53, CACHE=54, CALL=55, CANONICAL=56, 
		CASCADE=57, CASE=58, CAST=59, CHAR=60, CHAR_CS=61, CHARACTER=62, CHECK=63, 
		CHECKPOINT=64, CHR=65, CHUNK=66, CLOB=67, CLOSE=68, CLUSTER=69, COALESCE=70, 
		COLLECT=71, COLUMN=72, COLUMNS=73, COLUMN_VALUE=74, COMMENT=75, COMMIT=76, 
		COMMITTED=77, COMPACT=78, COMPATIBILITY=79, COMPILE=80, COMPLETE=81, COMPOUND=82, 
		COMPRESS=83, CONCAT=84, CONNECT=85, CONNECT_BY_ROOT=86, CONSTANT=87, CONSTRAINT=88, 
		CONSTRAINTS=89, CONSTRUCTOR=90, CONTENT=91, CONTEXT=92, CONTINUE=93, CONVERT=94, 
		CORRUPT_XID=95, CORRUPT_XID_ALL=96, COST=97, COUNT=98, CREATE=99, CREATEDB=100, 
		CREATEROLE=101, CREATION=102, CROSS=103, CUBE=104, CURRENT=105, CURRENT_USER=106, 
		CURSOR=107, CUSTOMDATUM=108, CYCLE=109, DATA=110, DATABASE=111, DATAFILE=112, 
		DATE=113, DAY=114, DB_ROLE_CHANGE=115, DBTIMEZONE=116, DDL=117, DEBUG=118, 
		DEALLOCATE=119, DEC=120, DECIMAL=121, DECLARE=122, DECODE=123, DECOMPOSE=124, 
		DECREMENT=125, DECRYPT=126, DEDUPLICATE=127, DEFAULT=128, DEFAULTS=129, 
		DEFERRABLE=130, DEFERRED=131, DEFINER=132, DELETE=133, DEMAND=134, DEPTH=135, 
		DESC=136, DETERMINISTIC=137, DIMENSION=138, DISABLE=139, DISALLOW=140, 
		DISASSOCIATE=141, DISTINCT=142, DOCUMENT=143, DOUBLE=144, DROP=145, DSINTERVAL_UNCONSTRAINED=146, 
		EACH=147, EDITIONING=148, ELEMENT=149, ELSE=150, ELSIF=151, EMPTY=152, 
		ENABLE=153, ENCODING=154, ENCRYPT=155, END=156, ENFORCED=157, ENTITYESCAPING=158, 
		ERR=159, ERRORS=160, ESCAPE=161, EVALNAME=162, EXCEPT=163, EXCEPTION=164, 
		EXCEPTION_INIT=165, EXCEPTIONS=166, EXCLUDE=167, EXCLUSIVE=168, EXECUTE=169, 
		EXISTS=170, EXIT=171, EXPLAIN=172, EXTENT=173, EXTERNAL=174, EXTRACT=175, 
		FAILURE=176, FALSE=177, FAST=178, FETCH=179, FILESYSTEM_LIKE_LOGGING=180, 
		FINAL=181, FIRST=182, FIRST_VALUE=183, FLASHBACK=184, FLASH_CACHE=185, 
		FLOAT=186, FOLLOWING=187, FOLLOWS=188, FOR=189, FORALL=190, FORCE=191, 
		FOREIGN=192, FREELIST=193, FREELISTS=194, FREEPOOLS=195, FROM=196, FULL=197, 
		FUNCTION=198, GENERATED=199, GLOBAL=200, GOTO=201, GRANT=202, GROUP=203, 
		GROUPS=204, GROUPING=205, HASH=206, HAVING=207, HIDE=208, HIGH=209, HOUR=210, 
		IDENTIFIED=211, IDENTIFIER=212, IF=213, IGNORE=214, ILIKE=215, IMMEDIATE=216, 
		IN=217, INCLUDE=218, INCLUDING=219, INCREMENT=220, INDENT=221, INDEX=222, 
		INDEXED=223, INDEXTYPE=224, INDICATOR=225, INDICES=226, INFINITE=227, 
		INITIAL=228, INITIALLY=229, INITRANS=230, INLINE=231, INNER=232, INOUT=233, 
		INSERT=234, INSTANCE=235, INSTANTIABLE=236, INSTEAD=237, INT=238, INTEGER=239, 
		INTERSECT=240, INTERVAL=241, INTO=242, INVALIDATE=243, INVISIBLE=244, 
		IS=245, ISOLATION=246, ITERATE=247, JAVA=248, JOIN=249, KEEP=250, KEEP_DUPLICATES=251, 
		KEY=252, LANGUAGE=253, LAST=254, LAST_VALUE=255, LEADING=256, LEFT=257, 
		LESS=258, LEVEL=259, LEVELS=260, LIBRARY=261, LIKE=262, LIKE2=263, LIKE4=264, 
		LIKEC=265, LIMIT=266, LIST=267, LOCAL=268, LOB=269, LOBS=270, LOCATOR=271, 
		LOCK=272, LOCKED=273, LOG=274, LOGGING=275, LOGOFF=276, LOGIN=277, LOGON=278, 
		LONG=279, LOOP=280, LOW=281, MAIN=282, MAP=283, MAPPING=284, MASTER=285, 
		MATCHED=286, MAXEXTENTS=287, MAXVALUE=288, MEASURES=289, MEDIUM=290, MEMBER=291, 
		MERGE=292, MINEXTENTS=293, MINIMIZE=294, MINUS=295, MINUTE=296, MINVALUE=297, 
		MLSLABEL=298, MODE=299, MODEL=300, MODIFY=301, MONTH=302, MOVEMENT=303, 
		MULTISET=304, NAME=305, NAN=306, NATURAL=307, NATURALN=308, NAV=309, NCHAR=310, 
		NCHAR_CS=311, NCLOB=312, NESTED=313, NEVER=314, NEW=315, NEXT=316, NO=317, 
		NOAUDIT=318, NOCACHE=319, NOCOMPRESS=320, NOCOPY=321, NOCYCLE=322, NOENTITYESCAPING=323, 
		NOLOGGING=324, NOMAPPING=325, NOMAXVALUE=326, NOMINIMIZE=327, NOMINVALUE=328, 
		NONE=329, NONSCHEMA=330, NOORDER=331, NOPARALLEL=332, NORELY=333, NOROWDEPENDENCIES=334, 
		NOSCHEMACHECK=335, NOSORT=336, NOT=337, NOVALIDATE=338, NOWAIT=339, NVL=340, 
		NULL=341, NULLS=342, NUMBER=343, NUMERIC=344, NVARCHAR2=345, MATERIALIZED=346, 
		OBJECT=347, OF=348, OFF=349, OID=350, OIDINDEX=351, OLD=352, OLTP=353, 
		ON=354, ONLY=355, OPEN=356, OPTIMAL=357, OPTION=358, OR=359, ORADATA=360, 
		ORDER=361, ORDINALITY=362, OSERROR=363, OUT=364, OUTER=365, OVER=366, 
		OVERFLOW=367, OVERRIDING=368, PACKAGE=369, PARALLEL=370, PARALLEL_ENABLE=371, 
		PARAMETERS=372, PARENT=373, PARTITION=374, PASSING=375, PATH=376, PCTFREE=377, 
		PCTINCREASE=378, PCTTHRESHOLD=379, PCTUSED=380, PCTVERSION=381, PERCENT_ROWTYPE=382, 
		PERCENT_TYPE=383, PIPELINED=384, PIVOT=385, PLAN=386, PLS_INTEGER=387, 
		PARTITIONS=388, POSITION=389, POSITIVE=390, POSITIVEN=391, PRAGMA=392, 
		PREBUILT=393, PRECEDING=394, PRECISION=395, PRESENT=396, PRESERVE=397, 
		PRIMARY=398, PRIOR=399, PROCEDURE=400, PUBLIC=401, PURGE=402, QUERY=403, 
		RAISE=404, RANGE=405, RAW=406, READ=407, READS=408, REAL=409, REBUILD=410, 
		RECORD=411, RECORDS_PER_BLOCK=412, RECYCLE=413, REDUCED=414, REF=415, 
		REFERENCE=416, REFERENCES=417, REFERENCING=418, REFRESH=419, REJECT=420, 
		REKEY=421, RELATIONAL=422, RELIES_ON=423, RELY=424, RENAME=425, REPLACE=426, 
		RESPECT=427, RESTRICT_REFERENCES=428, RESULT=429, RESULT_CACHE=430, RETENTION=431, 
		RETURN=432, RETURNING=433, REUSE=434, REVERSE=435, REVOKE=436, REWRITE=437, 
		RIGHT=438, ROLE=439, ROLLBACK=440, ROLLUP=441, ROW=442, ROWDEPENDENCIES=443, 
		ROWID=444, ROWS=445, RULES=446, SALT=447, SAMPLE=448, SAVE=449, SAVEPOINT=450, 
		SCHEMA=451, SCHEMACHECK=452, SCN=453, SCOPE=454, SEARCH=455, SECOND=456, 
		SECUREFILE=457, SEED=458, SEGMENT=459, SELECT=460, SELF=461, SEQUENCE=462, 
		SEQUENTIAL=463, SERIALIZABLE=464, SERIALLY_REUSABLE=465, SERVERERROR=466, 
		SESSIONTIMEZONE=467, SET=468, SETS=469, SETTINGS=470, SHARE=471, SHOW=472, 
		SHRINK=473, SHUTDOWN=474, SIBLINGS=475, SIGNTYPE=476, SIMPLE_INTEGER=477, 
		SINGLE=478, SIZE=479, SKIP_=480, SMALLINT=481, SNAPSHOT=482, SOME=483, 
		SORT=484, SPACE_KEYWORD=485, SPECIFICATION=486, SQLDATA=487, SQLERROR=488, 
		STANDALONE=489, START=490, STARTUP=491, STATEMENT=492, STATEMENT_ID=493, 
		STATIC=494, STATISTICS=495, STORAGE=496, STORE=497, STRING=498, SUBMULTISET=499, 
		SUBPARTITION=500, SUBPARTITIONS=501, SUBSTITUTABLE=502, SUBSTRING=503, 
		SUBTYPE=504, SUCCESS=505, SUPPLEMENTAL=506, SUSPEND=507, SYSTEM=508, TABLE=509, 
		TABLES=510, TABLESPACE=511, TEMPLATE=512, TEMPORARY=513, THAN=514, THE=515, 
		THEN=516, TIME=517, TIMESTAMP=518, TIMESTAMP_LTZ_UNCONSTRAINED=519, TIMESTAMP_TZ_UNCONSTRAINED=520, 
		TIMESTAMP_UNCONSTRAINED=521, TIMEZONE_ABBR=522, TIMEZONE_HOUR=523, TIMEZONE_MINUTE=524, 
		TIMEZONE_REGION=525, TO=526, TO_CHAR=527, TO_DATE=528, TRAILING=529, TRANSACTION=530, 
		TRANSLATE=531, TREAT=532, TRIGGER=533, TRIM=534, TRUE=535, TRUNCATE=536, 
		TRUSTED=537, TYPE=538, UNBOUNDED=539, UNDER=540, UNION=541, UNIQUE=542, 
		UNLIMITED=543, UNPIVOT=544, UNTIL=545, UNUSABLE=546, UNUSED=547, UPDATE=548, 
		UPDATED=549, UPGRADE=550, UPSERT=551, UROWID=552, USE=553, USING=554, 
		VALIDATE=555, VALUE=556, VALUES=557, VARCHAR=558, VARCHAR2=559, VARIABLE=560, 
		VARRAY=561, VARRAYS=562, VARYING=563, VERBOSE=564, VERSION=565, VERSIONS=566, 
		VIEW=567, VIRTUAL=568, VISIBLE=569, WAIT=570, WARNING=571, WELLFORMED=572, 
		WHEN=573, WHENEVER=574, WHERE=575, WHILE=576, WITH=577, WITHOUT=578, WITHIN=579, 
		WORK=580, WRITE=581, XDB=582, XML=583, XMLAGG=584, XMLATTRIBUTES=585, 
		XMLCAST=586, XMLCOLATTVAL=587, XMLELEMENT=588, XMLEXISTS=589, XMLFOREST=590, 
		XMLINDEX=591, XMLNAMESPACES=592, XMLPARSE=593, XMLPI=594, XMLQUERY=595, 
		XMLROOT=596, XMLSCHEMA=597, XMLSERIALIZE=598, XMLTABLE=599, XMLTYPE=600, 
		YEAR=601, YES=602, YMINTERVAL_UNCONSTRAINED=603, ZONE=604, PREDICTION=605, 
		PREDICTION_BOUNDS=606, PREDICTION_COST=607, PREDICTION_DETAILS=608, PREDICTION_PROBABILITY=609, 
		PREDICTION_SET=610, CUME_DIST=611, DENSE_RANK=612, LISTAGG=613, PERCENT_RANK=614, 
		PERCENTILE_CONT=615, PERCENTILE_DISC=616, RANK=617, AVG=618, CORR=619, 
		LAG=620, LEAD=621, MAX=622, MEDIAN=623, MIN=624, NTILE=625, RATIO_TO_REPORT=626, 
		ROW_NUMBER=627, SUM=628, VARIANCE=629, REGR_=630, STDDEV=631, VAR_=632, 
		COVAR_=633, NATIONAL_CHAR_STRING_LIT=634, BIT_STRING_LIT=635, HEX_STRING_LIT=636, 
		DOUBLE_PERIOD=637, PERIOD=638, UNSIGNED_INTEGER=639, APPROXIMATE_NUM_LIT=640, 
		CHAR_STRING=641, DELIMITED_ID=642, PERCENT=643, AMPERSAND=644, LEFT_PAREN=645, 
		RIGHT_PAREN=646, DOUBLE_ASTERISK=647, ASTERISK=648, PLUS_SIGN=649, MINUS_SIGN=650, 
		COMMA=651, SOLIDUS=652, AT_SIGN=653, ASSIGN_OP=654, BINDVAR=655, COLON=656, 
		SEMICOLON=657, LESS_THAN_OR_EQUALS_OP=658, LESS_THAN_OP=659, GREATER_THAN_OR_EQUALS_OP=660, 
		NOT_EQUAL_OP=661, CARRET_OPERATOR_PART=662, TILDE_OPERATOR_PART=663, EXCLAMATION_OPERATOR_PART=664, 
		GREATER_THAN_OP=665, CONCATENATION_OP=666, VERTICAL_BAR=667, EQUALS_OP=668, 
		LEFT_BRACKET=669, RIGHT_BRACKET=670, INTRODUCER=671, SPACES=672, SINGLE_LINE_COMMENT=673, 
		MULTI_LINE_COMMENT=674, PROMPT=675, REGULAR_ID=676, ZV=677;
	public static final int
		RULE_swallow_to_semi = 0, RULE_compilation_unit = 1, RULE_sql_script = 2, 
		RULE_sql_explain = 3, RULE_unit_statement = 4, RULE_unit_statement_body = 5, 
		RULE_create_role = 6, RULE_role_option = 7, RULE_refresh_materialized_view = 8, 
		RULE_create_materialized_view = 9, RULE_create_mv_refresh = 10, RULE_build_clause = 11, 
		RULE_alter_permission = 12, RULE_permission_options = 13, RULE_create_view = 14, 
		RULE_view_options = 15, RULE_view_alias_constraint = 16, RULE_create_index = 17, 
		RULE_cluster_index_clause = 18, RULE_cluster_name = 19, RULE_index_attributes = 20, 
		RULE_tablespace = 21, RULE_key_compression = 22, RULE_sort_or_nosort = 23, 
		RULE_visible_or_invisible = 24, RULE_parallel_clause = 25, RULE_table_index_clause = 26, 
		RULE_index_expr = 27, RULE_index_properties = 28, RULE_global_partitioned_index = 29, 
		RULE_index_partitioning_clause = 30, RULE_partition_name = 31, RULE_literal = 32, 
		RULE_string_function = 33, RULE_expressions = 34, RULE_individual_hash_partitions = 35, 
		RULE_partitioning_storage_clause = 36, RULE_table_compression = 37, RULE_lob_partitioning_storage = 38, 
		RULE_lob_item = 39, RULE_lob_segname = 40, RULE_varray_item = 41, RULE_hash_partitions_by_quantity = 42, 
		RULE_hash_partition_quantity = 43, RULE_local_partitioned_index = 44, 
		RULE_on_range_partitioned_table = 45, RULE_on_list_partitioned_table = 46, 
		RULE_on_hash_partitioned_table = 47, RULE_on_comp_partitioned_table = 48, 
		RULE_index_subpartition_clause = 49, RULE_subpartition_name = 50, RULE_domain_index_clause = 51, 
		RULE_indextype = 52, RULE_odci_parameters = 53, RULE_local_domain_index_clause = 54, 
		RULE_xmlindex_clause = 55, RULE_local_xmlindex_clause = 56, RULE_bitmap_join_index_clause = 57, 
		RULE_create_table = 58, RULE_relational_table = 59, RULE_relational_properties = 60, 
		RULE_column_definition = 61, RULE_inline_ref_constraint = 62, RULE_virtual_column_definition = 63, 
		RULE_out_of_line_constraint = 64, RULE_foreign_key_clause = 65, RULE_on_delete_clause = 66, 
		RULE_out_of_line_ref_constraint = 67, RULE_supplemental_logging_props = 68, 
		RULE_supplemental_log_grp_clause = 69, RULE_log_grp = 70, RULE_supplemental_id_key_clause = 71, 
		RULE_physical_properties = 72, RULE_deferred_segment_creation = 73, RULE_segment_attributes_clause = 74, 
		RULE_physical_attributes_clause = 75, RULE_storage_clause = 76, RULE_size_clause = 77, 
		RULE_logging_clause = 78, RULE_column_properties = 79, RULE_object_type_col_properties = 80, 
		RULE_substitutable_column_clause = 81, RULE_nested_table_col_properties = 82, 
		RULE_nested_item = 83, RULE_object_properties = 84, RULE_inline_constraint = 85, 
		RULE_references_clause = 86, RULE_paren_column_list = 87, RULE_column_list = 88, 
		RULE_check_constraint = 89, RULE_constraint_state = 90, RULE_using_index_clause = 91, 
		RULE_varray_col_properties = 92, RULE_varray_storage_clause = 93, RULE_lob_storage_parameters = 94, 
		RULE_lob_parameters = 95, RULE_lob_retention_clause = 96, RULE_lob_deduplicate_clause = 97, 
		RULE_lob_compression_clause = 98, RULE_encryption_spec = 99, RULE_lob_storage_clause = 100, 
		RULE_xmltype_column_properties = 101, RULE_xmltype_storage = 102, RULE_xmlschema_spec = 103, 
		RULE_allow_or_disallow = 104, RULE_table_partitioning_clauses = 105, RULE_range_partitions = 106, 
		RULE_range_values_clause = 107, RULE_table_partition_description = 108, 
		RULE_list_partitions = 109, RULE_list_values_clause = 110, RULE_hash_partitions = 111, 
		RULE_composite_range_partitions = 112, RULE_subpartition_by_range = 113, 
		RULE_subpartition_by_list = 114, RULE_subpartition_template = 115, RULE_range_subpartition_desc = 116, 
		RULE_list_subpartition_desc = 117, RULE_individual_hash_subparts = 118, 
		RULE_hash_subpartition_quantity = 119, RULE_subpartition_by_hash = 120, 
		RULE_range_partition_desc = 121, RULE_hash_subparts_by_quantity = 122, 
		RULE_composite_list_partitions = 123, RULE_list_partition_desc = 124, 
		RULE_composite_hash_partitions = 125, RULE_reference_partitioning = 126, 
		RULE_reference_partition_desc = 127, RULE_system_partitioning = 128, RULE_enable_disable_clause = 129, 
		RULE_exceptions_clause = 130, RULE_row_movement_clause = 131, RULE_flashback_archive_clause = 132, 
		RULE_object_table = 133, RULE_object_table_substitution = 134, RULE_oid_clause = 135, 
		RULE_oid_index_clause = 136, RULE_xmltype_table = 137, RULE_xmltype_virtual_columns = 138, 
		RULE_drop_table = 139, RULE_alter_table = 140, RULE_alter_table_properties = 141, 
		RULE_alter_table_properties_1 = 142, RULE_supplemental_table_logging = 143, 
		RULE_allocate_extent_clause = 144, RULE_deallocate_unused_clause = 145, 
		RULE_upgrade_table_clause = 146, RULE_records_per_block_clause = 147, 
		RULE_alter_iot_clauses = 148, RULE_index_org_table_clause = 149, RULE_mapping_table_clause = 150, 
		RULE_index_org_overflow_clause = 151, RULE_alter_overflow_clause = 152, 
		RULE_add_overflow_clause = 153, RULE_shrink_clause = 154, RULE_alter_mapping_table_clause = 155, 
		RULE_constraint_clauses = 156, RULE_old_constraint_name = 157, RULE_new_constraint_name = 158, 
		RULE_drop_constraint_clause = 159, RULE_drop_primary_key_or_unique_or_generic_clause = 160, 
		RULE_column_clauses = 161, RULE_add_modify_drop_column_clauses = 162, 
		RULE_add_column_clause = 163, RULE_modify_column_clauses = 164, RULE_alter_column_clause = 165, 
		RULE_modify_col_properties = 166, RULE_modify_col_substitutable = 167, 
		RULE_drop_column_clause = 168, RULE_rename_column_clause = 169, RULE_old_column_name = 170, 
		RULE_new_column_name = 171, RULE_modify_collection_retrieval = 172, RULE_collection_item = 173, 
		RULE_modify_lob_storage_clause = 174, RULE_modify_lob_parameters = 175, 
		RULE_drop_function = 176, RULE_alter_function = 177, RULE_create_function_body = 178, 
		RULE_parallel_enable_clause = 179, RULE_partition_by_clause = 180, RULE_result_cache_clause = 181, 
		RULE_relies_on_part = 182, RULE_streaming_clause = 183, RULE_drop_package = 184, 
		RULE_alter_package = 185, RULE_create_package = 186, RULE_package_body = 187, 
		RULE_package_spec = 188, RULE_package_obj_spec = 189, RULE_procedure_spec = 190, 
		RULE_function_spec = 191, RULE_package_obj_body = 192, RULE_drop_procedure = 193, 
		RULE_alter_procedure = 194, RULE_create_procedure_body = 195, RULE_drop_trigger = 196, 
		RULE_alter_trigger = 197, RULE_create_trigger = 198, RULE_trigger_follows_clause = 199, 
		RULE_trigger_when_clause = 200, RULE_simple_dml_trigger = 201, RULE_for_each_row = 202, 
		RULE_compound_dml_trigger = 203, RULE_non_dml_trigger = 204, RULE_trigger_body = 205, 
		RULE_routine_clause = 206, RULE_compound_trigger_block = 207, RULE_timing_point_section = 208, 
		RULE_non_dml_event = 209, RULE_dml_event_clause = 210, RULE_dml_event_element = 211, 
		RULE_dml_event_nested_clause = 212, RULE_referencing_clause = 213, RULE_referencing_element = 214, 
		RULE_drop_type = 215, RULE_alter_type = 216, RULE_compile_type_clause = 217, 
		RULE_replace_type_clause = 218, RULE_alter_method_spec = 219, RULE_alter_method_element = 220, 
		RULE_alter_attribute_definition = 221, RULE_attribute_definition = 222, 
		RULE_alter_collection_clauses = 223, RULE_dependent_handling_clause = 224, 
		RULE_dependent_exceptions_part = 225, RULE_create_type = 226, RULE_type_definition = 227, 
		RULE_object_type_def = 228, RULE_object_as_part = 229, RULE_object_under_part = 230, 
		RULE_nested_table_type_def = 231, RULE_sqlj_object_type = 232, RULE_type_body = 233, 
		RULE_type_body_elements = 234, RULE_map_order_func_declaration = 235, 
		RULE_subprog_decl_in_type = 236, RULE_proc_decl_in_type = 237, RULE_func_decl_in_type = 238, 
		RULE_constructor_declaration = 239, RULE_modifier_clause = 240, RULE_object_member_spec = 241, 
		RULE_sqlj_object_type_attr = 242, RULE_element_spec = 243, RULE_element_spec_options = 244, 
		RULE_subprogram_spec = 245, RULE_type_procedure_spec = 246, RULE_type_function_spec = 247, 
		RULE_constructor_spec = 248, RULE_map_order_function_spec = 249, RULE_pragma_clause = 250, 
		RULE_pragma_elements = 251, RULE_type_elements_parameter = 252, RULE_drop_sequence = 253, 
		RULE_alter_sequence = 254, RULE_create_sequence = 255, RULE_sequence_spec = 256, 
		RULE_sequence_start_clause = 257, RULE_invoker_rights_clause = 258, RULE_compiler_parameters_clause = 259, 
		RULE_call_spec = 260, RULE_java_spec = 261, RULE_c_spec = 262, RULE_c_agent_in_clause = 263, 
		RULE_c_parameters_clause = 264, RULE_parameter = 265, RULE_default_value_part = 266, 
		RULE_declare_spec = 267, RULE_variable_declaration = 268, RULE_subtype_declaration = 269, 
		RULE_cursor_declaration = 270, RULE_parameter_spec = 271, RULE_exception_declaration = 272, 
		RULE_pragma_declaration = 273, RULE_record_declaration = 274, RULE_record_type_dec = 275, 
		RULE_field_spec = 276, RULE_record_var_dec = 277, RULE_table_declaration = 278, 
		RULE_table_type_dec = 279, RULE_table_indexed_by_part = 280, RULE_varray_type_def = 281, 
		RULE_table_var_dec = 282, RULE_seq_of_statements = 283, RULE_label_declaration = 284, 
		RULE_statement = 285, RULE_assignment_statement = 286, RULE_continue_statement = 287, 
		RULE_exit_statement = 288, RULE_goto_statement = 289, RULE_if_statement = 290, 
		RULE_elsif_part = 291, RULE_else_part = 292, RULE_loop_statement = 293, 
		RULE_cursor_loop_param = 294, RULE_forall_statement = 295, RULE_bounds_clause = 296, 
		RULE_between_bound = 297, RULE_lower_bound = 298, RULE_upper_bound = 299, 
		RULE_null_statement = 300, RULE_raise_statement = 301, RULE_return_statement = 302, 
		RULE_function_call = 303, RULE_body = 304, RULE_exception_handler = 305, 
		RULE_trigger_block = 306, RULE_block = 307, RULE_sql_statement = 308, 
		RULE_execute_immediate = 309, RULE_dynamic_returning_clause = 310, RULE_data_manipulation_language_statements = 311, 
		RULE_cursor_manipulation_statements = 312, RULE_close_statement = 313, 
		RULE_open_statement = 314, RULE_fetch_statement = 315, RULE_open_for_statement = 316, 
		RULE_transaction_control_statements = 317, RULE_set_transaction_command = 318, 
		RULE_set_constraint_command = 319, RULE_commit_statement = 320, RULE_write_clause = 321, 
		RULE_rollback_statement = 322, RULE_savepoint_statement = 323, RULE_explain_statement = 324, 
		RULE_select_statement = 325, RULE_subquery_factoring_clause = 326, RULE_factoring_element = 327, 
		RULE_search_clause = 328, RULE_cycle_clause = 329, RULE_subquery = 330, 
		RULE_subquery_operation_part = 331, RULE_query_block = 332, RULE_selected_element = 333, 
		RULE_from_clause = 334, RULE_table_ref_pivot = 335, RULE_table_ref = 336, 
		RULE_table_ref_aux = 337, RULE_join_clause = 338, RULE_join_on_part = 339, 
		RULE_join_using_part = 340, RULE_join_type = 341, RULE_query_partition_clause = 342, 
		RULE_flashback_query_clause = 343, RULE_pivot_clause = 344, RULE_pivot_element = 345, 
		RULE_pivot_for_clause = 346, RULE_pivot_in_clause = 347, RULE_pivot_in_clause_element = 348, 
		RULE_pivot_in_clause_elements = 349, RULE_unpivot_clause = 350, RULE_unpivot_in_clause = 351, 
		RULE_unpivot_in_elements = 352, RULE_hierarchical_query_clause = 353, 
		RULE_start_part = 354, RULE_group_by_clause = 355, RULE_group_by_elements = 356, 
		RULE_rollup_cube_clause = 357, RULE_grouping_sets_clause = 358, RULE_grouping_sets_elements = 359, 
		RULE_having_clause = 360, RULE_model_clause = 361, RULE_cell_reference_options = 362, 
		RULE_return_rows_clause = 363, RULE_reference_model = 364, RULE_main_model = 365, 
		RULE_model_column_clauses = 366, RULE_model_column_partition_part = 367, 
		RULE_model_column_list = 368, RULE_model_column = 369, RULE_model_rules_clause = 370, 
		RULE_model_rules_part = 371, RULE_model_rules_element = 372, RULE_cell_assignment = 373, 
		RULE_model_iterate_clause = 374, RULE_until_part = 375, RULE_order_by_clause = 376, 
		RULE_order_by_elements = 377, RULE_for_update_clause = 378, RULE_for_update_of_part = 379, 
		RULE_for_update_options = 380, RULE_limit_clause = 381, RULE_update_statement = 382, 
		RULE_update_set_clause = 383, RULE_column_based_update_set_clause = 384, 
		RULE_delete_statement = 385, RULE_insert_statement = 386, RULE_single_table_insert = 387, 
		RULE_multi_table_insert = 388, RULE_multi_table_element = 389, RULE_conditional_insert_clause = 390, 
		RULE_conditional_insert_when_part = 391, RULE_conditional_insert_else_part = 392, 
		RULE_insert_into_clause = 393, RULE_values_clause = 394, RULE_merge_statement = 395, 
		RULE_merge_update_clause = 396, RULE_merge_element = 397, RULE_merge_update_delete_part = 398, 
		RULE_merge_insert_clause = 399, RULE_selected_tableview = 400, RULE_lock_table_statement = 401, 
		RULE_wait_nowait_part = 402, RULE_lock_table_element = 403, RULE_lock_mode = 404, 
		RULE_general_table_ref = 405, RULE_static_returning_clause = 406, RULE_error_logging_clause = 407, 
		RULE_error_logging_into_part = 408, RULE_error_logging_reject_part = 409, 
		RULE_dml_table_expression_clause = 410, RULE_table_collection_expression = 411, 
		RULE_subquery_restriction_clause = 412, RULE_sample_clause = 413, RULE_seed_part = 414, 
		RULE_cursor_expression = 415, RULE_expression_list = 416, RULE_condition = 417, 
		RULE_expression = 418, RULE_is_part = 419, RULE_cursor_part = 420, RULE_multiset_type = 421, 
		RULE_relational_operator = 422, RULE_like_type = 423, RULE_like_escape_part = 424, 
		RULE_between_elements = 425, RULE_concatenation = 426, RULE_binary_expression = 427, 
		RULE_interval_expression = 428, RULE_model_expression = 429, RULE_model_expression_element = 430, 
		RULE_single_column_for_loop = 431, RULE_for_like_part = 432, RULE_for_increment_decrement_type = 433, 
		RULE_multi_column_for_loop = 434, RULE_unary_expression = 435, RULE_case_statement = 436, 
		RULE_simple_case_statement = 437, RULE_simple_case_when_part = 438, RULE_searched_case_statement = 439, 
		RULE_searched_case_when_part = 440, RULE_case_else_part = 441, RULE_atom = 442, 
		RULE_expression_or_vector = 443, RULE_vector_expr = 444, RULE_quantified_expression = 445, 
		RULE_standard_function = 446, RULE_aggregate_windowed_function = 447, 
		RULE_over_clause_keyword = 448, RULE_within_or_over_clause_keyword = 449, 
		RULE_standard_prediction_function_keyword = 450, RULE_over_clause = 451, 
		RULE_windowing_clause = 452, RULE_windowing_type = 453, RULE_windowing_elements = 454, 
		RULE_using_clause = 455, RULE_using_element = 456, RULE_collect_order_by_part = 457, 
		RULE_within_or_over_part = 458, RULE_cost_matrix_clause = 459, RULE_xml_passing_clause = 460, 
		RULE_xml_attributes_clause = 461, RULE_xml_namespaces_clause = 462, RULE_xml_table_column = 463, 
		RULE_xml_general_default_part = 464, RULE_xml_multiuse_expression_element = 465, 
		RULE_xmlroot_param_version_part = 466, RULE_xmlroot_param_standalone_part = 467, 
		RULE_xmlserialize_param_enconding_part = 468, RULE_xmlserialize_param_version_part = 469, 
		RULE_xmlserialize_param_ident_part = 470, RULE_sql_plus_command = 471, 
		RULE_whenever_command = 472, RULE_set_command = 473, RULE_exit_command = 474, 
		RULE_prompt_command = 475, RULE_show_errors_command = 476, RULE_partition_extension_clause = 477, 
		RULE_column_alias = 478, RULE_table_alias = 479, RULE_alias_quoted_string = 480, 
		RULE_where_clause = 481, RULE_current_of_clause = 482, RULE_into_clause = 483, 
		RULE_xml_column_name = 484, RULE_cost_class_name = 485, RULE_attribute_name = 486, 
		RULE_savepoint_name = 487, RULE_rollback_segment_name = 488, RULE_table_var_name = 489, 
		RULE_schema_name = 490, RULE_routine_name = 491, RULE_package_name = 492, 
		RULE_implementation_type_name = 493, RULE_parameter_name = 494, RULE_reference_model_name = 495, 
		RULE_main_model_name = 496, RULE_aggregate_function_name = 497, RULE_query_name = 498, 
		RULE_constraint_name = 499, RULE_label_name = 500, RULE_type_name = 501, 
		RULE_sequence_name = 502, RULE_exception_name = 503, RULE_function_name = 504, 
		RULE_procedure_name = 505, RULE_trigger_name = 506, RULE_variable_name = 507, 
		RULE_index_name = 508, RULE_cursor_name = 509, RULE_record_name = 510, 
		RULE_collection_name = 511, RULE_link_name = 512, RULE_column_name = 513, 
		RULE_role_name = 514, RULE_tableview_name = 515, RULE_dot_id = 516, RULE_star = 517, 
		RULE_keep_clause = 518, RULE_function_argument = 519, RULE_function_argument_analytic = 520, 
		RULE_function_argument_modeling = 521, RULE_respect_or_ignore_nulls = 522, 
		RULE_argument = 523, RULE_type_spec = 524, RULE_datatype = 525, RULE_precision_part = 526, 
		RULE_native_datatype_element = 527, RULE_bind_variable = 528, RULE_general_element = 529, 
		RULE_table_element = 530, RULE_constant = 531, RULE_numeric = 532, RULE_numeric_negative = 533, 
		RULE_quoted_string = 534, RULE_r_id = 535, RULE_id_expression = 536, RULE_not_equal_op = 537, 
		RULE_greater_than_or_equals_op = 538, RULE_less_than_or_equals_op = 539, 
		RULE_concatenation_op = 540, RULE_outer_join_sign = 541, RULE_regular_id = 542;
	private static String[] makeRuleNames() {
		return new String[] {
			"swallow_to_semi", "compilation_unit", "sql_script", "sql_explain", "unit_statement", 
			"unit_statement_body", "create_role", "role_option", "refresh_materialized_view", 
			"create_materialized_view", "create_mv_refresh", "build_clause", "alter_permission", 
			"permission_options", "create_view", "view_options", "view_alias_constraint", 
			"create_index", "cluster_index_clause", "cluster_name", "index_attributes", 
			"tablespace", "key_compression", "sort_or_nosort", "visible_or_invisible", 
			"parallel_clause", "table_index_clause", "index_expr", "index_properties", 
			"global_partitioned_index", "index_partitioning_clause", "partition_name", 
			"literal", "string_function", "expressions", "individual_hash_partitions", 
			"partitioning_storage_clause", "table_compression", "lob_partitioning_storage", 
			"lob_item", "lob_segname", "varray_item", "hash_partitions_by_quantity", 
			"hash_partition_quantity", "local_partitioned_index", "on_range_partitioned_table", 
			"on_list_partitioned_table", "on_hash_partitioned_table", "on_comp_partitioned_table", 
			"index_subpartition_clause", "subpartition_name", "domain_index_clause", 
			"indextype", "odci_parameters", "local_domain_index_clause", "xmlindex_clause", 
			"local_xmlindex_clause", "bitmap_join_index_clause", "create_table", 
			"relational_table", "relational_properties", "column_definition", "inline_ref_constraint", 
			"virtual_column_definition", "out_of_line_constraint", "foreign_key_clause", 
			"on_delete_clause", "out_of_line_ref_constraint", "supplemental_logging_props", 
			"supplemental_log_grp_clause", "log_grp", "supplemental_id_key_clause", 
			"physical_properties", "deferred_segment_creation", "segment_attributes_clause", 
			"physical_attributes_clause", "storage_clause", "size_clause", "logging_clause", 
			"column_properties", "object_type_col_properties", "substitutable_column_clause", 
			"nested_table_col_properties", "nested_item", "object_properties", "inline_constraint", 
			"references_clause", "paren_column_list", "column_list", "check_constraint", 
			"constraint_state", "using_index_clause", "varray_col_properties", "varray_storage_clause", 
			"lob_storage_parameters", "lob_parameters", "lob_retention_clause", "lob_deduplicate_clause", 
			"lob_compression_clause", "encryption_spec", "lob_storage_clause", "xmltype_column_properties", 
			"xmltype_storage", "xmlschema_spec", "allow_or_disallow", "table_partitioning_clauses", 
			"range_partitions", "range_values_clause", "table_partition_description", 
			"list_partitions", "list_values_clause", "hash_partitions", "composite_range_partitions", 
			"subpartition_by_range", "subpartition_by_list", "subpartition_template", 
			"range_subpartition_desc", "list_subpartition_desc", "individual_hash_subparts", 
			"hash_subpartition_quantity", "subpartition_by_hash", "range_partition_desc", 
			"hash_subparts_by_quantity", "composite_list_partitions", "list_partition_desc", 
			"composite_hash_partitions", "reference_partitioning", "reference_partition_desc", 
			"system_partitioning", "enable_disable_clause", "exceptions_clause", 
			"row_movement_clause", "flashback_archive_clause", "object_table", "object_table_substitution", 
			"oid_clause", "oid_index_clause", "xmltype_table", "xmltype_virtual_columns", 
			"drop_table", "alter_table", "alter_table_properties", "alter_table_properties_1", 
			"supplemental_table_logging", "allocate_extent_clause", "deallocate_unused_clause", 
			"upgrade_table_clause", "records_per_block_clause", "alter_iot_clauses", 
			"index_org_table_clause", "mapping_table_clause", "index_org_overflow_clause", 
			"alter_overflow_clause", "add_overflow_clause", "shrink_clause", "alter_mapping_table_clause", 
			"constraint_clauses", "old_constraint_name", "new_constraint_name", "drop_constraint_clause", 
			"drop_primary_key_or_unique_or_generic_clause", "column_clauses", "add_modify_drop_column_clauses", 
			"add_column_clause", "modify_column_clauses", "alter_column_clause", 
			"modify_col_properties", "modify_col_substitutable", "drop_column_clause", 
			"rename_column_clause", "old_column_name", "new_column_name", "modify_collection_retrieval", 
			"collection_item", "modify_lob_storage_clause", "modify_lob_parameters", 
			"drop_function", "alter_function", "create_function_body", "parallel_enable_clause", 
			"partition_by_clause", "result_cache_clause", "relies_on_part", "streaming_clause", 
			"drop_package", "alter_package", "create_package", "package_body", "package_spec", 
			"package_obj_spec", "procedure_spec", "function_spec", "package_obj_body", 
			"drop_procedure", "alter_procedure", "create_procedure_body", "drop_trigger", 
			"alter_trigger", "create_trigger", "trigger_follows_clause", "trigger_when_clause", 
			"simple_dml_trigger", "for_each_row", "compound_dml_trigger", "non_dml_trigger", 
			"trigger_body", "routine_clause", "compound_trigger_block", "timing_point_section", 
			"non_dml_event", "dml_event_clause", "dml_event_element", "dml_event_nested_clause", 
			"referencing_clause", "referencing_element", "drop_type", "alter_type", 
			"compile_type_clause", "replace_type_clause", "alter_method_spec", "alter_method_element", 
			"alter_attribute_definition", "attribute_definition", "alter_collection_clauses", 
			"dependent_handling_clause", "dependent_exceptions_part", "create_type", 
			"type_definition", "object_type_def", "object_as_part", "object_under_part", 
			"nested_table_type_def", "sqlj_object_type", "type_body", "type_body_elements", 
			"map_order_func_declaration", "subprog_decl_in_type", "proc_decl_in_type", 
			"func_decl_in_type", "constructor_declaration", "modifier_clause", "object_member_spec", 
			"sqlj_object_type_attr", "element_spec", "element_spec_options", "subprogram_spec", 
			"type_procedure_spec", "type_function_spec", "constructor_spec", "map_order_function_spec", 
			"pragma_clause", "pragma_elements", "type_elements_parameter", "drop_sequence", 
			"alter_sequence", "create_sequence", "sequence_spec", "sequence_start_clause", 
			"invoker_rights_clause", "compiler_parameters_clause", "call_spec", "java_spec", 
			"c_spec", "c_agent_in_clause", "c_parameters_clause", "parameter", "default_value_part", 
			"declare_spec", "variable_declaration", "subtype_declaration", "cursor_declaration", 
			"parameter_spec", "exception_declaration", "pragma_declaration", "record_declaration", 
			"record_type_dec", "field_spec", "record_var_dec", "table_declaration", 
			"table_type_dec", "table_indexed_by_part", "varray_type_def", "table_var_dec", 
			"seq_of_statements", "label_declaration", "statement", "assignment_statement", 
			"continue_statement", "exit_statement", "goto_statement", "if_statement", 
			"elsif_part", "else_part", "loop_statement", "cursor_loop_param", "forall_statement", 
			"bounds_clause", "between_bound", "lower_bound", "upper_bound", "null_statement", 
			"raise_statement", "return_statement", "function_call", "body", "exception_handler", 
			"trigger_block", "block", "sql_statement", "execute_immediate", "dynamic_returning_clause", 
			"data_manipulation_language_statements", "cursor_manipulation_statements", 
			"close_statement", "open_statement", "fetch_statement", "open_for_statement", 
			"transaction_control_statements", "set_transaction_command", "set_constraint_command", 
			"commit_statement", "write_clause", "rollback_statement", "savepoint_statement", 
			"explain_statement", "select_statement", "subquery_factoring_clause", 
			"factoring_element", "search_clause", "cycle_clause", "subquery", "subquery_operation_part", 
			"query_block", "selected_element", "from_clause", "table_ref_pivot", 
			"table_ref", "table_ref_aux", "join_clause", "join_on_part", "join_using_part", 
			"join_type", "query_partition_clause", "flashback_query_clause", "pivot_clause", 
			"pivot_element", "pivot_for_clause", "pivot_in_clause", "pivot_in_clause_element", 
			"pivot_in_clause_elements", "unpivot_clause", "unpivot_in_clause", "unpivot_in_elements", 
			"hierarchical_query_clause", "start_part", "group_by_clause", "group_by_elements", 
			"rollup_cube_clause", "grouping_sets_clause", "grouping_sets_elements", 
			"having_clause", "model_clause", "cell_reference_options", "return_rows_clause", 
			"reference_model", "main_model", "model_column_clauses", "model_column_partition_part", 
			"model_column_list", "model_column", "model_rules_clause", "model_rules_part", 
			"model_rules_element", "cell_assignment", "model_iterate_clause", "until_part", 
			"order_by_clause", "order_by_elements", "for_update_clause", "for_update_of_part", 
			"for_update_options", "limit_clause", "update_statement", "update_set_clause", 
			"column_based_update_set_clause", "delete_statement", "insert_statement", 
			"single_table_insert", "multi_table_insert", "multi_table_element", "conditional_insert_clause", 
			"conditional_insert_when_part", "conditional_insert_else_part", "insert_into_clause", 
			"values_clause", "merge_statement", "merge_update_clause", "merge_element", 
			"merge_update_delete_part", "merge_insert_clause", "selected_tableview", 
			"lock_table_statement", "wait_nowait_part", "lock_table_element", "lock_mode", 
			"general_table_ref", "static_returning_clause", "error_logging_clause", 
			"error_logging_into_part", "error_logging_reject_part", "dml_table_expression_clause", 
			"table_collection_expression", "subquery_restriction_clause", "sample_clause", 
			"seed_part", "cursor_expression", "expression_list", "condition", "expression", 
			"is_part", "cursor_part", "multiset_type", "relational_operator", "like_type", 
			"like_escape_part", "between_elements", "concatenation", "binary_expression", 
			"interval_expression", "model_expression", "model_expression_element", 
			"single_column_for_loop", "for_like_part", "for_increment_decrement_type", 
			"multi_column_for_loop", "unary_expression", "case_statement", "simple_case_statement", 
			"simple_case_when_part", "searched_case_statement", "searched_case_when_part", 
			"case_else_part", "atom", "expression_or_vector", "vector_expr", "quantified_expression", 
			"standard_function", "aggregate_windowed_function", "over_clause_keyword", 
			"within_or_over_clause_keyword", "standard_prediction_function_keyword", 
			"over_clause", "windowing_clause", "windowing_type", "windowing_elements", 
			"using_clause", "using_element", "collect_order_by_part", "within_or_over_part", 
			"cost_matrix_clause", "xml_passing_clause", "xml_attributes_clause", 
			"xml_namespaces_clause", "xml_table_column", "xml_general_default_part", 
			"xml_multiuse_expression_element", "xmlroot_param_version_part", "xmlroot_param_standalone_part", 
			"xmlserialize_param_enconding_part", "xmlserialize_param_version_part", 
			"xmlserialize_param_ident_part", "sql_plus_command", "whenever_command", 
			"set_command", "exit_command", "prompt_command", "show_errors_command", 
			"partition_extension_clause", "column_alias", "table_alias", "alias_quoted_string", 
			"where_clause", "current_of_clause", "into_clause", "xml_column_name", 
			"cost_class_name", "attribute_name", "savepoint_name", "rollback_segment_name", 
			"table_var_name", "schema_name", "routine_name", "package_name", "implementation_type_name", 
			"parameter_name", "reference_model_name", "main_model_name", "aggregate_function_name", 
			"query_name", "constraint_name", "label_name", "type_name", "sequence_name", 
			"exception_name", "function_name", "procedure_name", "trigger_name", 
			"variable_name", "index_name", "cursor_name", "record_name", "collection_name", 
			"link_name", "column_name", "role_name", "tableview_name", "dot_id", 
			"star", "keep_clause", "function_argument", "function_argument_analytic", 
			"function_argument_modeling", "respect_or_ignore_nulls", "argument", 
			"type_spec", "datatype", "precision_part", "native_datatype_element", 
			"bind_variable", "general_element", "table_element", "constant", "numeric", 
			"numeric_negative", "quoted_string", "r_id", "id_expression", "not_equal_op", 
			"greater_than_or_equals_op", "less_than_or_equals_op", "concatenation_op", 
			"outer_join_sign", "regular_id"
		};
	}
	public static final String[] ruleNames = makeRuleNames();

	private static String[] makeLiteralNames() {
		return new String[] {
			null, "'..'", "'@@'", "'::'", null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, "'.'", null, null, null, null, "'%'", "'&'", "'('", 
			"')'", "'**'", "'*'", "'+'", "'-'", "','", "'/'", "'@'", "':='", null, 
			"':'", "';'", "'<='", "'<'", "'>='", null, "'^'", "'~'", "'!'", "'>'", 
			"'||'", "'|'", "'='", "'['", "']'", "'_'", null, null, null, null, null, 
			"'@!'"
		};
	}
	private static final String[] _LITERAL_NAMES = makeLiteralNames();
	private static String[] makeSymbolicNames() {
		return new String[] {
			null, null, null, null, "A_LETTER", "ADD", "AFTER", "AGENT", "AGGREGATE", 
			"ALL", "ALLOCATE", "ALLOW", "ALTER", "ALWAYS", "ANALYZE", "AND", "ANY", 
			"ANYSCHEMA", "ARCHIVE", "ARRAY", "AS", "ASC", "ASSOCIATE", "AT", "ATTRIBUTE", 
			"AUDIT", "AUTHID", "AUTO", "AUTOMATIC", "AUTONOMOUS_TRANSACTION", "BASIC", 
			"BASICFILE", "BATCH", "BEFORE", "BEGIN", "BETWEEN", "BFILE", "BINARY", 
			"BINARY_DOUBLE", "BINARY_FLOAT", "BINARY_INTEGER", "BITMAP", "BUFFER_POOL", 
			"BUILD", "BLOB", "BLOCK", "BODY", "BOOLEAN", "BOTH", "BREADTH", "BULK", 
			"BY", "BYTE", "C_LETTER", "CACHE", "CALL", "CANONICAL", "CASCADE", "CASE", 
			"CAST", "CHAR", "CHAR_CS", "CHARACTER", "CHECK", "CHECKPOINT", "CHR", 
			"CHUNK", "CLOB", "CLOSE", "CLUSTER", "COALESCE", "COLLECT", "COLUMN", 
			"COLUMNS", "COLUMN_VALUE", "COMMENT", "COMMIT", "COMMITTED", "COMPACT", 
			"COMPATIBILITY", "COMPILE", "COMPLETE", "COMPOUND", "COMPRESS", "CONCAT", 
			"CONNECT", "CONNECT_BY_ROOT", "CONSTANT", "CONSTRAINT", "CONSTRAINTS", 
			"CONSTRUCTOR", "CONTENT", "CONTEXT", "CONTINUE", "CONVERT", "CORRUPT_XID", 
			"CORRUPT_XID_ALL", "COST", "COUNT", "CREATE", "CREATEDB", "CREATEROLE", 
			"CREATION", "CROSS", "CUBE", "CURRENT", "CURRENT_USER", "CURSOR", "CUSTOMDATUM", 
			"CYCLE", "DATA", "DATABASE", "DATAFILE", "DATE", "DAY", "DB_ROLE_CHANGE", 
			"DBTIMEZONE", "DDL", "DEBUG", "DEALLOCATE", "DEC", "DECIMAL", "DECLARE", 
			"DECODE", "DECOMPOSE", "DECREMENT", "DECRYPT", "DEDUPLICATE", "DEFAULT", 
			"DEFAULTS", "DEFERRABLE", "DEFERRED", "DEFINER", "DELETE", "DEMAND", 
			"DEPTH", "DESC", "DETERMINISTIC", "DIMENSION", "DISABLE", "DISALLOW", 
			"DISASSOCIATE", "DISTINCT", "DOCUMENT", "DOUBLE", "DROP", "DSINTERVAL_UNCONSTRAINED", 
			"EACH", "EDITIONING", "ELEMENT", "ELSE", "ELSIF", "EMPTY", "ENABLE", 
			"ENCODING", "ENCRYPT", "END", "ENFORCED", "ENTITYESCAPING", "ERR", "ERRORS", 
			"ESCAPE", "EVALNAME", "EXCEPT", "EXCEPTION", "EXCEPTION_INIT", "EXCEPTIONS", 
			"EXCLUDE", "EXCLUSIVE", "EXECUTE", "EXISTS", "EXIT", "EXPLAIN", "EXTENT", 
			"EXTERNAL", "EXTRACT", "FAILURE", "FALSE", "FAST", "FETCH", "FILESYSTEM_LIKE_LOGGING", 
			"FINAL", "FIRST", "FIRST_VALUE", "FLASHBACK", "FLASH_CACHE", "FLOAT", 
			"FOLLOWING", "FOLLOWS", "FOR", "FORALL", "FORCE", "FOREIGN", "FREELIST", 
			"FREELISTS", "FREEPOOLS", "FROM", "FULL", "FUNCTION", "GENERATED", "GLOBAL", 
			"GOTO", "GRANT", "GROUP", "GROUPS", "GROUPING", "HASH", "HAVING", "HIDE", 
			"HIGH", "HOUR", "IDENTIFIED", "IDENTIFIER", "IF", "IGNORE", "ILIKE", 
			"IMMEDIATE", "IN", "INCLUDE", "INCLUDING", "INCREMENT", "INDENT", "INDEX", 
			"INDEXED", "INDEXTYPE", "INDICATOR", "INDICES", "INFINITE", "INITIAL", 
			"INITIALLY", "INITRANS", "INLINE", "INNER", "INOUT", "INSERT", "INSTANCE", 
			"INSTANTIABLE", "INSTEAD", "INT", "INTEGER", "INTERSECT", "INTERVAL", 
			"INTO", "INVALIDATE", "INVISIBLE", "IS", "ISOLATION", "ITERATE", "JAVA", 
			"JOIN", "KEEP", "KEEP_DUPLICATES", "KEY", "LANGUAGE", "LAST", "LAST_VALUE", 
			"LEADING", "LEFT", "LESS", "LEVEL", "LEVELS", "LIBRARY", "LIKE", "LIKE2", 
			"LIKE4", "LIKEC", "LIMIT", "LIST", "LOCAL", "LOB", "LOBS", "LOCATOR", 
			"LOCK", "LOCKED", "LOG", "LOGGING", "LOGOFF", "LOGIN", "LOGON", "LONG", 
			"LOOP", "LOW", "MAIN", "MAP", "MAPPING", "MASTER", "MATCHED", "MAXEXTENTS", 
			"MAXVALUE", "MEASURES", "MEDIUM", "MEMBER", "MERGE", "MINEXTENTS", "MINIMIZE", 
			"MINUS", "MINUTE", "MINVALUE", "MLSLABEL", "MODE", "MODEL", "MODIFY", 
			"MONTH", "MOVEMENT", "MULTISET", "NAME", "NAN", "NATURAL", "NATURALN", 
			"NAV", "NCHAR", "NCHAR_CS", "NCLOB", "NESTED", "NEVER", "NEW", "NEXT", 
			"NO", "NOAUDIT", "NOCACHE", "NOCOMPRESS", "NOCOPY", "NOCYCLE", "NOENTITYESCAPING", 
			"NOLOGGING", "NOMAPPING", "NOMAXVALUE", "NOMINIMIZE", "NOMINVALUE", "NONE", 
			"NONSCHEMA", "NOORDER", "NOPARALLEL", "NORELY", "NOROWDEPENDENCIES", 
			"NOSCHEMACHECK", "NOSORT", "NOT", "NOVALIDATE", "NOWAIT", "NVL", "NULL", 
			"NULLS", "NUMBER", "NUMERIC", "NVARCHAR2", "MATERIALIZED", "OBJECT", 
			"OF", "OFF", "OID", "OIDINDEX", "OLD", "OLTP", "ON", "ONLY", "OPEN", 
			"OPTIMAL", "OPTION", "OR", "ORADATA", "ORDER", "ORDINALITY", "OSERROR", 
			"OUT", "OUTER", "OVER", "OVERFLOW", "OVERRIDING", "PACKAGE", "PARALLEL", 
			"PARALLEL_ENABLE", "PARAMETERS", "PARENT", "PARTITION", "PASSING", "PATH", 
			"PCTFREE", "PCTINCREASE", "PCTTHRESHOLD", "PCTUSED", "PCTVERSION", "PERCENT_ROWTYPE", 
			"PERCENT_TYPE", "PIPELINED", "PIVOT", "PLAN", "PLS_INTEGER", "PARTITIONS", 
			"POSITION", "POSITIVE", "POSITIVEN", "PRAGMA", "PREBUILT", "PRECEDING", 
			"PRECISION", "PRESENT", "PRESERVE", "PRIMARY", "PRIOR", "PROCEDURE", 
			"PUBLIC", "PURGE", "QUERY", "RAISE", "RANGE", "RAW", "READ", "READS", 
			"REAL", "REBUILD", "RECORD", "RECORDS_PER_BLOCK", "RECYCLE", "REDUCED", 
			"REF", "REFERENCE", "REFERENCES", "REFERENCING", "REFRESH", "REJECT", 
			"REKEY", "RELATIONAL", "RELIES_ON", "RELY", "RENAME", "REPLACE", "RESPECT", 
			"RESTRICT_REFERENCES", "RESULT", "RESULT_CACHE", "RETENTION", "RETURN", 
			"RETURNING", "REUSE", "REVERSE", "REVOKE", "REWRITE", "RIGHT", "ROLE", 
			"ROLLBACK", "ROLLUP", "ROW", "ROWDEPENDENCIES", "ROWID", "ROWS", "RULES", 
			"SALT", "SAMPLE", "SAVE", "SAVEPOINT", "SCHEMA", "SCHEMACHECK", "SCN", 
			"SCOPE", "SEARCH", "SECOND", "SECUREFILE", "SEED", "SEGMENT", "SELECT", 
			"SELF", "SEQUENCE", "SEQUENTIAL", "SERIALIZABLE", "SERIALLY_REUSABLE", 
			"SERVERERROR", "SESSIONTIMEZONE", "SET", "SETS", "SETTINGS", "SHARE", 
			"SHOW", "SHRINK", "SHUTDOWN", "SIBLINGS", "SIGNTYPE", "SIMPLE_INTEGER", 
			"SINGLE", "SIZE", "SKIP_", "SMALLINT", "SNAPSHOT", "SOME", "SORT", "SPACE_KEYWORD", 
			"SPECIFICATION", "SQLDATA", "SQLERROR", "STANDALONE", "START", "STARTUP", 
			"STATEMENT", "STATEMENT_ID", "STATIC", "STATISTICS", "STORAGE", "STORE", 
			"STRING", "SUBMULTISET", "SUBPARTITION", "SUBPARTITIONS", "SUBSTITUTABLE", 
			"SUBSTRING", "SUBTYPE", "SUCCESS", "SUPPLEMENTAL", "SUSPEND", "SYSTEM", 
			"TABLE", "TABLES", "TABLESPACE", "TEMPLATE", "TEMPORARY", "THAN", "THE", 
			"THEN", "TIME", "TIMESTAMP", "TIMESTAMP_LTZ_UNCONSTRAINED", "TIMESTAMP_TZ_UNCONSTRAINED", 
			"TIMESTAMP_UNCONSTRAINED", "TIMEZONE_ABBR", "TIMEZONE_HOUR", "TIMEZONE_MINUTE", 
			"TIMEZONE_REGION", "TO", "TO_CHAR", "TO_DATE", "TRAILING", "TRANSACTION", 
			"TRANSLATE", "TREAT", "TRIGGER", "TRIM", "TRUE", "TRUNCATE", "TRUSTED", 
			"TYPE", "UNBOUNDED", "UNDER", "UNION", "UNIQUE", "UNLIMITED", "UNPIVOT", 
			"UNTIL", "UNUSABLE", "UNUSED", "UPDATE", "UPDATED", "UPGRADE", "UPSERT", 
			"UROWID", "USE", "USING", "VALIDATE", "VALUE", "VALUES", "VARCHAR", "VARCHAR2", 
			"VARIABLE", "VARRAY", "VARRAYS", "VARYING", "VERBOSE", "VERSION", "VERSIONS", 
			"VIEW", "VIRTUAL", "VISIBLE", "WAIT", "WARNING", "WELLFORMED", "WHEN", 
			"WHENEVER", "WHERE", "WHILE", "WITH", "WITHOUT", "WITHIN", "WORK", "WRITE", 
			"XDB", "XML", "XMLAGG", "XMLATTRIBUTES", "XMLCAST", "XMLCOLATTVAL", "XMLELEMENT", 
			"XMLEXISTS", "XMLFOREST", "XMLINDEX", "XMLNAMESPACES", "XMLPARSE", "XMLPI", 
			"XMLQUERY", "XMLROOT", "XMLSCHEMA", "XMLSERIALIZE", "XMLTABLE", "XMLTYPE", 
			"YEAR", "YES", "YMINTERVAL_UNCONSTRAINED", "ZONE", "PREDICTION", "PREDICTION_BOUNDS", 
			"PREDICTION_COST", "PREDICTION_DETAILS", "PREDICTION_PROBABILITY", "PREDICTION_SET", 
			"CUME_DIST", "DENSE_RANK", "LISTAGG", "PERCENT_RANK", "PERCENTILE_CONT", 
			"PERCENTILE_DISC", "RANK", "AVG", "CORR", "LAG", "LEAD", "MAX", "MEDIAN", 
			"MIN", "NTILE", "RATIO_TO_REPORT", "ROW_NUMBER", "SUM", "VARIANCE", "REGR_", 
			"STDDEV", "VAR_", "COVAR_", "NATIONAL_CHAR_STRING_LIT", "BIT_STRING_LIT", 
			"HEX_STRING_LIT", "DOUBLE_PERIOD", "PERIOD", "UNSIGNED_INTEGER", "APPROXIMATE_NUM_LIT", 
			"CHAR_STRING", "DELIMITED_ID", "PERCENT", "AMPERSAND", "LEFT_PAREN", 
			"RIGHT_PAREN", "DOUBLE_ASTERISK", "ASTERISK", "PLUS_SIGN", "MINUS_SIGN", 
			"COMMA", "SOLIDUS", "AT_SIGN", "ASSIGN_OP", "BINDVAR", "COLON", "SEMICOLON", 
			"LESS_THAN_OR_EQUALS_OP", "LESS_THAN_OP", "GREATER_THAN_OR_EQUALS_OP", 
			"NOT_EQUAL_OP", "CARRET_OPERATOR_PART", "TILDE_OPERATOR_PART", "EXCLAMATION_OPERATOR_PART", 
			"GREATER_THAN_OP", "CONCATENATION_OP", "VERTICAL_BAR", "EQUALS_OP", "LEFT_BRACKET", 
			"RIGHT_BRACKET", "INTRODUCER", "SPACES", "SINGLE_LINE_COMMENT", "MULTI_LINE_COMMENT", 
			"PROMPT", "REGULAR_ID", "ZV"
		};
	}
	private static final String[] _SYMBOLIC_NAMES = makeSymbolicNames();
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}

	@Override
	public String getGrammarFileName() { return "PLSQL.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public ATN getATN() { return _ATN; }

	public PLSQLParser(TokenStream input) {
		super(input);
		_interp = new ParserATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	public static class Swallow_to_semiContext extends ParserRuleContext {
		public List<TerminalNode> SEMICOLON() { return getTokens(PLSQLParser.SEMICOLON); }
		public TerminalNode SEMICOLON(int i) {
			return getToken(PLSQLParser.SEMICOLON, i);
		}
		public Swallow_to_semiContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_swallow_to_semi; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterSwallow_to_semi(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitSwallow_to_semi(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitSwallow_to_semi(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Swallow_to_semiContext swallow_to_semi() throws RecognitionException {
		Swallow_to_semiContext _localctx = new Swallow_to_semiContext(_ctx, getState());
		enterRule(_localctx, 0, RULE_swallow_to_semi);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1087); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1086);
				_la = _input.LA(1);
				if ( _la <= 0 || (_la==SEMICOLON) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				}
				setState(1089); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__2) | (1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ALL) | (1L << ALLOCATE) | (1L << ALLOW) | (1L << ALTER) | (1L << ALWAYS) | (1L << ANALYZE) | (1L << AND) | (1L << ANY) | (1L << ANYSCHEMA) | (1L << ARCHIVE) | (1L << ARRAY) | (1L << AS) | (1L << ASC) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BASIC) | (1L << BASICFILE) | (1L << BATCH) | (1L << BEFORE) | (1L << BEGIN) | (1L << BETWEEN) | (1L << BFILE) | (1L << BINARY) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BITMAP) | (1L << BUFFER_POOL) | (1L << BUILD) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BREADTH) | (1L << BULK) | (1L << BY) | (1L << BYTE) | (1L << C_LETTER) | (1L << CACHE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHECK))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CHECKPOINT - 64)) | (1L << (CHR - 64)) | (1L << (CHUNK - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COALESCE - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMN - 64)) | (1L << (COLUMNS - 64)) | (1L << (COLUMN_VALUE - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPACT - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPLETE - 64)) | (1L << (COMPOUND - 64)) | (1L << (COMPRESS - 64)) | (1L << (CONCAT - 64)) | (1L << (CONNECT - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CREATE - 64)) | (1L << (CREATEDB - 64)) | (1L << (CREATEROLE - 64)) | (1L << (CREATION - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DATAFILE - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEALLOCATE - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECLARE - 64)) | (1L << (DECODE - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DECRYPT - 64)) | (1L << (DEDUPLICATE - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (DEFAULT - 128)) | (1L << (DEFAULTS - 128)) | (1L << (DEFERRABLE - 128)) | (1L << (DEFERRED - 128)) | (1L << (DEFINER - 128)) | (1L << (DELETE - 128)) | (1L << (DEMAND - 128)) | (1L << (DEPTH - 128)) | (1L << (DESC - 128)) | (1L << (DETERMINISTIC - 128)) | (1L << (DIMENSION - 128)) | (1L << (DISABLE - 128)) | (1L << (DISALLOW - 128)) | (1L << (DISASSOCIATE - 128)) | (1L << (DISTINCT - 128)) | (1L << (DOCUMENT - 128)) | (1L << (DOUBLE - 128)) | (1L << (DROP - 128)) | (1L << (DSINTERVAL_UNCONSTRAINED - 128)) | (1L << (EACH - 128)) | (1L << (EDITIONING - 128)) | (1L << (ELEMENT - 128)) | (1L << (ELSE - 128)) | (1L << (ELSIF - 128)) | (1L << (EMPTY - 128)) | (1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENCRYPT - 128)) | (1L << (END - 128)) | (1L << (ENFORCED - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERR - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPT - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXCLUSIVE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXISTS - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTENT - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FALSE - 128)) | (1L << (FAST - 128)) | (1L << (FETCH - 128)) | (1L << (FILESYSTEM_LIKE_LOGGING - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLASHBACK - 128)) | (1L << (FLASH_CACHE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FOR - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (FOREIGN - 192)) | (1L << (FREELIST - 192)) | (1L << (FREELISTS - 192)) | (1L << (FREEPOOLS - 192)) | (1L << (FROM - 192)) | (1L << (FULL - 192)) | (1L << (FUNCTION - 192)) | (1L << (GENERATED - 192)) | (1L << (GLOBAL - 192)) | (1L << (GOTO - 192)) | (1L << (GRANT - 192)) | (1L << (GROUP - 192)) | (1L << (GROUPS - 192)) | (1L << (GROUPING - 192)) | (1L << (HASH - 192)) | (1L << (HAVING - 192)) | (1L << (HIDE - 192)) | (1L << (HIGH - 192)) | (1L << (HOUR - 192)) | (1L << (IDENTIFIED - 192)) | (1L << (IDENTIFIER - 192)) | (1L << (IF - 192)) | (1L << (IGNORE - 192)) | (1L << (ILIKE - 192)) | (1L << (IMMEDIATE - 192)) | (1L << (IN - 192)) | (1L << (INCLUDE - 192)) | (1L << (INCLUDING - 192)) | (1L << (INCREMENT - 192)) | (1L << (INDENT - 192)) | (1L << (INDEX - 192)) | (1L << (INDEXED - 192)) | (1L << (INDEXTYPE - 192)) | (1L << (INDICATOR - 192)) | (1L << (INDICES - 192)) | (1L << (INFINITE - 192)) | (1L << (INITIAL - 192)) | (1L << (INITIALLY - 192)) | (1L << (INITRANS - 192)) | (1L << (INLINE - 192)) | (1L << (INNER - 192)) | (1L << (INOUT - 192)) | (1L << (INSERT - 192)) | (1L << (INSTANCE - 192)) | (1L << (INSTANTIABLE - 192)) | (1L << (INSTEAD - 192)) | (1L << (INT - 192)) | (1L << (INTEGER - 192)) | (1L << (INTERSECT - 192)) | (1L << (INTERVAL - 192)) | (1L << (INTO - 192)) | (1L << (INVALIDATE - 192)) | (1L << (INVISIBLE - 192)) | (1L << (IS - 192)) | (1L << (ISOLATION - 192)) | (1L << (ITERATE - 192)) | (1L << (JAVA - 192)) | (1L << (JOIN - 192)) | (1L << (KEEP - 192)) | (1L << (KEEP_DUPLICATES - 192)) | (1L << (KEY - 192)) | (1L << (LANGUAGE - 192)) | (1L << (LAST - 192)) | (1L << (LAST_VALUE - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (LEADING - 256)) | (1L << (LEFT - 256)) | (1L << (LESS - 256)) | (1L << (LEVEL - 256)) | (1L << (LEVELS - 256)) | (1L << (LIBRARY - 256)) | (1L << (LIKE - 256)) | (1L << (LIKE2 - 256)) | (1L << (LIKE4 - 256)) | (1L << (LIKEC - 256)) | (1L << (LIMIT - 256)) | (1L << (LIST - 256)) | (1L << (LOCAL - 256)) | (1L << (LOB - 256)) | (1L << (LOBS - 256)) | (1L << (LOCATOR - 256)) | (1L << (LOCK - 256)) | (1L << (LOCKED - 256)) | (1L << (LOG - 256)) | (1L << (LOGGING - 256)) | (1L << (LOGOFF - 256)) | (1L << (LOGIN - 256)) | (1L << (LOGON - 256)) | (1L << (LONG - 256)) | (1L << (LOOP - 256)) | (1L << (LOW - 256)) | (1L << (MAIN - 256)) | (1L << (MAP - 256)) | (1L << (MAPPING - 256)) | (1L << (MASTER - 256)) | (1L << (MATCHED - 256)) | (1L << (MAXEXTENTS - 256)) | (1L << (MAXVALUE - 256)) | (1L << (MEASURES - 256)) | (1L << (MEDIUM - 256)) | (1L << (MEMBER - 256)) | (1L << (MERGE - 256)) | (1L << (MINEXTENTS - 256)) | (1L << (MINIMIZE - 256)) | (1L << (MINUS - 256)) | (1L << (MINUTE - 256)) | (1L << (MINVALUE - 256)) | (1L << (MLSLABEL - 256)) | (1L << (MODE - 256)) | (1L << (MODEL - 256)) | (1L << (MODIFY - 256)) | (1L << (MONTH - 256)) | (1L << (MOVEMENT - 256)) | (1L << (MULTISET - 256)) | (1L << (NAME - 256)) | (1L << (NAN - 256)) | (1L << (NATURAL - 256)) | (1L << (NATURALN - 256)) | (1L << (NAV - 256)) | (1L << (NCHAR - 256)) | (1L << (NCHAR_CS - 256)) | (1L << (NCLOB - 256)) | (1L << (NESTED - 256)) | (1L << (NEVER - 256)) | (1L << (NEW - 256)) | (1L << (NEXT - 256)) | (1L << (NO - 256)) | (1L << (NOAUDIT - 256)) | (1L << (NOCACHE - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (NOCOMPRESS - 320)) | (1L << (NOCOPY - 320)) | (1L << (NOCYCLE - 320)) | (1L << (NOENTITYESCAPING - 320)) | (1L << (NOLOGGING - 320)) | (1L << (NOMAPPING - 320)) | (1L << (NOMAXVALUE - 320)) | (1L << (NOMINIMIZE - 320)) | (1L << (NOMINVALUE - 320)) | (1L << (NONE - 320)) | (1L << (NONSCHEMA - 320)) | (1L << (NOORDER - 320)) | (1L << (NOPARALLEL - 320)) | (1L << (NORELY - 320)) | (1L << (NOROWDEPENDENCIES - 320)) | (1L << (NOSCHEMACHECK - 320)) | (1L << (NOSORT - 320)) | (1L << (NOT - 320)) | (1L << (NOVALIDATE - 320)) | (1L << (NOWAIT - 320)) | (1L << (NVL - 320)) | (1L << (NULL - 320)) | (1L << (NULLS - 320)) | (1L << (NUMBER - 320)) | (1L << (NUMERIC - 320)) | (1L << (NVARCHAR2 - 320)) | (1L << (MATERIALIZED - 320)) | (1L << (OBJECT - 320)) | (1L << (OF - 320)) | (1L << (OFF - 320)) | (1L << (OID - 320)) | (1L << (OIDINDEX - 320)) | (1L << (OLD - 320)) | (1L << (OLTP - 320)) | (1L << (ON - 320)) | (1L << (ONLY - 320)) | (1L << (OPEN - 320)) | (1L << (OPTIMAL - 320)) | (1L << (OPTION - 320)) | (1L << (OR - 320)) | (1L << (ORADATA - 320)) | (1L << (ORDER - 320)) | (1L << (ORDINALITY - 320)) | (1L << (OSERROR - 320)) | (1L << (OUT - 320)) | (1L << (OUTER - 320)) | (1L << (OVER - 320)) | (1L << (OVERFLOW - 320)) | (1L << (OVERRIDING - 320)) | (1L << (PACKAGE - 320)) | (1L << (PARALLEL - 320)) | (1L << (PARALLEL_ENABLE - 320)) | (1L << (PARAMETERS - 320)) | (1L << (PARENT - 320)) | (1L << (PARTITION - 320)) | (1L << (PASSING - 320)) | (1L << (PATH - 320)) | (1L << (PCTFREE - 320)) | (1L << (PCTINCREASE - 320)) | (1L << (PCTTHRESHOLD - 320)) | (1L << (PCTUSED - 320)) | (1L << (PCTVERSION - 320)) | (1L << (PERCENT_ROWTYPE - 320)) | (1L << (PERCENT_TYPE - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (PIPELINED - 384)) | (1L << (PIVOT - 384)) | (1L << (PLAN - 384)) | (1L << (PLS_INTEGER - 384)) | (1L << (PARTITIONS - 384)) | (1L << (POSITION - 384)) | (1L << (POSITIVE - 384)) | (1L << (POSITIVEN - 384)) | (1L << (PRAGMA - 384)) | (1L << (PREBUILT - 384)) | (1L << (PRECEDING - 384)) | (1L << (PRECISION - 384)) | (1L << (PRESENT - 384)) | (1L << (PRESERVE - 384)) | (1L << (PRIMARY - 384)) | (1L << (PRIOR - 384)) | (1L << (PROCEDURE - 384)) | (1L << (PUBLIC - 384)) | (1L << (PURGE - 384)) | (1L << (QUERY - 384)) | (1L << (RAISE - 384)) | (1L << (RANGE - 384)) | (1L << (RAW - 384)) | (1L << (READ - 384)) | (1L << (READS - 384)) | (1L << (REAL - 384)) | (1L << (REBUILD - 384)) | (1L << (RECORD - 384)) | (1L << (RECORDS_PER_BLOCK - 384)) | (1L << (RECYCLE - 384)) | (1L << (REDUCED - 384)) | (1L << (REF - 384)) | (1L << (REFERENCE - 384)) | (1L << (REFERENCES - 384)) | (1L << (REFERENCING - 384)) | (1L << (REFRESH - 384)) | (1L << (REJECT - 384)) | (1L << (REKEY - 384)) | (1L << (RELATIONAL - 384)) | (1L << (RELIES_ON - 384)) | (1L << (RELY - 384)) | (1L << (RENAME - 384)) | (1L << (REPLACE - 384)) | (1L << (RESPECT - 384)) | (1L << (RESTRICT_REFERENCES - 384)) | (1L << (RESULT - 384)) | (1L << (RESULT_CACHE - 384)) | (1L << (RETENTION - 384)) | (1L << (RETURN - 384)) | (1L << (RETURNING - 384)) | (1L << (REUSE - 384)) | (1L << (REVERSE - 384)) | (1L << (REVOKE - 384)) | (1L << (REWRITE - 384)) | (1L << (RIGHT - 384)) | (1L << (ROLE - 384)) | (1L << (ROLLBACK - 384)) | (1L << (ROLLUP - 384)) | (1L << (ROW - 384)) | (1L << (ROWDEPENDENCIES - 384)) | (1L << (ROWID - 384)) | (1L << (ROWS - 384)) | (1L << (RULES - 384)) | (1L << (SALT - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (SAMPLE - 448)) | (1L << (SAVE - 448)) | (1L << (SAVEPOINT - 448)) | (1L << (SCHEMA - 448)) | (1L << (SCHEMACHECK - 448)) | (1L << (SCN - 448)) | (1L << (SCOPE - 448)) | (1L << (SEARCH - 448)) | (1L << (SECOND - 448)) | (1L << (SECUREFILE - 448)) | (1L << (SEED - 448)) | (1L << (SEGMENT - 448)) | (1L << (SELECT - 448)) | (1L << (SELF - 448)) | (1L << (SEQUENCE - 448)) | (1L << (SEQUENTIAL - 448)) | (1L << (SERIALIZABLE - 448)) | (1L << (SERIALLY_REUSABLE - 448)) | (1L << (SERVERERROR - 448)) | (1L << (SESSIONTIMEZONE - 448)) | (1L << (SET - 448)) | (1L << (SETS - 448)) | (1L << (SETTINGS - 448)) | (1L << (SHARE - 448)) | (1L << (SHOW - 448)) | (1L << (SHRINK - 448)) | (1L << (SHUTDOWN - 448)) | (1L << (SIBLINGS - 448)) | (1L << (SIGNTYPE - 448)) | (1L << (SIMPLE_INTEGER - 448)) | (1L << (SINGLE - 448)) | (1L << (SIZE - 448)) | (1L << (SKIP_ - 448)) | (1L << (SMALLINT - 448)) | (1L << (SNAPSHOT - 448)) | (1L << (SOME - 448)) | (1L << (SORT - 448)) | (1L << (SPACE_KEYWORD - 448)) | (1L << (SPECIFICATION - 448)) | (1L << (SQLDATA - 448)) | (1L << (SQLERROR - 448)) | (1L << (STANDALONE - 448)) | (1L << (START - 448)) | (1L << (STARTUP - 448)) | (1L << (STATEMENT - 448)) | (1L << (STATEMENT_ID - 448)) | (1L << (STATIC - 448)) | (1L << (STATISTICS - 448)) | (1L << (STORAGE - 448)) | (1L << (STORE - 448)) | (1L << (STRING - 448)) | (1L << (SUBMULTISET - 448)) | (1L << (SUBPARTITION - 448)) | (1L << (SUBPARTITIONS - 448)) | (1L << (SUBSTITUTABLE - 448)) | (1L << (SUBSTRING - 448)) | (1L << (SUBTYPE - 448)) | (1L << (SUCCESS - 448)) | (1L << (SUPPLEMENTAL - 448)) | (1L << (SUSPEND - 448)) | (1L << (SYSTEM - 448)) | (1L << (TABLE - 448)) | (1L << (TABLES - 448)) | (1L << (TABLESPACE - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (TEMPLATE - 512)) | (1L << (TEMPORARY - 512)) | (1L << (THAN - 512)) | (1L << (THE - 512)) | (1L << (THEN - 512)) | (1L << (TIME - 512)) | (1L << (TIMESTAMP - 512)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 512)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 512)) | (1L << (TIMESTAMP_UNCONSTRAINED - 512)) | (1L << (TIMEZONE_ABBR - 512)) | (1L << (TIMEZONE_HOUR - 512)) | (1L << (TIMEZONE_MINUTE - 512)) | (1L << (TIMEZONE_REGION - 512)) | (1L << (TO - 512)) | (1L << (TO_CHAR - 512)) | (1L << (TO_DATE - 512)) | (1L << (TRAILING - 512)) | (1L << (TRANSACTION - 512)) | (1L << (TRANSLATE - 512)) | (1L << (TREAT - 512)) | (1L << (TRIGGER - 512)) | (1L << (TRIM - 512)) | (1L << (TRUE - 512)) | (1L << (TRUNCATE - 512)) | (1L << (TRUSTED - 512)) | (1L << (TYPE - 512)) | (1L << (UNBOUNDED - 512)) | (1L << (UNDER - 512)) | (1L << (UNION - 512)) | (1L << (UNIQUE - 512)) | (1L << (UNLIMITED - 512)) | (1L << (UNPIVOT - 512)) | (1L << (UNTIL - 512)) | (1L << (UNUSABLE - 512)) | (1L << (UNUSED - 512)) | (1L << (UPDATE - 512)) | (1L << (UPDATED - 512)) | (1L << (UPGRADE - 512)) | (1L << (UPSERT - 512)) | (1L << (UROWID - 512)) | (1L << (USE - 512)) | (1L << (USING - 512)) | (1L << (VALIDATE - 512)) | (1L << (VALUE - 512)) | (1L << (VALUES - 512)) | (1L << (VARCHAR - 512)) | (1L << (VARCHAR2 - 512)) | (1L << (VARIABLE - 512)) | (1L << (VARRAY - 512)) | (1L << (VARRAYS - 512)) | (1L << (VARYING - 512)) | (1L << (VERBOSE - 512)) | (1L << (VERSION - 512)) | (1L << (VERSIONS - 512)) | (1L << (VIEW - 512)) | (1L << (VIRTUAL - 512)) | (1L << (VISIBLE - 512)) | (1L << (WAIT - 512)) | (1L << (WARNING - 512)) | (1L << (WELLFORMED - 512)) | (1L << (WHEN - 512)) | (1L << (WHENEVER - 512)) | (1L << (WHERE - 512)))) != 0) || ((((_la - 576)) & ~0x3f) == 0 && ((1L << (_la - 576)) & ((1L << (WHILE - 576)) | (1L << (WITH - 576)) | (1L << (WITHOUT - 576)) | (1L << (WITHIN - 576)) | (1L << (WORK - 576)) | (1L << (WRITE - 576)) | (1L << (XDB - 576)) | (1L << (XML - 576)) | (1L << (XMLAGG - 576)) | (1L << (XMLATTRIBUTES - 576)) | (1L << (XMLCAST - 576)) | (1L << (XMLCOLATTVAL - 576)) | (1L << (XMLELEMENT - 576)) | (1L << (XMLEXISTS - 576)) | (1L << (XMLFOREST - 576)) | (1L << (XMLINDEX - 576)) | (1L << (XMLNAMESPACES - 576)) | (1L << (XMLPARSE - 576)) | (1L << (XMLPI - 576)) | (1L << (XMLQUERY - 576)) | (1L << (XMLROOT - 576)) | (1L << (XMLSCHEMA - 576)) | (1L << (XMLSERIALIZE - 576)) | (1L << (XMLTABLE - 576)) | (1L << (XMLTYPE - 576)) | (1L << (YEAR - 576)) | (1L << (YES - 576)) | (1L << (YMINTERVAL_UNCONSTRAINED - 576)) | (1L << (ZONE - 576)) | (1L << (PREDICTION - 576)) | (1L << (PREDICTION_BOUNDS - 576)) | (1L << (PREDICTION_COST - 576)) | (1L << (PREDICTION_DETAILS - 576)) | (1L << (PREDICTION_PROBABILITY - 576)) | (1L << (PREDICTION_SET - 576)) | (1L << (CUME_DIST - 576)) | (1L << (DENSE_RANK - 576)) | (1L << (LISTAGG - 576)) | (1L << (PERCENT_RANK - 576)) | (1L << (PERCENTILE_CONT - 576)) | (1L << (PERCENTILE_DISC - 576)) | (1L << (RANK - 576)) | (1L << (AVG - 576)) | (1L << (CORR - 576)) | (1L << (LAG - 576)) | (1L << (LEAD - 576)) | (1L << (MAX - 576)) | (1L << (MEDIAN - 576)) | (1L << (MIN - 576)) | (1L << (NTILE - 576)) | (1L << (RATIO_TO_REPORT - 576)) | (1L << (ROW_NUMBER - 576)) | (1L << (SUM - 576)) | (1L << (VARIANCE - 576)) | (1L << (REGR_ - 576)) | (1L << (STDDEV - 576)) | (1L << (VAR_ - 576)) | (1L << (COVAR_ - 576)) | (1L << (NATIONAL_CHAR_STRING_LIT - 576)) | (1L << (BIT_STRING_LIT - 576)) | (1L << (HEX_STRING_LIT - 576)) | (1L << (DOUBLE_PERIOD - 576)) | (1L << (PERIOD - 576)) | (1L << (UNSIGNED_INTEGER - 576)))) != 0) || ((((_la - 640)) & ~0x3f) == 0 && ((1L << (_la - 640)) & ((1L << (APPROXIMATE_NUM_LIT - 640)) | (1L << (CHAR_STRING - 640)) | (1L << (DELIMITED_ID - 640)) | (1L << (PERCENT - 640)) | (1L << (AMPERSAND - 640)) | (1L << (LEFT_PAREN - 640)) | (1L << (RIGHT_PAREN - 640)) | (1L << (DOUBLE_ASTERISK - 640)) | (1L << (ASTERISK - 640)) | (1L << (PLUS_SIGN - 640)) | (1L << (MINUS_SIGN - 640)) | (1L << (COMMA - 640)) | (1L << (SOLIDUS - 640)) | (1L << (AT_SIGN - 640)) | (1L << (ASSIGN_OP - 640)) | (1L << (BINDVAR - 640)) | (1L << (COLON - 640)) | (1L << (LESS_THAN_OR_EQUALS_OP - 640)) | (1L << (LESS_THAN_OP - 640)) | (1L << (GREATER_THAN_OR_EQUALS_OP - 640)) | (1L << (NOT_EQUAL_OP - 640)) | (1L << (CARRET_OPERATOR_PART - 640)) | (1L << (TILDE_OPERATOR_PART - 640)) | (1L << (EXCLAMATION_OPERATOR_PART - 640)) | (1L << (GREATER_THAN_OP - 640)) | (1L << (CONCATENATION_OP - 640)) | (1L << (VERTICAL_BAR - 640)) | (1L << (EQUALS_OP - 640)) | (1L << (LEFT_BRACKET - 640)) | (1L << (RIGHT_BRACKET - 640)) | (1L << (INTRODUCER - 640)) | (1L << (SPACES - 640)) | (1L << (SINGLE_LINE_COMMENT - 640)) | (1L << (MULTI_LINE_COMMENT - 640)) | (1L << (PROMPT - 640)) | (1L << (REGULAR_ID - 640)) | (1L << (ZV - 640)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Compilation_unitContext extends ParserRuleContext {
		public TerminalNode EOF() { return getToken(PLSQLParser.EOF, 0); }
		public List<Unit_statementContext> unit_statement() {
			return getRuleContexts(Unit_statementContext.class);
		}
		public Unit_statementContext unit_statement(int i) {
			return getRuleContext(Unit_statementContext.class,i);
		}
		public Compilation_unitContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compilation_unit; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterCompilation_unit(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitCompilation_unit(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitCompilation_unit(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Compilation_unitContext compilation_unit() throws RecognitionException {
		Compilation_unitContext _localctx = new Compilation_unitContext(_ctx, getState());
		enterRule(_localctx, 2, RULE_compilation_unit);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1094);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==ALTER || ((((_la - 99)) & ~0x3f) == 0 && ((1L << (_la - 99)) & ((1L << (CREATE - 99)) | (1L << (DELETE - 99)) | (1L << (DROP - 99)))) != 0) || ((((_la - 172)) & ~0x3f) == 0 && ((1L << (_la - 172)) & ((1L << (EXPLAIN - 172)) | (1L << (FUNCTION - 172)) | (1L << (GRANT - 172)) | (1L << (INSERT - 172)))) != 0) || _la==LOCK || _la==MERGE || ((((_la - 400)) & ~0x3f) == 0 && ((1L << (_la - 400)) & ((1L << (PROCEDURE - 400)) | (1L << (REFRESH - 400)) | (1L << (REVOKE - 400)) | (1L << (SELECT - 400)))) != 0) || _la==UPDATE || _la==WITH || _la==LEFT_PAREN) {
				{
				{
				setState(1091);
				unit_statement();
				}
				}
				setState(1096);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1097);
			match(EOF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sql_scriptContext extends ParserRuleContext {
		public TerminalNode EOF() { return getToken(PLSQLParser.EOF, 0); }
		public List<Unit_statementContext> unit_statement() {
			return getRuleContexts(Unit_statementContext.class);
		}
		public Unit_statementContext unit_statement(int i) {
			return getRuleContext(Unit_statementContext.class,i);
		}
		public List<Sql_plus_commandContext> sql_plus_command() {
			return getRuleContexts(Sql_plus_commandContext.class);
		}
		public Sql_plus_commandContext sql_plus_command(int i) {
			return getRuleContext(Sql_plus_commandContext.class,i);
		}
		public List<TerminalNode> SEMICOLON() { return getTokens(PLSQLParser.SEMICOLON); }
		public TerminalNode SEMICOLON(int i) {
			return getToken(PLSQLParser.SEMICOLON, i);
		}
		public Sql_scriptContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sql_script; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterSql_script(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitSql_script(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitSql_script(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sql_scriptContext sql_script() throws RecognitionException {
		Sql_scriptContext _localctx = new Sql_scriptContext(_ctx, getState());
		enterRule(_localctx, 4, RULE_sql_script);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1116);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALTER || ((((_la - 99)) & ~0x3f) == 0 && ((1L << (_la - 99)) & ((1L << (CREATE - 99)) | (1L << (DELETE - 99)) | (1L << (DROP - 99)))) != 0) || ((((_la - 171)) & ~0x3f) == 0 && ((1L << (_la - 171)) & ((1L << (EXIT - 171)) | (1L << (EXPLAIN - 171)) | (1L << (FUNCTION - 171)) | (1L << (GRANT - 171)) | (1L << (INSERT - 171)))) != 0) || _la==LOCK || _la==MERGE || ((((_la - 400)) & ~0x3f) == 0 && ((1L << (_la - 400)) & ((1L << (PROCEDURE - 400)) | (1L << (REFRESH - 400)) | (1L << (REVOKE - 400)) | (1L << (SELECT - 400)))) != 0) || _la==SET || _la==SHOW || ((((_la - 548)) & ~0x3f) == 0 && ((1L << (_la - 548)) & ((1L << (UPDATE - 548)) | (1L << (WHENEVER - 548)) | (1L << (WITH - 548)))) != 0) || ((((_la - 645)) & ~0x3f) == 0 && ((1L << (_la - 645)) & ((1L << (LEFT_PAREN - 645)) | (1L << (SOLIDUS - 645)) | (1L << (PROMPT - 645)))) != 0)) {
				{
				setState(1101);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ALTER:
				case CREATE:
				case DELETE:
				case DROP:
				case EXPLAIN:
				case FUNCTION:
				case GRANT:
				case INSERT:
				case LOCK:
				case MERGE:
				case PROCEDURE:
				case REFRESH:
				case REVOKE:
				case SELECT:
				case UPDATE:
				case WITH:
				case LEFT_PAREN:
					{
					setState(1099);
					unit_statement();
					}
					break;
				case EXIT:
				case SET:
				case SHOW:
				case WHENEVER:
				case SOLIDUS:
				case PROMPT:
					{
					setState(1100);
					sql_plus_command();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1110);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,4,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(1103);
						match(SEMICOLON);
						setState(1106);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case ALTER:
						case CREATE:
						case DELETE:
						case DROP:
						case EXPLAIN:
						case FUNCTION:
						case GRANT:
						case INSERT:
						case LOCK:
						case MERGE:
						case PROCEDURE:
						case REFRESH:
						case REVOKE:
						case SELECT:
						case UPDATE:
						case WITH:
						case LEFT_PAREN:
							{
							setState(1104);
							unit_statement();
							}
							break;
						case EXIT:
						case SET:
						case SHOW:
						case WHENEVER:
						case SOLIDUS:
						case PROMPT:
							{
							setState(1105);
							sql_plus_command();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						} 
					}
					setState(1112);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,4,_ctx);
				}
				setState(1114);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SEMICOLON) {
					{
					setState(1113);
					match(SEMICOLON);
					}
				}

				}
			}

			setState(1118);
			match(EOF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sql_explainContext extends ParserRuleContext {
		public TerminalNode EXPLAIN() { return getToken(PLSQLParser.EXPLAIN, 0); }
		public TerminalNode ANALYZE() { return getToken(PLSQLParser.ANALYZE, 0); }
		public TerminalNode VERBOSE() { return getToken(PLSQLParser.VERBOSE, 0); }
		public Sql_explainContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sql_explain; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterSql_explain(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitSql_explain(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitSql_explain(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sql_explainContext sql_explain() throws RecognitionException {
		Sql_explainContext _localctx = new Sql_explainContext(_ctx, getState());
		enterRule(_localctx, 6, RULE_sql_explain);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1120);
			match(EXPLAIN);
			setState(1122);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ANALYZE) {
				{
				setState(1121);
				match(ANALYZE);
				}
			}

			setState(1125);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==VERBOSE) {
				{
				setState(1124);
				match(VERBOSE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unit_statementContext extends ParserRuleContext {
		public Unit_statement_bodyContext unit_statement_body() {
			return getRuleContext(Unit_statement_bodyContext.class,0);
		}
		public Sql_explainContext sql_explain() {
			return getRuleContext(Sql_explainContext.class,0);
		}
		public Unit_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unit_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterUnit_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitUnit_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitUnit_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Unit_statementContext unit_statement() throws RecognitionException {
		Unit_statementContext _localctx = new Unit_statementContext(_ctx, getState());
		enterRule(_localctx, 8, RULE_unit_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1128);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,9,_ctx) ) {
			case 1:
				{
				setState(1127);
				sql_explain();
				}
				break;
			}
			setState(1130);
			unit_statement_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unit_statement_bodyContext extends ParserRuleContext {
		public Alter_functionContext alter_function() {
			return getRuleContext(Alter_functionContext.class,0);
		}
		public Alter_packageContext alter_package() {
			return getRuleContext(Alter_packageContext.class,0);
		}
		public Alter_procedureContext alter_procedure() {
			return getRuleContext(Alter_procedureContext.class,0);
		}
		public Alter_sequenceContext alter_sequence() {
			return getRuleContext(Alter_sequenceContext.class,0);
		}
		public Alter_triggerContext alter_trigger() {
			return getRuleContext(Alter_triggerContext.class,0);
		}
		public Alter_typeContext alter_type() {
			return getRuleContext(Alter_typeContext.class,0);
		}
		public Alter_tableContext alter_table() {
			return getRuleContext(Alter_tableContext.class,0);
		}
		public Alter_permissionContext alter_permission() {
			return getRuleContext(Alter_permissionContext.class,0);
		}
		public Create_function_bodyContext create_function_body() {
			return getRuleContext(Create_function_bodyContext.class,0);
		}
		public Create_procedure_bodyContext create_procedure_body() {
			return getRuleContext(Create_procedure_bodyContext.class,0);
		}
		public Create_packageContext create_package() {
			return getRuleContext(Create_packageContext.class,0);
		}
		public Create_indexContext create_index() {
			return getRuleContext(Create_indexContext.class,0);
		}
		public Create_tableContext create_table() {
			return getRuleContext(Create_tableContext.class,0);
		}
		public Create_viewContext create_view() {
			return getRuleContext(Create_viewContext.class,0);
		}
		public Create_materialized_viewContext create_materialized_view() {
			return getRuleContext(Create_materialized_viewContext.class,0);
		}
		public Refresh_materialized_viewContext refresh_materialized_view() {
			return getRuleContext(Refresh_materialized_viewContext.class,0);
		}
		public Create_sequenceContext create_sequence() {
			return getRuleContext(Create_sequenceContext.class,0);
		}
		public Create_triggerContext create_trigger() {
			return getRuleContext(Create_triggerContext.class,0);
		}
		public Create_typeContext create_type() {
			return getRuleContext(Create_typeContext.class,0);
		}
		public Create_roleContext create_role() {
			return getRuleContext(Create_roleContext.class,0);
		}
		public Drop_functionContext drop_function() {
			return getRuleContext(Drop_functionContext.class,0);
		}
		public Drop_packageContext drop_package() {
			return getRuleContext(Drop_packageContext.class,0);
		}
		public Drop_procedureContext drop_procedure() {
			return getRuleContext(Drop_procedureContext.class,0);
		}
		public Drop_sequenceContext drop_sequence() {
			return getRuleContext(Drop_sequenceContext.class,0);
		}
		public Drop_triggerContext drop_trigger() {
			return getRuleContext(Drop_triggerContext.class,0);
		}
		public Drop_typeContext drop_type() {
			return getRuleContext(Drop_typeContext.class,0);
		}
		public Data_manipulation_language_statementsContext data_manipulation_language_statements() {
			return getRuleContext(Data_manipulation_language_statementsContext.class,0);
		}
		public Drop_tableContext drop_table() {
			return getRuleContext(Drop_tableContext.class,0);
		}
		public Unit_statement_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unit_statement_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterUnit_statement_body(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitUnit_statement_body(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitUnit_statement_body(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Unit_statement_bodyContext unit_statement_body() throws RecognitionException {
		Unit_statement_bodyContext _localctx = new Unit_statement_bodyContext(_ctx, getState());
		enterRule(_localctx, 10, RULE_unit_statement_body);
		try {
			setState(1160);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,10,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1132);
				alter_function();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1133);
				alter_package();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1134);
				alter_procedure();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1135);
				alter_sequence();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1136);
				alter_trigger();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1137);
				alter_type();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1138);
				alter_table();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1139);
				alter_permission();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(1140);
				create_function_body();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(1141);
				create_procedure_body();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(1142);
				create_package();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(1143);
				create_index();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(1144);
				create_table();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(1145);
				create_view();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(1146);
				create_materialized_view();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(1147);
				refresh_materialized_view();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(1148);
				create_sequence();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(1149);
				create_trigger();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(1150);
				create_type();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(1151);
				create_role();
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(1152);
				drop_function();
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(1153);
				drop_package();
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(1154);
				drop_procedure();
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(1155);
				drop_sequence();
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(1156);
				drop_trigger();
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(1157);
				drop_type();
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(1158);
				data_manipulation_language_statements();
				}
				break;
			case 28:
				enterOuterAlt(_localctx, 28);
				{
				setState(1159);
				drop_table();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_roleContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PLSQLParser.CREATE, 0); }
		public TerminalNode ROLE() { return getToken(PLSQLParser.ROLE, 0); }
		public Role_nameContext role_name() {
			return getRuleContext(Role_nameContext.class,0);
		}
		public TerminalNode WITH() { return getToken(PLSQLParser.WITH, 0); }
		public List<Role_optionContext> role_option() {
			return getRuleContexts(Role_optionContext.class);
		}
		public Role_optionContext role_option(int i) {
			return getRuleContext(Role_optionContext.class,i);
		}
		public Create_roleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_role; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterCreate_role(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitCreate_role(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitCreate_role(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_roleContext create_role() throws RecognitionException {
		Create_roleContext _localctx = new Create_roleContext(_ctx, getState());
		enterRule(_localctx, 12, RULE_create_role);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1162);
			match(CREATE);
			setState(1163);
			match(ROLE);
			setState(1164);
			role_name();
			setState(1173);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,13,_ctx) ) {
			case 1:
				{
				setState(1166);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(1165);
					match(WITH);
					}
				}

				setState(1169); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(1168);
					role_option();
					}
					}
					setState(1171); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==CREATEDB || _la==CREATEROLE || _la==LOGIN );
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Role_optionContext extends ParserRuleContext {
		public TerminalNode LOGIN() { return getToken(PLSQLParser.LOGIN, 0); }
		public TerminalNode CREATEDB() { return getToken(PLSQLParser.CREATEDB, 0); }
		public TerminalNode CREATEROLE() { return getToken(PLSQLParser.CREATEROLE, 0); }
		public Role_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_role_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterRole_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitRole_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitRole_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Role_optionContext role_option() throws RecognitionException {
		Role_optionContext _localctx = new Role_optionContext(_ctx, getState());
		enterRule(_localctx, 14, RULE_role_option);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1175);
			_la = _input.LA(1);
			if ( !(_la==CREATEDB || _la==CREATEROLE || _la==LOGIN) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Refresh_materialized_viewContext extends ParserRuleContext {
		public TerminalNode REFRESH() { return getToken(PLSQLParser.REFRESH, 0); }
		public TerminalNode MATERIALIZED() { return getToken(PLSQLParser.MATERIALIZED, 0); }
		public TerminalNode VIEW() { return getToken(PLSQLParser.VIEW, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public Refresh_materialized_viewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_refresh_materialized_view; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterRefresh_materialized_view(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitRefresh_materialized_view(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitRefresh_materialized_view(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Refresh_materialized_viewContext refresh_materialized_view() throws RecognitionException {
		Refresh_materialized_viewContext _localctx = new Refresh_materialized_viewContext(_ctx, getState());
		enterRule(_localctx, 16, RULE_refresh_materialized_view);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1177);
			match(REFRESH);
			setState(1178);
			match(MATERIALIZED);
			setState(1179);
			match(VIEW);
			setState(1180);
			tableview_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_materialized_viewContext extends ParserRuleContext {
		public Id_expressionContext mv_tablespace;
		public TerminalNode CREATE() { return getToken(PLSQLParser.CREATE, 0); }
		public TerminalNode MATERIALIZED() { return getToken(PLSQLParser.MATERIALIZED, 0); }
		public TerminalNode VIEW() { return getToken(PLSQLParser.VIEW, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public TerminalNode AS() { return getToken(PLSQLParser.AS, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public TerminalNode ON() { return getToken(PLSQLParser.ON, 0); }
		public TerminalNode PREBUILT() { return getToken(PLSQLParser.PREBUILT, 0); }
		public TerminalNode TABLE() { return getToken(PLSQLParser.TABLE, 0); }
		public TerminalNode OF() { return getToken(PLSQLParser.OF, 0); }
		public Type_nameContext type_name() {
			return getRuleContext(Type_nameContext.class,0);
		}
		public TerminalNode USING() { return getToken(PLSQLParser.USING, 0); }
		public TerminalNode INDEX() { return getToken(PLSQLParser.INDEX, 0); }
		public TerminalNode NO() { return getToken(PLSQLParser.NO, 0); }
		public Create_mv_refreshContext create_mv_refresh() {
			return getRuleContext(Create_mv_refreshContext.class,0);
		}
		public TerminalNode FOR() { return getToken(PLSQLParser.FOR, 0); }
		public TerminalNode UPDATE() { return getToken(PLSQLParser.UPDATE, 0); }
		public TerminalNode QUERY() { return getToken(PLSQLParser.QUERY, 0); }
		public TerminalNode REWRITE() { return getToken(PLSQLParser.REWRITE, 0); }
		public TerminalNode DISABLE() { return getToken(PLSQLParser.DISABLE, 0); }
		public TerminalNode ENABLE() { return getToken(PLSQLParser.ENABLE, 0); }
		public TerminalNode REDUCED() { return getToken(PLSQLParser.REDUCED, 0); }
		public TerminalNode PRECISION() { return getToken(PLSQLParser.PRECISION, 0); }
		public Physical_propertiesContext physical_properties() {
			return getRuleContext(Physical_propertiesContext.class,0);
		}
		public Parallel_clauseContext parallel_clause() {
			return getRuleContext(Parallel_clauseContext.class,0);
		}
		public Build_clauseContext build_clause() {
			return getRuleContext(Build_clauseContext.class,0);
		}
		public TerminalNode WITH() { return getToken(PLSQLParser.WITH, 0); }
		public TerminalNode WITHOUT() { return getToken(PLSQLParser.WITHOUT, 0); }
		public TerminalNode CACHE() { return getToken(PLSQLParser.CACHE, 0); }
		public TerminalNode NOCACHE() { return getToken(PLSQLParser.NOCACHE, 0); }
		public List<Physical_attributes_clauseContext> physical_attributes_clause() {
			return getRuleContexts(Physical_attributes_clauseContext.class);
		}
		public Physical_attributes_clauseContext physical_attributes_clause(int i) {
			return getRuleContext(Physical_attributes_clauseContext.class,i);
		}
		public List<TerminalNode> TABLESPACE() { return getTokens(PLSQLParser.TABLESPACE); }
		public TerminalNode TABLESPACE(int i) {
			return getToken(PLSQLParser.TABLESPACE, i);
		}
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public Create_materialized_viewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_materialized_view; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterCreate_materialized_view(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitCreate_materialized_view(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitCreate_materialized_view(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_materialized_viewContext create_materialized_view() throws RecognitionException {
		Create_materialized_viewContext _localctx = new Create_materialized_viewContext(_ctx, getState());
		enterRule(_localctx, 18, RULE_create_materialized_view);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1182);
			match(CREATE);
			setState(1183);
			match(MATERIALIZED);
			setState(1184);
			match(VIEW);
			setState(1185);
			tableview_name();
			setState(1188);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OF) {
				{
				setState(1186);
				match(OF);
				setState(1187);
				type_name();
				}
			}

			setState(1210);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ON:
				{
				setState(1190);
				match(ON);
				setState(1191);
				match(PREBUILT);
				setState(1192);
				match(TABLE);
				setState(1196);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH || _la==WITHOUT) {
					{
					setState(1193);
					_la = _input.LA(1);
					if ( !(_la==WITH || _la==WITHOUT) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(1194);
					match(REDUCED);
					setState(1195);
					match(PRECISION);
					}
				}

				}
				break;
			case AS:
			case BUILD:
			case CACHE:
			case DISABLE:
			case ENABLE:
			case FILESYSTEM_LIKE_LOGGING:
			case FOR:
			case INITRANS:
			case LOGGING:
			case NEVER:
			case NOCACHE:
			case NOLOGGING:
			case NOPARALLEL:
			case PARALLEL:
			case PCTFREE:
			case PCTUSED:
			case REFRESH:
			case SEGMENT:
			case STORAGE:
			case TABLESPACE:
			case USING:
				{
				setState(1199);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FILESYSTEM_LIKE_LOGGING || _la==INITRANS || _la==LOGGING || _la==NOLOGGING || _la==PCTFREE || _la==PCTUSED || ((((_la - 459)) & ~0x3f) == 0 && ((1L << (_la - 459)) & ((1L << (SEGMENT - 459)) | (1L << (STORAGE - 459)) | (1L << (TABLESPACE - 459)))) != 0)) {
					{
					setState(1198);
					physical_properties();
					}
				}

				setState(1202);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CACHE || _la==NOCACHE) {
					{
					setState(1201);
					_la = _input.LA(1);
					if ( !(_la==CACHE || _la==NOCACHE) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(1205);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOPARALLEL || _la==PARALLEL) {
					{
					setState(1204);
					parallel_clause();
					}
				}

				setState(1208);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==BUILD) {
					{
					setState(1207);
					build_clause();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(1229);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,24,_ctx) ) {
			case 1:
				{
				setState(1212);
				match(USING);
				setState(1213);
				match(INDEX);
				setState(1223);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==INITRANS || _la==PCTFREE || _la==PCTUSED || _la==STORAGE || _la==TABLESPACE) {
					{
					{
					setState(1217); 
					_errHandler.sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							setState(1217);
							_errHandler.sync(this);
							switch (_input.LA(1)) {
							case INITRANS:
							case PCTFREE:
							case PCTUSED:
							case STORAGE:
								{
								setState(1214);
								physical_attributes_clause();
								}
								break;
							case TABLESPACE:
								{
								setState(1215);
								match(TABLESPACE);
								setState(1216);
								((Create_materialized_viewContext)_localctx).mv_tablespace = id_expression();
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						setState(1219); 
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,22,_ctx);
					} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
					}
					}
					setState(1225);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				{
				setState(1226);
				match(USING);
				setState(1227);
				match(NO);
				setState(1228);
				match(INDEX);
				}
				break;
			}
			setState(1232);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NEVER || _la==REFRESH) {
				{
				setState(1231);
				create_mv_refresh();
				}
			}

			setState(1236);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(1234);
				match(FOR);
				setState(1235);
				match(UPDATE);
				}
			}

			setState(1241);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DISABLE || _la==ENABLE) {
				{
				setState(1238);
				_la = _input.LA(1);
				if ( !(_la==DISABLE || _la==ENABLE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1239);
				match(QUERY);
				setState(1240);
				match(REWRITE);
				}
			}

			setState(1243);
			match(AS);
			setState(1244);
			subquery(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_mv_refreshContext extends ParserRuleContext {
		public Token rb_segment;
		public TerminalNode NEVER() { return getToken(PLSQLParser.NEVER, 0); }
		public TerminalNode REFRESH() { return getToken(PLSQLParser.REFRESH, 0); }
		public List<TerminalNode> ON() { return getTokens(PLSQLParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(PLSQLParser.ON, i);
		}
		public List<TerminalNode> WITH() { return getTokens(PLSQLParser.WITH); }
		public TerminalNode WITH(int i) {
			return getToken(PLSQLParser.WITH, i);
		}
		public List<TerminalNode> USING() { return getTokens(PLSQLParser.USING); }
		public TerminalNode USING(int i) {
			return getToken(PLSQLParser.USING, i);
		}
		public List<TerminalNode> CONSTRAINTS() { return getTokens(PLSQLParser.CONSTRAINTS); }
		public TerminalNode CONSTRAINTS(int i) {
			return getToken(PLSQLParser.CONSTRAINTS, i);
		}
		public List<TerminalNode> FAST() { return getTokens(PLSQLParser.FAST); }
		public TerminalNode FAST(int i) {
			return getToken(PLSQLParser.FAST, i);
		}
		public List<TerminalNode> COMPLETE() { return getTokens(PLSQLParser.COMPLETE); }
		public TerminalNode COMPLETE(int i) {
			return getToken(PLSQLParser.COMPLETE, i);
		}
		public List<TerminalNode> FORCE() { return getTokens(PLSQLParser.FORCE); }
		public TerminalNode FORCE(int i) {
			return getToken(PLSQLParser.FORCE, i);
		}
		public List<TerminalNode> DEMAND() { return getTokens(PLSQLParser.DEMAND); }
		public TerminalNode DEMAND(int i) {
			return getToken(PLSQLParser.DEMAND, i);
		}
		public List<TerminalNode> COMMIT() { return getTokens(PLSQLParser.COMMIT); }
		public TerminalNode COMMIT(int i) {
			return getToken(PLSQLParser.COMMIT, i);
		}
		public List<TerminalNode> ENFORCED() { return getTokens(PLSQLParser.ENFORCED); }
		public TerminalNode ENFORCED(int i) {
			return getToken(PLSQLParser.ENFORCED, i);
		}
		public List<TerminalNode> TRUSTED() { return getTokens(PLSQLParser.TRUSTED); }
		public TerminalNode TRUSTED(int i) {
			return getToken(PLSQLParser.TRUSTED, i);
		}
		public List<TerminalNode> START() { return getTokens(PLSQLParser.START); }
		public TerminalNode START(int i) {
			return getToken(PLSQLParser.START, i);
		}
		public List<TerminalNode> NEXT() { return getTokens(PLSQLParser.NEXT); }
		public TerminalNode NEXT(int i) {
			return getToken(PLSQLParser.NEXT, i);
		}
		public List<TerminalNode> PRIMARY() { return getTokens(PLSQLParser.PRIMARY); }
		public TerminalNode PRIMARY(int i) {
			return getToken(PLSQLParser.PRIMARY, i);
		}
		public List<TerminalNode> KEY() { return getTokens(PLSQLParser.KEY); }
		public TerminalNode KEY(int i) {
			return getToken(PLSQLParser.KEY, i);
		}
		public List<TerminalNode> ROWID() { return getTokens(PLSQLParser.ROWID); }
		public TerminalNode ROWID(int i) {
			return getToken(PLSQLParser.ROWID, i);
		}
		public List<TerminalNode> DEFAULT() { return getTokens(PLSQLParser.DEFAULT); }
		public TerminalNode DEFAULT(int i) {
			return getToken(PLSQLParser.DEFAULT, i);
		}
		public List<TerminalNode> ROLLBACK() { return getTokens(PLSQLParser.ROLLBACK); }
		public TerminalNode ROLLBACK(int i) {
			return getToken(PLSQLParser.ROLLBACK, i);
		}
		public List<TerminalNode> SEGMENT() { return getTokens(PLSQLParser.SEGMENT); }
		public TerminalNode SEGMENT(int i) {
			return getToken(PLSQLParser.SEGMENT, i);
		}
		public List<TerminalNode> REGULAR_ID() { return getTokens(PLSQLParser.REGULAR_ID); }
		public TerminalNode REGULAR_ID(int i) {
			return getToken(PLSQLParser.REGULAR_ID, i);
		}
		public List<TerminalNode> MASTER() { return getTokens(PLSQLParser.MASTER); }
		public TerminalNode MASTER(int i) {
			return getToken(PLSQLParser.MASTER, i);
		}
		public List<TerminalNode> LOCAL() { return getTokens(PLSQLParser.LOCAL); }
		public TerminalNode LOCAL(int i) {
			return getToken(PLSQLParser.LOCAL, i);
		}
		public Create_mv_refreshContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_mv_refresh; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterCreate_mv_refresh(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitCreate_mv_refresh(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitCreate_mv_refresh(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_mv_refreshContext create_mv_refresh() throws RecognitionException {
		Create_mv_refreshContext _localctx = new Create_mv_refreshContext(_ctx, getState());
		enterRule(_localctx, 20, RULE_create_mv_refresh);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1285);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NEVER:
				{
				setState(1246);
				match(NEVER);
				setState(1247);
				match(REFRESH);
				}
				break;
			case REFRESH:
				{
				setState(1248);
				match(REFRESH);
				setState(1281); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					setState(1281);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,33,_ctx) ) {
					case 1:
						{
						setState(1249);
						_la = _input.LA(1);
						if ( !(_la==COMPLETE || _la==FAST || _la==FORCE) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					case 2:
						{
						setState(1250);
						match(ON);
						setState(1251);
						_la = _input.LA(1);
						if ( !(_la==COMMIT || _la==DEMAND) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					case 3:
						{
						setState(1255);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case START:
							{
							setState(1252);
							match(START);
							setState(1253);
							match(WITH);
							}
							break;
						case NEXT:
							{
							setState(1254);
							match(NEXT);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;
					case 4:
						{
						setState(1257);
						match(WITH);
						setState(1261);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case PRIMARY:
							{
							setState(1258);
							match(PRIMARY);
							setState(1259);
							match(KEY);
							}
							break;
						case ROWID:
							{
							setState(1260);
							match(ROWID);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;
					case 5:
						{
						setState(1263);
						match(USING);
						setState(1276);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case DEFAULT:
							{
							setState(1264);
							match(DEFAULT);
							setState(1266);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==LOCAL || _la==MASTER) {
								{
								setState(1265);
								_la = _input.LA(1);
								if ( !(_la==LOCAL || _la==MASTER) ) {
								_errHandler.recoverInline(this);
								}
								else {
									if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
									_errHandler.reportMatch(this);
									consume();
								}
								}
							}

							setState(1268);
							match(ROLLBACK);
							setState(1269);
							match(SEGMENT);
							}
							break;
						case LOCAL:
						case MASTER:
						case ROLLBACK:
							{
							setState(1271);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==LOCAL || _la==MASTER) {
								{
								setState(1270);
								_la = _input.LA(1);
								if ( !(_la==LOCAL || _la==MASTER) ) {
								_errHandler.recoverInline(this);
								}
								else {
									if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
									_errHandler.reportMatch(this);
									consume();
								}
								}
							}

							setState(1273);
							match(ROLLBACK);
							setState(1274);
							match(SEGMENT);
							setState(1275);
							((Create_mv_refreshContext)_localctx).rb_segment = match(REGULAR_ID);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;
					case 6:
						{
						setState(1278);
						match(USING);
						setState(1279);
						_la = _input.LA(1);
						if ( !(_la==ENFORCED || _la==TRUSTED) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(1280);
						match(CONSTRAINTS);
						}
						break;
					}
					}
					setState(1283); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==COMPLETE || _la==FAST || _la==FORCE || _la==NEXT || _la==ON || _la==START || _la==USING || _la==WITH );
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Build_clauseContext extends ParserRuleContext {
		public TerminalNode BUILD() { return getToken(PLSQLParser.BUILD, 0); }
		public TerminalNode IMMEDIATE() { return getToken(PLSQLParser.IMMEDIATE, 0); }
		public TerminalNode DEFERRED() { return getToken(PLSQLParser.DEFERRED, 0); }
		public Build_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_build_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterBuild_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitBuild_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitBuild_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Build_clauseContext build_clause() throws RecognitionException {
		Build_clauseContext _localctx = new Build_clauseContext(_ctx, getState());
		enterRule(_localctx, 22, RULE_build_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1287);
			match(BUILD);
			setState(1288);
			_la = _input.LA(1);
			if ( !(_la==DEFERRED || _la==IMMEDIATE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_permissionContext extends ParserRuleContext {
		public TerminalNode REVOKE() { return getToken(PLSQLParser.REVOKE, 0); }
		public Permission_optionsContext permission_options() {
			return getRuleContext(Permission_optionsContext.class,0);
		}
		public TerminalNode ON() { return getToken(PLSQLParser.ON, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public TerminalNode FROM() { return getToken(PLSQLParser.FROM, 0); }
		public TerminalNode PUBLIC() { return getToken(PLSQLParser.PUBLIC, 0); }
		public List<Role_nameContext> role_name() {
			return getRuleContexts(Role_nameContext.class);
		}
		public Role_nameContext role_name(int i) {
			return getRuleContext(Role_nameContext.class,i);
		}
		public TerminalNode TABLE() { return getToken(PLSQLParser.TABLE, 0); }
		public TerminalNode GROUP() { return getToken(PLSQLParser.GROUP, 0); }
		public TerminalNode GRANT() { return getToken(PLSQLParser.GRANT, 0); }
		public TerminalNode TO() { return getToken(PLSQLParser.TO, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PLSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLSQLParser.COMMA, i);
		}
		public Alter_permissionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_permission; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterAlter_permission(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitAlter_permission(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitAlter_permission(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_permissionContext alter_permission() throws RecognitionException {
		Alter_permissionContext _localctx = new Alter_permissionContext(_ctx, getState());
		enterRule(_localctx, 24, RULE_alter_permission);
		int _la;
		try {
			setState(1356);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,46,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1290);
				match(REVOKE);
				setState(1291);
				permission_options();
				setState(1292);
				match(ON);
				setState(1294);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TABLE) {
					{
					setState(1293);
					match(TABLE);
					}
				}

				setState(1296);
				tableview_name();
				setState(1297);
				match(FROM);
				setState(1299);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==GROUP) {
					{
					setState(1298);
					match(GROUP);
					}
				}

				setState(1303);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,38,_ctx) ) {
				case 1:
					{
					setState(1301);
					match(PUBLIC);
					}
					break;
				case 2:
					{
					setState(1302);
					role_name();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1305);
				match(GRANT);
				setState(1306);
				permission_options();
				setState(1307);
				match(ON);
				setState(1309);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TABLE) {
					{
					setState(1308);
					match(TABLE);
					}
				}

				setState(1311);
				tableview_name();
				setState(1312);
				match(TO);
				setState(1314);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==GROUP) {
					{
					setState(1313);
					match(GROUP);
					}
				}

				setState(1318);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,41,_ctx) ) {
				case 1:
					{
					setState(1316);
					match(PUBLIC);
					}
					break;
				case 2:
					{
					setState(1317);
					role_name();
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1320);
				match(GRANT);
				setState(1321);
				role_name();
				setState(1326);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1322);
					match(COMMA);
					setState(1323);
					role_name();
					}
					}
					setState(1328);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1329);
				match(TO);
				setState(1330);
				role_name();
				setState(1335);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1331);
					match(COMMA);
					setState(1332);
					role_name();
					}
					}
					setState(1337);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1338);
				match(REVOKE);
				setState(1339);
				role_name();
				setState(1344);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1340);
					match(COMMA);
					setState(1341);
					role_name();
					}
					}
					setState(1346);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1347);
				match(FROM);
				setState(1348);
				role_name();
				setState(1353);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1349);
					match(COMMA);
					setState(1350);
					role_name();
					}
					}
					setState(1355);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Permission_optionsContext extends ParserRuleContext {
		public List<TerminalNode> SELECT() { return getTokens(PLSQLParser.SELECT); }
		public TerminalNode SELECT(int i) {
			return getToken(PLSQLParser.SELECT, i);
		}
		public List<TerminalNode> INSERT() { return getTokens(PLSQLParser.INSERT); }
		public TerminalNode INSERT(int i) {
			return getToken(PLSQLParser.INSERT, i);
		}
		public List<TerminalNode> UPDATE() { return getTokens(PLSQLParser.UPDATE); }
		public TerminalNode UPDATE(int i) {
			return getToken(PLSQLParser.UPDATE, i);
		}
		public List<TerminalNode> DELETE() { return getTokens(PLSQLParser.DELETE); }
		public TerminalNode DELETE(int i) {
			return getToken(PLSQLParser.DELETE, i);
		}
		public List<TerminalNode> TRUNCATE() { return getTokens(PLSQLParser.TRUNCATE); }
		public TerminalNode TRUNCATE(int i) {
			return getToken(PLSQLParser.TRUNCATE, i);
		}
		public List<TerminalNode> REFERENCES() { return getTokens(PLSQLParser.REFERENCES); }
		public TerminalNode REFERENCES(int i) {
			return getToken(PLSQLParser.REFERENCES, i);
		}
		public List<TerminalNode> TRIGGER() { return getTokens(PLSQLParser.TRIGGER); }
		public TerminalNode TRIGGER(int i) {
			return getToken(PLSQLParser.TRIGGER, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLSQLParser.COMMA, i);
		}
		public Permission_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_permission_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterPermission_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitPermission_options(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitPermission_options(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Permission_optionsContext permission_options() throws RecognitionException {
		Permission_optionsContext _localctx = new Permission_optionsContext(_ctx, getState());
		enterRule(_localctx, 26, RULE_permission_options);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1362); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1359);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(1358);
					match(COMMA);
					}
				}

				setState(1361);
				_la = _input.LA(1);
				if ( !(_la==DELETE || _la==INSERT || _la==REFERENCES || _la==SELECT || ((((_la - 533)) & ~0x3f) == 0 && ((1L << (_la - 533)) & ((1L << (TRIGGER - 533)) | (1L << (TRUNCATE - 533)) | (1L << (UPDATE - 533)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				}
				setState(1364); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==DELETE || _la==INSERT || _la==REFERENCES || _la==SELECT || ((((_la - 533)) & ~0x3f) == 0 && ((1L << (_la - 533)) & ((1L << (TRIGGER - 533)) | (1L << (TRUNCATE - 533)) | (1L << (UPDATE - 533)))) != 0) || _la==COMMA );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_viewContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PLSQLParser.CREATE, 0); }
		public TerminalNode VIEW() { return getToken(PLSQLParser.VIEW, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public TerminalNode AS() { return getToken(PLSQLParser.AS, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public List<TerminalNode> OR() { return getTokens(PLSQLParser.OR); }
		public TerminalNode OR(int i) {
			return getToken(PLSQLParser.OR, i);
		}
		public TerminalNode REPLACE() { return getToken(PLSQLParser.REPLACE, 0); }
		public TerminalNode FORCE() { return getToken(PLSQLParser.FORCE, 0); }
		public TerminalNode EDITIONING() { return getToken(PLSQLParser.EDITIONING, 0); }
		public View_optionsContext view_options() {
			return getRuleContext(View_optionsContext.class,0);
		}
		public Subquery_restriction_clauseContext subquery_restriction_clause() {
			return getRuleContext(Subquery_restriction_clauseContext.class,0);
		}
		public Create_viewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_view; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterCreate_view(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitCreate_view(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitCreate_view(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_viewContext create_view() throws RecognitionException {
		Create_viewContext _localctx = new Create_viewContext(_ctx, getState());
		enterRule(_localctx, 28, RULE_create_view);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1366);
			match(CREATE);
			setState(1369);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,49,_ctx) ) {
			case 1:
				{
				setState(1367);
				match(OR);
				setState(1368);
				match(REPLACE);
				}
				break;
			}
			setState(1375);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FORCE || _la==OR) {
				{
				setState(1372);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OR) {
					{
					setState(1371);
					match(OR);
					}
				}

				setState(1374);
				match(FORCE);
				}
			}

			setState(1378);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EDITIONING) {
				{
				setState(1377);
				match(EDITIONING);
				}
			}

			setState(1380);
			match(VIEW);
			setState(1381);
			tableview_name();
			setState(1383);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(1382);
				view_options();
				}
			}

			setState(1385);
			match(AS);
			setState(1386);
			subquery(0);
			setState(1388);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,54,_ctx) ) {
			case 1:
				{
				setState(1387);
				subquery_restriction_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class View_optionsContext extends ParserRuleContext {
		public View_alias_constraintContext view_alias_constraint() {
			return getRuleContext(View_alias_constraintContext.class,0);
		}
		public View_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_view_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterView_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitView_options(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitView_options(this);
			else return visitor.visitChildren(this);
		}
	}

	public final View_optionsContext view_options() throws RecognitionException {
		View_optionsContext _localctx = new View_optionsContext(_ctx, getState());
		enterRule(_localctx, 30, RULE_view_options);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1390);
			view_alias_constraint();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class View_alias_constraintContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(PLSQLParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PLSQLParser.RIGHT_PAREN, 0); }
		public List<Table_aliasContext> table_alias() {
			return getRuleContexts(Table_aliasContext.class);
		}
		public Table_aliasContext table_alias(int i) {
			return getRuleContext(Table_aliasContext.class,i);
		}
		public List<Out_of_line_constraintContext> out_of_line_constraint() {
			return getRuleContexts(Out_of_line_constraintContext.class);
		}
		public Out_of_line_constraintContext out_of_line_constraint(int i) {
			return getRuleContext(Out_of_line_constraintContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLSQLParser.COMMA, i);
		}
		public List<Inline_constraintContext> inline_constraint() {
			return getRuleContexts(Inline_constraintContext.class);
		}
		public Inline_constraintContext inline_constraint(int i) {
			return getRuleContext(Inline_constraintContext.class,i);
		}
		public View_alias_constraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_view_alias_constraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterView_alias_constraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitView_alias_constraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitView_alias_constraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final View_alias_constraintContext view_alias_constraint() throws RecognitionException {
		View_alias_constraintContext _localctx = new View_alias_constraintContext(_ctx, getState());
		enterRule(_localctx, 32, RULE_view_alias_constraint);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1392);
			match(LEFT_PAREN);
			setState(1406); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1394);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(1393);
					match(COMMA);
					}
				}

				setState(1404);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,57,_ctx) ) {
				case 1:
					{
					setState(1396);
					table_alias();
					setState(1400);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,56,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							setState(1397);
							inline_constraint();
							}
							} 
						}
						setState(1402);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,56,_ctx);
					}
					}
					break;
				case 2:
					{
					setState(1403);
					out_of_line_constraint();
					}
					break;
				}
				}
				}
				setState(1408); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << AS) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BUILD) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHECK))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (CHR - 65)) | (1L << (CLOB - 65)) | (1L << (CLOSE - 65)) | (1L << (CLUSTER - 65)) | (1L << (COALESCE - 65)) | (1L << (COLLECT - 65)) | (1L << (COLUMNS - 65)) | (1L << (COMMENT - 65)) | (1L << (COMMIT - 65)) | (1L << (COMMITTED - 65)) | (1L << (COMPATIBILITY - 65)) | (1L << (COMPILE - 65)) | (1L << (COMPLETE - 65)) | (1L << (COMPOUND - 65)) | (1L << (CONCAT - 65)) | (1L << (CONSTANT - 65)) | (1L << (CONSTRAINT - 65)) | (1L << (CONSTRAINTS - 65)) | (1L << (CONSTRUCTOR - 65)) | (1L << (CONTENT - 65)) | (1L << (CONTEXT - 65)) | (1L << (CONTINUE - 65)) | (1L << (CONVERT - 65)) | (1L << (CORRUPT_XID - 65)) | (1L << (CORRUPT_XID_ALL - 65)) | (1L << (COST - 65)) | (1L << (COUNT - 65)) | (1L << (CROSS - 65)) | (1L << (CUBE - 65)) | (1L << (CURRENT_USER - 65)) | (1L << (CURSOR - 65)) | (1L << (CUSTOMDATUM - 65)) | (1L << (CYCLE - 65)) | (1L << (DATA - 65)) | (1L << (DATABASE - 65)) | (1L << (DATE - 65)) | (1L << (DAY - 65)) | (1L << (DB_ROLE_CHANGE - 65)) | (1L << (DBTIMEZONE - 65)) | (1L << (DDL - 65)) | (1L << (DEBUG - 65)) | (1L << (DEC - 65)) | (1L << (DECIMAL - 65)) | (1L << (DECODE - 65)) | (1L << (DECOMPOSE - 65)) | (1L << (DECREMENT - 65)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DEMAND - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (EDITIONING - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENFORCED - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FAST - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)) | (1L << (FOLLOWING - 129)) | (1L << (FOLLOWS - 129)) | (1L << (FORALL - 129)) | (1L << (FORCE - 129)) | (1L << (FOREIGN - 129)))) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & ((1L << (FULL - 197)) | (1L << (FUNCTION - 197)) | (1L << (GROUPING - 197)) | (1L << (HASH - 197)) | (1L << (HIDE - 197)) | (1L << (HOUR - 197)) | (1L << (IGNORE - 197)) | (1L << (IMMEDIATE - 197)) | (1L << (INCLUDE - 197)) | (1L << (INCLUDING - 197)) | (1L << (INCREMENT - 197)) | (1L << (INDENT - 197)) | (1L << (INDEXED - 197)) | (1L << (INDICATOR - 197)) | (1L << (INDICES - 197)) | (1L << (INFINITE - 197)) | (1L << (INLINE - 197)) | (1L << (INNER - 197)) | (1L << (INOUT - 197)) | (1L << (INSTANTIABLE - 197)) | (1L << (INSTEAD - 197)) | (1L << (INT - 197)) | (1L << (INTEGER - 197)) | (1L << (INTERVAL - 197)) | (1L << (INVALIDATE - 197)) | (1L << (ISOLATION - 197)) | (1L << (ITERATE - 197)) | (1L << (JAVA - 197)) | (1L << (JOIN - 197)) | (1L << (KEEP - 197)) | (1L << (LANGUAGE - 197)) | (1L << (LAST - 197)) | (1L << (LAST_VALUE - 197)) | (1L << (LEADING - 197)) | (1L << (LEFT - 197)) | (1L << (LEVEL - 197)))) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & ((1L << (LIBRARY - 261)) | (1L << (LIKE2 - 261)) | (1L << (LIKE4 - 261)) | (1L << (LIKEC - 261)) | (1L << (LIMIT - 261)) | (1L << (LIST - 261)) | (1L << (LOCAL - 261)) | (1L << (LOCKED - 261)) | (1L << (LOG - 261)) | (1L << (LOGOFF - 261)) | (1L << (LOGON - 261)) | (1L << (LONG - 261)) | (1L << (LOOP - 261)) | (1L << (MAIN - 261)) | (1L << (MAP - 261)) | (1L << (MASTER - 261)) | (1L << (MATCHED - 261)) | (1L << (MAXVALUE - 261)) | (1L << (MEASURES - 261)) | (1L << (MEMBER - 261)) | (1L << (MERGE - 261)) | (1L << (MINUTE - 261)) | (1L << (MINVALUE - 261)) | (1L << (MLSLABEL - 261)) | (1L << (MODEL - 261)) | (1L << (MODIFY - 261)) | (1L << (MONTH - 261)) | (1L << (MULTISET - 261)) | (1L << (NAME - 261)) | (1L << (NAN - 261)) | (1L << (NATURAL - 261)) | (1L << (NATURALN - 261)) | (1L << (NAV - 261)) | (1L << (NCHAR - 261)) | (1L << (NCHAR_CS - 261)) | (1L << (NCLOB - 261)) | (1L << (NESTED - 261)) | (1L << (NEVER - 261)) | (1L << (NEW - 261)) | (1L << (NO - 261)) | (1L << (NOAUDIT - 261)) | (1L << (NOCOPY - 261)) | (1L << (NOCYCLE - 261)) | (1L << (NOENTITYESCAPING - 261)))) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & ((1L << (NONE - 329)) | (1L << (NOSCHEMACHECK - 329)) | (1L << (NVL - 329)) | (1L << (NULLS - 329)) | (1L << (NUMBER - 329)) | (1L << (NUMERIC - 329)) | (1L << (NVARCHAR2 - 329)) | (1L << (MATERIALIZED - 329)) | (1L << (OBJECT - 329)) | (1L << (OFF - 329)) | (1L << (OID - 329)) | (1L << (OLD - 329)) | (1L << (ONLY - 329)) | (1L << (OPEN - 329)) | (1L << (ORADATA - 329)) | (1L << (ORDINALITY - 329)) | (1L << (OSERROR - 329)) | (1L << (OUT - 329)) | (1L << (OUTER - 329)) | (1L << (OVER - 329)) | (1L << (OVERRIDING - 329)) | (1L << (PACKAGE - 329)) | (1L << (PARALLEL_ENABLE - 329)) | (1L << (PARAMETERS - 329)) | (1L << (PARENT - 329)) | (1L << (PARTITION - 329)) | (1L << (PASSING - 329)) | (1L << (PATH - 329)) | (1L << (PIPELINED - 329)) | (1L << (PLAN - 329)) | (1L << (PLS_INTEGER - 329)) | (1L << (POSITIVE - 329)) | (1L << (POSITIVEN - 329)) | (1L << (PRAGMA - 329)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (PREBUILT - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)) | (1L << (PRESENT - 393)) | (1L << (PRIMARY - 393)) | (1L << (PUBLIC - 393)) | (1L << (RAISE - 393)) | (1L << (RANGE - 393)) | (1L << (RAW - 393)) | (1L << (READ - 393)) | (1L << (REAL - 393)) | (1L << (RECORD - 393)) | (1L << (REDUCED - 393)) | (1L << (REF - 393)) | (1L << (REFERENCE - 393)) | (1L << (REFERENCING - 393)) | (1L << (REFRESH - 393)) | (1L << (REJECT - 393)) | (1L << (RELIES_ON - 393)) | (1L << (RENAME - 393)) | (1L << (REPLACE - 393)) | (1L << (RESPECT - 393)) | (1L << (RESTRICT_REFERENCES - 393)) | (1L << (RESULT - 393)) | (1L << (RESULT_CACHE - 393)) | (1L << (RETURN - 393)) | (1L << (RETURNING - 393)) | (1L << (REUSE - 393)) | (1L << (REVERSE - 393)) | (1L << (REWRITE - 393)) | (1L << (RIGHT - 393)) | (1L << (ROLE - 393)) | (1L << (ROLLBACK - 393)) | (1L << (ROLLUP - 393)) | (1L << (ROW - 393)) | (1L << (ROWID - 393)) | (1L << (ROWS - 393)) | (1L << (RULES - 393)) | (1L << (SAMPLE - 393)) | (1L << (SAVE - 393)) | (1L << (SAVEPOINT - 393)) | (1L << (SCHEMA - 393)) | (1L << (SCHEMACHECK - 393)) | (1L << (SCN - 393)) | (1L << (SECOND - 393)))) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & ((1L << (SEED - 458)) | (1L << (SEGMENT - 458)) | (1L << (SELF - 458)) | (1L << (SEQUENTIAL - 458)) | (1L << (SERIALIZABLE - 458)) | (1L << (SERIALLY_REUSABLE - 458)) | (1L << (SERVERERROR - 458)) | (1L << (SESSIONTIMEZONE - 458)) | (1L << (SET - 458)) | (1L << (SETS - 458)) | (1L << (SETTINGS - 458)) | (1L << (SHOW - 458)) | (1L << (SHUTDOWN - 458)) | (1L << (SIBLINGS - 458)) | (1L << (SIGNTYPE - 458)) | (1L << (SIMPLE_INTEGER - 458)) | (1L << (SINGLE - 458)) | (1L << (SIZE - 458)) | (1L << (SKIP_ - 458)) | (1L << (SMALLINT - 458)) | (1L << (SNAPSHOT - 458)) | (1L << (SOME - 458)) | (1L << (SPECIFICATION - 458)) | (1L << (SQLDATA - 458)) | (1L << (SQLERROR - 458)) | (1L << (STANDALONE - 458)) | (1L << (STARTUP - 458)) | (1L << (STATEMENT - 458)) | (1L << (STATEMENT_ID - 458)) | (1L << (STATIC - 458)) | (1L << (STATISTICS - 458)) | (1L << (STRING - 458)) | (1L << (SUBMULTISET - 458)) | (1L << (SUBPARTITION - 458)) | (1L << (SUBSTITUTABLE - 458)) | (1L << (SUBSTRING - 458)) | (1L << (SUBTYPE - 458)) | (1L << (SUCCESS - 458)) | (1L << (SUSPEND - 458)) | (1L << (TABLES - 458)) | (1L << (TIME - 458)) | (1L << (TIMESTAMP - 458)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 458)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 458)) | (1L << (TIMESTAMP_UNCONSTRAINED - 458)))) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & ((1L << (TIMEZONE_ABBR - 522)) | (1L << (TIMEZONE_HOUR - 522)) | (1L << (TIMEZONE_MINUTE - 522)) | (1L << (TIMEZONE_REGION - 522)) | (1L << (TO_CHAR - 522)) | (1L << (TO_DATE - 522)) | (1L << (TRAILING - 522)) | (1L << (TRANSACTION - 522)) | (1L << (TRANSLATE - 522)) | (1L << (TREAT - 522)) | (1L << (TRIGGER - 522)) | (1L << (TRIM - 522)) | (1L << (TRUNCATE - 522)) | (1L << (TRUSTED - 522)) | (1L << (TYPE - 522)) | (1L << (UNBOUNDED - 522)) | (1L << (UNDER - 522)) | (1L << (UNIQUE - 522)) | (1L << (UNLIMITED - 522)) | (1L << (UNTIL - 522)) | (1L << (UPDATED - 522)) | (1L << (UPSERT - 522)) | (1L << (UROWID - 522)) | (1L << (USE - 522)) | (1L << (VALIDATE - 522)) | (1L << (VALUE - 522)) | (1L << (VARCHAR - 522)) | (1L << (VARCHAR2 - 522)) | (1L << (VARIABLE - 522)) | (1L << (VARRAY - 522)) | (1L << (VARYING - 522)) | (1L << (VERBOSE - 522)) | (1L << (VERSION - 522)) | (1L << (VERSIONS - 522)) | (1L << (VIEW - 522)) | (1L << (WAIT - 522)) | (1L << (WARNING - 522)) | (1L << (WELLFORMED - 522)) | (1L << (WHENEVER - 522)) | (1L << (WHILE - 522)) | (1L << (WITHOUT - 522)) | (1L << (WITHIN - 522)) | (1L << (WORK - 522)) | (1L << (WRITE - 522)) | (1L << (XML - 522)) | (1L << (XMLAGG - 522)) | (1L << (XMLATTRIBUTES - 522)))) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & ((1L << (XMLCAST - 586)) | (1L << (XMLCOLATTVAL - 586)) | (1L << (XMLELEMENT - 586)) | (1L << (XMLEXISTS - 586)) | (1L << (XMLFOREST - 586)) | (1L << (XMLNAMESPACES - 586)) | (1L << (XMLPARSE - 586)) | (1L << (XMLPI - 586)) | (1L << (XMLQUERY - 586)) | (1L << (XMLROOT - 586)) | (1L << (XMLSERIALIZE - 586)) | (1L << (XMLTABLE - 586)) | (1L << (YEAR - 586)) | (1L << (YES - 586)) | (1L << (YMINTERVAL_UNCONSTRAINED - 586)) | (1L << (ZONE - 586)) | (1L << (PREDICTION - 586)) | (1L << (PREDICTION_BOUNDS - 586)) | (1L << (PREDICTION_COST - 586)) | (1L << (PREDICTION_DETAILS - 586)) | (1L << (PREDICTION_PROBABILITY - 586)) | (1L << (PREDICTION_SET - 586)) | (1L << (CUME_DIST - 586)) | (1L << (DENSE_RANK - 586)) | (1L << (LISTAGG - 586)) | (1L << (PERCENT_RANK - 586)) | (1L << (PERCENTILE_CONT - 586)) | (1L << (PERCENTILE_DISC - 586)) | (1L << (RANK - 586)) | (1L << (AVG - 586)) | (1L << (CORR - 586)) | (1L << (LAG - 586)) | (1L << (LEAD - 586)) | (1L << (MAX - 586)) | (1L << (MEDIAN - 586)) | (1L << (MIN - 586)) | (1L << (NTILE - 586)) | (1L << (RATIO_TO_REPORT - 586)) | (1L << (ROW_NUMBER - 586)) | (1L << (SUM - 586)) | (1L << (VARIANCE - 586)) | (1L << (REGR_ - 586)) | (1L << (STDDEV - 586)) | (1L << (VAR_ - 586)) | (1L << (COVAR_ - 586)) | (1L << (NATIONAL_CHAR_STRING_LIT - 586)) | (1L << (CHAR_STRING - 586)) | (1L << (DELIMITED_ID - 586)))) != 0) || _la==COMMA || _la==REGULAR_ID );
			setState(1410);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_indexContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PLSQLParser.CREATE, 0); }
		public TerminalNode INDEX() { return getToken(PLSQLParser.INDEX, 0); }
		public Index_nameContext index_name() {
			return getRuleContext(Index_nameContext.class,0);
		}
		public TerminalNode ON() { return getToken(PLSQLParser.ON, 0); }
		public Cluster_index_clauseContext cluster_index_clause() {
			return getRuleContext(Cluster_index_clauseContext.class,0);
		}
		public Table_index_clauseContext table_index_clause() {
			return getRuleContext(Table_index_clauseContext.class,0);
		}
		public Bitmap_join_index_clauseContext bitmap_join_index_clause() {
			return getRuleContext(Bitmap_join_index_clauseContext.class,0);
		}
		public TerminalNode UNUSABLE() { return getToken(PLSQLParser.UNUSABLE, 0); }
		public TerminalNode UNIQUE() { return getToken(PLSQLParser.UNIQUE, 0); }
		public TerminalNode BITMAP() { return getToken(PLSQLParser.BITMAP, 0); }
		public Create_indexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_index; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterCreate_index(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitCreate_index(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitCreate_index(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_indexContext create_index() throws RecognitionException {
		Create_indexContext _localctx = new Create_indexContext(_ctx, getState());
		enterRule(_localctx, 34, RULE_create_index);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1412);
			match(CREATE);
			setState(1414);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==BITMAP || _la==UNIQUE) {
				{
				setState(1413);
				_la = _input.LA(1);
				if ( !(_la==BITMAP || _la==UNIQUE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(1416);
			match(INDEX);
			setState(1417);
			index_name();
			setState(1418);
			match(ON);
			setState(1422);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,60,_ctx) ) {
			case 1:
				{
				setState(1419);
				cluster_index_clause();
				}
				break;
			case 2:
				{
				setState(1420);
				table_index_clause();
				}
				break;
			case 3:
				{
				setState(1421);
				bitmap_join_index_clause();
				}
				break;
			}
			setState(1425);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==UNUSABLE) {
				{
				setState(1424);
				match(UNUSABLE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cluster_index_clauseContext extends ParserRuleContext {
		public TerminalNode CLUSTER() { return getToken(PLSQLParser.CLUSTER, 0); }
		public Cluster_nameContext cluster_name() {
			return getRuleContext(Cluster_nameContext.class,0);
		}
		public Index_attributesContext index_attributes() {
			return getRuleContext(Index_attributesContext.class,0);
		}
		public Cluster_index_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cluster_index_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterCluster_index_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitCluster_index_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitCluster_index_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cluster_index_clauseContext cluster_index_clause() throws RecognitionException {
		Cluster_index_clauseContext _localctx = new Cluster_index_clauseContext(_ctx, getState());
		enterRule(_localctx, 36, RULE_cluster_index_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1427);
			match(CLUSTER);
			setState(1428);
			cluster_name();
			setState(1430);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMPRESS || _la==FILESYSTEM_LIKE_LOGGING || _la==INITRANS || _la==INVISIBLE || _la==LOGGING || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (NOCOMPRESS - 320)) | (1L << (NOLOGGING - 320)) | (1L << (NOPARALLEL - 320)) | (1L << (NOSORT - 320)) | (1L << (PARALLEL - 320)) | (1L << (PCTFREE - 320)) | (1L << (PCTUSED - 320)))) != 0) || ((((_la - 435)) & ~0x3f) == 0 && ((1L << (_la - 435)) & ((1L << (REVERSE - 435)) | (1L << (SORT - 435)) | (1L << (STORAGE - 435)))) != 0) || _la==TABLESPACE || _la==VISIBLE) {
				{
				setState(1429);
				index_attributes();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cluster_nameContext extends ParserRuleContext {
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public TerminalNode PERIOD() { return getToken(PLSQLParser.PERIOD, 0); }
		public Cluster_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cluster_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterCluster_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitCluster_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitCluster_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cluster_nameContext cluster_name() throws RecognitionException {
		Cluster_nameContext _localctx = new Cluster_nameContext(_ctx, getState());
		enterRule(_localctx, 38, RULE_cluster_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1435);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,63,_ctx) ) {
			case 1:
				{
				setState(1432);
				id_expression();
				setState(1433);
				match(PERIOD);
				}
				break;
			}
			setState(1437);
			id_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Index_attributesContext extends ParserRuleContext {
		public List<Physical_attributes_clauseContext> physical_attributes_clause() {
			return getRuleContexts(Physical_attributes_clauseContext.class);
		}
		public Physical_attributes_clauseContext physical_attributes_clause(int i) {
			return getRuleContext(Physical_attributes_clauseContext.class,i);
		}
		public List<Logging_clauseContext> logging_clause() {
			return getRuleContexts(Logging_clauseContext.class);
		}
		public Logging_clauseContext logging_clause(int i) {
			return getRuleContext(Logging_clauseContext.class,i);
		}
		public List<TerminalNode> TABLESPACE() { return getTokens(PLSQLParser.TABLESPACE); }
		public TerminalNode TABLESPACE(int i) {
			return getToken(PLSQLParser.TABLESPACE, i);
		}
		public List<Key_compressionContext> key_compression() {
			return getRuleContexts(Key_compressionContext.class);
		}
		public Key_compressionContext key_compression(int i) {
			return getRuleContext(Key_compressionContext.class,i);
		}
		public List<Sort_or_nosortContext> sort_or_nosort() {
			return getRuleContexts(Sort_or_nosortContext.class);
		}
		public Sort_or_nosortContext sort_or_nosort(int i) {
			return getRuleContext(Sort_or_nosortContext.class,i);
		}
		public List<TerminalNode> REVERSE() { return getTokens(PLSQLParser.REVERSE); }
		public TerminalNode REVERSE(int i) {
			return getToken(PLSQLParser.REVERSE, i);
		}
		public List<Visible_or_invisibleContext> visible_or_invisible() {
			return getRuleContexts(Visible_or_invisibleContext.class);
		}
		public Visible_or_invisibleContext visible_or_invisible(int i) {
			return getRuleContext(Visible_or_invisibleContext.class,i);
		}
		public List<Parallel_clauseContext> parallel_clause() {
			return getRuleContexts(Parallel_clauseContext.class);
		}
		public Parallel_clauseContext parallel_clause(int i) {
			return getRuleContext(Parallel_clauseContext.class,i);
		}
		public List<TablespaceContext> tablespace() {
			return getRuleContexts(TablespaceContext.class);
		}
		public TablespaceContext tablespace(int i) {
			return getRuleContext(TablespaceContext.class,i);
		}
		public List<TerminalNode> DEFAULT() { return getTokens(PLSQLParser.DEFAULT); }
		public TerminalNode DEFAULT(int i) {
			return getToken(PLSQLParser.DEFAULT, i);
		}
		public Index_attributesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_index_attributes; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterIndex_attributes(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitIndex_attributes(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitIndex_attributes(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Index_attributesContext index_attributes() throws RecognitionException {
		Index_attributesContext _localctx = new Index_attributesContext(_ctx, getState());
		enterRule(_localctx, 40, RULE_index_attributes);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1451); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					setState(1451);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case INITRANS:
					case PCTFREE:
					case PCTUSED:
					case STORAGE:
						{
						setState(1439);
						physical_attributes_clause();
						}
						break;
					case FILESYSTEM_LIKE_LOGGING:
					case LOGGING:
					case NOLOGGING:
						{
						setState(1440);
						logging_clause();
						}
						break;
					case TABLESPACE:
						{
						setState(1441);
						match(TABLESPACE);
						setState(1444);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case A_LETTER:
						case ADD:
						case AFTER:
						case AGENT:
						case AGGREGATE:
						case ANALYZE:
						case ARRAY:
						case ASSOCIATE:
						case AT:
						case ATTRIBUTE:
						case AUDIT:
						case AUTHID:
						case AUTO:
						case AUTOMATIC:
						case AUTONOMOUS_TRANSACTION:
						case BATCH:
						case BEFORE:
						case BFILE:
						case BINARY_DOUBLE:
						case BINARY_FLOAT:
						case BINARY_INTEGER:
						case BUILD:
						case BLOB:
						case BLOCK:
						case BODY:
						case BOOLEAN:
						case BOTH:
						case BULK:
						case BYTE:
						case C_LETTER:
						case CALL:
						case CANONICAL:
						case CASCADE:
						case CAST:
						case CHAR:
						case CHAR_CS:
						case CHARACTER:
						case CHR:
						case CLOB:
						case CLOSE:
						case CLUSTER:
						case COALESCE:
						case COLLECT:
						case COLUMNS:
						case COMMENT:
						case COMMIT:
						case COMMITTED:
						case COMPATIBILITY:
						case COMPILE:
						case COMPLETE:
						case COMPOUND:
						case CONCAT:
						case CONSTANT:
						case CONSTRAINT:
						case CONSTRAINTS:
						case CONSTRUCTOR:
						case CONTENT:
						case CONTEXT:
						case CONTINUE:
						case CONVERT:
						case CORRUPT_XID:
						case CORRUPT_XID_ALL:
						case COST:
						case COUNT:
						case CROSS:
						case CUBE:
						case CURRENT_USER:
						case CURSOR:
						case CUSTOMDATUM:
						case CYCLE:
						case DATA:
						case DATABASE:
						case DATE:
						case DAY:
						case DB_ROLE_CHANGE:
						case DBTIMEZONE:
						case DDL:
						case DEBUG:
						case DEC:
						case DECIMAL:
						case DECODE:
						case DECOMPOSE:
						case DECREMENT:
						case DEFAULTS:
						case DEFERRED:
						case DEFINER:
						case DEMAND:
						case DETERMINISTIC:
						case DIMENSION:
						case DISABLE:
						case DISASSOCIATE:
						case DOCUMENT:
						case DOUBLE:
						case DSINTERVAL_UNCONSTRAINED:
						case EACH:
						case EDITIONING:
						case ELEMENT:
						case EMPTY:
						case ENABLE:
						case ENCODING:
						case ENFORCED:
						case ENTITYESCAPING:
						case ERR:
						case ERRORS:
						case ESCAPE:
						case EVALNAME:
						case EXCEPTION:
						case EXCEPTION_INIT:
						case EXCEPTIONS:
						case EXCLUDE:
						case EXECUTE:
						case EXIT:
						case EXPLAIN:
						case EXTERNAL:
						case EXTRACT:
						case FAILURE:
						case FAST:
						case FINAL:
						case FIRST:
						case FIRST_VALUE:
						case FLOAT:
						case FOLLOWING:
						case FOLLOWS:
						case FORALL:
						case FORCE:
						case FULL:
						case FUNCTION:
						case GROUPING:
						case HASH:
						case HIDE:
						case HOUR:
						case IGNORE:
						case IMMEDIATE:
						case INCLUDE:
						case INCLUDING:
						case INCREMENT:
						case INDENT:
						case INDEXED:
						case INDICATOR:
						case INDICES:
						case INFINITE:
						case INLINE:
						case INNER:
						case INOUT:
						case INSTANTIABLE:
						case INSTEAD:
						case INT:
						case INTEGER:
						case INTERVAL:
						case INVALIDATE:
						case ISOLATION:
						case ITERATE:
						case JAVA:
						case JOIN:
						case KEEP:
						case LANGUAGE:
						case LAST:
						case LAST_VALUE:
						case LEADING:
						case LEFT:
						case LEVEL:
						case LIBRARY:
						case LIKE2:
						case LIKE4:
						case LIKEC:
						case LIMIT:
						case LIST:
						case LOCAL:
						case LOCKED:
						case LOG:
						case LOGOFF:
						case LOGON:
						case LONG:
						case LOOP:
						case MAIN:
						case MAP:
						case MASTER:
						case MATCHED:
						case MAXVALUE:
						case MEASURES:
						case MEMBER:
						case MERGE:
						case MINUTE:
						case MINVALUE:
						case MLSLABEL:
						case MODEL:
						case MODIFY:
						case MONTH:
						case MULTISET:
						case NAME:
						case NAN:
						case NATURAL:
						case NATURALN:
						case NAV:
						case NCHAR:
						case NCHAR_CS:
						case NCLOB:
						case NESTED:
						case NEVER:
						case NEW:
						case NO:
						case NOAUDIT:
						case NOCOPY:
						case NOCYCLE:
						case NOENTITYESCAPING:
						case NONE:
						case NOSCHEMACHECK:
						case NVL:
						case NULLS:
						case NUMBER:
						case NUMERIC:
						case NVARCHAR2:
						case MATERIALIZED:
						case OBJECT:
						case OFF:
						case OID:
						case OLD:
						case ONLY:
						case OPEN:
						case ORADATA:
						case ORDINALITY:
						case OSERROR:
						case OUT:
						case OUTER:
						case OVER:
						case OVERRIDING:
						case PACKAGE:
						case PARALLEL_ENABLE:
						case PARAMETERS:
						case PARENT:
						case PARTITION:
						case PASSING:
						case PATH:
						case PIPELINED:
						case PLAN:
						case PLS_INTEGER:
						case POSITIVE:
						case POSITIVEN:
						case PRAGMA:
						case PREBUILT:
						case PRECEDING:
						case PRECISION:
						case PRESENT:
						case PUBLIC:
						case RAISE:
						case RANGE:
						case RAW:
						case READ:
						case REAL:
						case RECORD:
						case REDUCED:
						case REF:
						case REFERENCE:
						case REFERENCING:
						case REFRESH:
						case REJECT:
						case RELIES_ON:
						case RENAME:
						case REPLACE:
						case RESPECT:
						case RESTRICT_REFERENCES:
						case RESULT:
						case RESULT_CACHE:
						case RETURN:
						case RETURNING:
						case REUSE:
						case REVERSE:
						case REWRITE:
						case RIGHT:
						case ROLE:
						case ROLLBACK:
						case ROLLUP:
						case ROW:
						case ROWID:
						case ROWS:
						case RULES:
						case SAMPLE:
						case SAVE:
						case SAVEPOINT:
						case SCHEMA:
						case SCHEMACHECK:
						case SCN:
						case SECOND:
						case SEED:
						case SEGMENT:
						case SELF:
						case SEQUENTIAL:
						case SERIALIZABLE:
						case SERIALLY_REUSABLE:
						case SERVERERROR:
						case SESSIONTIMEZONE:
						case SET:
						case SETS:
						case SETTINGS:
						case SHOW:
						case SHUTDOWN:
						case SIBLINGS:
						case SIGNTYPE:
						case SIMPLE_INTEGER:
						case SINGLE:
						case SIZE:
						case SKIP_:
						case SMALLINT:
						case SNAPSHOT:
						case SOME:
						case SPECIFICATION:
						case SQLDATA:
						case SQLERROR:
						case STANDALONE:
						case STARTUP:
						case STATEMENT:
						case STATEMENT_ID:
						case STATIC:
						case STATISTICS:
						case STRING:
						case SUBMULTISET:
						case SUBPARTITION:
						case SUBSTITUTABLE:
						case SUBSTRING:
						case SUBTYPE:
						case SUCCESS:
						case SUSPEND:
						case TABLES:
						case TIME:
						case TIMESTAMP:
						case TIMESTAMP_LTZ_UNCONSTRAINED:
						case TIMESTAMP_TZ_UNCONSTRAINED:
						case TIMESTAMP_UNCONSTRAINED:
						case TIMEZONE_ABBR:
						case TIMEZONE_HOUR:
						case TIMEZONE_MINUTE:
						case TIMEZONE_REGION:
						case TO_CHAR:
						case TO_DATE:
						case TRAILING:
						case TRANSACTION:
						case TRANSLATE:
						case TREAT:
						case TRIGGER:
						case TRIM:
						case TRUNCATE:
						case TRUSTED:
						case TYPE:
						case UNBOUNDED:
						case UNDER:
						case UNLIMITED:
						case UNTIL:
						case UPDATED:
						case UPSERT:
						case UROWID:
						case USE:
						case VALIDATE:
						case VALUE:
						case VARCHAR:
						case VARCHAR2:
						case VARIABLE:
						case VARRAY:
						case VARYING:
						case VERBOSE:
						case VERSION:
						case VERSIONS:
						case VIEW:
						case WAIT:
						case WARNING:
						case WELLFORMED:
						case WHENEVER:
						case WHILE:
						case WITHOUT:
						case WITHIN:
						case WORK:
						case WRITE:
						case XML:
						case XMLAGG:
						case XMLATTRIBUTES:
						case XMLCAST:
						case XMLCOLATTVAL:
						case XMLELEMENT:
						case XMLEXISTS:
						case XMLFOREST:
						case XMLNAMESPACES:
						case XMLPARSE:
						case XMLPI:
						case XMLQUERY:
						case XMLROOT:
						case XMLSERIALIZE:
						case XMLTABLE:
						case YEAR:
						case YES:
						case YMINTERVAL_UNCONSTRAINED:
						case ZONE:
						case PREDICTION:
						case PREDICTION_BOUNDS:
						case PREDICTION_COST:
						case PREDICTION_DETAILS:
						case PREDICTION_PROBABILITY:
						case PREDICTION_SET:
						case CUME_DIST:
						case DENSE_RANK:
						case LISTAGG:
						case PERCENT_RANK:
						case PERCENTILE_CONT:
						case PERCENTILE_DISC:
						case RANK:
						case AVG:
						case CORR:
						case LAG:
						case LEAD:
						case MAX:
						case MEDIAN:
						case MIN:
						case NTILE:
						case RATIO_TO_REPORT:
						case ROW_NUMBER:
						case SUM:
						case VARIANCE:
						case REGR_:
						case STDDEV:
						case VAR_:
						case COVAR_:
						case REGULAR_ID:
							{
							setState(1442);
							tablespace();
							}
							break;
						case DEFAULT:
							{
							setState(1443);
							match(DEFAULT);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;
					case COMPRESS:
					case NOCOMPRESS:
						{
						setState(1446);
						key_compression();
						}
						break;
					case NOSORT:
					case SORT:
						{
						setState(1447);
						sort_or_nosort();
						}
						break;
					case REVERSE:
						{
						setState(1448);
						match(REVERSE);
						}
						break;
					case INVISIBLE:
					case VISIBLE:
						{
						setState(1449);
						visible_or_invisible();
						}
						break;
					case NOPARALLEL:
					case PARALLEL:
						{
						setState(1450);
						parallel_clause();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1453); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,66,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TablespaceContext extends ParserRuleContext {
		public Regular_idContext regular_id() {
			return getRuleContext(Regular_idContext.class,0);
		}
		public TablespaceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tablespace; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterTablespace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitTablespace(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitTablespace(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TablespaceContext tablespace() throws RecognitionException {
		TablespaceContext _localctx = new TablespaceContext(_ctx, getState());
		enterRule(_localctx, 42, RULE_tablespace);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1455);
			regular_id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Key_compressionContext extends ParserRuleContext {
		public TerminalNode NOCOMPRESS() { return getToken(PLSQLParser.NOCOMPRESS, 0); }
		public TerminalNode COMPRESS() { return getToken(PLSQLParser.COMPRESS, 0); }
		public TerminalNode UNSIGNED_INTEGER() { return getToken(PLSQLParser.UNSIGNED_INTEGER, 0); }
		public Key_compressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_key_compression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterKey_compression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitKey_compression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitKey_compression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Key_compressionContext key_compression() throws RecognitionException {
		Key_compressionContext _localctx = new Key_compressionContext(_ctx, getState());
		enterRule(_localctx, 44, RULE_key_compression);
		try {
			setState(1460);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NOCOMPRESS:
				enterOuterAlt(_localctx, 1);
				{
				setState(1457);
				match(NOCOMPRESS);
				}
				break;
			case COMPRESS:
				enterOuterAlt(_localctx, 2);
				{
				setState(1458);
				match(COMPRESS);
				setState(1459);
				match(UNSIGNED_INTEGER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sort_or_nosortContext extends ParserRuleContext {
		public TerminalNode SORT() { return getToken(PLSQLParser.SORT, 0); }
		public TerminalNode NOSORT() { return getToken(PLSQLParser.NOSORT, 0); }
		public Sort_or_nosortContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sort_or_nosort; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterSort_or_nosort(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitSort_or_nosort(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitSort_or_nosort(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sort_or_nosortContext sort_or_nosort() throws RecognitionException {
		Sort_or_nosortContext _localctx = new Sort_or_nosortContext(_ctx, getState());
		enterRule(_localctx, 46, RULE_sort_or_nosort);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1462);
			_la = _input.LA(1);
			if ( !(_la==NOSORT || _la==SORT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Visible_or_invisibleContext extends ParserRuleContext {
		public TerminalNode VISIBLE() { return getToken(PLSQLParser.VISIBLE, 0); }
		public TerminalNode INVISIBLE() { return getToken(PLSQLParser.INVISIBLE, 0); }
		public Visible_or_invisibleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_visible_or_invisible; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterVisible_or_invisible(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitVisible_or_invisible(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitVisible_or_invisible(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Visible_or_invisibleContext visible_or_invisible() throws RecognitionException {
		Visible_or_invisibleContext _localctx = new Visible_or_invisibleContext(_ctx, getState());
		enterRule(_localctx, 48, RULE_visible_or_invisible);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1464);
			_la = _input.LA(1);
			if ( !(_la==INVISIBLE || _la==VISIBLE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Parallel_clauseContext extends ParserRuleContext {
		public Token parallel_count;
		public TerminalNode NOPARALLEL() { return getToken(PLSQLParser.NOPARALLEL, 0); }
		public TerminalNode PARALLEL() { return getToken(PLSQLParser.PARALLEL, 0); }
		public TerminalNode UNSIGNED_INTEGER() { return getToken(PLSQLParser.UNSIGNED_INTEGER, 0); }
		public Parallel_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parallel_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterParallel_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitParallel_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitParallel_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Parallel_clauseContext parallel_clause() throws RecognitionException {
		Parallel_clauseContext _localctx = new Parallel_clauseContext(_ctx, getState());
		enterRule(_localctx, 50, RULE_parallel_clause);
		int _la;
		try {
			setState(1471);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NOPARALLEL:
				enterOuterAlt(_localctx, 1);
				{
				setState(1466);
				match(NOPARALLEL);
				}
				break;
			case PARALLEL:
				enterOuterAlt(_localctx, 2);
				{
				setState(1467);
				match(PARALLEL);
				setState(1469);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==UNSIGNED_INTEGER) {
					{
					setState(1468);
					((Parallel_clauseContext)_localctx).parallel_count = match(UNSIGNED_INTEGER);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_index_clauseContext extends ParserRuleContext {
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(PLSQLParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PLSQLParser.RIGHT_PAREN, 0); }
		public Table_aliasContext table_alias() {
			return getRuleContext(Table_aliasContext.class,0);
		}
		public List<Index_exprContext> index_expr() {
			return getRuleContexts(Index_exprContext.class);
		}
		public Index_exprContext index_expr(int i) {
			return getRuleContext(Index_exprContext.class,i);
		}
		public Index_propertiesContext index_properties() {
			return getRuleContext(Index_propertiesContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLSQLParser.COMMA, i);
		}
		public List<TerminalNode> ASC() { return getTokens(PLSQLParser.ASC); }
		public TerminalNode ASC(int i) {
			return getToken(PLSQLParser.ASC, i);
		}
		public List<TerminalNode> DESC() { return getTokens(PLSQLParser.DESC); }
		public TerminalNode DESC(int i) {
			return getToken(PLSQLParser.DESC, i);
		}
		public Table_index_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_index_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterTable_index_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitTable_index_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitTable_index_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_index_clauseContext table_index_clause() throws RecognitionException {
		Table_index_clauseContext _localctx = new Table_index_clauseContext(_ctx, getState());
		enterRule(_localctx, 52, RULE_table_index_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1473);
			tableview_name();
			setState(1475);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << AS) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BUILD) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (CHR - 65)) | (1L << (CLOB - 65)) | (1L << (CLOSE - 65)) | (1L << (CLUSTER - 65)) | (1L << (COALESCE - 65)) | (1L << (COLLECT - 65)) | (1L << (COLUMNS - 65)) | (1L << (COMMENT - 65)) | (1L << (COMMIT - 65)) | (1L << (COMMITTED - 65)) | (1L << (COMPATIBILITY - 65)) | (1L << (COMPILE - 65)) | (1L << (COMPLETE - 65)) | (1L << (COMPOUND - 65)) | (1L << (CONCAT - 65)) | (1L << (CONSTANT - 65)) | (1L << (CONSTRAINT - 65)) | (1L << (CONSTRAINTS - 65)) | (1L << (CONSTRUCTOR - 65)) | (1L << (CONTENT - 65)) | (1L << (CONTEXT - 65)) | (1L << (CONTINUE - 65)) | (1L << (CONVERT - 65)) | (1L << (CORRUPT_XID - 65)) | (1L << (CORRUPT_XID_ALL - 65)) | (1L << (COST - 65)) | (1L << (COUNT - 65)) | (1L << (CROSS - 65)) | (1L << (CUBE - 65)) | (1L << (CURRENT_USER - 65)) | (1L << (CURSOR - 65)) | (1L << (CUSTOMDATUM - 65)) | (1L << (CYCLE - 65)) | (1L << (DATA - 65)) | (1L << (DATABASE - 65)) | (1L << (DATE - 65)) | (1L << (DAY - 65)) | (1L << (DB_ROLE_CHANGE - 65)) | (1L << (DBTIMEZONE - 65)) | (1L << (DDL - 65)) | (1L << (DEBUG - 65)) | (1L << (DEC - 65)) | (1L << (DECIMAL - 65)) | (1L << (DECODE - 65)) | (1L << (DECOMPOSE - 65)) | (1L << (DECREMENT - 65)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DEMAND - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (EDITIONING - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENFORCED - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FAST - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)) | (1L << (FOLLOWING - 129)) | (1L << (FOLLOWS - 129)) | (1L << (FORALL - 129)) | (1L << (FORCE - 129)))) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & ((1L << (FULL - 197)) | (1L << (FUNCTION - 197)) | (1L << (GROUPING - 197)) | (1L << (HASH - 197)) | (1L << (HIDE - 197)) | (1L << (HOUR - 197)) | (1L << (IGNORE - 197)) | (1L << (IMMEDIATE - 197)) | (1L << (INCLUDE - 197)) | (1L << (INCLUDING - 197)) | (1L << (INCREMENT - 197)) | (1L << (INDENT - 197)) | (1L << (INDEXED - 197)) | (1L << (INDICATOR - 197)) | (1L << (INDICES - 197)) | (1L << (INFINITE - 197)) | (1L << (INLINE - 197)) | (1L << (INNER - 197)) | (1L << (INOUT - 197)) | (1L << (INSTANTIABLE - 197)) | (1L << (INSTEAD - 197)) | (1L << (INT - 197)) | (1L << (INTEGER - 197)) | (1L << (INTERVAL - 197)) | (1L << (INVALIDATE - 197)) | (1L << (ISOLATION - 197)) | (1L << (ITERATE - 197)) | (1L << (JAVA - 197)) | (1L << (JOIN - 197)) | (1L << (KEEP - 197)) | (1L << (LANGUAGE - 197)) | (1L << (LAST - 197)) | (1L << (LAST_VALUE - 197)) | (1L << (LEADING - 197)) | (1L << (LEFT - 197)) | (1L << (LEVEL - 197)))) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & ((1L << (LIBRARY - 261)) | (1L << (LIKE2 - 261)) | (1L << (LIKE4 - 261)) | (1L << (LIKEC - 261)) | (1L << (LIMIT - 261)) | (1L << (LIST - 261)) | (1L << (LOCAL - 261)) | (1L << (LOCKED - 261)) | (1L << (LOG - 261)) | (1L << (LOGOFF - 261)) | (1L << (LOGON - 261)) | (1L << (LONG - 261)) | (1L << (LOOP - 261)) | (1L << (MAIN - 261)) | (1L << (MAP - 261)) | (1L << (MASTER - 261)) | (1L << (MATCHED - 261)) | (1L << (MAXVALUE - 261)) | (1L << (MEASURES - 261)) | (1L << (MEMBER - 261)) | (1L << (MERGE - 261)) | (1L << (MINUTE - 261)) | (1L << (MINVALUE - 261)) | (1L << (MLSLABEL - 261)) | (1L << (MODEL - 261)) | (1L << (MODIFY - 261)) | (1L << (MONTH - 261)) | (1L << (MULTISET - 261)) | (1L << (NAME - 261)) | (1L << (NAN - 261)) | (1L << (NATURAL - 261)) | (1L << (NATURALN - 261)) | (1L << (NAV - 261)) | (1L << (NCHAR - 261)) | (1L << (NCHAR_CS - 261)) | (1L << (NCLOB - 261)) | (1L << (NESTED - 261)) | (1L << (NEVER - 261)) | (1L << (NEW - 261)) | (1L << (NO - 261)) | (1L << (NOAUDIT - 261)) | (1L << (NOCOPY - 261)) | (1L << (NOCYCLE - 261)) | (1L << (NOENTITYESCAPING - 261)))) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & ((1L << (NONE - 329)) | (1L << (NOSCHEMACHECK - 329)) | (1L << (NVL - 329)) | (1L << (NULLS - 329)) | (1L << (NUMBER - 329)) | (1L << (NUMERIC - 329)) | (1L << (NVARCHAR2 - 329)) | (1L << (MATERIALIZED - 329)) | (1L << (OBJECT - 329)) | (1L << (OFF - 329)) | (1L << (OID - 329)) | (1L << (OLD - 329)) | (1L << (ONLY - 329)) | (1L << (OPEN - 329)) | (1L << (ORADATA - 329)) | (1L << (ORDINALITY - 329)) | (1L << (OSERROR - 329)) | (1L << (OUT - 329)) | (1L << (OUTER - 329)) | (1L << (OVER - 329)) | (1L << (OVERRIDING - 329)) | (1L << (PACKAGE - 329)) | (1L << (PARALLEL_ENABLE - 329)) | (1L << (PARAMETERS - 329)) | (1L << (PARENT - 329)) | (1L << (PARTITION - 329)) | (1L << (PASSING - 329)) | (1L << (PATH - 329)) | (1L << (PIPELINED - 329)) | (1L << (PLAN - 329)) | (1L << (PLS_INTEGER - 329)) | (1L << (POSITIVE - 329)) | (1L << (POSITIVEN - 329)) | (1L << (PRAGMA - 329)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (PREBUILT - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)) | (1L << (PRESENT - 393)) | (1L << (PUBLIC - 393)) | (1L << (RAISE - 393)) | (1L << (RANGE - 393)) | (1L << (RAW - 393)) | (1L << (READ - 393)) | (1L << (REAL - 393)) | (1L << (RECORD - 393)) | (1L << (REDUCED - 393)) | (1L << (REF - 393)) | (1L << (REFERENCE - 393)) | (1L << (REFERENCING - 393)) | (1L << (REFRESH - 393)) | (1L << (REJECT - 393)) | (1L << (RELIES_ON - 393)) | (1L << (RENAME - 393)) | (1L << (REPLACE - 393)) | (1L << (RESPECT - 393)) | (1L << (RESTRICT_REFERENCES - 393)) | (1L << (RESULT - 393)) | (1L << (RESULT_CACHE - 393)) | (1L << (RETURN - 393)) | (1L << (RETURNING - 393)) | (1L << (REUSE - 393)) | (1L << (REVERSE - 393)) | (1L << (REWRITE - 393)) | (1L << (RIGHT - 393)) | (1L << (ROLE - 393)) | (1L << (ROLLBACK - 393)) | (1L << (ROLLUP - 393)) | (1L << (ROW - 393)) | (1L << (ROWID - 393)) | (1L << (ROWS - 393)) | (1L << (RULES - 393)) | (1L << (SAMPLE - 393)) | (1L << (SAVE - 393)) | (1L << (SAVEPOINT - 393)) | (1L << (SCHEMA - 393)) | (1L << (SCHEMACHECK - 393)) | (1L << (SCN - 393)) | (1L << (SECOND - 393)))) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & ((1L << (SEED - 458)) | (1L << (SEGMENT - 458)) | (1L << (SELF - 458)) | (1L << (SEQUENTIAL - 458)) | (1L << (SERIALIZABLE - 458)) | (1L << (SERIALLY_REUSABLE - 458)) | (1L << (SERVERERROR - 458)) | (1L << (SESSIONTIMEZONE - 458)) | (1L << (SET - 458)) | (1L << (SETS - 458)) | (1L << (SETTINGS - 458)) | (1L << (SHOW - 458)) | (1L << (SHUTDOWN - 458)) | (1L << (SIBLINGS - 458)) | (1L << (SIGNTYPE - 458)) | (1L << (SIMPLE_INTEGER - 458)) | (1L << (SINGLE - 458)) | (1L << (SIZE - 458)) | (1L << (SKIP_ - 458)) | (1L << (SMALLINT - 458)) | (1L << (SNAPSHOT - 458)) | (1L << (SOME - 458)) | (1L << (SPECIFICATION - 458)) | (1L << (SQLDATA - 458)) | (1L << (SQLERROR - 458)) | (1L << (STANDALONE - 458)) | (1L << (STARTUP - 458)) | (1L << (STATEMENT - 458)) | (1L << (STATEMENT_ID - 458)) | (1L << (STATIC - 458)) | (1L << (STATISTICS - 458)) | (1L << (STRING - 458)) | (1L << (SUBMULTISET - 458)) | (1L << (SUBPARTITION - 458)) | (1L << (SUBSTITUTABLE - 458)) | (1L << (SUBSTRING - 458)) | (1L << (SUBTYPE - 458)) | (1L << (SUCCESS - 458)) | (1L << (SUSPEND - 458)) | (1L << (TABLES - 458)) | (1L << (TIME - 458)) | (1L << (TIMESTAMP - 458)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 458)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 458)) | (1L << (TIMESTAMP_UNCONSTRAINED - 458)))) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & ((1L << (TIMEZONE_ABBR - 522)) | (1L << (TIMEZONE_HOUR - 522)) | (1L << (TIMEZONE_MINUTE - 522)) | (1L << (TIMEZONE_REGION - 522)) | (1L << (TO_CHAR - 522)) | (1L << (TO_DATE - 522)) | (1L << (TRAILING - 522)) | (1L << (TRANSACTION - 522)) | (1L << (TRANSLATE - 522)) | (1L << (TREAT - 522)) | (1L << (TRIGGER - 522)) | (1L << (TRIM - 522)) | (1L << (TRUNCATE - 522)) | (1L << (TRUSTED - 522)) | (1L << (TYPE - 522)) | (1L << (UNBOUNDED - 522)) | (1L << (UNDER - 522)) | (1L << (UNLIMITED - 522)) | (1L << (UNTIL - 522)) | (1L << (UPDATED - 522)) | (1L << (UPSERT - 522)) | (1L << (UROWID - 522)) | (1L << (USE - 522)) | (1L << (VALIDATE - 522)) | (1L << (VALUE - 522)) | (1L << (VARCHAR - 522)) | (1L << (VARCHAR2 - 522)) | (1L << (VARIABLE - 522)) | (1L << (VARRAY - 522)) | (1L << (VARYING - 522)) | (1L << (VERBOSE - 522)) | (1L << (VERSION - 522)) | (1L << (VERSIONS - 522)) | (1L << (VIEW - 522)) | (1L << (WAIT - 522)) | (1L << (WARNING - 522)) | (1L << (WELLFORMED - 522)) | (1L << (WHENEVER - 522)) | (1L << (WHILE - 522)) | (1L << (WITHOUT - 522)) | (1L << (WITHIN - 522)) | (1L << (WORK - 522)) | (1L << (WRITE - 522)) | (1L << (XML - 522)) | (1L << (XMLAGG - 522)) | (1L << (XMLATTRIBUTES - 522)))) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & ((1L << (XMLCAST - 586)) | (1L << (XMLCOLATTVAL - 586)) | (1L << (XMLELEMENT - 586)) | (1L << (XMLEXISTS - 586)) | (1L << (XMLFOREST - 586)) | (1L << (XMLNAMESPACES - 586)) | (1L << (XMLPARSE - 586)) | (1L << (XMLPI - 586)) | (1L << (XMLQUERY - 586)) | (1L << (XMLROOT - 586)) | (1L << (XMLSERIALIZE - 586)) | (1L << (XMLTABLE - 586)) | (1L << (YEAR - 586)) | (1L << (YES - 586)) | (1L << (YMINTERVAL_UNCONSTRAINED - 586)) | (1L << (ZONE - 586)) | (1L << (PREDICTION - 586)) | (1L << (PREDICTION_BOUNDS - 586)) | (1L << (PREDICTION_COST - 586)) | (1L << (PREDICTION_DETAILS - 586)) | (1L << (PREDICTION_PROBABILITY - 586)) | (1L << (PREDICTION_SET - 586)) | (1L << (CUME_DIST - 586)) | (1L << (DENSE_RANK - 586)) | (1L << (LISTAGG - 586)) | (1L << (PERCENT_RANK - 586)) | (1L << (PERCENTILE_CONT - 586)) | (1L << (PERCENTILE_DISC - 586)) | (1L << (RANK - 586)) | (1L << (AVG - 586)) | (1L << (CORR - 586)) | (1L << (LAG - 586)) | (1L << (LEAD - 586)) | (1L << (MAX - 586)) | (1L << (MEDIAN - 586)) | (1L << (MIN - 586)) | (1L << (NTILE - 586)) | (1L << (RATIO_TO_REPORT - 586)) | (1L << (ROW_NUMBER - 586)) | (1L << (SUM - 586)) | (1L << (VARIANCE - 586)) | (1L << (REGR_ - 586)) | (1L << (STDDEV - 586)) | (1L << (VAR_ - 586)) | (1L << (COVAR_ - 586)) | (1L << (NATIONAL_CHAR_STRING_LIT - 586)) | (1L << (CHAR_STRING - 586)) | (1L << (DELIMITED_ID - 586)))) != 0) || _la==REGULAR_ID) {
				{
				setState(1474);
				table_alias();
				}
			}

			setState(1477);
			match(LEFT_PAREN);
			setState(1485); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1479);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(1478);
					match(COMMA);
					}
				}

				setState(1481);
				index_expr();
				setState(1483);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ASC || _la==DESC) {
					{
					setState(1482);
					_la = _input.LA(1);
					if ( !(_la==ASC || _la==DESC) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				}
				}
				setState(1487); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BUILD) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (CHR - 65)) | (1L << (CLOB - 65)) | (1L << (CLOSE - 65)) | (1L << (CLUSTER - 65)) | (1L << (COALESCE - 65)) | (1L << (COLLECT - 65)) | (1L << (COLUMNS - 65)) | (1L << (COMMENT - 65)) | (1L << (COMMIT - 65)) | (1L << (COMMITTED - 65)) | (1L << (COMPATIBILITY - 65)) | (1L << (COMPILE - 65)) | (1L << (COMPLETE - 65)) | (1L << (COMPOUND - 65)) | (1L << (CONCAT - 65)) | (1L << (CONNECT_BY_ROOT - 65)) | (1L << (CONSTANT - 65)) | (1L << (CONSTRAINT - 65)) | (1L << (CONSTRAINTS - 65)) | (1L << (CONSTRUCTOR - 65)) | (1L << (CONTENT - 65)) | (1L << (CONTEXT - 65)) | (1L << (CONTINUE - 65)) | (1L << (CONVERT - 65)) | (1L << (CORRUPT_XID - 65)) | (1L << (CORRUPT_XID_ALL - 65)) | (1L << (COST - 65)) | (1L << (COUNT - 65)) | (1L << (CROSS - 65)) | (1L << (CUBE - 65)) | (1L << (CURRENT_USER - 65)) | (1L << (CURSOR - 65)) | (1L << (CUSTOMDATUM - 65)) | (1L << (CYCLE - 65)) | (1L << (DATA - 65)) | (1L << (DATABASE - 65)) | (1L << (DATE - 65)) | (1L << (DAY - 65)) | (1L << (DB_ROLE_CHANGE - 65)) | (1L << (DBTIMEZONE - 65)) | (1L << (DDL - 65)) | (1L << (DEBUG - 65)) | (1L << (DEC - 65)) | (1L << (DECIMAL - 65)) | (1L << (DECODE - 65)) | (1L << (DECOMPOSE - 65)) | (1L << (DECREMENT - 65)) | (1L << (DEFAULT - 65)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DEMAND - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DISTINCT - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (EDITIONING - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENFORCED - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXISTS - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FALSE - 129)) | (1L << (FAST - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)) | (1L << (FOLLOWING - 129)) | (1L << (FOLLOWS - 129)) | (1L << (FORALL - 129)) | (1L << (FORCE - 129)))) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & ((1L << (FULL - 197)) | (1L << (FUNCTION - 197)) | (1L << (GROUPING - 197)) | (1L << (HASH - 197)) | (1L << (HIDE - 197)) | (1L << (HOUR - 197)) | (1L << (IGNORE - 197)) | (1L << (IMMEDIATE - 197)) | (1L << (INCLUDE - 197)) | (1L << (INCLUDING - 197)) | (1L << (INCREMENT - 197)) | (1L << (INDENT - 197)) | (1L << (INDEXED - 197)) | (1L << (INDICATOR - 197)) | (1L << (INDICES - 197)) | (1L << (INFINITE - 197)) | (1L << (INLINE - 197)) | (1L << (INNER - 197)) | (1L << (INOUT - 197)) | (1L << (INSTANTIABLE - 197)) | (1L << (INSTEAD - 197)) | (1L << (INT - 197)) | (1L << (INTEGER - 197)) | (1L << (INTERVAL - 197)) | (1L << (INVALIDATE - 197)) | (1L << (ISOLATION - 197)) | (1L << (ITERATE - 197)) | (1L << (JAVA - 197)) | (1L << (JOIN - 197)) | (1L << (KEEP - 197)) | (1L << (LANGUAGE - 197)) | (1L << (LAST - 197)) | (1L << (LAST_VALUE - 197)) | (1L << (LEADING - 197)) | (1L << (LEFT - 197)) | (1L << (LEVEL - 197)))) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & ((1L << (LIBRARY - 261)) | (1L << (LIKE2 - 261)) | (1L << (LIKE4 - 261)) | (1L << (LIKEC - 261)) | (1L << (LIMIT - 261)) | (1L << (LIST - 261)) | (1L << (LOCAL - 261)) | (1L << (LOCKED - 261)) | (1L << (LOG - 261)) | (1L << (LOGOFF - 261)) | (1L << (LOGON - 261)) | (1L << (LONG - 261)) | (1L << (LOOP - 261)) | (1L << (MAIN - 261)) | (1L << (MAP - 261)) | (1L << (MASTER - 261)) | (1L << (MATCHED - 261)) | (1L << (MAXVALUE - 261)) | (1L << (MEASURES - 261)) | (1L << (MEMBER - 261)) | (1L << (MERGE - 261)) | (1L << (MINUTE - 261)) | (1L << (MINVALUE - 261)) | (1L << (MLSLABEL - 261)) | (1L << (MODEL - 261)) | (1L << (MODIFY - 261)) | (1L << (MONTH - 261)) | (1L << (MULTISET - 261)) | (1L << (NAME - 261)) | (1L << (NAN - 261)) | (1L << (NATURAL - 261)) | (1L << (NATURALN - 261)) | (1L << (NAV - 261)) | (1L << (NCHAR - 261)) | (1L << (NCHAR_CS - 261)) | (1L << (NCLOB - 261)) | (1L << (NESTED - 261)) | (1L << (NEVER - 261)) | (1L << (NEW - 261)) | (1L << (NO - 261)) | (1L << (NOAUDIT - 261)) | (1L << (NOCOPY - 261)) | (1L << (NOCYCLE - 261)) | (1L << (NOENTITYESCAPING - 261)))) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & ((1L << (NONE - 329)) | (1L << (NOSCHEMACHECK - 329)) | (1L << (NOT - 329)) | (1L << (NVL - 329)) | (1L << (NULL - 329)) | (1L << (NULLS - 329)) | (1L << (NUMBER - 329)) | (1L << (NUMERIC - 329)) | (1L << (NVARCHAR2 - 329)) | (1L << (MATERIALIZED - 329)) | (1L << (OBJECT - 329)) | (1L << (OFF - 329)) | (1L << (OID - 329)) | (1L << (OLD - 329)) | (1L << (ONLY - 329)) | (1L << (OPEN - 329)) | (1L << (ORADATA - 329)) | (1L << (ORDINALITY - 329)) | (1L << (OSERROR - 329)) | (1L << (OUT - 329)) | (1L << (OUTER - 329)) | (1L << (OVER - 329)) | (1L << (OVERRIDING - 329)) | (1L << (PACKAGE - 329)) | (1L << (PARALLEL_ENABLE - 329)) | (1L << (PARAMETERS - 329)) | (1L << (PARENT - 329)) | (1L << (PARTITION - 329)) | (1L << (PASSING - 329)) | (1L << (PATH - 329)) | (1L << (PIPELINED - 329)) | (1L << (PLAN - 329)) | (1L << (PLS_INTEGER - 329)) | (1L << (POSITION - 329)) | (1L << (POSITIVE - 329)) | (1L << (POSITIVEN - 329)) | (1L << (PRAGMA - 329)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (PREBUILT - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)) | (1L << (PRESENT - 393)) | (1L << (PRIOR - 393)) | (1L << (PUBLIC - 393)) | (1L << (RAISE - 393)) | (1L << (RANGE - 393)) | (1L << (RAW - 393)) | (1L << (READ - 393)) | (1L << (REAL - 393)) | (1L << (RECORD - 393)) | (1L << (REDUCED - 393)) | (1L << (REF - 393)) | (1L << (REFERENCE - 393)) | (1L << (REFERENCING - 393)) | (1L << (REFRESH - 393)) | (1L << (REJECT - 393)) | (1L << (RELIES_ON - 393)) | (1L << (RENAME - 393)) | (1L << (REPLACE - 393)) | (1L << (RESPECT - 393)) | (1L << (RESTRICT_REFERENCES - 393)) | (1L << (RESULT - 393)) | (1L << (RESULT_CACHE - 393)) | (1L << (RETURN - 393)) | (1L << (RETURNING - 393)) | (1L << (REUSE - 393)) | (1L << (REVERSE - 393)) | (1L << (REWRITE - 393)) | (1L << (RIGHT - 393)) | (1L << (ROLE - 393)) | (1L << (ROLLBACK - 393)) | (1L << (ROLLUP - 393)) | (1L << (ROW - 393)) | (1L << (ROWID - 393)) | (1L << (ROWS - 393)) | (1L << (RULES - 393)) | (1L << (SAMPLE - 393)) | (1L << (SAVE - 393)) | (1L << (SAVEPOINT - 393)) | (1L << (SCHEMA - 393)) | (1L << (SCHEMACHECK - 393)) | (1L << (SCN - 393)) | (1L << (SECOND - 393)))) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & ((1L << (SEED - 458)) | (1L << (SEGMENT - 458)) | (1L << (SELECT - 458)) | (1L << (SELF - 458)) | (1L << (SEQUENTIAL - 458)) | (1L << (SERIALIZABLE - 458)) | (1L << (SERIALLY_REUSABLE - 458)) | (1L << (SERVERERROR - 458)) | (1L << (SESSIONTIMEZONE - 458)) | (1L << (SET - 458)) | (1L << (SETS - 458)) | (1L << (SETTINGS - 458)) | (1L << (SHOW - 458)) | (1L << (SHUTDOWN - 458)) | (1L << (SIBLINGS - 458)) | (1L << (SIGNTYPE - 458)) | (1L << (SIMPLE_INTEGER - 458)) | (1L << (SINGLE - 458)) | (1L << (SIZE - 458)) | (1L << (SKIP_ - 458)) | (1L << (SMALLINT - 458)) | (1L << (SNAPSHOT - 458)) | (1L << (SOME - 458)) | (1L << (SPECIFICATION - 458)) | (1L << (SQLDATA - 458)) | (1L << (SQLERROR - 458)) | (1L << (STANDALONE - 458)) | (1L << (STARTUP - 458)) | (1L << (STATEMENT - 458)) | (1L << (STATEMENT_ID - 458)) | (1L << (STATIC - 458)) | (1L << (STATISTICS - 458)) | (1L << (STRING - 458)) | (1L << (SUBMULTISET - 458)) | (1L << (SUBPARTITION - 458)) | (1L << (SUBSTITUTABLE - 458)) | (1L << (SUBSTRING - 458)) | (1L << (SUBTYPE - 458)) | (1L << (SUCCESS - 458)) | (1L << (SUSPEND - 458)) | (1L << (TABLES - 458)) | (1L << (TIME - 458)) | (1L << (TIMESTAMP - 458)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 458)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 458)) | (1L << (TIMESTAMP_UNCONSTRAINED - 458)))) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & ((1L << (TIMEZONE_ABBR - 522)) | (1L << (TIMEZONE_HOUR - 522)) | (1L << (TIMEZONE_MINUTE - 522)) | (1L << (TIMEZONE_REGION - 522)) | (1L << (TO_CHAR - 522)) | (1L << (TO_DATE - 522)) | (1L << (TRAILING - 522)) | (1L << (TRANSACTION - 522)) | (1L << (TRANSLATE - 522)) | (1L << (TREAT - 522)) | (1L << (TRIGGER - 522)) | (1L << (TRIM - 522)) | (1L << (TRUE - 522)) | (1L << (TRUNCATE - 522)) | (1L << (TRUSTED - 522)) | (1L << (TYPE - 522)) | (1L << (UNBOUNDED - 522)) | (1L << (UNDER - 522)) | (1L << (UNLIMITED - 522)) | (1L << (UNTIL - 522)) | (1L << (UPDATED - 522)) | (1L << (UPSERT - 522)) | (1L << (UROWID - 522)) | (1L << (USE - 522)) | (1L << (VALIDATE - 522)) | (1L << (VALUE - 522)) | (1L << (VARCHAR - 522)) | (1L << (VARCHAR2 - 522)) | (1L << (VARIABLE - 522)) | (1L << (VARRAY - 522)) | (1L << (VARYING - 522)) | (1L << (VERBOSE - 522)) | (1L << (VERSION - 522)) | (1L << (VERSIONS - 522)) | (1L << (VIEW - 522)) | (1L << (WAIT - 522)) | (1L << (WARNING - 522)) | (1L << (WELLFORMED - 522)) | (1L << (WHENEVER - 522)) | (1L << (WHILE - 522)) | (1L << (WITHOUT - 522)) | (1L << (WITHIN - 522)) | (1L << (WORK - 522)) | (1L << (WRITE - 522)) | (1L << (XML - 522)) | (1L << (XMLAGG - 522)) | (1L << (XMLATTRIBUTES - 522)))) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & ((1L << (XMLCAST - 586)) | (1L << (XMLCOLATTVAL - 586)) | (1L << (XMLELEMENT - 586)) | (1L << (XMLEXISTS - 586)) | (1L << (XMLFOREST - 586)) | (1L << (XMLNAMESPACES - 586)) | (1L << (XMLPARSE - 586)) | (1L << (XMLPI - 586)) | (1L << (XMLQUERY - 586)) | (1L << (XMLROOT - 586)) | (1L << (XMLSERIALIZE - 586)) | (1L << (XMLTABLE - 586)) | (1L << (YEAR - 586)) | (1L << (YES - 586)) | (1L << (YMINTERVAL_UNCONSTRAINED - 586)) | (1L << (ZONE - 586)) | (1L << (PREDICTION - 586)) | (1L << (PREDICTION_BOUNDS - 586)) | (1L << (PREDICTION_COST - 586)) | (1L << (PREDICTION_DETAILS - 586)) | (1L << (PREDICTION_PROBABILITY - 586)) | (1L << (PREDICTION_SET - 586)) | (1L << (CUME_DIST - 586)) | (1L << (DENSE_RANK - 586)) | (1L << (LISTAGG - 586)) | (1L << (PERCENT_RANK - 586)) | (1L << (PERCENTILE_CONT - 586)) | (1L << (PERCENTILE_DISC - 586)) | (1L << (RANK - 586)) | (1L << (AVG - 586)) | (1L << (CORR - 586)) | (1L << (LAG - 586)) | (1L << (LEAD - 586)) | (1L << (MAX - 586)) | (1L << (MEDIAN - 586)) | (1L << (MIN - 586)) | (1L << (NTILE - 586)) | (1L << (RATIO_TO_REPORT - 586)) | (1L << (ROW_NUMBER - 586)) | (1L << (SUM - 586)) | (1L << (VARIANCE - 586)) | (1L << (REGR_ - 586)) | (1L << (STDDEV - 586)) | (1L << (VAR_ - 586)) | (1L << (COVAR_ - 586)) | (1L << (NATIONAL_CHAR_STRING_LIT - 586)) | (1L << (UNSIGNED_INTEGER - 586)) | (1L << (APPROXIMATE_NUM_LIT - 586)) | (1L << (CHAR_STRING - 586)) | (1L << (DELIMITED_ID - 586)) | (1L << (LEFT_PAREN - 586)) | (1L << (PLUS_SIGN - 586)))) != 0) || ((((_la - 650)) & ~0x3f) == 0 && ((1L << (_la - 650)) & ((1L << (MINUS_SIGN - 650)) | (1L << (COMMA - 650)) | (1L << (BINDVAR - 650)) | (1L << (COLON - 650)) | (1L << (REGULAR_ID - 650)))) != 0) );
			setState(1489);
			match(RIGHT_PAREN);
			setState(1491);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMPRESS || ((((_la - 180)) & ~0x3f) == 0 && ((1L << (_la - 180)) & ((1L << (FILESYSTEM_LIKE_LOGGING - 180)) | (1L << (GLOBAL - 180)) | (1L << (INDEXTYPE - 180)) | (1L << (INITRANS - 180)))) != 0) || ((((_la - 244)) & ~0x3f) == 0 && ((1L << (_la - 244)) & ((1L << (INVISIBLE - 244)) | (1L << (LOCAL - 244)) | (1L << (LOGGING - 244)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (NOCOMPRESS - 320)) | (1L << (NOLOGGING - 320)) | (1L << (NOPARALLEL - 320)) | (1L << (NOSORT - 320)) | (1L << (PARALLEL - 320)) | (1L << (PCTFREE - 320)) | (1L << (PCTUSED - 320)))) != 0) || ((((_la - 435)) & ~0x3f) == 0 && ((1L << (_la - 435)) & ((1L << (REVERSE - 435)) | (1L << (SORT - 435)) | (1L << (STORAGE - 435)))) != 0) || _la==TABLESPACE || _la==VISIBLE) {
				{
				setState(1490);
				index_properties();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Index_exprContext extends ParserRuleContext {
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Index_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_index_expr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterIndex_expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitIndex_expr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitIndex_expr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Index_exprContext index_expr() throws RecognitionException {
		Index_exprContext _localctx = new Index_exprContext(_ctx, getState());
		enterRule(_localctx, 54, RULE_index_expr);
		try {
			setState(1495);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,75,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1493);
				column_name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1494);
				expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Index_propertiesContext extends ParserRuleContext {
		public List<Global_partitioned_indexContext> global_partitioned_index() {
			return getRuleContexts(Global_partitioned_indexContext.class);
		}
		public Global_partitioned_indexContext global_partitioned_index(int i) {
			return getRuleContext(Global_partitioned_indexContext.class,i);
		}
		public List<Local_partitioned_indexContext> local_partitioned_index() {
			return getRuleContexts(Local_partitioned_indexContext.class);
		}
		public Local_partitioned_indexContext local_partitioned_index(int i) {
			return getRuleContext(Local_partitioned_indexContext.class,i);
		}
		public List<Index_attributesContext> index_attributes() {
			return getRuleContexts(Index_attributesContext.class);
		}
		public Index_attributesContext index_attributes(int i) {
			return getRuleContext(Index_attributesContext.class,i);
		}
		public TerminalNode INDEXTYPE() { return getToken(PLSQLParser.INDEXTYPE, 0); }
		public TerminalNode IS() { return getToken(PLSQLParser.IS, 0); }
		public Domain_index_clauseContext domain_index_clause() {
			return getRuleContext(Domain_index_clauseContext.class,0);
		}
		public Xmlindex_clauseContext xmlindex_clause() {
			return getRuleContext(Xmlindex_clauseContext.class,0);
		}
		public Index_propertiesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_index_properties; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterIndex_properties(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitIndex_properties(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitIndex_properties(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Index_propertiesContext index_properties() throws RecognitionException {
		Index_propertiesContext _localctx = new Index_propertiesContext(_ctx, getState());
		enterRule(_localctx, 56, RULE_index_properties);
		int _la;
		try {
			setState(1510);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case COMPRESS:
			case FILESYSTEM_LIKE_LOGGING:
			case GLOBAL:
			case INITRANS:
			case INVISIBLE:
			case LOCAL:
			case LOGGING:
			case NOCOMPRESS:
			case NOLOGGING:
			case NOPARALLEL:
			case NOSORT:
			case PARALLEL:
			case PCTFREE:
			case PCTUSED:
			case REVERSE:
			case SORT:
			case STORAGE:
			case TABLESPACE:
			case VISIBLE:
				enterOuterAlt(_localctx, 1);
				{
				setState(1500); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					setState(1500);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case GLOBAL:
						{
						setState(1497);
						global_partitioned_index();
						}
						break;
					case LOCAL:
						{
						setState(1498);
						local_partitioned_index();
						}
						break;
					case COMPRESS:
					case FILESYSTEM_LIKE_LOGGING:
					case INITRANS:
					case INVISIBLE:
					case LOGGING:
					case NOCOMPRESS:
					case NOLOGGING:
					case NOPARALLEL:
					case NOSORT:
					case PARALLEL:
					case PCTFREE:
					case PCTUSED:
					case REVERSE:
					case SORT:
					case STORAGE:
					case TABLESPACE:
					case VISIBLE:
						{
						setState(1499);
						index_attributes();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					setState(1502); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==COMPRESS || ((((_la - 180)) & ~0x3f) == 0 && ((1L << (_la - 180)) & ((1L << (FILESYSTEM_LIKE_LOGGING - 180)) | (1L << (GLOBAL - 180)) | (1L << (INITRANS - 180)))) != 0) || ((((_la - 244)) & ~0x3f) == 0 && ((1L << (_la - 244)) & ((1L << (INVISIBLE - 244)) | (1L << (LOCAL - 244)) | (1L << (LOGGING - 244)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (NOCOMPRESS - 320)) | (1L << (NOLOGGING - 320)) | (1L << (NOPARALLEL - 320)) | (1L << (NOSORT - 320)) | (1L << (PARALLEL - 320)) | (1L << (PCTFREE - 320)) | (1L << (PCTUSED - 320)))) != 0) || ((((_la - 435)) & ~0x3f) == 0 && ((1L << (_la - 435)) & ((1L << (REVERSE - 435)) | (1L << (SORT - 435)) | (1L << (STORAGE - 435)))) != 0) || _la==TABLESPACE || _la==VISIBLE );
				}
				break;
			case INDEXTYPE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1504);
				match(INDEXTYPE);
				setState(1505);
				match(IS);
				setState(1508);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case A_LETTER:
				case ADD:
				case AFTER:
				case AGENT:
				case AGGREGATE:
				case ANALYZE:
				case ARRAY:
				case ASSOCIATE:
				case AT:
				case ATTRIBUTE:
				case AUDIT:
				case AUTHID:
				case AUTO:
				case AUTOMATIC:
				case AUTONOMOUS_TRANSACTION:
				case BATCH:
				case BEFORE:
				case BFILE:
				case BINARY_DOUBLE:
				case BINARY_FLOAT:
				case BINARY_INTEGER:
				case BUILD:
				case BLOB:
				case BLOCK:
				case BODY:
				case BOOLEAN:
				case BOTH:
				case BULK:
				case BYTE:
				case C_LETTER:
				case CALL:
				case CANONICAL:
				case CASCADE:
				case CAST:
				case CHAR:
				case CHAR_CS:
				case CHARACTER:
				case CHR:
				case CLOB:
				case CLOSE:
				case CLUSTER:
				case COALESCE:
				case COLLECT:
				case COLUMNS:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case COMPATIBILITY:
				case COMPILE:
				case COMPLETE:
				case COMPOUND:
				case CONCAT:
				case CONSTANT:
				case CONSTRAINT:
				case CONSTRAINTS:
				case CONSTRUCTOR:
				case CONTENT:
				case CONTEXT:
				case CONTINUE:
				case CONVERT:
				case CORRUPT_XID:
				case CORRUPT_XID_ALL:
				case COST:
				case COUNT:
				case CROSS:
				case CUBE:
				case CURRENT_USER:
				case CURSOR:
				case CUSTOMDATUM:
				case CYCLE:
				case DATA:
				case DATABASE:
				case DATE:
				case DAY:
				case DB_ROLE_CHANGE:
				case DBTIMEZONE:
				case DDL:
				case DEBUG:
				case DEC:
				case DECIMAL:
				case DECODE:
				case DECOMPOSE:
				case DECREMENT:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DEMAND:
				case DETERMINISTIC:
				case DIMENSION:
				case DISABLE:
				case DISASSOCIATE:
				case DOCUMENT:
				case DOUBLE:
				case DSINTERVAL_UNCONSTRAINED:
				case EACH:
				case EDITIONING:
				case ELEMENT:
				case EMPTY:
				case ENABLE:
				case ENCODING:
				case ENFORCED:
				case ENTITYESCAPING:
				case ERR:
				case ERRORS:
				case ESCAPE:
				case EVALNAME:
				case EXCEPTION:
				case EXCEPTION_INIT:
				case EXCEPTIONS:
				case EXCLUDE:
				case EXECUTE:
				case EXIT:
				case EXPLAIN:
				case EXTERNAL:
				case EXTRACT:
				case FAILURE:
				case FAST:
				case FINAL:
				case FIRST:
				case FIRST_VALUE:
				case FLOAT:
				case FOLLOWING:
				case FOLLOWS:
				case FORALL:
				case FORCE:
				case FULL:
				case FUNCTION:
				case GROUPING:
				case HASH:
				case HIDE:
				case HOUR:
				case IGNORE:
				case IMMEDIATE:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDENT:
				case INDEXED:
				case INDICATOR:
				case INDICES:
				case INFINITE:
				case INLINE:
				case INNER:
				case INOUT:
				case INSTANTIABLE:
				case INSTEAD:
				case INT:
				case INTEGER:
				case INTERVAL:
				case INVALIDATE:
				case ISOLATION:
				case ITERATE:
				case JAVA:
				case JOIN:
				case KEEP:
				case LANGUAGE:
				case LAST:
				case LAST_VALUE:
				case LEADING:
				case LEFT:
				case LEVEL:
				case LIBRARY:
				case LIKE2:
				case LIKE4:
				case LIKEC:
				case LIMIT:
				case LIST:
				case LOCAL:
				case LOCKED:
				case LOG:
				case LOGOFF:
				case LOGON:
				case LONG:
				case LOOP:
				case MAIN:
				case MAP:
				case MASTER:
				case MATCHED:
				case MAXVALUE:
				case MEASURES:
				case MEMBER:
				case MERGE:
				case MINUTE:
				case MINVALUE:
				case MLSLABEL:
				case MODEL:
				case MODIFY:
				case MONTH:
				case MULTISET:
				case NAME:
				case NAN:
				case NATURAL:
				case NATURALN:
				case NAV:
				case NCHAR:
				case NCHAR_CS:
				case NCLOB:
				case NESTED:
				case NEVER:
				case NEW:
				case NO:
				case NOAUDIT:
				case NOCOPY:
				case NOCYCLE:
				case NOENTITYESCAPING:
				case NONE:
				case NOSCHEMACHECK:
				case NVL:
				case NULLS:
				case NUMBER:
				case NUMERIC:
				case NVARCHAR2:
				case MATERIALIZED:
				case OBJECT:
				case OFF:
				case OID:
				case OLD:
				case ONLY:
				case OPEN:
				case ORADATA:
				case ORDINALITY:
				case OSERROR:
				case OUT:
				case OUTER:
				case OVER:
				case OVERRIDING:
				case PACKAGE:
				case PARALLEL_ENABLE:
				case PARAMETERS:
				case PARENT:
				case PARTITION:
				case PASSING:
				case PATH:
				case PIPELINED:
				case PLAN:
				case PLS_INTEGER:
				case POSITIVE:
				case POSITIVEN:
				case PRAGMA:
				case PREBUILT:
				case PRECEDING:
				case PRECISION:
				case PRESENT:
				case PUBLIC:
				case RAISE:
				case RANGE:
				case RAW:
				case READ:
				case REAL:
				case RECORD:
				case REDUCED:
				case REF:
				case REFERENCE:
				case REFERENCING:
				case REFRESH:
				case REJECT:
				case RELIES_ON:
				case RENAME:
				case REPLACE:
				case RESPECT:
				case RESTRICT_REFERENCES:
				case RESULT:
				case RESULT_CACHE:
				case RETURN:
				case RETURNING:
				case REUSE:
				case REVERSE:
				case REWRITE:
				case RIGHT:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROW:
				case ROWID:
				case ROWS:
				case RULES:
				case SAMPLE:
				case SAVE:
				case SAVEPOINT:
				case SCHEMA:
				case SCHEMACHECK:
				case SCN:
				case SECOND:
				case SEED:
				case SEGMENT:
				case SELF:
				case SEQUENTIAL:
				case SERIALIZABLE:
				case SERIALLY_REUSABLE:
				case SERVERERROR:
				case SESSIONTIMEZONE:
				case SET:
				case SETS:
				case SETTINGS:
				case SHOW:
				case SHUTDOWN:
				case SIBLINGS:
				case SIGNTYPE:
				case SIMPLE_INTEGER:
				case SINGLE:
				case SIZE:
				case SKIP_:
				case SMALLINT:
				case SNAPSHOT:
				case SOME:
				case SPECIFICATION:
				case SQLDATA:
				case SQLERROR:
				case STANDALONE:
				case STARTUP:
				case STATEMENT:
				case STATEMENT_ID:
				case STATIC:
				case STATISTICS:
				case STRING:
				case SUBMULTISET:
				case SUBPARTITION:
				case SUBSTITUTABLE:
				case SUBSTRING:
				case SUBTYPE:
				case SUCCESS:
				case SUSPEND:
				case TABLES:
				case TIME:
				case TIMESTAMP:
				case TIMESTAMP_LTZ_UNCONSTRAINED:
				case TIMESTAMP_TZ_UNCONSTRAINED:
				case TIMESTAMP_UNCONSTRAINED:
				case TIMEZONE_ABBR:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TIMEZONE_REGION:
				case TO_CHAR:
				case TO_DATE:
				case TRAILING:
				case TRANSACTION:
				case TRANSLATE:
				case TREAT:
				case TRIGGER:
				case TRIM:
				case TRUNCATE:
				case TRUSTED:
				case TYPE:
				case UNBOUNDED:
				case UNDER:
				case UNLIMITED:
				case UNTIL:
				case UPDATED:
				case UPSERT:
				case UROWID:
				case USE:
				case VALIDATE:
				case VALUE:
				case VARCHAR:
				case VARCHAR2:
				case VARIABLE:
				case VARRAY:
				case VARYING:
				case VERBOSE:
				case VERSION:
				case VERSIONS:
				case VIEW:
				case WAIT:
				case WARNING:
				case WELLFORMED:
				case WHENEVER:
				case WHILE:
				case WITHOUT:
				case WITHIN:
				case WORK:
				case WRITE:
				case XML:
				case XMLAGG:
				case XMLATTRIBUTES:
				case XMLCAST:
				case XMLCOLATTVAL:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLQUERY:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case YEAR:
				case YES:
				case YMINTERVAL_UNCONSTRAINED:
				case ZONE:
				case PREDICTION:
				case PREDICTION_BOUNDS:
				case PREDICTION_COST:
				case PREDICTION_DETAILS:
				case PREDICTION_PROBABILITY:
				case PREDICTION_SET:
				case CUME_DIST:
				case DENSE_RANK:
				case LISTAGG:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case RANK:
				case AVG:
				case CORR:
				case LAG:
				case LEAD:
				case MAX:
				case MEDIAN:
				case MIN:
				case NTILE:
				case RATIO_TO_REPORT:
				case ROW_NUMBER:
				case SUM:
				case VARIANCE:
				case REGR_:
				case STDDEV:
				case VAR_:
				case COVAR_:
				case DELIMITED_ID:
				case REGULAR_ID:
					{
					setState(1506);
					domain_index_clause();
					}
					break;
				case XDB:
				case XMLINDEX:
					{
					setState(1507);
					xmlindex_clause();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Global_partitioned_indexContext extends ParserRuleContext {
		public TerminalNode GLOBAL() { return getToken(PLSQLParser.GLOBAL, 0); }
		public TerminalNode PARTITION() { return getToken(PLSQLParser.PARTITION, 0); }
		public TerminalNode BY() { return getToken(PLSQLParser.BY, 0); }
		public TerminalNode RANGE() { return getToken(PLSQLParser.RANGE, 0); }
		public Paren_column_listContext paren_column_list() {
			return getRuleContext(Paren_column_listContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(PLSQLParser.LEFT_PAREN, 0); }
		public Index_partitioning_clauseContext index_partitioning_clause() {
			return getRuleContext(Index_partitioning_clauseContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PLSQLParser.RIGHT_PAREN, 0); }
		public TerminalNode HASH() { return getToken(PLSQLParser.HASH, 0); }
		public Individual_hash_partitionsContext individual_hash_partitions() {
			return getRuleContext(Individual_hash_partitionsContext.class,0);
		}
		public Hash_partitions_by_quantityContext hash_partitions_by_quantity() {
			return getRuleContext(Hash_partitions_by_quantityContext.class,0);
		}
		public Global_partitioned_indexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_global_partitioned_index; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterGlobal_partitioned_index(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitGlobal_partitioned_index(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitGlobal_partitioned_index(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Global_partitioned_indexContext global_partitioned_index() throws RecognitionException {
		Global_partitioned_indexContext _localctx = new Global_partitioned_indexContext(_ctx, getState());
		enterRule(_localctx, 58, RULE_global_partitioned_index);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1512);
			match(GLOBAL);
			setState(1513);
			match(PARTITION);
			setState(1514);
			match(BY);
			setState(1527);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case RANGE:
				{
				setState(1515);
				match(RANGE);
				setState(1516);
				paren_column_list();
				setState(1517);
				match(LEFT_PAREN);
				setState(1518);
				index_partitioning_clause();
				setState(1519);
				match(RIGHT_PAREN);
				}
				break;
			case HASH:
				{
				setState(1521);
				match(HASH);
				setState(1522);
				paren_column_list();
				setState(1525);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case LEFT_PAREN:
					{
					setState(1523);
					individual_hash_partitions();
					}
					break;
				case PARTITIONS:
					{
					setState(1524);
					hash_partitions_by_quantity();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Index_partitioning_clauseContext extends ParserRuleContext {
		public TerminalNode PARTITION() { return getToken(PLSQLParser.PARTITION, 0); }
		public TerminalNode VALUES() { return getToken(PLSQLParser.VALUES, 0); }
		public TerminalNode LESS() { return getToken(PLSQLParser.LESS, 0); }
		public TerminalNode THAN() { return getToken(PLSQLParser.THAN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PLSQLParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PLSQLParser.RIGHT_PAREN, 0); }
		public Partition_nameContext partition_name() {
			return getRuleContext(Partition_nameContext.class,0);
		}
		public List<LiteralContext> literal() {
			return getRuleContexts(LiteralContext.class);
		}
		public LiteralContext literal(int i) {
			return getRuleContext(LiteralContext.class,i);
		}
		public Segment_attributes_clauseContext segment_attributes_clause() {
			return getRuleContext(Segment_attributes_clauseContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLSQLParser.COMMA, i);
		}
		public Index_partitioning_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_index_partitioning_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterIndex_partitioning_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitIndex_partitioning_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitIndex_partitioning_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Index_partitioning_clauseContext index_partitioning_clause() throws RecognitionException {
		Index_partitioning_clauseContext _localctx = new Index_partitioning_clauseContext(_ctx, getState());
		enterRule(_localctx, 60, RULE_index_partitioning_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1529);
			match(PARTITION);
			setState(1531);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BUILD) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (CHR - 65)) | (1L << (CLOB - 65)) | (1L << (CLOSE - 65)) | (1L << (CLUSTER - 65)) | (1L << (COALESCE - 65)) | (1L << (COLLECT - 65)) | (1L << (COLUMNS - 65)) | (1L << (COMMENT - 65)) | (1L << (COMMIT - 65)) | (1L << (COMMITTED - 65)) | (1L << (COMPATIBILITY - 65)) | (1L << (COMPILE - 65)) | (1L << (COMPLETE - 65)) | (1L << (COMPOUND - 65)) | (1L << (CONCAT - 65)) | (1L << (CONSTANT - 65)) | (1L << (CONSTRAINT - 65)) | (1L << (CONSTRAINTS - 65)) | (1L << (CONSTRUCTOR - 65)) | (1L << (CONTENT - 65)) | (1L << (CONTEXT - 65)) | (1L << (CONTINUE - 65)) | (1L << (CONVERT - 65)) | (1L << (CORRUPT_XID - 65)) | (1L << (CORRUPT_XID_ALL - 65)) | (1L << (COST - 65)) | (1L << (COUNT - 65)) | (1L << (CROSS - 65)) | (1L << (CUBE - 65)) | (1L << (CURRENT_USER - 65)) | (1L << (CURSOR - 65)) | (1L << (CUSTOMDATUM - 65)) | (1L << (CYCLE - 65)) | (1L << (DATA - 65)) | (1L << (DATABASE - 65)) | (1L << (DATE - 65)) | (1L << (DAY - 65)) | (1L << (DB_ROLE_CHANGE - 65)) | (1L << (DBTIMEZONE - 65)) | (1L << (DDL - 65)) | (1L << (DEBUG - 65)) | (1L << (DEC - 65)) | (1L << (DECIMAL - 65)) | (1L << (DECODE - 65)) | (1L << (DECOMPOSE - 65)) | (1L << (DECREMENT - 65)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DEMAND - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (EDITIONING - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENFORCED - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FAST - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)) | (1L << (FOLLOWING - 129)) | (1L << (FOLLOWS - 129)) | (1L << (FORALL - 129)) | (1L << (FORCE - 129)))) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & ((1L << (FULL - 197)) | (1L << (FUNCTION - 197)) | (1L << (GROUPING - 197)) | (1L << (HASH - 197)) | (1L << (HIDE - 197)) | (1L << (HOUR - 197)) | (1L << (IGNORE - 197)) | (1L << (IMMEDIATE - 197)) | (1L << (INCLUDE - 197)) | (1L << (INCLUDING - 197)) | (1L << (INCREMENT - 197)) | (1L << (INDENT - 197)) | (1L << (INDEXED - 197)) | (1L << (INDICATOR - 197)) | (1L << (INDICES - 197)) | (1L << (INFINITE - 197)) | (1L << (INLINE - 197)) | (1L << (INNER - 197)) | (1L << (INOUT - 197)) | (1L << (INSTANTIABLE - 197)) | (1L << (INSTEAD - 197)) | (1L << (INT - 197)) | (1L << (INTEGER - 197)) | (1L << (INTERVAL - 197)) | (1L << (INVALIDATE - 197)) | (1L << (ISOLATION - 197)) | (1L << (ITERATE - 197)) | (1L << (JAVA - 197)) | (1L << (JOIN - 197)) | (1L << (KEEP - 197)) | (1L << (LANGUAGE - 197)) | (1L << (LAST - 197)) | (1L << (LAST_VALUE - 197)) | (1L << (LEADING - 197)) | (1L << (LEFT - 197)) | (1L << (LEVEL - 197)))) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & ((1L << (LIBRARY - 261)) | (1L << (LIKE2 - 261)) | (1L << (LIKE4 - 261)) | (1L << (LIKEC - 261)) | (1L << (LIMIT - 261)) | (1L << (LIST - 261)) | (1L << (LOCAL - 261)) | (1L << (LOCKED - 261)) | (1L << (LOG - 261)) | (1L << (LOGOFF - 261)) | (1L << (LOGON - 261)) | (1L << (LONG - 261)) | (1L << (LOOP - 261)) | (1L << (MAIN - 261)) | (1L << (MAP - 261)) | (1L << (MASTER - 261)) | (1L << (MATCHED - 261)) | (1L << (MAXVALUE - 261)) | (1L << (MEASURES - 261)) | (1L << (MEMBER - 261)) | (1L << (MERGE - 261)) | (1L << (MINUTE - 261)) | (1L << (MINVALUE - 261)) | (1L << (MLSLABEL - 261)) | (1L << (MODEL - 261)) | (1L << (MODIFY - 261)) | (1L << (MONTH - 261)) | (1L << (MULTISET - 261)) | (1L << (NAME - 261)) | (1L << (NAN - 261)) | (1L << (NATURAL - 261)) | (1L << (NATURALN - 261)) | (1L << (NAV - 261)) | (1L << (NCHAR - 261)) | (1L << (NCHAR_CS - 261)) | (1L << (NCLOB - 261)) | (1L << (NESTED - 261)) | (1L << (NEVER - 261)) | (1L << (NEW - 261)) | (1L << (NO - 261)) | (1L << (NOAUDIT - 261)) | (1L << (NOCOPY - 261)) | (1L << (NOCYCLE - 261)) | (1L << (NOENTITYESCAPING - 261)))) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & ((1L << (NONE - 329)) | (1L << (NOSCHEMACHECK - 329)) | (1L << (NVL - 329)) | (1L << (NULLS - 329)) | (1L << (NUMBER - 329)) | (1L << (NUMERIC - 329)) | (1L << (NVARCHAR2 - 329)) | (1L << (MATERIALIZED - 329)) | (1L << (OBJECT - 329)) | (1L << (OFF - 329)) | (1L << (OID - 329)) | (1L << (OLD - 329)) | (1L << (ONLY - 329)) | (1L << (OPEN - 329)) | (1L << (ORADATA - 329)) | (1L << (ORDINALITY - 329)) | (1L << (OSERROR - 329)) | (1L << (OUT - 329)) | (1L << (OUTER - 329)) | (1L << (OVER - 329)) | (1L << (OVERRIDING - 329)) | (1L << (PACKAGE - 329)) | (1L << (PARALLEL_ENABLE - 329)) | (1L << (PARAMETERS - 329)) | (1L << (PARENT - 329)) | (1L << (PARTITION - 329)) | (1L << (PASSING - 329)) | (1L << (PATH - 329)) | (1L << (PIPELINED - 329)) | (1L << (PLAN - 329)) | (1L << (PLS_INTEGER - 329)) | (1L << (POSITIVE - 329)) | (1L << (POSITIVEN - 329)) | (1L << (PRAGMA - 329)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (PREBUILT - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)) | (1L << (PRESENT - 393)) | (1L << (PUBLIC - 393)) | (1L << (RAISE - 393)) | (1L << (RANGE - 393)) | (1L << (RAW - 393)) | (1L << (READ - 393)) | (1L << (REAL - 393)) | (1L << (RECORD - 393)) | (1L << (REDUCED - 393)) | (1L << (REF - 393)) | (1L << (REFERENCE - 393)) | (1L << (REFERENCING - 393)) | (1L << (REFRESH - 393)) | (1L << (REJECT - 393)) | (1L << (RELIES_ON - 393)) | (1L << (RENAME - 393)) | (1L << (REPLACE - 393)) | (1L << (RESPECT - 393)) | (1L << (RESTRICT_REFERENCES - 393)) | (1L << (RESULT - 393)) | (1L << (RESULT_CACHE - 393)) | (1L << (RETURN - 393)) | (1L << (RETURNING - 393)) | (1L << (REUSE - 393)) | (1L << (REVERSE - 393)) | (1L << (REWRITE - 393)) | (1L << (RIGHT - 393)) | (1L << (ROLE - 393)) | (1L << (ROLLBACK - 393)) | (1L << (ROLLUP - 393)) | (1L << (ROW - 393)) | (1L << (ROWID - 393)) | (1L << (ROWS - 393)) | (1L << (RULES - 393)) | (1L << (SAMPLE - 393)) | (1L << (SAVE - 393)) | (1L << (SAVEPOINT - 393)) | (1L << (SCHEMA - 393)) | (1L << (SCHEMACHECK - 393)) | (1L << (SCN - 393)) | (1L << (SECOND - 393)))) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & ((1L << (SEED - 458)) | (1L << (SEGMENT - 458)) | (1L << (SELF - 458)) | (1L << (SEQUENTIAL - 458)) | (1L << (SERIALIZABLE - 458)) | (1L << (SERIALLY_REUSABLE - 458)) | (1L << (SERVERERROR - 458)) | (1L << (SESSIONTIMEZONE - 458)) | (1L << (SET - 458)) | (1L << (SETS - 458)) | (1L << (SETTINGS - 458)) | (1L << (SHOW - 458)) | (1L << (SHUTDOWN - 458)) | (1L << (SIBLINGS - 458)) | (1L << (SIGNTYPE - 458)) | (1L << (SIMPLE_INTEGER - 458)) | (1L << (SINGLE - 458)) | (1L << (SIZE - 458)) | (1L << (SKIP_ - 458)) | (1L << (SMALLINT - 458)) | (1L << (SNAPSHOT - 458)) | (1L << (SOME - 458)) | (1L << (SPECIFICATION - 458)) | (1L << (SQLDATA - 458)) | (1L << (SQLERROR - 458)) | (1L << (STANDALONE - 458)) | (1L << (STARTUP - 458)) | (1L << (STATEMENT - 458)) | (1L << (STATEMENT_ID - 458)) | (1L << (STATIC - 458)) | (1L << (STATISTICS - 458)) | (1L << (STRING - 458)) | (1L << (SUBMULTISET - 458)) | (1L << (SUBPARTITION - 458)) | (1L << (SUBSTITUTABLE - 458)) | (1L << (SUBSTRING - 458)) | (1L << (SUBTYPE - 458)) | (1L << (SUCCESS - 458)) | (1L << (SUSPEND - 458)) | (1L << (TABLES - 458)) | (1L << (TIME - 458)) | (1L << (TIMESTAMP - 458)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 458)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 458)) | (1L << (TIMESTAMP_UNCONSTRAINED - 458)))) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & ((1L << (TIMEZONE_ABBR - 522)) | (1L << (TIMEZONE_HOUR - 522)) | (1L << (TIMEZONE_MINUTE - 522)) | (1L << (TIMEZONE_REGION - 522)) | (1L << (TO_CHAR - 522)) | (1L << (TO_DATE - 522)) | (1L << (TRAILING - 522)) | (1L << (TRANSACTION - 522)) | (1L << (TRANSLATE - 522)) | (1L << (TREAT - 522)) | (1L << (TRIGGER - 522)) | (1L << (TRIM - 522)) | (1L << (TRUNCATE - 522)) | (1L << (TRUSTED - 522)) | (1L << (TYPE - 522)) | (1L << (UNBOUNDED - 522)) | (1L << (UNDER - 522)) | (1L << (UNLIMITED - 522)) | (1L << (UNTIL - 522)) | (1L << (UPDATED - 522)) | (1L << (UPSERT - 522)) | (1L << (UROWID - 522)) | (1L << (USE - 522)) | (1L << (VALIDATE - 522)) | (1L << (VALUE - 522)) | (1L << (VARCHAR - 522)) | (1L << (VARCHAR2 - 522)) | (1L << (VARIABLE - 522)) | (1L << (VARRAY - 522)) | (1L << (VARYING - 522)) | (1L << (VERBOSE - 522)) | (1L << (VERSION - 522)) | (1L << (VERSIONS - 522)) | (1L << (VIEW - 522)) | (1L << (WAIT - 522)) | (1L << (WARNING - 522)) | (1L << (WELLFORMED - 522)) | (1L << (WHENEVER - 522)) | (1L << (WHILE - 522)) | (1L << (WITHOUT - 522)) | (1L << (WITHIN - 522)) | (1L << (WORK - 522)) | (1L << (WRITE - 522)) | (1L << (XML - 522)) | (1L << (XMLAGG - 522)) | (1L << (XMLATTRIBUTES - 522)))) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & ((1L << (XMLCAST - 586)) | (1L << (XMLCOLATTVAL - 586)) | (1L << (XMLELEMENT - 586)) | (1L << (XMLEXISTS - 586)) | (1L << (XMLFOREST - 586)) | (1L << (XMLNAMESPACES - 586)) | (1L << (XMLPARSE - 586)) | (1L << (XMLPI - 586)) | (1L << (XMLQUERY - 586)) | (1L << (XMLROOT - 586)) | (1L << (XMLSERIALIZE - 586)) | (1L << (XMLTABLE - 586)) | (1L << (YEAR - 586)) | (1L << (YES - 586)) | (1L << (YMINTERVAL_UNCONSTRAINED - 586)) | (1L << (ZONE - 586)) | (1L << (PREDICTION - 586)) | (1L << (PREDICTION_BOUNDS - 586)) | (1L << (PREDICTION_COST - 586)) | (1L << (PREDICTION_DETAILS - 586)) | (1L << (PREDICTION_PROBABILITY - 586)) | (1L << (PREDICTION_SET - 586)) | (1L << (CUME_DIST - 586)) | (1L << (DENSE_RANK - 586)) | (1L << (LISTAGG - 586)) | (1L << (PERCENT_RANK - 586)) | (1L << (PERCENTILE_CONT - 586)) | (1L << (PERCENTILE_DISC - 586)) | (1L << (RANK - 586)) | (1L << (AVG - 586)) | (1L << (CORR - 586)) | (1L << (LAG - 586)) | (1L << (LEAD - 586)) | (1L << (MAX - 586)) | (1L << (MEDIAN - 586)) | (1L << (MIN - 586)) | (1L << (NTILE - 586)) | (1L << (RATIO_TO_REPORT - 586)) | (1L << (ROW_NUMBER - 586)) | (1L << (SUM - 586)) | (1L << (VARIANCE - 586)) | (1L << (REGR_ - 586)) | (1L << (STDDEV - 586)) | (1L << (VAR_ - 586)) | (1L << (COVAR_ - 586)))) != 0) || _la==REGULAR_ID) {
				{
				setState(1530);
				partition_name();
				}
			}

			setState(1533);
			match(VALUES);
			setState(1534);
			match(LESS);
			setState(1535);
			match(THAN);
			setState(1536);
			match(LEFT_PAREN);
			setState(1541); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1538);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(1537);
					match(COMMA);
					}
				}

				setState(1540);
				literal();
				}
				}
				setState(1543); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (CHR - 65)) | (1L << (CONCAT - 65)) | (1L << (DECODE - 65)))) != 0) || _la==MAXVALUE || _la==NVL || ((((_la - 503)) & ~0x3f) == 0 && ((1L << (_la - 503)) & ((1L << (SUBSTRING - 503)) | (1L << (TO_CHAR - 503)) | (1L << (TO_DATE - 503)) | (1L << (TRIM - 503)))) != 0) || ((((_la - 639)) & ~0x3f) == 0 && ((1L << (_la - 639)) & ((1L << (UNSIGNED_INTEGER - 639)) | (1L << (APPROXIMATE_NUM_LIT - 639)) | (1L << (CHAR_STRING - 639)) | (1L << (COMMA - 639)))) != 0) );
			setState(1545);
			match(RIGHT_PAREN);
			setState(1547);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FILESYSTEM_LIKE_LOGGING || _la==INITRANS || _la==LOGGING || _la==NOLOGGING || _la==PCTFREE || _la==PCTUSED || _la==STORAGE || _la==TABLESPACE) {
				{
				setState(1546);
				segment_attributes_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Partition_nameContext extends ParserRuleContext {
		public Regular_idContext regular_id() {
			return getRuleContext(Regular_idContext.class,0);
		}
		public Partition_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partition_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterPartition_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitPartition_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitPartition_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Partition_nameContext partition_name() throws RecognitionException {
		Partition_nameContext _localctx = new Partition_nameContext(_ctx, getState());
		enterRule(_localctx, 62, RULE_partition_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1549);
			regular_id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LiteralContext extends ParserRuleContext {
		public TerminalNode CHAR_STRING() { return getToken(PLSQLParser.CHAR_STRING, 0); }
		public String_functionContext string_function() {
			return getRuleContext(String_functionContext.class,0);
		}
		public NumericContext numeric() {
			return getRuleContext(NumericContext.class,0);
		}
		public TerminalNode MAXVALUE() { return getToken(PLSQLParser.MAXVALUE, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_literal; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitLiteral(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LiteralContext literal() throws RecognitionException {
		LiteralContext _localctx = new LiteralContext(_ctx, getState());
		enterRule(_localctx, 64, RULE_literal);
		try {
			setState(1555);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CHAR_STRING:
				enterOuterAlt(_localctx, 1);
				{
				setState(1551);
				match(CHAR_STRING);
				}
				break;
			case CHR:
			case CONCAT:
			case DECODE:
			case NVL:
			case SUBSTRING:
			case TO_CHAR:
			case TO_DATE:
			case TRIM:
				enterOuterAlt(_localctx, 2);
				{
				setState(1552);
				string_function();
				}
				break;
			case UNSIGNED_INTEGER:
			case APPROXIMATE_NUM_LIT:
				enterOuterAlt(_localctx, 3);
				{
				setState(1553);
				numeric();
				}
				break;
			case MAXVALUE:
				enterOuterAlt(_localctx, 4);
				{
				setState(1554);
				match(MAXVALUE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class String_functionContext extends ParserRuleContext {
		public Token name;
		public TerminalNode LEFT_PAREN() { return getToken(PLSQLParser.LEFT_PAREN, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLSQLParser.COMMA, i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PLSQLParser.RIGHT_PAREN, 0); }
		public TerminalNode SUBSTRING() { return getToken(PLSQLParser.SUBSTRING, 0); }
		public TerminalNode FROM() { return getToken(PLSQLParser.FROM, 0); }
		public List<AtomContext> atom() {
			return getRuleContexts(AtomContext.class);
		}
		public AtomContext atom(int i) {
			return getRuleContext(AtomContext.class,i);
		}
		public TerminalNode FOR() { return getToken(PLSQLParser.FOR, 0); }
		public TerminalNode TO_CHAR() { return getToken(PLSQLParser.TO_CHAR, 0); }
		public Table_elementContext table_element() {
			return getRuleContext(Table_elementContext.class,0);
		}
		public Standard_functionContext standard_function() {
			return getRuleContext(Standard_functionContext.class,0);
		}
		public List<Quoted_stringContext> quoted_string() {
			return getRuleContexts(Quoted_stringContext.class);
		}
		public Quoted_stringContext quoted_string(int i) {
			return getRuleContext(Quoted_stringContext.class,i);
		}
		public ExpressionsContext expressions() {
			return getRuleContext(ExpressionsContext.class,0);
		}
		public TerminalNode DECODE() { return getToken(PLSQLParser.DECODE, 0); }
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		public TerminalNode USING() { return getToken(PLSQLParser.USING, 0); }
		public TerminalNode NCHAR_CS() { return getToken(PLSQLParser.NCHAR_CS, 0); }
		public TerminalNode CHR() { return getToken(PLSQLParser.CHR, 0); }
		public TerminalNode NVL() { return getToken(PLSQLParser.NVL, 0); }
		public TerminalNode TRIM() { return getToken(PLSQLParser.TRIM, 0); }
		public TerminalNode LEADING() { return getToken(PLSQLParser.LEADING, 0); }
		public TerminalNode TRAILING() { return getToken(PLSQLParser.TRAILING, 0); }
		public TerminalNode BOTH() { return getToken(PLSQLParser.BOTH, 0); }
		public TerminalNode TO_DATE() { return getToken(PLSQLParser.TO_DATE, 0); }
		public TerminalNode CONCAT() { return getToken(PLSQLParser.CONCAT, 0); }
		public String_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_string_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterString_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitString_function(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitString_function(this);
			else return visitor.visitChildren(this);
		}
	}

	public final String_functionContext string_function() throws RecognitionException {
		String_functionContext _localctx = new String_functionContext(_ctx, getState());
		enterRule(_localctx, 66, RULE_string_function);
		int _la;
		try {
			int _alt;
			setState(1658);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,100,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1557);
				((String_functionContext)_localctx).name = match(SUBSTRING);
				setState(1558);
				match(LEFT_PAREN);
				setState(1559);
				expression(0);
				setState(1560);
				match(COMMA);
				setState(1561);
				expression(0);
				setState(1564);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(1562);
					match(COMMA);
					setState(1563);
					expression(0);
					}
				}

				setState(1566);
				match(RIGHT_PAREN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1568);
				((String_functionContext)_localctx).name = match(SUBSTRING);
				setState(1569);
				match(LEFT_PAREN);
				setState(1570);
				expression(0);
				setState(1573);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM) {
					{
					setState(1571);
					match(FROM);
					setState(1572);
					atom();
					}
				}

				setState(1577);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(1575);
					match(FOR);
					setState(1576);
					atom();
					}
				}

				setState(1579);
				match(RIGHT_PAREN);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1581);
				((String_functionContext)_localctx).name = match(TO_CHAR);
				setState(1582);
				match(LEFT_PAREN);
				setState(1586);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,90,_ctx) ) {
				case 1:
					{
					setState(1583);
					table_element();
					}
					break;
				case 2:
					{
					setState(1584);
					standard_function(0);
					}
					break;
				case 3:
					{
					setState(1585);
					expression(0);
					}
					break;
				}
				setState(1590);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,91,_ctx) ) {
				case 1:
					{
					setState(1588);
					match(COMMA);
					setState(1589);
					quoted_string();
					}
					break;
				}
				setState(1594);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(1592);
					match(COMMA);
					setState(1593);
					quoted_string();
					}
				}

				setState(1596);
				match(RIGHT_PAREN);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1598);
				((String_functionContext)_localctx).name = match(DECODE);
				setState(1599);
				match(LEFT_PAREN);
				setState(1600);
				expressions();
				setState(1601);
				match(RIGHT_PAREN);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1603);
				((String_functionContext)_localctx).name = match(CHR);
				setState(1604);
				match(LEFT_PAREN);
				setState(1605);
				concatenation();
				setState(1606);
				match(USING);
				setState(1607);
				match(NCHAR_CS);
				setState(1608);
				match(RIGHT_PAREN);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1610);
				((String_functionContext)_localctx).name = match(NVL);
				setState(1611);
				match(LEFT_PAREN);
				setState(1612);
				expression(0);
				setState(1613);
				match(COMMA);
				setState(1614);
				expression(0);
				setState(1615);
				match(RIGHT_PAREN);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1617);
				((String_functionContext)_localctx).name = match(TRIM);
				setState(1618);
				match(LEFT_PAREN);
				setState(1626);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,95,_ctx) ) {
				case 1:
					{
					setState(1620);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==BOTH || _la==LEADING || _la==TRAILING) {
						{
						setState(1619);
						_la = _input.LA(1);
						if ( !(_la==BOTH || _la==LEADING || _la==TRAILING) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
					}

					setState(1623);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==NATIONAL_CHAR_STRING_LIT || _la==CHAR_STRING) {
						{
						setState(1622);
						quoted_string();
						}
					}

					setState(1625);
					match(FROM);
					}
					break;
				}
				setState(1628);
				concatenation();
				setState(1629);
				match(RIGHT_PAREN);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1631);
				((String_functionContext)_localctx).name = match(TO_DATE);
				setState(1632);
				match(LEFT_PAREN);
				setState(1633);
				expression(0);
				setState(1636);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(1634);
					match(COMMA);
					setState(1635);
					quoted_string();
					}
				}

				setState(1638);
				match(RIGHT_PAREN);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(1640);
				((String_functionContext)_localctx).name = match(CONCAT);
				setState(1641);
				match(LEFT_PAREN);
				setState(1648); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(1644);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,97,_ctx) ) {
						case 1:
							{
							setState(1642);
							quoted_string();
							}
							break;
						case 2:
							{
							setState(1643);
							expression(0);
							}
							break;
						}
						setState(1646);
						match(COMMA);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(1650); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,98,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				setState(1654);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,99,_ctx) ) {
				case 1:
					{
					setState(1652);
					quoted_string();
					}
					break;
				case 2:
					{
					setState(1653);
					expression(0);
					}
					break;
				}
				setState(1656);
				match(RIGHT_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExpressionsContext extends ParserRuleContext {
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLSQLParser.COMMA, i);
		}
		public ExpressionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expressions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterExpressions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitExpressions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitExpressions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExpressionsContext expressions() throws RecognitionException {
		ExpressionsContext _localctx = new ExpressionsContext(_ctx, getState());
		enterRule(_localctx, 68, RULE_expressions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1660);
			expression(0);
			setState(1665);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1661);
				match(COMMA);
				setState(1662);
				expression(0);
				}
				}
				setState(1667);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Individual_hash_partitionsContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(PLSQLParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PLSQLParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> PARTITION() { return getTokens(PLSQLParser.PARTITION); }
		public TerminalNode PARTITION(int i) {
			return getToken(PLSQLParser.PARTITION, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLSQLParser.COMMA, i);
		}
		public List<Partition_nameContext> partition_name() {
			return getRuleContexts(Partition_nameContext.class);
		}
		public Partition_nameContext partition_name(int i) {
			return getRuleContext(Partition_nameContext.class,i);
		}
		public List<Partitioning_storage_clauseContext> partitioning_storage_clause() {
			return getRuleContexts(Partitioning_storage_clauseContext.class);
		}
		public Partitioning_storage_clauseContext partitioning_storage_clause(int i) {
			return getRuleContext(Partitioning_storage_clauseContext.class,i);
		}
		public Individual_hash_partitionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_individual_hash_partitions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterIndividual_hash_partitions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitIndividual_hash_partitions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitIndividual_hash_partitions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Individual_hash_partitionsContext individual_hash_partitions() throws RecognitionException {
		Individual_hash_partitionsContext _localctx = new Individual_hash_partitionsContext(_ctx, getState());
		enterRule(_localctx, 70, RULE_individual_hash_partitions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1668);
			match(LEFT_PAREN);
			setState(1679); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1670);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(1669);
					match(COMMA);
					}
				}

				setState(1672);
				match(PARTITION);
				setState(1674);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,103,_ctx) ) {
				case 1:
					{
					setState(1673);
					partition_name();
					}
					break;
				}
				setState(1677);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMPRESS || _la==LOB || _la==NOCOMPRESS || _la==OVERFLOW || _la==TABLESPACE || _la==VARRAY) {
					{
					setState(1676);
					partitioning_storage_clause();
					}
				}

				}
				}
				setState(1681); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==PARTITION || _la==COMMA );
			setState(1683);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Partitioning_storage_clauseContext extends ParserRuleContext {
		public List<TerminalNode> TABLESPACE() { return getTokens(PLSQLParser.TABLESPACE); }
		public TerminalNode TABLESPACE(int i) {
			return getToken(PLSQLParser.TABLESPACE, i);
		}
		public List<TablespaceContext> tablespace() {
			return getRuleContexts(TablespaceContext.class);
		}
		public TablespaceContext tablespace(int i) {
			return getRuleContext(TablespaceContext.class,i);
		}
		public List<TerminalNode> OVERFLOW() { return getTokens(PLSQLParser.OVERFLOW); }
		public TerminalNode OVERFLOW(int i) {
			return getToken(PLSQLParser.OVERFLOW, i);
		}
		public List<Table_compressionContext> table_compression() {
			return getRuleContexts(Table_compressionContext.class);
		}
		public Table_compressionContext table_compression(int i) {
			return getRuleContext(Table_compressionContext.class,i);
		}
		public List<Key_compressionContext> key_compression() {
			return getRuleContexts(Key_compressionContext.class);
		}
		public Key_compressionContext key_compression(int i) {
			return getRuleContext(Key_compressionContext.class,i);
		}
		public List<Lob_partitioning_storageContext> lob_partitioning_storage() {
			return getRuleContexts(Lob_partitioning_storageContext.class);
		}
		public Lob_partitioning_storageContext lob_partitioning_storage(int i) {
			return getRuleContext(Lob_partitioning_storageContext.class,i);
		}
		public List<TerminalNode> VARRAY() { return getTokens(PLSQLParser.VARRAY); }
		public TerminalNode VARRAY(int i) {
			return getToken(PLSQLParser.VARRAY, i);
		}
		public List<Varray_itemContext> varray_item() {
			return getRuleContexts(Varray_itemContext.class);
		}
		public Varray_itemContext varray_item(int i) {
			return getRuleContext(Varray_itemContext.class,i);
		}
		public List<TerminalNode> STORE() { return getTokens(PLSQLParser.STORE); }
		public TerminalNode STORE(int i) {
			return getToken(PLSQLParser.STORE, i);
		}
		public List<TerminalNode> AS() { return getTokens(PLSQLParser.AS); }
		public TerminalNode AS(int i) {
			return getToken(PLSQLParser.AS, i);
		}
		public List<TerminalNode> LOB() { return getTokens(PLSQLParser.LOB); }
		public TerminalNode LOB(int i) {
			return getToken(PLSQLParser.LOB, i);
		}
		public List<Lob_segnameContext> lob_segname() {
			return getRuleContexts(Lob_segnameContext.class);
		}
		public Lob_segnameContext lob_segname(int i) {
			return getRuleContext(Lob_segnameContext.class,i);
		}
		public List<TerminalNode> BASICFILE() { return getTokens(PLSQLParser.BASICFILE); }
		public TerminalNode BASICFILE(int i) {
			return getToken(PLSQLParser.BASICFILE, i);
		}
		public List<TerminalNode> SECUREFILE() { return getTokens(PLSQLParser.SECUREFILE); }
		public TerminalNode SECUREFILE(int i) {
			return getToken(PLSQLParser.SECUREFILE, i);
		}
		public Partitioning_storage_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitioning_storage_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterPartitioning_storage_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitPartitioning_storage_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitPartitioning_storage_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Partitioning_storage_clauseContext partitioning_storage_clause() throws RecognitionException {
		Partitioning_storage_clauseContext _localctx = new Partitioning_storage_clauseContext(_ctx, getState());
		enterRule(_localctx, 72, RULE_partitioning_storage_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1705); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				setState(1705);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,108,_ctx) ) {
				case 1:
					{
					setState(1685);
					match(TABLESPACE);
					setState(1686);
					tablespace();
					}
					break;
				case 2:
					{
					setState(1687);
					match(OVERFLOW);
					setState(1690);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,106,_ctx) ) {
					case 1:
						{
						setState(1688);
						match(TABLESPACE);
						setState(1689);
						tablespace();
						}
						break;
					}
					}
					break;
				case 3:
					{
					setState(1692);
					table_compression();
					}
					break;
				case 4:
					{
					setState(1693);
					key_compression();
					}
					break;
				case 5:
					{
					setState(1694);
					lob_partitioning_storage();
					}
					break;
				case 6:
					{
					setState(1695);
					match(VARRAY);
					setState(1696);
					varray_item();
					setState(1697);
					match(STORE);
					setState(1698);
					match(AS);
					setState(1700);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==BASICFILE || _la==SECUREFILE) {
						{
						setState(1699);
						_la = _input.LA(1);
						if ( !(_la==BASICFILE || _la==SECUREFILE) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
					}

					setState(1702);
					match(LOB);
					setState(1703);
					lob_segname();
					}
					break;
				}
				}
				setState(1707); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==COMPRESS || _la==LOB || _la==NOCOMPRESS || _la==OVERFLOW || _la==TABLESPACE || _la==VARRAY );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_compressionContext extends ParserRuleContext {
		public TerminalNode COMPRESS() { return getToken(PLSQLParser.COMPRESS, 0); }
		public TerminalNode BASIC() { return getToken(PLSQLParser.BASIC, 0); }
		public TerminalNode FOR() { return getToken(PLSQLParser.FOR, 0); }
		public TerminalNode OLTP() { return getToken(PLSQLParser.OLTP, 0); }
		public TerminalNode QUERY() { return getToken(PLSQLParser.QUERY, 0); }
		public TerminalNode ARCHIVE() { return getToken(PLSQLParser.ARCHIVE, 0); }
		public TerminalNode LOW() { return getToken(PLSQLParser.LOW, 0); }
		public TerminalNode HIGH() { return getToken(PLSQLParser.HIGH, 0); }
		public TerminalNode NOCOMPRESS() { return getToken(PLSQLParser.NOCOMPRESS, 0); }
		public Table_compressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_compression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterTable_compression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitTable_compression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitTable_compression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_compressionContext table_compression() throws RecognitionException {
		Table_compressionContext _localctx = new Table_compressionContext(_ctx, getState());
		enterRule(_localctx, 74, RULE_table_compression);
		int _la;
		try {
			setState(1722);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case COMPRESS:
				enterOuterAlt(_localctx, 1);
				{
				setState(1709);
				match(COMPRESS);
				setState(1719);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,112,_ctx) ) {
				case 1:
					{
					setState(1710);
					match(BASIC);
					}
					break;
				case 2:
					{
					setState(1711);
					match(FOR);
					setState(1717);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case OLTP:
						{
						setState(1712);
						match(OLTP);
						}
						break;
					case ARCHIVE:
					case QUERY:
						{
						setState(1713);
						_la = _input.LA(1);
						if ( !(_la==ARCHIVE || _la==QUERY) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(1715);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==HIGH || _la==LOW) {
							{
							setState(1714);
							_la = _input.LA(1);
							if ( !(_la==HIGH || _la==LOW) ) {
							_errHandler.recoverInline(this);
							}
							else {
								if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
								_errHandler.reportMatch(this);
								consume();
							}
							}
						}

						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				}
				}
				break;
			case NOCOMPRESS:
				enterOuterAlt(_localctx, 2);
				{
				setState(1721);
				match(NOCOMPRESS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Lob_partitioning_storageContext extends ParserRuleContext {
		public TerminalNode LOB() { return getToken(PLSQLParser.LOB, 0); }
		public List<TerminalNode> LEFT_PAREN() { return getTokens(PLSQLParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(PLSQLParser.LEFT_PAREN, i);
		}
		public Lob_itemContext lob_item() {
			return getRuleContext(Lob_itemContext.class,0);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(PLSQLParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(PLSQLParser.RIGHT_PAREN, i);
		}
		public TerminalNode STORE() { return getToken(PLSQLParser.STORE, 0); }
		public TerminalNode AS() { return getToken(PLSQLParser.AS, 0); }
		public Lob_segnameContext lob_segname() {
			return getRuleContext(Lob_segnameContext.class,0);
		}
		public TerminalNode TABLESPACE() { return getToken(PLSQLParser.TABLESPACE, 0); }
		public TablespaceContext tablespace() {
			return getRuleContext(TablespaceContext.class,0);
		}
		public TerminalNode BASICFILE() { return getToken(PLSQLParser.BASICFILE, 0); }
		public TerminalNode SECUREFILE() { return getToken(PLSQLParser.SECUREFILE, 0); }
		public Lob_partitioning_storageContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lob_partitioning_storage; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterLob_partitioning_storage(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitLob_partitioning_storage(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitLob_partitioning_storage(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Lob_partitioning_storageContext lob_partitioning_storage() throws RecognitionException {
		Lob_partitioning_storageContext _localctx = new Lob_partitioning_storageContext(_ctx, getState());
		enterRule(_localctx, 76, RULE_lob_partitioning_storage);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1724);
			match(LOB);
			setState(1725);
			match(LEFT_PAREN);
			setState(1726);
			lob_item();
			setState(1727);
			match(RIGHT_PAREN);
			setState(1728);
			match(STORE);
			setState(1729);
			match(AS);
			setState(1731);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==BASICFILE || _la==SECUREFILE) {
				{
				setState(1730);
				_la = _input.LA(1);
				if ( !(_la==BASICFILE || _la==SECUREFILE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(1746);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BUILD:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPLETE:
			case COMPOUND:
			case CONCAT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECODE:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DEMAND:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case EDITIONING:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENFORCED:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FAST:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LIST:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MASTER:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEVER:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NVL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case MATERIALIZED:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PREBUILT:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PUBLIC:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REDUCED:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REFRESH:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case REWRITE:
			case RIGHT:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SIZE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBSTRING:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TABLES:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TO_CHAR:
			case TO_DATE:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TRUSTED:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERBOSE:
			case VERSION:
			case VERSIONS:
			case VIEW:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHOUT:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case REGULAR_ID:
				{
				setState(1733);
				lob_segname();
				setState(1739);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEFT_PAREN) {
					{
					setState(1734);
					match(LEFT_PAREN);
					setState(1735);
					match(TABLESPACE);
					setState(1736);
					tablespace();
					setState(1737);
					match(RIGHT_PAREN);
					}
				}

				}
				break;
			case LEFT_PAREN:
				{
				setState(1741);
				match(LEFT_PAREN);
				setState(1742);
				match(TABLESPACE);
				setState(1743);
				tablespace();
				setState(1744);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Lob_itemContext extends ParserRuleContext {
		public Regular_idContext regular_id() {
			return getRuleContext(Regular_idContext.class,0);
		}
		public Lob_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lob_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterLob_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitLob_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitLob_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Lob_itemContext lob_item() throws RecognitionException {
		Lob_itemContext _localctx = new Lob_itemContext(_ctx, getState());
		enterRule(_localctx, 78, RULE_lob_item);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1748);
			regular_id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Lob_segnameContext extends ParserRuleContext {
		public Regular_idContext regular_id() {
			return getRuleContext(Regular_idContext.class,0);
		}
		public Lob_segnameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lob_segname; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterLob_segname(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitLob_segname(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitLob_segname(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Lob_segnameContext lob_segname() throws RecognitionException {
		Lob_segnameContext _localctx = new Lob_segnameContext(_ctx, getState());
		enterRule(_localctx, 80, RULE_lob_segname);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1750);
			regular_id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Varray_itemContext extends ParserRuleContext {
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public List<TerminalNode> PERIOD() { return getTokens(PLSQLParser.PERIOD); }
		public TerminalNode PERIOD(int i) {
			return getToken(PLSQLParser.PERIOD, i);
		}
		public Varray_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_varray_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterVarray_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitVarray_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitVarray_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Varray_itemContext varray_item() throws RecognitionException {
		Varray_itemContext _localctx = new Varray_itemContext(_ctx, getState());
		enterRule(_localctx, 82, RULE_varray_item);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1755);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,117,_ctx) ) {
			case 1:
				{
				setState(1752);
				id_expression();
				setState(1753);
				match(PERIOD);
				}
				break;
			}
			setState(1760);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,118,_ctx) ) {
			case 1:
				{
				setState(1757);
				id_expression();
				setState(1758);
				match(PERIOD);
				}
				break;
			}
			setState(1762);
			id_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Hash_partitions_by_quantityContext extends ParserRuleContext {
		public TerminalNode PARTITIONS() { return getToken(PLSQLParser.PARTITIONS, 0); }
		public Hash_partition_quantityContext hash_partition_quantity() {
			return getRuleContext(Hash_partition_quantityContext.class,0);
		}
		public List<TerminalNode> STORE() { return getTokens(PLSQLParser.STORE); }
		public TerminalNode STORE(int i) {
			return getToken(PLSQLParser.STORE, i);
		}
		public List<TerminalNode> IN() { return getTokens(PLSQLParser.IN); }
		public TerminalNode IN(int i) {
			return getToken(PLSQLParser.IN, i);
		}
		public List<TerminalNode> LEFT_PAREN() { return getTokens(PLSQLParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(PLSQLParser.LEFT_PAREN, i);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(PLSQLParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(PLSQLParser.RIGHT_PAREN, i);
		}
		public Table_compressionContext table_compression() {
			return getRuleContext(Table_compressionContext.class,0);
		}
		public Key_compressionContext key_compression() {
			return getRuleContext(Key_compressionContext.class,0);
		}
		public TerminalNode OVERFLOW() { return getToken(PLSQLParser.OVERFLOW, 0); }
		public List<TablespaceContext> tablespace() {
			return getRuleContexts(TablespaceContext.class);
		}
		public TablespaceContext tablespace(int i) {
			return getRuleContext(TablespaceContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLSQLParser.COMMA, i);
		}
		public Hash_partitions_by_quantityContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_hash_partitions_by_quantity; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterHash_partitions_by_quantity(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitHash_partitions_by_quantity(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitHash_partitions_by_quantity(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Hash_partitions_by_quantityContext hash_partitions_by_quantity() throws RecognitionException {
		Hash_partitions_by_quantityContext _localctx = new Hash_partitions_by_quantityContext(_ctx, getState());
		enterRule(_localctx, 84, RULE_hash_partitions_by_quantity);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1764);
			match(PARTITIONS);
			setState(1765);
			hash_partition_quantity();
			setState(1779);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==STORE) {
				{
				setState(1766);
				match(STORE);
				setState(1767);
				match(IN);
				setState(1768);
				match(LEFT_PAREN);
				setState(1773); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(1770);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(1769);
						match(COMMA);
						}
					}

					setState(1772);
					tablespace();
					}
					}
					setState(1775); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BUILD) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (CHR - 65)) | (1L << (CLOB - 65)) | (1L << (CLOSE - 65)) | (1L << (CLUSTER - 65)) | (1L << (COALESCE - 65)) | (1L << (COLLECT - 65)) | (1L << (COLUMNS - 65)) | (1L << (COMMENT - 65)) | (1L << (COMMIT - 65)) | (1L << (COMMITTED - 65)) | (1L << (COMPATIBILITY - 65)) | (1L << (COMPILE - 65)) | (1L << (COMPLETE - 65)) | (1L << (COMPOUND - 65)) | (1L << (CONCAT - 65)) | (1L << (CONSTANT - 65)) | (1L << (CONSTRAINT - 65)) | (1L << (CONSTRAINTS - 65)) | (1L << (CONSTRUCTOR - 65)) | (1L << (CONTENT - 65)) | (1L << (CONTEXT - 65)) | (1L << (CONTINUE - 65)) | (1L << (CONVERT - 65)) | (1L << (CORRUPT_XID - 65)) | (1L << (CORRUPT_XID_ALL - 65)) | (1L << (COST - 65)) | (1L << (COUNT - 65)) | (1L << (CROSS - 65)) | (1L << (CUBE - 65)) | (1L << (CURRENT_USER - 65)) | (1L << (CURSOR - 65)) | (1L << (CUSTOMDATUM - 65)) | (1L << (CYCLE - 65)) | (1L << (DATA - 65)) | (1L << (DATABASE - 65)) | (1L << (DATE - 65)) | (1L << (DAY - 65)) | (1L << (DB_ROLE_CHANGE - 65)) | (1L << (DBTIMEZONE - 65)) | (1L << (DDL - 65)) | (1L << (DEBUG - 65)) | (1L << (DEC - 65)) | (1L << (DECIMAL - 65)) | (1L << (DECODE - 65)) | (1L << (DECOMPOSE - 65)) | (1L << (DECREMENT - 65)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DEMAND - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (EDITIONING - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENFORCED - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FAST - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)) | (1L << (FOLLOWING - 129)) | (1L << (FOLLOWS - 129)) | (1L << (FORALL - 129)) | (1L << (FORCE - 129)))) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & ((1L << (FULL - 197)) | (1L << (FUNCTION - 197)) | (1L << (GROUPING - 197)) | (1L << (HASH - 197)) | (1L << (HIDE - 197)) | (1L << (HOUR - 197)) | (1L << (IGNORE - 197)) | (1L << (IMMEDIATE - 197)) | (1L << (INCLUDE - 197)) | (1L << (INCLUDING - 197)) | (1L << (INCREMENT - 197)) | (1L << (INDENT - 197)) | (1L << (INDEXED - 197)) | (1L << (INDICATOR - 197)) | (1L << (INDICES - 197)) | (1L << (INFINITE - 197)) | (1L << (INLINE - 197)) | (1L << (INNER - 197)) | (1L << (INOUT - 197)) | (1L << (INSTANTIABLE - 197)) | (1L << (INSTEAD - 197)) | (1L << (INT - 197)) | (1L << (INTEGER - 197)) | (1L << (INTERVAL - 197)) | (1L << (INVALIDATE - 197)) | (1L << (ISOLATION - 197)) | (1L << (ITERATE - 197)) | (1L << (JAVA - 197)) | (1L << (JOIN - 197)) | (1L << (KEEP - 197)) | (1L << (LANGUAGE - 197)) | (1L << (LAST - 197)) | (1L << (LAST_VALUE - 197)) | (1L << (LEADING - 197)) | (1L << (LEFT - 197)) | (1L << (LEVEL - 197)))) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & ((1L << (LIBRARY - 261)) | (1L << (LIKE2 - 261)) | (1L << (LIKE4 - 261)) | (1L << (LIKEC - 261)) | (1L << (LIMIT - 261)) | (1L << (LIST - 261)) | (1L << (LOCAL - 261)) | (1L << (LOCKED - 261)) | (1L << (LOG - 261)) | (1L << (LOGOFF - 261)) | (1L << (LOGON - 261)) | (1L << (LONG - 261)) | (1L << (LOOP - 261)) | (1L << (MAIN - 261)) | (1L << (MAP - 261)) | (1L << (MASTER - 261)) | (1L << (MATCHED - 261)) | (1L << (MAXVALUE - 261)) | (1L << (MEASURES - 261)) | (1L << (MEMBER - 261)) | (1L << (MERGE - 261)) | (1L << (MINUTE - 261)) | (1L << (MINVALUE - 261)) | (1L << (MLSLABEL - 261)) | (1L << (MODEL - 261)) | (1L << (MODIFY - 261)) | (1L << (MONTH - 261)) | (1L << (MULTISET - 261)) | (1L << (NAME - 261)) | (1L << (NAN - 261)) | (1L << (NATURAL - 261)) | (1L << (NATURALN - 261)) | (1L << (NAV - 261)) | (1L << (NCHAR - 261)) | (1L << (NCHAR_CS - 261)) | (1L << (NCLOB - 261)) | (1L << (NESTED - 261)) | (1L << (NEVER - 261)) | (1L << (NEW - 261)) | (1L << (NO - 261)) | (1L << (NOAUDIT - 261)) | (1L << (NOCOPY - 261)) | (1L << (NOCYCLE - 261)) | (1L << (NOENTITYESCAPING - 261)))) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & ((1L << (NONE - 329)) | (1L << (NOSCHEMACHECK - 329)) | (1L << (NVL - 329)) | (1L << (NULLS - 329)) | (1L << (NUMBER - 329)) | (1L << (NUMERIC - 329)) | (1L << (NVARCHAR2 - 329)) | (1L << (MATERIALIZED - 329)) | (1L << (OBJECT - 329)) | (1L << (OFF - 329)) | (1L << (OID - 329)) | (1L << (OLD - 329)) | (1L << (ONLY - 329)) | (1L << (OPEN - 329)) | (1L << (ORADATA - 329)) | (1L << (ORDINALITY - 329)) | (1L << (OSERROR - 329)) | (1L << (OUT - 329)) | (1L << (OUTER - 329)) | (1L << (OVER - 329)) | (1L << (OVERRIDING - 329)) | (1L << (PACKAGE - 329)) | (1L << (PARALLEL_ENABLE - 329)) | (1L << (PARAMETERS - 329)) | (1L << (PARENT - 329)) | (1L << (PARTITION - 329)) | (1L << (PASSING - 329)) | (1L << (PATH - 329)) | (1L << (PIPELINED - 329)) | (1L << (PLAN - 329)) | (1L << (PLS_INTEGER - 329)) | (1L << (POSITIVE - 329)) | (1L << (POSITIVEN - 329)) | (1L << (PRAGMA - 329)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (PREBUILT - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)) | (1L << (PRESENT - 393)) | (1L << (PUBLIC - 393)) | (1L << (RAISE - 393)) | (1L << (RANGE - 393)) | (1L << (RAW - 393)) | (1L << (READ - 393)) | (1L << (REAL - 393)) | (1L << (RECORD - 393)) | (1L << (REDUCED - 393)) | (1L << (REF - 393)) | (1L << (REFERENCE - 393)) | (1L << (REFERENCING - 393)) | (1L << (REFRESH - 393)) | (1L << (REJECT - 393)) | (1L << (RELIES_ON - 393)) | (1L << (RENAME - 393)) | (1L << (REPLACE - 393)) | (1L << (RESPECT - 393)) | (1L << (RESTRICT_REFERENCES - 393)) | (1L << (RESULT - 393)) | (1L << (RESULT_CACHE - 393)) | (1L << (RETURN - 393)) | (1L << (RETURNING - 393)) | (1L << (REUSE - 393)) | (1L << (REVERSE - 393)) | (1L << (REWRITE - 393)) | (1L << (RIGHT - 393)) | (1L << (ROLE - 393)) | (1L << (ROLLBACK - 393)) | (1L << (ROLLUP - 393)) | (1L << (ROW - 393)) | (1L << (ROWID - 393)) | (1L << (ROWS - 393)) | (1L << (RULES - 393)) | (1L << (SAMPLE - 393)) | (1L << (SAVE - 393)) | (1L << (SAVEPOINT - 393)) | (1L << (SCHEMA - 393)) | (1L << (SCHEMACHECK - 393)) | (1L << (SCN - 393)) | (1L << (SECOND - 393)))) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & ((1L << (SEED - 458)) | (1L << (SEGMENT - 458)) | (1L << (SELF - 458)) | (1L << (SEQUENTIAL - 458)) | (1L << (SERIALIZABLE - 458)) | (1L << (SERIALLY_REUSABLE - 458)) | (1L << (SERVERERROR - 458)) | (1L << (SESSIONTIMEZONE - 458)) | (1L << (SET - 458)) | (1L << (SETS - 458)) | (1L << (SETTINGS - 458)) | (1L << (SHOW - 458)) | (1L << (SHUTDOWN - 458)) | (1L << (SIBLINGS - 458)) | (1L << (SIGNTYPE - 458)) | (1L << (SIMPLE_INTEGER - 458)) | (1L << (SINGLE - 458)) | (1L << (SIZE - 458)) | (1L << (SKIP_ - 458)) | (1L << (SMALLINT - 458)) | (1L << (SNAPSHOT - 458)) | (1L << (SOME - 458)) | (1L << (SPECIFICATION - 458)) | (1L << (SQLDATA - 458)) | (1L << (SQLERROR - 458)) | (1L << (STANDALONE - 458)) | (1L << (STARTUP - 458)) | (1L << (STATEMENT - 458)) | (1L << (STATEMENT_ID - 458)) | (1L << (STATIC - 458)) | (1L << (STATISTICS - 458)) | (1L << (STRING - 458)) | (1L << (SUBMULTISET - 458)) | (1L << (SUBPARTITION - 458)) | (1L << (SUBSTITUTABLE - 458)) | (1L << (SUBSTRING - 458)) | (1L << (SUBTYPE - 458)) | (1L << (SUCCESS - 458)) | (1L << (SUSPEND - 458)) | (1L << (TABLES - 458)) | (1L << (TIME - 458)) | (1L << (TIMESTAMP - 458)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 458)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 458)) | (1L << (TIMESTAMP_UNCONSTRAINED - 458)))) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & ((1L << (TIMEZONE_ABBR - 522)) | (1L << (TIMEZONE_HOUR - 522)) | (1L << (TIMEZONE_MINUTE - 522)) | (1L << (TIMEZONE_REGION - 522)) | (1L << (TO_CHAR - 522)) | (1L << (TO_DATE - 522)) | (1L << (TRAILING - 522)) | (1L << (TRANSACTION - 522)) | (1L << (TRANSLATE - 522)) | (1L << (TREAT - 522)) | (1L << (TRIGGER - 522)) | (1L << (TRIM - 522)) | (1L << (TRUNCATE - 522)) | (1L << (TRUSTED - 522)) | (1L << (TYPE - 522)) | (1L << (UNBOUNDED - 522)) | (1L << (UNDER - 522)) | (1L << (UNLIMITED - 522)) | (1L << (UNTIL - 522)) | (1L << (UPDATED - 522)) | (1L << (UPSERT - 522)) | (1L << (UROWID - 522)) | (1L << (USE - 522)) | (1L << (VALIDATE - 522)) | (1L << (VALUE - 522)) | (1L << (VARCHAR - 522)) | (1L << (VARCHAR2 - 522)) | (1L << (VARIABLE - 522)) | (1L << (VARRAY - 522)) | (1L << (VARYING - 522)) | (1L << (VERBOSE - 522)) | (1L << (VERSION - 522)) | (1L << (VERSIONS - 522)) | (1L << (VIEW - 522)) | (1L << (WAIT - 522)) | (1L << (WARNING - 522)) | (1L << (WELLFORMED - 522)) | (1L << (WHENEVER - 522)) | (1L << (WHILE - 522)) | (1L << (WITHOUT - 522)) | (1L << (WITHIN - 522)) | (1L << (WORK - 522)) | (1L << (WRITE - 522)) | (1L << (XML - 522)) | (1L << (XMLAGG - 522)) | (1L << (XMLATTRIBUTES - 522)))) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & ((1L << (XMLCAST - 586)) | (1L << (XMLCOLATTVAL - 586)) | (1L << (XMLELEMENT - 586)) | (1L << (XMLEXISTS - 586)) | (1L << (XMLFOREST - 586)) | (1L << (XMLNAMESPACES - 586)) | (1L << (XMLPARSE - 586)) | (1L << (XMLPI - 586)) | (1L << (XMLQUERY - 586)) | (1L << (XMLROOT - 586)) | (1L << (XMLSERIALIZE - 586)) | (1L << (XMLTABLE - 586)) | (1L << (YEAR - 586)) | (1L << (YES - 586)) | (1L << (YMINTERVAL_UNCONSTRAINED - 586)) | (1L << (ZONE - 586)) | (1L << (PREDICTION - 586)) | (1L << (PREDICTION_BOUNDS - 586)) | (1L << (PREDICTION_COST - 586)) | (1L << (PREDICTION_DETAILS - 586)) | (1L << (PREDICTION_PROBABILITY - 586)) | (1L << (PREDICTION_SET - 586)) | (1L << (CUME_DIST - 586)) | (1L << (DENSE_RANK - 586)) | (1L << (LISTAGG - 586)) | (1L << (PERCENT_RANK - 586)) | (1L << (PERCENTILE_CONT - 586)) | (1L << (PERCENTILE_DISC - 586)) | (1L << (RANK - 586)) | (1L << (AVG - 586)) | (1L << (CORR - 586)) | (1L << (LAG - 586)) | (1L << (LEAD - 586)) | (1L << (MAX - 586)) | (1L << (MEDIAN - 586)) | (1L << (MIN - 586)) | (1L << (NTILE - 586)) | (1L << (RATIO_TO_REPORT - 586)) | (1L << (ROW_NUMBER - 586)) | (1L << (SUM - 586)) | (1L << (VARIANCE - 586)) | (1L << (REGR_ - 586)) | (1L << (STDDEV - 586)) | (1L << (VAR_ - 586)) | (1L << (COVAR_ - 586)))) != 0) || _la==COMMA || _la==REGULAR_ID );
				setState(1777);
				match(RIGHT_PAREN);
				}
			}

			setState(1783);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,122,_ctx) ) {
			case 1:
				{
				setState(1781);
				table_compression();
				}
				break;
			case 2:
				{
				setState(1782);
				key_compression();
				}
				break;
			}
			setState(1799);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OVERFLOW) {
				{
				setState(1785);
				match(OVERFLOW);
				setState(1786);
				match(STORE);
				setState(1787);
				match(IN);
				setState(1788);
				match(LEFT_PAREN);
				setState(1793); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(1790);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(1789);
						match(COMMA);
						}
					}

					setState(1792);
					tablespace();
					}
					}
					setState(1795); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BUILD) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (CHR - 65)) | (1L << (CLOB - 65)) | (1L << (CLOSE - 65)) | (1L << (CLUSTER - 65)) | (1L << (COALESCE - 65)) | (1L << (COLLECT - 65)) | (1L << (COLUMNS - 65)) | (1L << (COMMENT - 65)) | (1L << (COMMIT - 65)) | (1L << (COMMITTED - 65)) | (1L << (COMPATIBILITY - 65)) | (1L << (COMPILE - 65)) | (1L << (COMPLETE - 65)) | (1L << (COMPOUND - 65)) | (1L << (CONCAT - 65)) | (1L << (CONSTANT - 65)) | (1L << (CONSTRAINT - 65)) | (1L << (CONSTRAINTS - 65)) | (1L << (CONSTRUCTOR - 65)) | (1L << (CONTENT - 65)) | (1L << (CONTEXT - 65)) | (1L << (CONTINUE - 65)) | (1L << (CONVERT - 65)) | (1L << (CORRUPT_XID - 65)) | (1L << (CORRUPT_XID_ALL - 65)) | (1L << (COST - 65)) | (1L << (COUNT - 65)) | (1L << (CROSS - 65)) | (1L << (CUBE - 65)) | (1L << (CURRENT_USER - 65)) | (1L << (CURSOR - 65)) | (1L << (CUSTOMDATUM - 65)) | (1L << (CYCLE - 65)) | (1L << (DATA - 65)) | (1L << (DATABASE - 65)) | (1L << (DATE - 65)) | (1L << (DAY - 65)) | (1L << (DB_ROLE_CHANGE - 65)) | (1L << (DBTIMEZONE - 65)) | (1L << (DDL - 65)) | (1L << (DEBUG - 65)) | (1L << (DEC - 65)) | (1L << (DECIMAL - 65)) | (1L << (DECODE - 65)) | (1L << (DECOMPOSE - 65)) | (1L << (DECREMENT - 65)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DEMAND - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (EDITIONING - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENFORCED - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FAST - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)) | (1L << (FOLLOWING - 129)) | (1L << (FOLLOWS - 129)) | (1L << (FORALL - 129)) | (1L << (FORCE - 129)))) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & ((1L << (FULL - 197)) | (1L << (FUNCTION - 197)) | (1L << (GROUPING - 197)) | (1L << (HASH - 197)) | (1L << (HIDE - 197)) | (1L << (HOUR - 197)) | (1L << (IGNORE - 197)) | (1L << (IMMEDIATE - 197)) | (1L << (INCLUDE - 197)) | (1L << (INCLUDING - 197)) | (1L << (INCREMENT - 197)) | (1L << (INDENT - 197)) | (1L << (INDEXED - 197)) | (1L << (INDICATOR - 197)) | (1L << (INDICES - 197)) | (1L << (INFINITE - 197)) | (1L << (INLINE - 197)) | (1L << (INNER - 197)) | (1L << (INOUT - 197)) | (1L << (INSTANTIABLE - 197)) | (1L << (INSTEAD - 197)) | (1L << (INT - 197)) | (1L << (INTEGER - 197)) | (1L << (INTERVAL - 197)) | (1L << (INVALIDATE - 197)) | (1L << (ISOLATION - 197)) | (1L << (ITERATE - 197)) | (1L << (JAVA - 197)) | (1L << (JOIN - 197)) | (1L << (KEEP - 197)) | (1L << (LANGUAGE - 197)) | (1L << (LAST - 197)) | (1L << (LAST_VALUE - 197)) | (1L << (LEADING - 197)) | (1L << (LEFT - 197)) | (1L << (LEVEL - 197)))) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & ((1L << (LIBRARY - 261)) | (1L << (LIKE2 - 261)) | (1L << (LIKE4 - 261)) | (1L << (LIKEC - 261)) | (1L << (LIMIT - 261)) | (1L << (LIST - 261)) | (1L << (LOCAL - 261)) | (1L << (LOCKED - 261)) | (1L << (LOG - 261)) | (1L << (LOGOFF - 261)) | (1L << (LOGON - 261)) | (1L << (LONG - 261)) | (1L << (LOOP - 261)) | (1L << (MAIN - 261)) | (1L << (MAP - 261)) | (1L << (MASTER - 261)) | (1L << (MATCHED - 261)) | (1L << (MAXVALUE - 261)) | (1L << (MEASURES - 261)) | (1L << (MEMBER - 261)) | (1L << (MERGE - 261)) | (1L << (MINUTE - 261)) | (1L << (MINVALUE - 261)) | (1L << (MLSLABEL - 261)) | (1L << (MODEL - 261)) | (1L << (MODIFY - 261)) | (1L << (MONTH - 261)) | (1L << (MULTISET - 261)) | (1L << (NAME - 261)) | (1L << (NAN - 261)) | (1L << (NATURAL - 261)) | (1L << (NATURALN - 261)) | (1L << (NAV - 261)) | (1L << (NCHAR - 261)) | (1L << (NCHAR_CS - 261)) | (1L << (NCLOB - 261)) | (1L << (NESTED - 261)) | (1L << (NEVER - 261)) | (1L << (NEW - 261)) | (1L << (NO - 261)) | (1L << (NOAUDIT - 261)) | (1L << (NOCOPY - 261)) | (1L << (NOCYCLE - 261)) | (1L << (NOENTITYESCAPING - 261)))) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & ((1L << (NONE - 329)) | (1L << (NOSCHEMACHECK - 329)) | (1L << (NVL - 329)) | (1L << (NULLS - 329)) | (1L << (NUMBER - 329)) | (1L << (NUMERIC - 329)) | (1L << (NVARCHAR2 - 329)) | (1L << (MATERIALIZED - 329)) | (1L << (OBJECT - 329)) | (1L << (OFF - 329)) | (1L << (OID - 329)) | (1L << (OLD - 329)) | (1L << (ONLY - 329)) | (1L << (OPEN - 329)) | (1L << (ORADATA - 329)) | (1L << (ORDINALITY - 329)) | (1L << (OSERROR - 329)) | (1L << (OUT - 329)) | (1L << (OUTER - 329)) | (1L << (OVER - 329)) | (1L << (OVERRIDING - 329)) | (1L << (PACKAGE - 329)) | (1L << (PARALLEL_ENABLE - 329)) | (1L << (PARAMETERS - 329)) | (1L << (PARENT - 329)) | (1L << (PARTITION - 329)) | (1L << (PASSING - 329)) | (1L << (PATH - 329)) | (1L << (PIPELINED - 329)) | (1L << (PLAN - 329)) | (1L << (PLS_INTEGER - 329)) | (1L << (POSITIVE - 329)) | (1L << (POSITIVEN - 329)) | (1L << (PRAGMA - 329)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (PREBUILT - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)) | (1L << (PRESENT - 393)) | (1L << (PUBLIC - 393)) | (1L << (RAISE - 393)) | (1L << (RANGE - 393)) | (1L << (RAW - 393)) | (1L << (READ - 393)) | (1L << (REAL - 393)) | (1L << (RECORD - 393)) | (1L << (REDUCED - 393)) | (1L << (REF - 393)) | (1L << (REFERENCE - 393)) | (1L << (REFERENCING - 393)) | (1L << (REFRESH - 393)) | (1L << (REJECT - 393)) | (1L << (RELIES_ON - 393)) | (1L << (RENAME - 393)) | (1L << (REPLACE - 393)) | (1L << (RESPECT - 393)) | (1L << (RESTRICT_REFERENCES - 393)) | (1L << (RESULT - 393)) | (1L << (RESULT_CACHE - 393)) | (1L << (RETURN - 393)) | (1L << (RETURNING - 393)) | (1L << (REUSE - 393)) | (1L << (REVERSE - 393)) | (1L << (REWRITE - 393)) | (1L << (RIGHT - 393)) | (1L << (ROLE - 393)) | (1L << (ROLLBACK - 393)) | (1L << (ROLLUP - 393)) | (1L << (ROW - 393)) | (1L << (ROWID - 393)) | (1L << (ROWS - 393)) | (1L << (RULES - 393)) | (1L << (SAMPLE - 393)) | (1L << (SAVE - 393)) | (1L << (SAVEPOINT - 393)) | (1L << (SCHEMA - 393)) | (1L << (SCHEMACHECK - 393)) | (1L << (SCN - 393)) | (1L << (SECOND - 393)))) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & ((1L << (SEED - 458)) | (1L << (SEGMENT - 458)) | (1L << (SELF - 458)) | (1L << (SEQUENTIAL - 458)) | (1L << (SERIALIZABLE - 458)) | (1L << (SERIALLY_REUSABLE - 458)) | (1L << (SERVERERROR - 458)) | (1L << (SESSIONTIMEZONE - 458)) | (1L << (SET - 458)) | (1L << (SETS - 458)) | (1L << (SETTINGS - 458)) | (1L << (SHOW - 458)) | (1L << (SHUTDOWN - 458)) | (1L << (SIBLINGS - 458)) | (1L << (SIGNTYPE - 458)) | (1L << (SIMPLE_INTEGER - 458)) | (1L << (SINGLE - 458)) | (1L << (SIZE - 458)) | (1L << (SKIP_ - 458)) | (1L << (SMALLINT - 458)) | (1L << (SNAPSHOT - 458)) | (1L << (SOME - 458)) | (1L << (SPECIFICATION - 458)) | (1L << (SQLDATA - 458)) | (1L << (SQLERROR - 458)) | (1L << (STANDALONE - 458)) | (1L << (STARTUP - 458)) | (1L << (STATEMENT - 458)) | (1L << (STATEMENT_ID - 458)) | (1L << (STATIC - 458)) | (1L << (STATISTICS - 458)) | (1L << (STRING - 458)) | (1L << (SUBMULTISET - 458)) | (1L << (SUBPARTITION - 458)) | (1L << (SUBSTITUTABLE - 458)) | (1L << (SUBSTRING - 458)) | (1L << (SUBTYPE - 458)) | (1L << (SUCCESS - 458)) | (1L << (SUSPEND - 458)) | (1L << (TABLES - 458)) | (1L << (TIME - 458)) | (1L << (TIMESTAMP - 458)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 458)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 458)) | (1L << (TIMESTAMP_UNCONSTRAINED - 458)))) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & ((1L << (TIMEZONE_ABBR - 522)) | (1L << (TIMEZONE_HOUR - 522)) | (1L << (TIMEZONE_MINUTE - 522)) | (1L << (TIMEZONE_REGION - 522)) | (1L << (TO_CHAR - 522)) | (1L << (TO_DATE - 522)) | (1L << (TRAILING - 522)) | (1L << (TRANSACTION - 522)) | (1L << (TRANSLATE - 522)) | (1L << (TREAT - 522)) | (1L << (TRIGGER - 522)) | (1L << (TRIM - 522)) | (1L << (TRUNCATE - 522)) | (1L << (TRUSTED - 522)) | (1L << (TYPE - 522)) | (1L << (UNBOUNDED - 522)) | (1L << (UNDER - 522)) | (1L << (UNLIMITED - 522)) | (1L << (UNTIL - 522)) | (1L << (UPDATED - 522)) | (1L << (UPSERT - 522)) | (1L << (UROWID - 522)) | (1L << (USE - 522)) | (1L << (VALIDATE - 522)) | (1L << (VALUE - 522)) | (1L << (VARCHAR - 522)) | (1L << (VARCHAR2 - 522)) | (1L << (VARIABLE - 522)) | (1L << (VARRAY - 522)) | (1L << (VARYING - 522)) | (1L << (VERBOSE - 522)) | (1L << (VERSION - 522)) | (1L << (VERSIONS - 522)) | (1L << (VIEW - 522)) | (1L << (WAIT - 522)) | (1L << (WARNING - 522)) | (1L << (WELLFORMED - 522)) | (1L << (WHENEVER - 522)) | (1L << (WHILE - 522)) | (1L << (WITHOUT - 522)) | (1L << (WITHIN - 522)) | (1L << (WORK - 522)) | (1L << (WRITE - 522)) | (1L << (XML - 522)) | (1L << (XMLAGG - 522)) | (1L << (XMLATTRIBUTES - 522)))) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & ((1L << (XMLCAST - 586)) | (1L << (XMLCOLATTVAL - 586)) | (1L << (XMLELEMENT - 586)) | (1L << (XMLEXISTS - 586)) | (1L << (XMLFOREST - 586)) | (1L << (XMLNAMESPACES - 586)) | (1L << (XMLPARSE - 586)) | (1L << (XMLPI - 586)) | (1L << (XMLQUERY - 586)) | (1L << (XMLROOT - 586)) | (1L << (XMLSERIALIZE - 586)) | (1L << (XMLTABLE - 586)) | (1L << (YEAR - 586)) | (1L << (YES - 586)) | (1L << (YMINTERVAL_UNCONSTRAINED - 586)) | (1L << (ZONE - 586)) | (1L << (PREDICTION - 586)) | (1L << (PREDICTION_BOUNDS - 586)) | (1L << (PREDICTION_COST - 586)) | (1L << (PREDICTION_DETAILS - 586)) | (1L << (PREDICTION_PROBABILITY - 586)) | (1L << (PREDICTION_SET - 586)) | (1L << (CUME_DIST - 586)) | (1L << (DENSE_RANK - 586)) | (1L << (LISTAGG - 586)) | (1L << (PERCENT_RANK - 586)) | (1L << (PERCENTILE_CONT - 586)) | (1L << (PERCENTILE_DISC - 586)) | (1L << (RANK - 586)) | (1L << (AVG - 586)) | (1L << (CORR - 586)) | (1L << (LAG - 586)) | (1L << (LEAD - 586)) | (1L << (MAX - 586)) | (1L << (MEDIAN - 586)) | (1L << (MIN - 586)) | (1L << (NTILE - 586)) | (1L << (RATIO_TO_REPORT - 586)) | (1L << (ROW_NUMBER - 586)) | (1L << (SUM - 586)) | (1L << (VARIANCE - 586)) | (1L << (REGR_ - 586)) | (1L << (STDDEV - 586)) | (1L << (VAR_ - 586)) | (1L << (COVAR_ - 586)))) != 0) || _la==COMMA || _la==REGULAR_ID );
				setState(1797);
				match(RIGHT_PAREN);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Hash_partition_quantityContext extends ParserRuleContext {
		public TerminalNode UNSIGNED_INTEGER() { return getToken(PLSQLParser.UNSIGNED_INTEGER, 0); }
		public Hash_partition_quantityContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_hash_partition_quantity; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterHash_partition_quantity(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitHash_partition_quantity(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitHash_partition_quantity(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Hash_partition_quantityContext hash_partition_quantity() throws RecognitionException {
		Hash_partition_quantityContext _localctx = new Hash_partition_quantityContext(_ctx, getState());
		enterRule(_localctx, 86, RULE_hash_partition_quantity);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1801);
			match(UNSIGNED_INTEGER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Local_partitioned_indexContext extends ParserRuleContext {
		public TerminalNode LOCAL() { return getToken(PLSQLParser.LOCAL, 0); }
		public On_range_partitioned_tableContext on_range_partitioned_table() {
			return getRuleContext(On_range_partitioned_tableContext.class,0);
		}
		public On_list_partitioned_tableContext on_list_partitioned_table() {
			return getRuleContext(On_list_partitioned_tableContext.class,0);
		}
		public On_hash_partitioned_tableContext on_hash_partitioned_table() {
			return getRuleContext(On_hash_partitioned_tableContext.class,0);
		}
		public On_comp_partitioned_tableContext on_comp_partitioned_table() {
			return getRuleContext(On_comp_partitioned_tableContext.class,0);
		}
		public Local_partitioned_indexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_local_partitioned_index; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterLocal_partitioned_index(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitLocal_partitioned_index(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitLocal_partitioned_index(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Local_partitioned_indexContext local_partitioned_index() throws RecognitionException {
		Local_partitioned_indexContext _localctx = new Local_partitioned_indexContext(_ctx, getState());
		enterRule(_localctx, 88, RULE_local_partitioned_index);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1803);
			match(LOCAL);
			setState(1808);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,126,_ctx) ) {
			case 1:
				{
				setState(1804);
				on_range_partitioned_table();
				}
				break;
			case 2:
				{
				setState(1805);
				on_list_partitioned_table();
				}
				break;
			case 3:
				{
				setState(1806);
				on_hash_partitioned_table();
				}
				break;
			case 4:
				{
				setState(1807);
				on_comp_partitioned_table();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class On_range_partitioned_tableContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(PLSQLParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PLSQLParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> PARTITION() { return getTokens(PLSQLParser.PARTITION); }
		public TerminalNode PARTITION(int i) {
			return getToken(PLSQLParser.PARTITION, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLSQLParser.COMMA, i);
		}
		public List<Partition_nameContext> partition_name() {
			return getRuleContexts(Partition_nameContext.class);
		}
		public Partition_nameContext partition_name(int i) {
			return getRuleContext(Partition_nameContext.class,i);
		}
		public List<TerminalNode> UNUSABLE() { return getTokens(PLSQLParser.UNUSABLE); }
		public TerminalNode UNUSABLE(int i) {
			return getToken(PLSQLParser.UNUSABLE, i);
		}
		public List<Segment_attributes_clauseContext> segment_attributes_clause() {
			return getRuleContexts(Segment_attributes_clauseContext.class);
		}
		public Segment_attributes_clauseContext segment_attributes_clause(int i) {
			return getRuleContext(Segment_attributes_clauseContext.class,i);
		}
		public List<Key_compressionContext> key_compression() {
			return getRuleContexts(Key_compressionContext.class);
		}
		public Key_compressionContext key_compression(int i) {
			return getRuleContext(Key_compressionContext.class,i);
		}
		public On_range_partitioned_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_on_range_partitioned_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterOn_range_partitioned_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitOn_range_partitioned_table(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitOn_range_partitioned_table(this);
			else return visitor.visitChildren(this);
		}
	}

	public final On_range_partitioned_tableContext on_range_partitioned_table() throws RecognitionException {
		On_range_partitioned_tableContext _localctx = new On_range_partitioned_tableContext(_ctx, getState());
		enterRule(_localctx, 90, RULE_on_range_partitioned_table);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1810);
			match(LEFT_PAREN);
			setState(1829); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1812);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(1811);
					match(COMMA);
					}
				}

				setState(1814);
				match(PARTITION);
				setState(1816);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,128,_ctx) ) {
				case 1:
					{
					setState(1815);
					partition_name();
					}
					break;
				}
				setState(1824);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMPRESS || _la==FILESYSTEM_LIKE_LOGGING || _la==INITRANS || ((((_la - 275)) & ~0x3f) == 0 && ((1L << (_la - 275)) & ((1L << (LOGGING - 275)) | (1L << (NOCOMPRESS - 275)) | (1L << (NOLOGGING - 275)))) != 0) || _la==PCTFREE || _la==PCTUSED || _la==STORAGE || _la==TABLESPACE) {
					{
					setState(1820); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						setState(1820);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case FILESYSTEM_LIKE_LOGGING:
						case INITRANS:
						case LOGGING:
						case NOLOGGING:
						case PCTFREE:
						case PCTUSED:
						case STORAGE:
						case TABLESPACE:
							{
							setState(1818);
							segment_attributes_clause();
							}
							break;
						case COMPRESS:
						case NOCOMPRESS:
							{
							setState(1819);
							key_compression();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						setState(1822); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( _la==COMPRESS || _la==FILESYSTEM_LIKE_LOGGING || _la==INITRANS || ((((_la - 275)) & ~0x3f) == 0 && ((1L << (_la - 275)) & ((1L << (LOGGING - 275)) | (1L << (NOCOMPRESS - 275)) | (1L << (NOLOGGING - 275)))) != 0) || _la==PCTFREE || _la==PCTUSED || _la==STORAGE || _la==TABLESPACE );
					}
				}

				setState(1827);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==UNUSABLE) {
					{
					setState(1826);
					match(UNUSABLE);
					}
				}

				}
				}
				setState(1831); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==PARTITION || _la==COMMA );
			setState(1833);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class On_list_partitioned_tableContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(PLSQLParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PLSQLParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> PARTITION() { return getTokens(PLSQLParser.PARTITION); }
		public TerminalNode PARTITION(int i) {
			return getToken(PLSQLParser.PARTITION, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLSQLParser.COMMA, i);
		}
		public List<Partition_nameContext> partition_name() {
			return getRuleContexts(Partition_nameContext.class);
		}
		public Partition_nameContext partition_name(int i) {
			return getRuleContext(Partition_nameContext.class,i);
		}
		public List<TerminalNode> UNUSABLE() { return getTokens(PLSQLParser.UNUSABLE); }
		public TerminalNode UNUSABLE(int i) {
			return getToken(PLSQLParser.UNUSABLE, i);
		}
		public List<Segment_attributes_clauseContext> segment_attributes_clause() {
			return getRuleContexts(Segment_attributes_clauseContext.class);
		}
		public Segment_attributes_clauseContext segment_attributes_clause(int i) {
			return getRuleContext(Segment_attributes_clauseContext.class,i);
		}
		public List<Key_compressionContext> key_compression() {
			return getRuleContexts(Key_compressionContext.class);
		}
		public Key_compressionContext key_compression(int i) {
			return getRuleContext(Key_compressionContext.class,i);
		}
		public On_list_partitioned_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_on_list_partitioned_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterOn_list_partitioned_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitOn_list_partitioned_table(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitOn_list_partitioned_table(this);
			else return visitor.visitChildren(this);
		}
	}

	public final On_list_partitioned_tableContext on_list_partitioned_table() throws RecognitionException {
		On_list_partitioned_tableContext _localctx = new On_list_partitioned_tableContext(_ctx, getState());
		enterRule(_localctx, 92, RULE_on_list_partitioned_table);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1835);
			match(LEFT_PAREN);
			setState(1854); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1837);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(1836);
					match(COMMA);
					}
				}

				setState(1839);
				match(PARTITION);
				setState(1841);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,135,_ctx) ) {
				case 1:
					{
					setState(1840);
					partition_name();
					}
					break;
				}
				setState(1849);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMPRESS || _la==FILESYSTEM_LIKE_LOGGING || _la==INITRANS || ((((_la - 275)) & ~0x3f) == 0 && ((1L << (_la - 275)) & ((1L << (LOGGING - 275)) | (1L << (NOCOMPRESS - 275)) | (1L << (NOLOGGING - 275)))) != 0) || _la==PCTFREE || _la==PCTUSED || _la==STORAGE || _la==TABLESPACE) {
					{
					setState(1845); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						setState(1845);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case FILESYSTEM_LIKE_LOGGING:
						case INITRANS:
						case LOGGING:
						case NOLOGGING:
						case PCTFREE:
						case PCTUSED:
						case STORAGE:
						case TABLESPACE:
							{
							setState(1843);
							segment_attributes_clause();
							}
							break;
						case COMPRESS:
						case NOCOMPRESS:
							{
							setState(1844);
							key_compression();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						setState(1847); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( _la==COMPRESS || _la==FILESYSTEM_LIKE_LOGGING || _la==INITRANS || ((((_la - 275)) & ~0x3f) == 0 && ((1L << (_la - 275)) & ((1L << (LOGGING - 275)) | (1L << (NOCOMPRESS - 275)) | (1L << (NOLOGGING - 275)))) != 0) || _la==PCTFREE || _la==PCTUSED || _la==STORAGE || _la==TABLESPACE );
					}
				}

				setState(1852);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==UNUSABLE) {
					{
					setState(1851);
					match(UNUSABLE);
					}
				}

				}
				}
				setState(1856); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==PARTITION || _la==COMMA );
			setState(1858);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class On_hash_partitioned_tableContext extends ParserRuleContext {
		public TerminalNode STORE() { return getToken(PLSQLParser.STORE, 0); }
		public TerminalNode IN() { return getToken(PLSQLParser.IN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PLSQLParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PLSQLParser.RIGHT_PAREN, 0); }
		public List<TablespaceContext> tablespace() {
			return getRuleContexts(TablespaceContext.class);
		}
		public TablespaceContext tablespace(int i) {
			return getRuleContext(TablespaceContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLSQLParser.COMMA, i);
		}
		public List<TerminalNode> PARTITION() { return getTokens(PLSQLParser.PARTITION); }
		public TerminalNode PARTITION(int i) {
			return getToken(PLSQLParser.PARTITION, i);
		}
		public List<Partition_nameContext> partition_name() {
			return getRuleContexts(Partition_nameContext.class);
		}
		public Partition_nameContext partition_name(int i) {
			return getRuleContext(Partition_nameContext.class,i);
		}
		public List<TerminalNode> TABLESPACE() { return getTokens(PLSQLParser.TABLESPACE); }
		public TerminalNode TABLESPACE(int i) {
			return getToken(PLSQLParser.TABLESPACE, i);
		}
		public List<Key_compressionContext> key_compression() {
			return getRuleContexts(Key_compressionContext.class);
		}
		public Key_compressionContext key_compression(int i) {
			return getRuleContext(Key_compressionContext.class,i);
		}
		public List<TerminalNode> UNUSABLE() { return getTokens(PLSQLParser.UNUSABLE); }
		public TerminalNode UNUSABLE(int i) {
			return getToken(PLSQLParser.UNUSABLE, i);
		}
		public On_hash_partitioned_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_on_hash_partitioned_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterOn_hash_partitioned_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitOn_hash_partitioned_table(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitOn_hash_partitioned_table(this);
			else return visitor.visitChildren(this);
		}
	}

	public final On_hash_partitioned_tableContext on_hash_partitioned_table() throws RecognitionException {
		On_hash_partitioned_tableContext _localctx = new On_hash_partitioned_tableContext(_ctx, getState());
		enterRule(_localctx, 94, RULE_on_hash_partitioned_table);
		int _la;
		try {
			setState(1896);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case STORE:
				enterOuterAlt(_localctx, 1);
				{
				setState(1860);
				match(STORE);
				setState(1861);
				match(IN);
				setState(1862);
				match(LEFT_PAREN);
				setState(1867); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(1864);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(1863);
						match(COMMA);
						}
					}

					setState(1866);
					tablespace();
					}
					}
					setState(1869); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BUILD) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (CHR - 65)) | (1L << (CLOB - 65)) | (1L << (CLOSE - 65)) | (1L << (CLUSTER - 65)) | (1L << (COALESCE - 65)) | (1L << (COLLECT - 65)) | (1L << (COLUMNS - 65)) | (1L << (COMMENT - 65)) | (1L << (COMMIT - 65)) | (1L << (COMMITTED - 65)) | (1L << (COMPATIBILITY - 65)) | (1L << (COMPILE - 65)) | (1L << (COMPLETE - 65)) | (1L << (COMPOUND - 65)) | (1L << (CONCAT - 65)) | (1L << (CONSTANT - 65)) | (1L << (CONSTRAINT - 65)) | (1L << (CONSTRAINTS - 65)) | (1L << (CONSTRUCTOR - 65)) | (1L << (CONTENT - 65)) | (1L << (CONTEXT - 65)) | (1L << (CONTINUE - 65)) | (1L << (CONVERT - 65)) | (1L << (CORRUPT_XID - 65)) | (1L << (CORRUPT_XID_ALL - 65)) | (1L << (COST - 65)) | (1L << (COUNT - 65)) | (1L << (CROSS - 65)) | (1L << (CUBE - 65)) | (1L << (CURRENT_USER - 65)) | (1L << (CURSOR - 65)) | (1L << (CUSTOMDATUM - 65)) | (1L << (CYCLE - 65)) | (1L << (DATA - 65)) | (1L << (DATABASE - 65)) | (1L << (DATE - 65)) | (1L << (DAY - 65)) | (1L << (DB_ROLE_CHANGE - 65)) | (1L << (DBTIMEZONE - 65)) | (1L << (DDL - 65)) | (1L << (DEBUG - 65)) | (1L << (DEC - 65)) | (1L << (DECIMAL - 65)) | (1L << (DECODE - 65)) | (1L << (DECOMPOSE - 65)) | (1L << (DECREMENT - 65)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DEMAND - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (EDITIONING - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENFORCED - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FAST - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)) | (1L << (FOLLOWING - 129)) | (1L << (FOLLOWS - 129)) | (1L << (FORALL - 129)) | (1L << (FORCE - 129)))) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & ((1L << (FULL - 197)) | (1L << (FUNCTION - 197)) | (1L << (GROUPING - 197)) | (1L << (HASH - 197)) | (1L << (HIDE - 197)) | (1L << (HOUR - 197)) | (1L << (IGNORE - 197)) | (1L << (IMMEDIATE - 197)) | (1L << (INCLUDE - 197)) | (1L << (INCLUDING - 197)) | (1L << (INCREMENT - 197)) | (1L << (INDENT - 197)) | (1L << (INDEXED - 197)) | (1L << (INDICATOR - 197)) | (1L << (INDICES - 197)) | (1L << (INFINITE - 197)) | (1L << (INLINE - 197)) | (1L << (INNER - 197)) | (1L << (INOUT - 197)) | (1L << (INSTANTIABLE - 197)) | (1L << (INSTEAD - 197)) | (1L << (INT - 197)) | (1L << (INTEGER - 197)) | (1L << (INTERVAL - 197)) | (1L << (INVALIDATE - 197)) | (1L << (ISOLATION - 197)) | (1L << (ITERATE - 197)) | (1L << (JAVA - 197)) | (1L << (JOIN - 197)) | (1L << (KEEP - 197)) | (1L << (LANGUAGE - 197)) | (1L << (LAST - 197)) | (1L << (LAST_VALUE - 197)) | (1L << (LEADING - 197)) | (1L << (LEFT - 197)) | (1L << (LEVEL - 197)))) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & ((1L << (LIBRARY - 261)) | (1L << (LIKE2 - 261)) | (1L << (LIKE4 - 261)) | (1L << (LIKEC - 261)) | (1L << (LIMIT - 261)) | (1L << (LIST - 261)) | (1L << (LOCAL - 261)) | (1L << (LOCKED - 261)) | (1L << (LOG - 261)) | (1L << (LOGOFF - 261)) | (1L << (LOGON - 261)) | (1L << (LONG - 261)) | (1L << (LOOP - 261)) | (1L << (MAIN - 261)) | (1L << (MAP - 261)) | (1L << (MASTER - 261)) | (1L << (MATCHED - 261)) | (1L << (MAXVALUE - 261)) | (1L << (MEASURES - 261)) | (1L << (MEMBER - 261)) | (1L << (MERGE - 261)) | (1L << (MINUTE - 261)) | (1L << (MINVALUE - 261)) | (1L << (MLSLABEL - 261)) | (1L << (MODEL - 261)) | (1L << (MODIFY - 261)) | (1L << (MONTH - 261)) | (1L << (MULTISET - 261)) | (1L << (NAME - 261)) | (1L << (NAN - 261)) | (1L << (NATURAL - 261)) | (1L << (NATURALN - 261)) | (1L << (NAV - 261)) | (1L << (NCHAR - 261)) | (1L << (NCHAR_CS - 261)) | (1L << (NCLOB - 261)) | (1L << (NESTED - 261)) | (1L << (NEVER - 261)) | (1L << (NEW - 261)) | (1L << (NO - 261)) | (1L << (NOAUDIT - 261)) | (1L << (NOCOPY - 261)) | (1L << (NOCYCLE - 261)) | (1L << (NOENTITYESCAPING - 261)))) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & ((1L << (NONE - 329)) | (1L << (NOSCHEMACHECK - 329)) | (1L << (NVL - 329)) | (1L << (NULLS - 329)) | (1L << (NUMBER - 329)) | (1L << (NUMERIC - 329)) | (1L << (NVARCHAR2 - 329)) | (1L << (MATERIALIZED - 329)) | (1L << (OBJECT - 329)) | (1L << (OFF - 329)) | (1L << (OID - 329)) | (1L << (OLD - 329)) | (1L << (ONLY - 329)) | (1L << (OPEN - 329)) | (1L << (ORADATA - 329)) | (1L << (ORDINALITY - 329)) | (1L << (OSERROR - 329)) | (1L << (OUT - 329)) | (1L << (OUTER - 329)) | (1L << (OVER - 329)) | (1L << (OVERRIDING - 329)) | (1L << (PACKAGE - 329)) | (1L << (PARALLEL_ENABLE - 329)) | (1L << (PARAMETERS - 329)) | (1L << (PARENT - 329)) | (1L << (PARTITION - 329)) | (1L << (PASSING - 329)) | (1L << (PATH - 329)) | (1L << (PIPELINED - 329)) | (1L << (PLAN - 329)) | (1L << (PLS_INTEGER - 329)) | (1L << (POSITIVE - 329)) | (1L << (POSITIVEN - 329)) | (1L << (PRAGMA - 329)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (PREBUILT - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)) | (1L << (PRESENT - 393)) | (1L << (PUBLIC - 393)) | (1L << (RAISE - 393)) | (1L << (RANGE - 393)) | (1L << (RAW - 393)) | (1L << (READ - 393)) | (1L << (REAL - 393)) | (1L << (RECORD - 393)) | (1L << (REDUCED - 393)) | (1L << (REF - 393)) | (1L << (REFERENCE - 393)) | (1L << (REFERENCING - 393)) | (1L << (REFRESH - 393)) | (1L << (REJECT - 393)) | (1L << (RELIES_ON - 393)) | (1L << (RENAME - 393)) | (1L << (REPLACE - 393)) | (1L << (RESPECT - 393)) | (1L << (RESTRICT_REFERENCES - 393)) | (1L << (RESULT - 393)) | (1L << (RESULT_CACHE - 393)) | (1L << (RETURN - 393)) | (1L << (RETURNING - 393)) | (1L << (REUSE - 393)) | (1L << (REVERSE - 393)) | (1L << (REWRITE - 393)) | (1L << (RIGHT - 393)) | (1L << (ROLE - 393)) | (1L << (ROLLBACK - 393)) | (1L << (ROLLUP - 393)) | (1L << (ROW - 393)) | (1L << (ROWID - 393)) | (1L << (ROWS - 393)) | (1L << (RULES - 393)) | (1L << (SAMPLE - 393)) | (1L << (SAVE - 393)) | (1L << (SAVEPOINT - 393)) | (1L << (SCHEMA - 393)) | (1L << (SCHEMACHECK - 393)) | (1L << (SCN - 393)) | (1L << (SECOND - 393)))) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & ((1L << (SEED - 458)) | (1L << (SEGMENT - 458)) | (1L << (SELF - 458)) | (1L << (SEQUENTIAL - 458)) | (1L << (SERIALIZABLE - 458)) | (1L << (SERIALLY_REUSABLE - 458)) | (1L << (SERVERERROR - 458)) | (1L << (SESSIONTIMEZONE - 458)) | (1L << (SET - 458)) | (1L << (SETS - 458)) | (1L << (SETTINGS - 458)) | (1L << (SHOW - 458)) | (1L << (SHUTDOWN - 458)) | (1L << (SIBLINGS - 458)) | (1L << (SIGNTYPE - 458)) | (1L << (SIMPLE_INTEGER - 458)) | (1L << (SINGLE - 458)) | (1L << (SIZE - 458)) | (1L << (SKIP_ - 458)) | (1L << (SMALLINT - 458)) | (1L << (SNAPSHOT - 458)) | (1L << (SOME - 458)) | (1L << (SPECIFICATION - 458)) | (1L << (SQLDATA - 458)) | (1L << (SQLERROR - 458)) | (1L << (STANDALONE - 458)) | (1L << (STARTUP - 458)) | (1L << (STATEMENT - 458)) | (1L << (STATEMENT_ID - 458)) | (1L << (STATIC - 458)) | (1L << (STATISTICS - 458)) | (1L << (STRING - 458)) | (1L << (SUBMULTISET - 458)) | (1L << (SUBPARTITION - 458)) | (1L << (SUBSTITUTABLE - 458)) | (1L << (SUBSTRING - 458)) | (1L << (SUBTYPE - 458)) | (1L << (SUCCESS - 458)) | (1L << (SUSPEND - 458)) | (1L << (TABLES - 458)) | (1L << (TIME - 458)) | (1L << (TIMESTAMP - 458)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 458)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 458)) | (1L << (TIMESTAMP_UNCONSTRAINED - 458)))) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & ((1L << (TIMEZONE_ABBR - 522)) | (1L << (TIMEZONE_HOUR - 522)) | (1L << (TIMEZONE_MINUTE - 522)) | (1L << (TIMEZONE_REGION - 522)) | (1L << (TO_CHAR - 522)) | (1L << (TO_DATE - 522)) | (1L << (TRAILING - 522)) | (1L << (TRANSACTION - 522)) | (1L << (TRANSLATE - 522)) | (1L << (TREAT - 522)) | (1L << (TRIGGER - 522)) | (1L << (TRIM - 522)) | (1L << (TRUNCATE - 522)) | (1L << (TRUSTED - 522)) | (1L << (TYPE - 522)) | (1L << (UNBOUNDED - 522)) | (1L << (UNDER - 522)) | (1L << (UNLIMITED - 522)) | (1L << (UNTIL - 522)) | (1L << (UPDATED - 522)) | (1L << (UPSERT - 522)) | (1L << (UROWID - 522)) | (1L << (USE - 522)) | (1L << (VALIDATE - 522)) | (1L << (VALUE - 522)) | (1L << (VARCHAR - 522)) | (1L << (VARCHAR2 - 522)) | (1L << (VARIABLE - 522)) | (1L << (VARRAY - 522)) | (1L << (VARYING - 522)) | (1L << (VERBOSE - 522)) | (1L << (VERSION - 522)) | (1L << (VERSIONS - 522)) | (1L << (VIEW - 522)) | (1L << (WAIT - 522)) | (1L << (WARNING - 522)) | (1L << (WELLFORMED - 522)) | (1L << (WHENEVER - 522)) | (1L << (WHILE - 522)) | (1L << (WITHOUT - 522)) | (1L << (WITHIN - 522)) | (1L << (WORK - 522)) | (1L << (WRITE - 522)) | (1L << (XML - 522)) | (1L << (XMLAGG - 522)) | (1L << (XMLATTRIBUTES - 522)))) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & ((1L << (XMLCAST - 586)) | (1L << (XMLCOLATTVAL - 586)) | (1L << (XMLELEMENT - 586)) | (1L << (XMLEXISTS - 586)) | (1L << (XMLFOREST - 586)) | (1L << (XMLNAMESPACES - 586)) | (1L << (XMLPARSE - 586)) | (1L << (XMLPI - 586)) | (1L << (XMLQUERY - 586)) | (1L << (XMLROOT - 586)) | (1L << (XMLSERIALIZE - 586)) | (1L << (XMLTABLE - 586)) | (1L << (YEAR - 586)) | (1L << (YES - 586)) | (1L << (YMINTERVAL_UNCONSTRAINED - 586)) | (1L << (ZONE - 586)) | (1L << (PREDICTION - 586)) | (1L << (PREDICTION_BOUNDS - 586)) | (1L << (PREDICTION_COST - 586)) | (1L << (PREDICTION_DETAILS - 586)) | (1L << (PREDICTION_PROBABILITY - 586)) | (1L << (PREDICTION_SET - 586)) | (1L << (CUME_DIST - 586)) | (1L << (DENSE_RANK - 586)) | (1L << (LISTAGG - 586)) | (1L << (PERCENT_RANK - 586)) | (1L << (PERCENTILE_CONT - 586)) | (1L << (PERCENTILE_DISC - 586)) | (1L << (RANK - 586)) | (1L << (AVG - 586)) | (1L << (CORR - 586)) | (1L << (LAG - 586)) | (1L << (LEAD - 586)) | (1L << (MAX - 586)) | (1L << (MEDIAN - 586)) | (1L << (MIN - 586)) | (1L << (NTILE - 586)) | (1L << (RATIO_TO_REPORT - 586)) | (1L << (ROW_NUMBER - 586)) | (1L << (SUM - 586)) | (1L << (VARIANCE - 586)) | (1L << (REGR_ - 586)) | (1L << (STDDEV - 586)) | (1L << (VAR_ - 586)) | (1L << (COVAR_ - 586)))) != 0) || _la==COMMA || _la==REGULAR_ID );
				setState(1871);
				match(RIGHT_PAREN);
				}
				break;
			case LEFT_PAREN:
				enterOuterAlt(_localctx, 2);
				{
				setState(1873);
				match(LEFT_PAREN);
				setState(1891); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(1875);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(1874);
						match(COMMA);
						}
					}

					setState(1877);
					match(PARTITION);
					setState(1879);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,144,_ctx) ) {
					case 1:
						{
						setState(1878);
						partition_name();
						}
						break;
					}
					setState(1883);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==TABLESPACE) {
						{
						setState(1881);
						match(TABLESPACE);
						setState(1882);
						tablespace();
						}
					}

					setState(1886);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMPRESS || _la==NOCOMPRESS) {
						{
						setState(1885);
						key_compression();
						}
					}

					setState(1889);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==UNUSABLE) {
						{
						setState(1888);
						match(UNUSABLE);
						}
					}

					}
					}
					setState(1893); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==PARTITION || _la==COMMA );
				setState(1895);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class On_comp_partitioned_tableContext extends ParserRuleContext {
		public List<TerminalNode> LEFT_PAREN() { return getTokens(PLSQLParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(PLSQLParser.LEFT_PAREN, i);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(PLSQLParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(PLSQLParser.RIGHT_PAREN, i);
		}
		public TerminalNode STORE() { return getToken(PLSQLParser.STORE, 0); }
		public TerminalNode IN() { return getToken(PLSQLParser.IN, 0); }
		public List<TerminalNode> PARTITION() { return getTokens(PLSQLParser.PARTITION); }
		public TerminalNode PARTITION(int i) {
			return getToken(PLSQLParser.PARTITION, i);
		}
		public List<TerminalNode> UNUSABLE() { return getTokens(PLSQLParser.UNUSABLE); }
		public TerminalNode UNUSABLE(int i) {
			return getToken(PLSQLParser.UNUSABLE, i);
		}
		public List<TablespaceContext> tablespace() {
			return getRuleContexts(TablespaceContext.class);
		}
		public TablespaceContext tablespace(int i) {
			return getRuleContext(TablespaceContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLSQLParser.COMMA, i);
		}
		public List<Partition_nameContext> partition_name() {
			return getRuleContexts(Partition_nameContext.class);
		}
		public Partition_nameContext partition_name(int i) {
			return getRuleContext(Partition_nameContext.class,i);
		}
		public List<Index_subpartition_clauseContext> index_subpartition_clause() {
			return getRuleContexts(Index_subpartition_clauseContext.class);
		}
		public Index_subpartition_clauseContext index_subpartition_clause(int i) {
			return getRuleContext(Index_subpartition_clauseContext.class,i);
		}
		public List<Segment_attributes_clauseContext> segment_attributes_clause() {
			return getRuleContexts(Segment_attributes_clauseContext.class);
		}
		public Segment_attributes_clauseContext segment_attributes_clause(int i) {
			return getRuleContext(Segment_attributes_clauseContext.class,i);
		}
		public List<Key_compressionContext> key_compression() {
			return getRuleContexts(Key_compressionContext.class);
		}
		public Key_compressionContext key_compression(int i) {
			return getRuleContext(Key_compressionContext.class,i);
		}
		public On_comp_partitioned_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_on_comp_partitioned_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterOn_comp_partitioned_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitOn_comp_partitioned_table(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitOn_comp_partitioned_table(this);
			else return visitor.visitChildren(this);
		}
	}

	public final On_comp_partitioned_tableContext on_comp_partitioned_table() throws RecognitionException {
		On_comp_partitioned_tableContext _localctx = new On_comp_partitioned_tableContext(_ctx, getState());
		enterRule(_localctx, 96, RULE_on_comp_partitioned_table);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1911);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==STORE) {
				{
				setState(1898);
				match(STORE);
				setState(1899);
				match(IN);
				setState(1900);
				match(LEFT_PAREN);
				setState(1905); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(1902);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(1901);
						match(COMMA);
						}
					}

					setState(1904);
					tablespace();
					}
					}
					setState(1907); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BUILD) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (CHR - 65)) | (1L << (CLOB - 65)) | (1L << (CLOSE - 65)) | (1L << (CLUSTER - 65)) | (1L << (COALESCE - 65)) | (1L << (COLLECT - 65)) | (1L << (COLUMNS - 65)) | (1L << (COMMENT - 65)) | (1L << (COMMIT - 65)) | (1L << (COMMITTED - 65)) | (1L << (COMPATIBILITY - 65)) | (1L << (COMPILE - 65)) | (1L << (COMPLETE - 65)) | (1L << (COMPOUND - 65)) | (1L << (CONCAT - 65)) | (1L << (CONSTANT - 65)) | (1L << (CONSTRAINT - 65)) | (1L << (CONSTRAINTS - 65)) | (1L << (CONSTRUCTOR - 65)) | (1L << (CONTENT - 65)) | (1L << (CONTEXT - 65)) | (1L << (CONTINUE - 65)) | (1L << (CONVERT - 65)) | (1L << (CORRUPT_XID - 65)) | (1L << (CORRUPT_XID_ALL - 65)) | (1L << (COST - 65)) | (1L << (COUNT - 65)) | (1L << (CROSS - 65)) | (1L << (CUBE - 65)) | (1L << (CURRENT_USER - 65)) | (1L << (CURSOR - 65)) | (1L << (CUSTOMDATUM - 65)) | (1L << (CYCLE - 65)) | (1L << (DATA - 65)) | (1L << (DATABASE - 65)) | (1L << (DATE - 65)) | (1L << (DAY - 65)) | (1L << (DB_ROLE_CHANGE - 65)) | (1L << (DBTIMEZONE - 65)) | (1L << (DDL - 65)) | (1L << (DEBUG - 65)) | (1L << (DEC - 65)) | (1L << (DECIMAL - 65)) | (1L << (DECODE - 65)) | (1L << (DECOMPOSE - 65)) | (1L << (DECREMENT - 65)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DEMAND - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (EDITIONING - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENFORCED - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FAST - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)) | (1L << (FOLLOWING - 129)) | (1L << (FOLLOWS - 129)) | (1L << (FORALL - 129)) | (1L << (FORCE - 129)))) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & ((1L << (FULL - 197)) | (1L << (FUNCTION - 197)) | (1L << (GROUPING - 197)) | (1L << (HASH - 197)) | (1L << (HIDE - 197)) | (1L << (HOUR - 197)) | (1L << (IGNORE - 197)) | (1L << (IMMEDIATE - 197)) | (1L << (INCLUDE - 197)) | (1L << (INCLUDING - 197)) | (1L << (INCREMENT - 197)) | (1L << (INDENT - 197)) | (1L << (INDEXED - 197)) | (1L << (INDICATOR - 197)) | (1L << (INDICES - 197)) | (1L << (INFINITE - 197)) | (1L << (INLINE - 197)) | (1L << (INNER - 197)) | (1L << (INOUT - 197)) | (1L << (INSTANTIABLE - 197)) | (1L << (INSTEAD - 197)) | (1L << (INT - 197)) | (1L << (INTEGER - 197)) | (1L << (INTERVAL - 197)) | (1L << (INVALIDATE - 197)) | (1L << (ISOLATION - 197)) | (1L << (ITERATE - 197)) | (1L << (JAVA - 197)) | (1L << (JOIN - 197)) | (1L << (KEEP - 197)) | (1L << (LANGUAGE - 197)) | (1L << (LAST - 197)) | (1L << (LAST_VALUE - 197)) | (1L << (LEADING - 197)) | (1L << (LEFT - 197)) | (1L << (LEVEL - 197)))) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & ((1L << (LIBRARY - 261)) | (1L << (LIKE2 - 261)) | (1L << (LIKE4 - 261)) | (1L << (LIKEC - 261)) | (1L << (LIMIT - 261)) | (1L << (LIST - 261)) | (1L << (LOCAL - 261)) | (1L << (LOCKED - 261)) | (1L << (LOG - 261)) | (1L << (LOGOFF - 261)) | (1L << (LOGON - 261)) | (1L << (LONG - 261)) | (1L << (LOOP - 261)) | (1L << (MAIN - 261)) | (1L << (MAP - 261)) | (1L << (MASTER - 261)) | (1L << (MATCHED - 261)) | (1L << (MAXVALUE - 261)) | (1L << (MEASURES - 261)) | (1L << (MEMBER - 261)) | (1L << (MERGE - 261)) | (1L << (MINUTE - 261)) | (1L << (MINVALUE - 261)) | (1L << (MLSLABEL - 261)) | (1L << (MODEL - 261)) | (1L << (MODIFY - 261)) | (1L << (MONTH - 261)) | (1L << (MULTISET - 261)) | (1L << (NAME - 261)) | (1L << (NAN - 261)) | (1L << (NATURAL - 261)) | (1L << (NATURALN - 261)) | (1L << (NAV - 261)) | (1L << (NCHAR - 261)) | (1L << (NCHAR_CS - 261)) | (1L << (NCLOB - 261)) | (1L << (NESTED - 261)) | (1L << (NEVER - 261)) | (1L << (NEW - 261)) | (1L << (NO - 261)) | (1L << (NOAUDIT - 261)) | (1L << (NOCOPY - 261)) | (1L << (NOCYCLE - 261)) | (1L << (NOENTITYESCAPING - 261)))) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & ((1L << (NONE - 329)) | (1L << (NOSCHEMACHECK - 329)) | (1L << (NVL - 329)) | (1L << (NULLS - 329)) | (1L << (NUMBER - 329)) | (1L << (NUMERIC - 329)) | (1L << (NVARCHAR2 - 329)) | (1L << (MATERIALIZED - 329)) | (1L << (OBJECT - 329)) | (1L << (OFF - 329)) | (1L << (OID - 329)) | (1L << (OLD - 329)) | (1L << (ONLY - 329)) | (1L << (OPEN - 329)) | (1L << (ORADATA - 329)) | (1L << (ORDINALITY - 329)) | (1L << (OSERROR - 329)) | (1L << (OUT - 329)) | (1L << (OUTER - 329)) | (1L << (OVER - 329)) | (1L << (OVERRIDING - 329)) | (1L << (PACKAGE - 329)) | (1L << (PARALLEL_ENABLE - 329)) | (1L << (PARAMETERS - 329)) | (1L << (PARENT - 329)) | (1L << (PARTITION - 329)) | (1L << (PASSING - 329)) | (1L << (PATH - 329)) | (1L << (PIPELINED - 329)) | (1L << (PLAN - 329)) | (1L << (PLS_INTEGER - 329)) | (1L << (POSITIVE - 329)) | (1L << (POSITIVEN - 329)) | (1L << (PRAGMA - 329)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (PREBUILT - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)) | (1L << (PRESENT - 393)) | (1L << (PUBLIC - 393)) | (1L << (RAISE - 393)) | (1L << (RANGE - 393)) | (1L << (RAW - 393)) | (1L << (READ - 393)) | (1L << (REAL - 393)) | (1L << (RECORD - 393)) | (1L << (REDUCED - 393)) | (1L << (REF - 393)) | (1L << (REFERENCE - 393)) | (1L << (REFERENCING - 393)) | (1L << (REFRESH - 393)) | (1L << (REJECT - 393)) | (1L << (RELIES_ON - 393)) | (1L << (RENAME - 393)) | (1L << (REPLACE - 393)) | (1L << (RESPECT - 393)) | (1L << (RESTRICT_REFERENCES - 393)) | (1L << (RESULT - 393)) | (1L << (RESULT_CACHE - 393)) | (1L << (RETURN - 393)) | (1L << (RETURNING - 393)) | (1L << (REUSE - 393)) | (1L << (REVERSE - 393)) | (1L << (REWRITE - 393)) | (1L << (RIGHT - 393)) | (1L << (ROLE - 393)) | (1L << (ROLLBACK - 393)) | (1L << (ROLLUP - 393)) | (1L << (ROW - 393)) | (1L << (ROWID - 393)) | (1L << (ROWS - 393)) | (1L << (RULES - 393)) | (1L << (SAMPLE - 393)) | (1L << (SAVE - 393)) | (1L << (SAVEPOINT - 393)) | (1L << (SCHEMA - 393)) | (1L << (SCHEMACHECK - 393)) | (1L << (SCN - 393)) | (1L << (SECOND - 393)))) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & ((1L << (SEED - 458)) | (1L << (SEGMENT - 458)) | (1L << (SELF - 458)) | (1L << (SEQUENTIAL - 458)) | (1L << (SERIALIZABLE - 458)) | (1L << (SERIALLY_REUSABLE - 458)) | (1L << (SERVERERROR - 458)) | (1L << (SESSIONTIMEZONE - 458)) | (1L << (SET - 458)) | (1L << (SETS - 458)) | (1L << (SETTINGS - 458)) | (1L << (SHOW - 458)) | (1L << (SHUTDOWN - 458)) | (1L << (SIBLINGS - 458)) | (1L << (SIGNTYPE - 458)) | (1L << (SIMPLE_INTEGER - 458)) | (1L << (SINGLE - 458)) | (1L << (SIZE - 458)) | (1L << (SKIP_ - 458)) | (1L << (SMALLINT - 458)) | (1L << (SNAPSHOT - 458)) | (1L << (SOME - 458)) | (1L << (SPECIFICATION - 458)) | (1L << (SQLDATA - 458)) | (1L << (SQLERROR - 458)) | (1L << (STANDALONE - 458)) | (1L << (STARTUP - 458)) | (1L << (STATEMENT - 458)) | (1L << (STATEMENT_ID - 458)) | (1L << (STATIC - 458)) | (1L << (STATISTICS - 458)) | (1L << (STRING - 458)) | (1L << (SUBMULTISET - 458)) | (1L << (SUBPARTITION - 458)) | (1L << (SUBSTITUTABLE - 458)) | (1L << (SUBSTRING - 458)) | (1L << (SUBTYPE - 458)) | (1L << (SUCCESS - 458)) | (1L << (SUSPEND - 458)) | (1L << (TABLES - 458)) | (1L << (TIME - 458)) | (1L << (TIMESTAMP - 458)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 458)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 458)) | (1L << (TIMESTAMP_UNCONSTRAINED - 458)))) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & ((1L << (TIMEZONE_ABBR - 522)) | (1L << (TIMEZONE_HOUR - 522)) | (1L << (TIMEZONE_MINUTE - 522)) | (1L << (TIMEZONE_REGION - 522)) | (1L << (TO_CHAR - 522)) | (1L << (TO_DATE - 522)) | (1L << (TRAILING - 522)) | (1L << (TRANSACTION - 522)) | (1L << (TRANSLATE - 522)) | (1L << (TREAT - 522)) | (1L << (TRIGGER - 522)) | (1L << (TRIM - 522)) | (1L << (TRUNCATE - 522)) | (1L << (TRUSTED - 522)) | (1L << (TYPE - 522)) | (1L << (UNBOUNDED - 522)) | (1L << (UNDER - 522)) | (1L << (UNLIMITED - 522)) | (1L << (UNTIL - 522)) | (1L << (UPDATED - 522)) | (1L << (UPSERT - 522)) | (1L << (UROWID - 522)) | (1L << (USE - 522)) | (1L << (VALIDATE - 522)) | (1L << (VALUE - 522)) | (1L << (VARCHAR - 522)) | (1L << (VARCHAR2 - 522)) | (1L << (VARIABLE - 522)) | (1L << (VARRAY - 522)) | (1L << (VARYING - 522)) | (1L << (VERBOSE - 522)) | (1L << (VERSION - 522)) | (1L << (VERSIONS - 522)) | (1L << (VIEW - 522)) | (1L << (WAIT - 522)) | (1L << (WARNING - 522)) | (1L << (WELLFORMED - 522)) | (1L << (WHENEVER - 522)) | (1L << (WHILE - 522)) | (1L << (WITHOUT - 522)) | (1L << (WITHIN - 522)) | (1L << (WORK - 522)) | (1L << (WRITE - 522)) | (1L << (XML - 522)) | (1L << (XMLAGG - 522)) | (1L << (XMLATTRIBUTES - 522)))) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & ((1L << (XMLCAST - 586)) | (1L << (XMLCOLATTVAL - 586)) | (1L << (XMLELEMENT - 586)) | (1L << (XMLEXISTS - 586)) | (1L << (XMLFOREST - 586)) | (1L << (XMLNAMESPACES - 586)) | (1L << (XMLPARSE - 586)) | (1L << (XMLPI - 586)) | (1L << (XMLQUERY - 586)) | (1L << (XMLROOT - 586)) | (1L << (XMLSERIALIZE - 586)) | (1L << (XMLTABLE - 586)) | (1L << (YEAR - 586)) | (1L << (YES - 586)) | (1L << (YMINTERVAL_UNCONSTRAINED - 586)) | (1L << (ZONE - 586)) | (1L << (PREDICTION - 586)) | (1L << (PREDICTION_BOUNDS - 586)) | (1L << (PREDICTION_COST - 586)) | (1L << (PREDICTION_DETAILS - 586)) | (1L << (PREDICTION_PROBABILITY - 586)) | (1L << (PREDICTION_SET - 586)) | (1L << (CUME_DIST - 586)) | (1L << (DENSE_RANK - 586)) | (1L << (LISTAGG - 586)) | (1L << (PERCENT_RANK - 586)) | (1L << (PERCENTILE_CONT - 586)) | (1L << (PERCENTILE_DISC - 586)) | (1L << (RANK - 586)) | (1L << (AVG - 586)) | (1L << (CORR - 586)) | (1L << (LAG - 586)) | (1L << (LEAD - 586)) | (1L << (MAX - 586)) | (1L << (MEDIAN - 586)) | (1L << (MIN - 586)) | (1L << (NTILE - 586)) | (1L << (RATIO_TO_REPORT - 586)) | (1L << (ROW_NUMBER - 586)) | (1L << (SUM - 586)) | (1L << (VARIANCE - 586)) | (1L << (REGR_ - 586)) | (1L << (STDDEV - 586)) | (1L << (VAR_ - 586)) | (1L << (COVAR_ - 586)))) != 0) || _la==COMMA || _la==REGULAR_ID );
				setState(1909);
				match(RIGHT_PAREN);
				}
			}

			setState(1913);
			match(LEFT_PAREN);
			setState(1933); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1915);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(1914);
					match(COMMA);
					}
				}

				setState(1917);
				match(PARTITION);
				setState(1919);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BUILD) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (CHR - 65)) | (1L << (CLOB - 65)) | (1L << (CLOSE - 65)) | (1L << (CLUSTER - 65)) | (1L << (COALESCE - 65)) | (1L << (COLLECT - 65)) | (1L << (COLUMNS - 65)) | (1L << (COMMENT - 65)) | (1L << (COMMIT - 65)) | (1L << (COMMITTED - 65)) | (1L << (COMPATIBILITY - 65)) | (1L << (COMPILE - 65)) | (1L << (COMPLETE - 65)) | (1L << (COMPOUND - 65)) | (1L << (CONCAT - 65)) | (1L << (CONSTANT - 65)) | (1L << (CONSTRAINT - 65)) | (1L << (CONSTRAINTS - 65)) | (1L << (CONSTRUCTOR - 65)) | (1L << (CONTENT - 65)) | (1L << (CONTEXT - 65)) | (1L << (CONTINUE - 65)) | (1L << (CONVERT - 65)) | (1L << (CORRUPT_XID - 65)) | (1L << (CORRUPT_XID_ALL - 65)) | (1L << (COST - 65)) | (1L << (COUNT - 65)) | (1L << (CROSS - 65)) | (1L << (CUBE - 65)) | (1L << (CURRENT_USER - 65)) | (1L << (CURSOR - 65)) | (1L << (CUSTOMDATUM - 65)) | (1L << (CYCLE - 65)) | (1L << (DATA - 65)) | (1L << (DATABASE - 65)) | (1L << (DATE - 65)) | (1L << (DAY - 65)) | (1L << (DB_ROLE_CHANGE - 65)) | (1L << (DBTIMEZONE - 65)) | (1L << (DDL - 65)) | (1L << (DEBUG - 65)) | (1L << (DEC - 65)) | (1L << (DECIMAL - 65)) | (1L << (DECODE - 65)) | (1L << (DECOMPOSE - 65)) | (1L << (DECREMENT - 65)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DEMAND - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (EDITIONING - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENFORCED - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FAST - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)) | (1L << (FOLLOWING - 129)) | (1L << (FOLLOWS - 129)) | (1L << (FORALL - 129)) | (1L << (FORCE - 129)))) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & ((1L << (FULL - 197)) | (1L << (FUNCTION - 197)) | (1L << (GROUPING - 197)) | (1L << (HASH - 197)) | (1L << (HIDE - 197)) | (1L << (HOUR - 197)) | (1L << (IGNORE - 197)) | (1L << (IMMEDIATE - 197)) | (1L << (INCLUDE - 197)) | (1L << (INCLUDING - 197)) | (1L << (INCREMENT - 197)) | (1L << (INDENT - 197)) | (1L << (INDEXED - 197)) | (1L << (INDICATOR - 197)) | (1L << (INDICES - 197)) | (1L << (INFINITE - 197)) | (1L << (INLINE - 197)) | (1L << (INNER - 197)) | (1L << (INOUT - 197)) | (1L << (INSTANTIABLE - 197)) | (1L << (INSTEAD - 197)) | (1L << (INT - 197)) | (1L << (INTEGER - 197)) | (1L << (INTERVAL - 197)) | (1L << (INVALIDATE - 197)) | (1L << (ISOLATION - 197)) | (1L << (ITERATE - 197)) | (1L << (JAVA - 197)) | (1L << (JOIN - 197)) | (1L << (KEEP - 197)) | (1L << (LANGUAGE - 197)) | (1L << (LAST - 197)) | (1L << (LAST_VALUE - 197)) | (1L << (LEADING - 197)) | (1L << (LEFT - 197)) | (1L << (LEVEL - 197)))) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & ((1L << (LIBRARY - 261)) | (1L << (LIKE2 - 261)) | (1L << (LIKE4 - 261)) | (1L << (LIKEC - 261)) | (1L << (LIMIT - 261)) | (1L << (LIST - 261)) | (1L << (LOCAL - 261)) | (1L << (LOCKED - 261)) | (1L << (LOG - 261)) | (1L << (LOGOFF - 261)) | (1L << (LOGON - 261)) | (1L << (LONG - 261)) | (1L << (LOOP - 261)) | (1L << (MAIN - 261)) | (1L << (MAP - 261)) | (1L << (MASTER - 261)) | (1L << (MATCHED - 261)) | (1L << (MAXVALUE - 261)) | (1L << (MEASURES - 261)) | (1L << (MEMBER - 261)) | (1L << (MERGE - 261)) | (1L << (MINUTE - 261)) | (1L << (MINVALUE - 261)) | (1L << (MLSLABEL - 261)) | (1L << (MODEL - 261)) | (1L << (MODIFY - 261)) | (1L << (MONTH - 261)) | (1L << (MULTISET - 261)) | (1L << (NAME - 261)) | (1L << (NAN - 261)) | (1L << (NATURAL - 261)) | (1L << (NATURALN - 261)) | (1L << (NAV - 261)) | (1L << (NCHAR - 261)) | (1L << (NCHAR_CS - 261)) | (1L << (NCLOB - 261)) | (1L << (NESTED - 261)) | (1L << (NEVER - 261)) | (1L << (NEW - 261)) | (1L << (NO - 261)) | (1L << (NOAUDIT - 261)) | (1L << (NOCOPY - 261)) | (1L << (NOCYCLE - 261)) | (1L << (NOENTITYESCAPING - 261)))) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & ((1L << (NONE - 329)) | (1L << (NOSCHEMACHECK - 329)) | (1L << (NVL - 329)) | (1L << (NULLS - 329)) | (1L << (NUMBER - 329)) | (1L << (NUMERIC - 329)) | (1L << (NVARCHAR2 - 329)) | (1L << (MATERIALIZED - 329)) | (1L << (OBJECT - 329)) | (1L << (OFF - 329)) | (1L << (OID - 329)) | (1L << (OLD - 329)) | (1L << (ONLY - 329)) | (1L << (OPEN - 329)) | (1L << (ORADATA - 329)) | (1L << (ORDINALITY - 329)) | (1L << (OSERROR - 329)) | (1L << (OUT - 329)) | (1L << (OUTER - 329)) | (1L << (OVER - 329)) | (1L << (OVERRIDING - 329)) | (1L << (PACKAGE - 329)) | (1L << (PARALLEL_ENABLE - 329)) | (1L << (PARAMETERS - 329)) | (1L << (PARENT - 329)) | (1L << (PARTITION - 329)) | (1L << (PASSING - 329)) | (1L << (PATH - 329)) | (1L << (PIPELINED - 329)) | (1L << (PLAN - 329)) | (1L << (PLS_INTEGER - 329)) | (1L << (POSITIVE - 329)) | (1L << (POSITIVEN - 329)) | (1L << (PRAGMA - 329)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (PREBUILT - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)) | (1L << (PRESENT - 393)) | (1L << (PUBLIC - 393)) | (1L << (RAISE - 393)) | (1L << (RANGE - 393)) | (1L << (RAW - 393)) | (1L << (READ - 393)) | (1L << (REAL - 393)) | (1L << (RECORD - 393)) | (1L << (REDUCED - 393)) | (1L << (REF - 393)) | (1L << (REFERENCE - 393)) | (1L << (REFERENCING - 393)) | (1L << (REFRESH - 393)) | (1L << (REJECT - 393)) | (1L << (RELIES_ON - 393)) | (1L << (RENAME - 393)) | (1L << (REPLACE - 393)) | (1L << (RESPECT - 393)) | (1L << (RESTRICT_REFERENCES - 393)) | (1L << (RESULT - 393)) | (1L << (RESULT_CACHE - 393)) | (1L << (RETURN - 393)) | (1L << (RETURNING - 393)) | (1L << (REUSE - 393)) | (1L << (REVERSE - 393)) | (1L << (REWRITE - 393)) | (1L << (RIGHT - 393)) | (1L << (ROLE - 393)) | (1L << (ROLLBACK - 393)) | (1L << (ROLLUP - 393)) | (1L << (ROW - 393)) | (1L << (ROWID - 393)) | (1L << (ROWS - 393)) | (1L << (RULES - 393)) | (1L << (SAMPLE - 393)) | (1L << (SAVE - 393)) | (1L << (SAVEPOINT - 393)) | (1L << (SCHEMA - 393)) | (1L << (SCHEMACHECK - 393)) | (1L << (SCN - 393)) | (1L << (SECOND - 393)))) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & ((1L << (SEED - 458)) | (1L << (SEGMENT - 458)) | (1L << (SELF - 458)) | (1L << (SEQUENTIAL - 458)) | (1L << (SERIALIZABLE - 458)) | (1L << (SERIALLY_REUSABLE - 458)) | (1L << (SERVERERROR - 458)) | (1L << (SESSIONTIMEZONE - 458)) | (1L << (SET - 458)) | (1L << (SETS - 458)) | (1L << (SETTINGS - 458)) | (1L << (SHOW - 458)) | (1L << (SHUTDOWN - 458)) | (1L << (SIBLINGS - 458)) | (1L << (SIGNTYPE - 458)) | (1L << (SIMPLE_INTEGER - 458)) | (1L << (SINGLE - 458)) | (1L << (SIZE - 458)) | (1L << (SKIP_ - 458)) | (1L << (SMALLINT - 458)) | (1L << (SNAPSHOT - 458)) | (1L << (SOME - 458)) | (1L << (SPECIFICATION - 458)) | (1L << (SQLDATA - 458)) | (1L << (SQLERROR - 458)) | (1L << (STANDALONE - 458)) | (1L << (STARTUP - 458)) | (1L << (STATEMENT - 458)) | (1L << (STATEMENT_ID - 458)) | (1L << (STATIC - 458)) | (1L << (STATISTICS - 458)) | (1L << (STRING - 458)) | (1L << (SUBMULTISET - 458)) | (1L << (SUBPARTITION - 458)) | (1L << (SUBSTITUTABLE - 458)) | (1L << (SUBSTRING - 458)) | (1L << (SUBTYPE - 458)) | (1L << (SUCCESS - 458)) | (1L << (SUSPEND - 458)) | (1L << (TABLES - 458)) | (1L << (TIME - 458)) | (1L << (TIMESTAMP - 458)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 458)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 458)) | (1L << (TIMESTAMP_UNCONSTRAINED - 458)))) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & ((1L << (TIMEZONE_ABBR - 522)) | (1L << (TIMEZONE_HOUR - 522)) | (1L << (TIMEZONE_MINUTE - 522)) | (1L << (TIMEZONE_REGION - 522)) | (1L << (TO_CHAR - 522)) | (1L << (TO_DATE - 522)) | (1L << (TRAILING - 522)) | (1L << (TRANSACTION - 522)) | (1L << (TRANSLATE - 522)) | (1L << (TREAT - 522)) | (1L << (TRIGGER - 522)) | (1L << (TRIM - 522)) | (1L << (TRUNCATE - 522)) | (1L << (TRUSTED - 522)) | (1L << (TYPE - 522)) | (1L << (UNBOUNDED - 522)) | (1L << (UNDER - 522)) | (1L << (UNLIMITED - 522)) | (1L << (UNTIL - 522)) | (1L << (UPDATED - 522)) | (1L << (UPSERT - 522)) | (1L << (UROWID - 522)) | (1L << (USE - 522)) | (1L << (VALIDATE - 522)) | (1L << (VALUE - 522)) | (1L << (VARCHAR - 522)) | (1L << (VARCHAR2 - 522)) | (1L << (VARIABLE - 522)) | (1L << (VARRAY - 522)) | (1L << (VARYING - 522)) | (1L << (VERBOSE - 522)) | (1L << (VERSION - 522)) | (1L << (VERSIONS - 522)) | (1L << (VIEW - 522)) | (1L << (WAIT - 522)) | (1L << (WARNING - 522)) | (1L << (WELLFORMED - 522)) | (1L << (WHENEVER - 522)) | (1L << (WHILE - 522)) | (1L << (WITHOUT - 522)) | (1L << (WITHIN - 522)) | (1L << (WORK - 522)) | (1L << (WRITE - 522)) | (1L << (XML - 522)) | (1L << (XMLAGG - 522)) | (1L << (XMLATTRIBUTES - 522)))) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & ((1L << (XMLCAST - 586)) | (1L << (XMLCOLATTVAL - 586)) | (1L << (XMLELEMENT - 586)) | (1L << (XMLEXISTS - 586)) | (1L << (XMLFOREST - 586)) | (1L << (XMLNAMESPACES - 586)) | (1L << (XMLPARSE - 586)) | (1L << (XMLPI - 586)) | (1L << (XMLQUERY - 586)) | (1L << (XMLROOT - 586)) | (1L << (XMLSERIALIZE - 586)) | (1L << (XMLTABLE - 586)) | (1L << (YEAR - 586)) | (1L << (YES - 586)) | (1L << (YMINTERVAL_UNCONSTRAINED - 586)) | (1L << (ZONE - 586)) | (1L << (PREDICTION - 586)) | (1L << (PREDICTION_BOUNDS - 586)) | (1L << (PREDICTION_COST - 586)) | (1L << (PREDICTION_DETAILS - 586)) | (1L << (PREDICTION_PROBABILITY - 586)) | (1L << (PREDICTION_SET - 586)) | (1L << (CUME_DIST - 586)) | (1L << (DENSE_RANK - 586)) | (1L << (LISTAGG - 586)) | (1L << (PERCENT_RANK - 586)) | (1L << (PERCENTILE_CONT - 586)) | (1L << (PERCENTILE_DISC - 586)) | (1L << (RANK - 586)) | (1L << (AVG - 586)) | (1L << (CORR - 586)) | (1L << (LAG - 586)) | (1L << (LEAD - 586)) | (1L << (MAX - 586)) | (1L << (MEDIAN - 586)) | (1L << (MIN - 586)) | (1L << (NTILE - 586)) | (1L << (RATIO_TO_REPORT - 586)) | (1L << (ROW_NUMBER - 586)) | (1L << (SUM - 586)) | (1L << (VARIANCE - 586)) | (1L << (REGR_ - 586)) | (1L << (STDDEV - 586)) | (1L << (VAR_ - 586)) | (1L << (COVAR_ - 586)))) != 0) || _la==REGULAR_ID) {
					{
					setState(1918);
					partition_name();
					}
				}

				setState(1927);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMPRESS || _la==FILESYSTEM_LIKE_LOGGING || _la==INITRANS || ((((_la - 275)) & ~0x3f) == 0 && ((1L << (_la - 275)) & ((1L << (LOGGING - 275)) | (1L << (NOCOMPRESS - 275)) | (1L << (NOLOGGING - 275)))) != 0) || _la==PCTFREE || _la==PCTUSED || _la==STORAGE || _la==TABLESPACE) {
					{
					setState(1923); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						setState(1923);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case FILESYSTEM_LIKE_LOGGING:
						case INITRANS:
						case LOGGING:
						case NOLOGGING:
						case PCTFREE:
						case PCTUSED:
						case STORAGE:
						case TABLESPACE:
							{
							setState(1921);
							segment_attributes_clause();
							}
							break;
						case COMPRESS:
						case NOCOMPRESS:
							{
							setState(1922);
							key_compression();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						setState(1925); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( _la==COMPRESS || _la==FILESYSTEM_LIKE_LOGGING || _la==INITRANS || ((((_la - 275)) & ~0x3f) == 0 && ((1L << (_la - 275)) & ((1L << (LOGGING - 275)) | (1L << (NOCOMPRESS - 275)) | (1L << (NOLOGGING - 275)))) != 0) || _la==PCTFREE || _la==PCTUSED || _la==STORAGE || _la==TABLESPACE );
					}
				}

				setState(1929);
				match(UNUSABLE);
				setState(1931);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==STORE || _la==LEFT_PAREN) {
					{
					setState(1930);
					index_subpartition_clause();
					}
				}

				}
				}
				setState(1935); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==PARTITION || _la==COMMA );
			setState(1937);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Index_subpartition_clauseContext extends ParserRuleContext {
		public TerminalNode STORE() { return getToken(PLSQLParser.STORE, 0); }
		public TerminalNode IN() { return getToken(PLSQLParser.IN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PLSQLParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PLSQLParser.RIGHT_PAREN, 0); }
		public List<TablespaceContext> tablespace() {
			return getRuleContexts(TablespaceContext.class);
		}
		public TablespaceContext tablespace(int i) {
			return getRuleContext(TablespaceContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLSQLParser.COMMA, i);
		}
		public List<TerminalNode> SUBPARTITION() { return getTokens(PLSQLParser.SUBPARTITION); }
		public TerminalNode SUBPARTITION(int i) {
			return getToken(PLSQLParser.SUBPARTITION, i);
		}
		public List<Subpartition_nameContext> subpartition_name() {
			return getRuleContexts(Subpartition_nameContext.class);
		}
		public Subpartition_nameContext subpartition_name(int i) {
			return getRuleContext(Subpartition_nameContext.class,i);
		}
		public List<TerminalNode> TABLESPACE() { return getTokens(PLSQLParser.TABLESPACE); }
		public TerminalNode TABLESPACE(int i) {
			return getToken(PLSQLParser.TABLESPACE, i);
		}
		public List<Key_compressionContext> key_compression() {
			return getRuleContexts(Key_compressionContext.class);
		}
		public Key_compressionContext key_compression(int i) {
			return getRuleContext(Key_compressionContext.class,i);
		}
		public List<TerminalNode> UNUSABLE() { return getTokens(PLSQLParser.UNUSABLE); }
		public TerminalNode UNUSABLE(int i) {
			return getToken(PLSQLParser.UNUSABLE, i);
		}
		public Index_subpartition_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_index_subpartition_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterIndex_subpartition_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitIndex_subpartition_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitIndex_subpartition_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Index_subpartition_clauseContext index_subpartition_clause() throws RecognitionException {
		Index_subpartition_clauseContext _localctx = new Index_subpartition_clauseContext(_ctx, getState());
		enterRule(_localctx, 98, RULE_index_subpartition_clause);
		int _la;
		try {
			setState(1975);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case STORE:
				enterOuterAlt(_localctx, 1);
				{
				setState(1939);
				match(STORE);
				setState(1940);
				match(IN);
				setState(1941);
				match(LEFT_PAREN);
				setState(1946); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(1943);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(1942);
						match(COMMA);
						}
					}

					setState(1945);
					tablespace();
					}
					}
					setState(1948); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BUILD) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (CHR - 65)) | (1L << (CLOB - 65)) | (1L << (CLOSE - 65)) | (1L << (CLUSTER - 65)) | (1L << (COALESCE - 65)) | (1L << (COLLECT - 65)) | (1L << (COLUMNS - 65)) | (1L << (COMMENT - 65)) | (1L << (COMMIT - 65)) | (1L << (COMMITTED - 65)) | (1L << (COMPATIBILITY - 65)) | (1L << (COMPILE - 65)) | (1L << (COMPLETE - 65)) | (1L << (COMPOUND - 65)) | (1L << (CONCAT - 65)) | (1L << (CONSTANT - 65)) | (1L << (CONSTRAINT - 65)) | (1L << (CONSTRAINTS - 65)) | (1L << (CONSTRUCTOR - 65)) | (1L << (CONTENT - 65)) | (1L << (CONTEXT - 65)) | (1L << (CONTINUE - 65)) | (1L << (CONVERT - 65)) | (1L << (CORRUPT_XID - 65)) | (1L << (CORRUPT_XID_ALL - 65)) | (1L << (COST - 65)) | (1L << (COUNT - 65)) | (1L << (CROSS - 65)) | (1L << (CUBE - 65)) | (1L << (CURRENT_USER - 65)) | (1L << (CURSOR - 65)) | (1L << (CUSTOMDATUM - 65)) | (1L << (CYCLE - 65)) | (1L << (DATA - 65)) | (1L << (DATABASE - 65)) | (1L << (DATE - 65)) | (1L << (DAY - 65)) | (1L << (DB_ROLE_CHANGE - 65)) | (1L << (DBTIMEZONE - 65)) | (1L << (DDL - 65)) | (1L << (DEBUG - 65)) | (1L << (DEC - 65)) | (1L << (DECIMAL - 65)) | (1L << (DECODE - 65)) | (1L << (DECOMPOSE - 65)) | (1L << (DECREMENT - 65)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DEMAND - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (EDITIONING - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENFORCED - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FAST - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)) | (1L << (FOLLOWING - 129)) | (1L << (FOLLOWS - 129)) | (1L << (FORALL - 129)) | (1L << (FORCE - 129)))) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & ((1L << (FULL - 197)) | (1L << (FUNCTION - 197)) | (1L << (GROUPING - 197)) | (1L << (HASH - 197)) | (1L << (HIDE - 197)) | (1L << (HOUR - 197)) | (1L << (IGNORE - 197)) | (1L << (IMMEDIATE - 197)) | (1L << (INCLUDE - 197)) | (1L << (INCLUDING - 197)) | (1L << (INCREMENT - 197)) | (1L << (INDENT - 197)) | (1L << (INDEXED - 197)) | (1L << (INDICATOR - 197)) | (1L << (INDICES - 197)) | (1L << (INFINITE - 197)) | (1L << (INLINE - 197)) | (1L << (INNER - 197)) | (1L << (INOUT - 197)) | (1L << (INSTANTIABLE - 197)) | (1L << (INSTEAD - 197)) | (1L << (INT - 197)) | (1L << (INTEGER - 197)) | (1L << (INTERVAL - 197)) | (1L << (INVALIDATE - 197)) | (1L << (ISOLATION - 197)) | (1L << (ITERATE - 197)) | (1L << (JAVA - 197)) | (1L << (JOIN - 197)) | (1L << (KEEP - 197)) | (1L << (LANGUAGE - 197)) | (1L << (LAST - 197)) | (1L << (LAST_VALUE - 197)) | (1L << (LEADING - 197)) | (1L << (LEFT - 197)) | (1L << (LEVEL - 197)))) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & ((1L << (LIBRARY - 261)) | (1L << (LIKE2 - 261)) | (1L << (LIKE4 - 261)) | (1L << (LIKEC - 261)) | (1L << (LIMIT - 261)) | (1L << (LIST - 261)) | (1L << (LOCAL - 261)) | (1L << (LOCKED - 261)) | (1L << (LOG - 261)) | (1L << (LOGOFF - 261)) | (1L << (LOGON - 261)) | (1L << (LONG - 261)) | (1L << (LOOP - 261)) | (1L << (MAIN - 261)) | (1L << (MAP - 261)) | (1L << (MASTER - 261)) | (1L << (MATCHED - 261)) | (1L << (MAXVALUE - 261)) | (1L << (MEASURES - 261)) | (1L << (MEMBER - 261)) | (1L << (MERGE - 261)) | (1L << (MINUTE - 261)) | (1L << (MINVALUE - 261)) | (1L << (MLSLABEL - 261)) | (1L << (MODEL - 261)) | (1L << (MODIFY - 261)) | (1L << (MONTH - 261)) | (1L << (MULTISET - 261)) | (1L << (NAME - 261)) | (1L << (NAN - 261)) | (1L << (NATURAL - 261)) | (1L << (NATURALN - 261)) | (1L << (NAV - 261)) | (1L << (NCHAR - 261)) | (1L << (NCHAR_CS - 261)) | (1L << (NCLOB - 261)) | (1L << (NESTED - 261)) | (1L << (NEVER - 261)) | (1L << (NEW - 261)) | (1L << (NO - 261)) | (1L << (NOAUDIT - 261)) | (1L << (NOCOPY - 261)) | (1L << (NOCYCLE - 261)) | (1L << (NOENTITYESCAPING - 261)))) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & ((1L << (NONE - 329)) | (1L << (NOSCHEMACHECK - 329)) | (1L << (NVL - 329)) | (1L << (NULLS - 329)) | (1L << (NUMBER - 329)) | (1L << (NUMERIC - 329)) | (1L << (NVARCHAR2 - 329)) | (1L << (MATERIALIZED - 329)) | (1L << (OBJECT - 329)) | (1L << (OFF - 329)) | (1L << (OID - 329)) | (1L << (OLD - 329)) | (1L << (ONLY - 329)) | (1L << (OPEN - 329)) | (1L << (ORADATA - 329)) | (1L << (ORDINALITY - 329)) | (1L << (OSERROR - 329)) | (1L << (OUT - 329)) | (1L << (OUTER - 329)) | (1L << (OVER - 329)) | (1L << (OVERRIDING - 329)) | (1L << (PACKAGE - 329)) | (1L << (PARALLEL_ENABLE - 329)) | (1L << (PARAMETERS - 329)) | (1L << (PARENT - 329)) | (1L << (PARTITION - 329)) | (1L << (PASSING - 329)) | (1L << (PATH - 329)) | (1L << (PIPELINED - 329)) | (1L << (PLAN - 329)) | (1L << (PLS_INTEGER - 329)) | (1L << (POSITIVE - 329)) | (1L << (POSITIVEN - 329)) | (1L << (PRAGMA - 329)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (PREBUILT - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)) | (1L << (PRESENT - 393)) | (1L << (PUBLIC - 393)) | (1L << (RAISE - 393)) | (1L << (RANGE - 393)) | (1L << (RAW - 393)) | (1L << (READ - 393)) | (1L << (REAL - 393)) | (1L << (RECORD - 393)) | (1L << (REDUCED - 393)) | (1L << (REF - 393)) | (1L << (REFERENCE - 393)) | (1L << (REFERENCING - 393)) | (1L << (REFRESH - 393)) | (1L << (REJECT - 393)) | (1L << (RELIES_ON - 393)) | (1L << (RENAME - 393)) | (1L << (REPLACE - 393)) | (1L << (RESPECT - 393)) | (1L << (RESTRICT_REFERENCES - 393)) | (1L << (RESULT - 393)) | (1L << (RESULT_CACHE - 393)) | (1L << (RETURN - 393)) | (1L << (RETURNING - 393)) | (1L << (REUSE - 393)) | (1L << (REVERSE - 393)) | (1L << (REWRITE - 393)) | (1L << (RIGHT - 393)) | (1L << (ROLE - 393)) | (1L << (ROLLBACK - 393)) | (1L << (ROLLUP - 393)) | (1L << (ROW - 393)) | (1L << (ROWID - 393)) | (1L << (ROWS - 393)) | (1L << (RULES - 393)) | (1L << (SAMPLE - 393)) | (1L << (SAVE - 393)) | (1L << (SAVEPOINT - 393)) | (1L << (SCHEMA - 393)) | (1L << (SCHEMACHECK - 393)) | (1L << (SCN - 393)) | (1L << (SECOND - 393)))) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & ((1L << (SEED - 458)) | (1L << (SEGMENT - 458)) | (1L << (SELF - 458)) | (1L << (SEQUENTIAL - 458)) | (1L << (SERIALIZABLE - 458)) | (1L << (SERIALLY_REUSABLE - 458)) | (1L << (SERVERERROR - 458)) | (1L << (SESSIONTIMEZONE - 458)) | (1L << (SET - 458)) | (1L << (SETS - 458)) | (1L << (SETTINGS - 458)) | (1L << (SHOW - 458)) | (1L << (SHUTDOWN - 458)) | (1L << (SIBLINGS - 458)) | (1L << (SIGNTYPE - 458)) | (1L << (SIMPLE_INTEGER - 458)) | (1L << (SINGLE - 458)) | (1L << (SIZE - 458)) | (1L << (SKIP_ - 458)) | (1L << (SMALLINT - 458)) | (1L << (SNAPSHOT - 458)) | (1L << (SOME - 458)) | (1L << (SPECIFICATION - 458)) | (1L << (SQLDATA - 458)) | (1L << (SQLERROR - 458)) | (1L << (STANDALONE - 458)) | (1L << (STARTUP - 458)) | (1L << (STATEMENT - 458)) | (1L << (STATEMENT_ID - 458)) | (1L << (STATIC - 458)) | (1L << (STATISTICS - 458)) | (1L << (STRING - 458)) | (1L << (SUBMULTISET - 458)) | (1L << (SUBPARTITION - 458)) | (1L << (SUBSTITUTABLE - 458)) | (1L << (SUBSTRING - 458)) | (1L << (SUBTYPE - 458)) | (1L << (SUCCESS - 458)) | (1L << (SUSPEND - 458)) | (1L << (TABLES - 458)) | (1L << (TIME - 458)) | (1L << (TIMESTAMP - 458)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 458)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 458)) | (1L << (TIMESTAMP_UNCONSTRAINED - 458)))) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & ((1L << (TIMEZONE_ABBR - 522)) | (1L << (TIMEZONE_HOUR - 522)) | (1L << (TIMEZONE_MINUTE - 522)) | (1L << (TIMEZONE_REGION - 522)) | (1L << (TO_CHAR - 522)) | (1L << (TO_DATE - 522)) | (1L << (TRAILING - 522)) | (1L << (TRANSACTION - 522)) | (1L << (TRANSLATE - 522)) | (1L << (TREAT - 522)) | (1L << (TRIGGER - 522)) | (1L << (TRIM - 522)) | (1L << (TRUNCATE - 522)) | (1L << (TRUSTED - 522)) | (1L << (TYPE - 522)) | (1L << (UNBOUNDED - 522)) | (1L << (UNDER - 522)) | (1L << (UNLIMITED - 522)) | (1L << (UNTIL - 522)) | (1L << (UPDATED - 522)) | (1L << (UPSERT - 522)) | (1L << (UROWID - 522)) | (1L << (USE - 522)) | (1L << (VALIDATE - 522)) | (1L << (VALUE - 522)) | (1L << (VARCHAR - 522)) | (1L << (VARCHAR2 - 522)) | (1L << (VARIABLE - 522)) | (1L << (VARRAY - 522)) | (1L << (VARYING - 522)) | (1L << (VERBOSE - 522)) | (1L << (VERSION - 522)) | (1L << (VERSIONS - 522)) | (1L << (VIEW - 522)) | (1L << (WAIT - 522)) | (1L << (WARNING - 522)) | (1L << (WELLFORMED - 522)) | (1L << (WHENEVER - 522)) | (1L << (WHILE - 522)) | (1L << (WITHOUT - 522)) | (1L << (WITHIN - 522)) | (1L << (WORK - 522)) | (1L << (WRITE - 522)) | (1L << (XML - 522)) | (1L << (XMLAGG - 522)) | (1L << (XMLATTRIBUTES - 522)))) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & ((1L << (XMLCAST - 586)) | (1L << (XMLCOLATTVAL - 586)) | (1L << (XMLELEMENT - 586)) | (1L << (XMLEXISTS - 586)) | (1L << (XMLFOREST - 586)) | (1L << (XMLNAMESPACES - 586)) | (1L << (XMLPARSE - 586)) | (1L << (XMLPI - 586)) | (1L << (XMLQUERY - 586)) | (1L << (XMLROOT - 586)) | (1L << (XMLSERIALIZE - 586)) | (1L << (XMLTABLE - 586)) | (1L << (YEAR - 586)) | (1L << (YES - 586)) | (1L << (YMINTERVAL_UNCONSTRAINED - 586)) | (1L << (ZONE - 586)) | (1L << (PREDICTION - 586)) | (1L << (PREDICTION_BOUNDS - 586)) | (1L << (PREDICTION_COST - 586)) | (1L << (PREDICTION_DETAILS - 586)) | (1L << (PREDICTION_PROBABILITY - 586)) | (1L << (PREDICTION_SET - 586)) | (1L << (CUME_DIST - 586)) | (1L << (DENSE_RANK - 586)) | (1L << (LISTAGG - 586)) | (1L << (PERCENT_RANK - 586)) | (1L << (PERCENTILE_CONT - 586)) | (1L << (PERCENTILE_DISC - 586)) | (1L << (RANK - 586)) | (1L << (AVG - 586)) | (1L << (CORR - 586)) | (1L << (LAG - 586)) | (1L << (LEAD - 586)) | (1L << (MAX - 586)) | (1L << (MEDIAN - 586)) | (1L << (MIN - 586)) | (1L << (NTILE - 586)) | (1L << (RATIO_TO_REPORT - 586)) | (1L << (ROW_NUMBER - 586)) | (1L << (SUM - 586)) | (1L << (VARIANCE - 586)) | (1L << (REGR_ - 586)) | (1L << (STDDEV - 586)) | (1L << (VAR_ - 586)) | (1L << (COVAR_ - 586)))) != 0) || _la==COMMA || _la==REGULAR_ID );
				setState(1950);
				match(RIGHT_PAREN);
				}
				break;
			case LEFT_PAREN:
				enterOuterAlt(_localctx, 2);
				{
				setState(1952);
				match(LEFT_PAREN);
				setState(1970); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(1954);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(1953);
						match(COMMA);
						}
					}

					setState(1956);
					match(SUBPARTITION);
					setState(1958);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,163,_ctx) ) {
					case 1:
						{
						setState(1957);
						subpartition_name();
						}
						break;
					}
					setState(1962);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==TABLESPACE) {
						{
						setState(1960);
						match(TABLESPACE);
						setState(1961);
						tablespace();
						}
					}

					setState(1965);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMPRESS || _la==NOCOMPRESS) {
						{
						setState(1964);
						key_compression();
						}
					}

					setState(1968);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==UNUSABLE) {
						{
						setState(1967);
						match(UNUSABLE);
						}
					}

					}
					}
					setState(1972); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==SUBPARTITION || _la==COMMA );
				setState(1974);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Subpartition_nameContext extends ParserRuleContext {
		public Partition_nameContext partition_name() {
			return getRuleContext(Partition_nameContext.class,0);
		}
		public Subpartition_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subpartition_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterSubpartition_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitSubpartition_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitSubpartition_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Subpartition_nameContext subpartition_name() throws RecognitionException {
		Subpartition_nameContext _localctx = new Subpartition_nameContext(_ctx, getState());
		enterRule(_localctx, 100, RULE_subpartition_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1977);
			partition_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Domain_index_clauseContext extends ParserRuleContext {
		public IndextypeContext indextype() {
			return getRuleContext(IndextypeContext.class,0);
		}
		public Local_domain_index_clauseContext local_domain_index_clause() {
			return getRuleContext(Local_domain_index_clauseContext.class,0);
		}
		public Parallel_clauseContext parallel_clause() {
			return getRuleContext(Parallel_clauseContext.class,0);
		}
		public TerminalNode PARAMETERS() { return getToken(PLSQLParser.PARAMETERS, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PLSQLParser.LEFT_PAREN, 0); }
		public Odci_parametersContext odci_parameters() {
			return getRuleContext(Odci_parametersContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PLSQLParser.RIGHT_PAREN, 0); }
		public Domain_index_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_domain_index_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterDomain_index_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitDomain_index_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitDomain_index_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Domain_index_clauseContext domain_index_clause() throws RecognitionException {
		Domain_index_clauseContext _localctx = new Domain_index_clauseContext(_ctx, getState());
		enterRule(_localctx, 102, RULE_domain_index_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1979);
			indextype();
			setState(1981);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOCAL) {
				{
				setState(1980);
				local_domain_index_clause();
				}
			}

			setState(1984);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOPARALLEL || _la==PARALLEL) {
				{
				setState(1983);
				parallel_clause();
				}
			}

			setState(1991);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARAMETERS) {
				{
				setState(1986);
				match(PARAMETERS);
				setState(1987);
				match(LEFT_PAREN);
				setState(1988);
				odci_parameters();
				setState(1989);
				match(RIGHT_PAREN);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndextypeContext extends ParserRuleContext {
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public TerminalNode PERIOD() { return getToken(PLSQLParser.PERIOD, 0); }
		public IndextypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indextype; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterIndextype(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitIndextype(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitIndextype(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndextypeContext indextype() throws RecognitionException {
		IndextypeContext _localctx = new IndextypeContext(_ctx, getState());
		enterRule(_localctx, 104, RULE_indextype);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1996);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,172,_ctx) ) {
			case 1:
				{
				setState(1993);
				id_expression();
				setState(1994);
				match(PERIOD);
				}
				break;
			}
			setState(1998);
			id_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Odci_parametersContext extends ParserRuleContext {
		public TerminalNode CHAR_STRING() { return getToken(PLSQLParser.CHAR_STRING, 0); }
		public Odci_parametersContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_odci_parameters; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterOdci_parameters(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitOdci_parameters(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitOdci_parameters(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Odci_parametersContext odci_parameters() throws RecognitionException {
		Odci_parametersContext _localctx = new Odci_parametersContext(_ctx, getState());
		enterRule(_localctx, 106, RULE_odci_parameters);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2000);
			match(CHAR_STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Local_domain_index_clauseContext extends ParserRuleContext {
		public TerminalNode LOCAL() { return getToken(PLSQLParser.LOCAL, 0); }
		public List<TerminalNode> LEFT_PAREN() { return getTokens(PLSQLParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(PLSQLParser.LEFT_PAREN, i);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(PLSQLParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(PLSQLParser.RIGHT_PAREN, i);
		}
		public List<TerminalNode> PARTITION() { return getTokens(PLSQLParser.PARTITION); }
		public TerminalNode PARTITION(int i) {
			return getToken(PLSQLParser.PARTITION, i);
		}
		public List<Partition_nameContext> partition_name() {
			return getRuleContexts(Partition_nameContext.class);
		}
		public Partition_nameContext partition_name(int i) {
			return getRuleContext(Partition_nameContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLSQLParser.COMMA, i);
		}
		public List<TerminalNode> PARAMETERS() { return getTokens(PLSQLParser.PARAMETERS); }
		public TerminalNode PARAMETERS(int i) {
			return getToken(PLSQLParser.PARAMETERS, i);
		}
		public List<Odci_parametersContext> odci_parameters() {
			return getRuleContexts(Odci_parametersContext.class);
		}
		public Odci_parametersContext odci_parameters(int i) {
			return getRuleContext(Odci_parametersContext.class,i);
		}
		public Local_domain_index_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_local_domain_index_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterLocal_domain_index_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitLocal_domain_index_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitLocal_domain_index_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Local_domain_index_clauseContext local_domain_index_clause() throws RecognitionException {
		Local_domain_index_clauseContext _localctx = new Local_domain_index_clauseContext(_ctx, getState());
		enterRule(_localctx, 108, RULE_local_domain_index_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2002);
			match(LOCAL);
			setState(2022);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,176,_ctx) ) {
			case 1:
				{
				setState(2003);
				match(LEFT_PAREN);
				setState(2016); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(2005);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(2004);
						match(COMMA);
						}
					}

					setState(2007);
					match(PARTITION);
					setState(2008);
					partition_name();
					setState(2014);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==PARAMETERS) {
						{
						setState(2009);
						match(PARAMETERS);
						setState(2010);
						match(LEFT_PAREN);
						setState(2011);
						odci_parameters();
						setState(2012);
						match(RIGHT_PAREN);
						}
					}

					}
					}
					setState(2018); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==PARTITION || _la==COMMA );
				setState(2020);
				match(RIGHT_PAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xmlindex_clauseContext extends ParserRuleContext {
		public TerminalNode XMLINDEX() { return getToken(PLSQLParser.XMLINDEX, 0); }
		public TerminalNode XDB() { return getToken(PLSQLParser.XDB, 0); }
		public TerminalNode PERIOD() { return getToken(PLSQLParser.PERIOD, 0); }
		public Local_xmlindex_clauseContext local_xmlindex_clause() {
			return getRuleContext(Local_xmlindex_clauseContext.class,0);
		}
		public Parallel_clauseContext parallel_clause() {
			return getRuleContext(Parallel_clauseContext.class,0);
		}
		public Xmlindex_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlindex_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterXmlindex_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitXmlindex_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitXmlindex_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xmlindex_clauseContext xmlindex_clause() throws RecognitionException {
		Xmlindex_clauseContext _localctx = new Xmlindex_clauseContext(_ctx, getState());
		enterRule(_localctx, 110, RULE_xmlindex_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2026);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==XDB) {
				{
				setState(2024);
				match(XDB);
				setState(2025);
				match(PERIOD);
				}
			}

			setState(2028);
			match(XMLINDEX);
			setState(2030);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOCAL) {
				{
				setState(2029);
				local_xmlindex_clause();
				}
			}

			setState(2033);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOPARALLEL || _la==PARALLEL) {
				{
				setState(2032);
				parallel_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Local_xmlindex_clauseContext extends ParserRuleContext {
		public TerminalNode LOCAL() { return getToken(PLSQLParser.LOCAL, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PLSQLParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PLSQLParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> PARTITION() { return getTokens(PLSQLParser.PARTITION); }
		public TerminalNode PARTITION(int i) {
			return getToken(PLSQLParser.PARTITION, i);
		}
		public List<Partition_nameContext> partition_name() {
			return getRuleContexts(Partition_nameContext.class);
		}
		public Partition_nameContext partition_name(int i) {
			return getRuleContext(Partition_nameContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLSQLParser.COMMA, i);
		}
		public Local_xmlindex_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_local_xmlindex_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterLocal_xmlindex_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitLocal_xmlindex_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitLocal_xmlindex_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Local_xmlindex_clauseContext local_xmlindex_clause() throws RecognitionException {
		Local_xmlindex_clauseContext _localctx = new Local_xmlindex_clauseContext(_ctx, getState());
		enterRule(_localctx, 112, RULE_local_xmlindex_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2035);
			match(LOCAL);
			setState(2048);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,182,_ctx) ) {
			case 1:
				{
				setState(2036);
				match(LEFT_PAREN);
				setState(2042); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(2038);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(2037);
						match(COMMA);
						}
					}

					setState(2040);
					match(PARTITION);
					setState(2041);
					partition_name();
					}
					}
					setState(2044); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==PARTITION || _la==COMMA );
				setState(2046);
				match(RIGHT_PAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Bitmap_join_index_clauseContext extends ParserRuleContext {
		public List<Tableview_nameContext> tableview_name() {
			return getRuleContexts(Tableview_nameContext.class);
		}
		public Tableview_nameContext tableview_name(int i) {
			return getRuleContext(Tableview_nameContext.class,i);
		}
		public TerminalNode LEFT_PAREN() { return getToken(PLSQLParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PLSQLParser.RIGHT_PAREN, 0); }
		public TerminalNode FROM() { return getToken(PLSQLParser.FROM, 0); }
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public List<Table_aliasContext> table_alias() {
			return getRuleContexts(Table_aliasContext.class);
		}
		public Table_aliasContext table_alias(int i) {
			return getRuleContext(Table_aliasContext.class,i);
		}
		public Local_partitioned_indexContext local_partitioned_index() {
			return getRuleContext(Local_partitioned_indexContext.class,0);
		}
		public Index_attributesContext index_attributes() {
			return getRuleContext(Index_attributesContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLSQLParser.COMMA, i);
		}
		public List<TerminalNode> ASC() { return getTokens(PLSQLParser.ASC); }
		public TerminalNode ASC(int i) {
			return getToken(PLSQLParser.ASC, i);
		}
		public List<TerminalNode> DESC() { return getTokens(PLSQLParser.DESC); }
		public TerminalNode DESC(int i) {
			return getToken(PLSQLParser.DESC, i);
		}
		public Bitmap_join_index_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bitmap_join_index_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterBitmap_join_index_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitBitmap_join_index_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitBitmap_join_index_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Bitmap_join_index_clauseContext bitmap_join_index_clause() throws RecognitionException {
		Bitmap_join_index_clauseContext _localctx = new Bitmap_join_index_clauseContext(_ctx, getState());
		enterRule(_localctx, 114, RULE_bitmap_join_index_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2050);
			tableview_name();
			setState(2051);
			match(LEFT_PAREN);
			setState(2063); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(2053);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(2052);
					match(COMMA);
					}
				}

				setState(2057);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,184,_ctx) ) {
				case 1:
					{
					setState(2055);
					tableview_name();
					}
					break;
				case 2:
					{
					setState(2056);
					table_alias();
					}
					break;
				}
				setState(2059);
				column_name();
				setState(2061);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ASC || _la==DESC) {
					{
					setState(2060);
					_la = _input.LA(1);
					if ( !(_la==ASC || _la==DESC) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				}
				}
				setState(2065); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << AS) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BUILD) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (CHR - 65)) | (1L << (CLOB - 65)) | (1L << (CLOSE - 65)) | (1L << (CLUSTER - 65)) | (1L << (COALESCE - 65)) | (1L << (COLLECT - 65)) | (1L << (COLUMNS - 65)) | (1L << (COMMENT - 65)) | (1L << (COMMIT - 65)) | (1L << (COMMITTED - 65)) | (1L << (COMPATIBILITY - 65)) | (1L << (COMPILE - 65)) | (1L << (COMPLETE - 65)) | (1L << (COMPOUND - 65)) | (1L << (CONCAT - 65)) | (1L << (CONSTANT - 65)) | (1L << (CONSTRAINT - 65)) | (1L << (CONSTRAINTS - 65)) | (1L << (CONSTRUCTOR - 65)) | (1L << (CONTENT - 65)) | (1L << (CONTEXT - 65)) | (1L << (CONTINUE - 65)) | (1L << (CONVERT - 65)) | (1L << (CORRUPT_XID - 65)) | (1L << (CORRUPT_XID_ALL - 65)) | (1L << (COST - 65)) | (1L << (COUNT - 65)) | (1L << (CROSS - 65)) | (1L << (CUBE - 65)) | (1L << (CURRENT_USER - 65)) | (1L << (CURSOR - 65)) | (1L << (CUSTOMDATUM - 65)) | (1L << (CYCLE - 65)) | (1L << (DATA - 65)) | (1L << (DATABASE - 65)) | (1L << (DATE - 65)) | (1L << (DAY - 65)) | (1L << (DB_ROLE_CHANGE - 65)) | (1L << (DBTIMEZONE - 65)) | (1L << (DDL - 65)) | (1L << (DEBUG - 65)) | (1L << (DEC - 65)) | (1L << (DECIMAL - 65)) | (1L << (DECODE - 65)) | (1L << (DECOMPOSE - 65)) | (1L << (DECREMENT - 65)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DEMAND - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (EDITIONING - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENFORCED - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FAST - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)) | (1L << (FOLLOWING - 129)) | (1L << (FOLLOWS - 129)) | (1L << (FORALL - 129)) | (1L << (FORCE - 129)))) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & ((1L << (FULL - 197)) | (1L << (FUNCTION - 197)) | (1L << (GROUPING - 197)) | (1L << (HASH - 197)) | (1L << (HIDE - 197)) | (1L << (HOUR - 197)) | (1L << (IGNORE - 197)) | (1L << (IMMEDIATE - 197)) | (1L << (INCLUDE - 197)) | (1L << (INCLUDING - 197)) | (1L << (INCREMENT - 197)) | (1L << (INDENT - 197)) | (1L << (INDEXED - 197)) | (1L << (INDICATOR - 197)) | (1L << (INDICES - 197)) | (1L << (INFINITE - 197)) | (1L << (INLINE - 197)) | (1L << (INNER - 197)) | (1L << (INOUT - 197)) | (1L << (INSTANTIABLE - 197)) | (1L << (INSTEAD - 197)) | (1L << (INT - 197)) | (1L << (INTEGER - 197)) | (1L << (INTERVAL - 197)) | (1L << (INVALIDATE - 197)) | (1L << (ISOLATION - 197)) | (1L << (ITERATE - 197)) | (1L << (JAVA - 197)) | (1L << (JOIN - 197)) | (1L << (KEEP - 197)) | (1L << (LANGUAGE - 197)) | (1L << (LAST - 197)) | (1L << (LAST_VALUE - 197)) | (1L << (LEADING - 197)) | (1L << (LEFT - 197)) | (1L << (LEVEL - 197)))) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & ((1L << (LIBRARY - 261)) | (1L << (LIKE2 - 261)) | (1L << (LIKE4 - 261)) | (1L << (LIKEC - 261)) | (1L << (LIMIT - 261)) | (1L << (LIST - 261)) | (1L << (LOCAL - 261)) | (1L << (LOCKED - 261)) | (1L << (LOG - 261)) | (1L << (LOGOFF - 261)) | (1L << (LOGON - 261)) | (1L << (LONG - 261)) | (1L << (LOOP - 261)) | (1L << (MAIN - 261)) | (1L << (MAP - 261)) | (1L << (MASTER - 261)) | (1L << (MATCHED - 261)) | (1L << (MAXVALUE - 261)) | (1L << (MEASURES - 261)) | (1L << (MEMBER - 261)) | (1L << (MERGE - 261)) | (1L << (MINUTE - 261)) | (1L << (MINVALUE - 261)) | (1L << (MLSLABEL - 261)) | (1L << (MODEL - 261)) | (1L << (MODIFY - 261)) | (1L << (MONTH - 261)) | (1L << (MULTISET - 261)) | (1L << (NAME - 261)) | (1L << (NAN - 261)) | (1L << (NATURAL - 261)) | (1L << (NATURALN - 261)) | (1L << (NAV - 261)) | (1L << (NCHAR - 261)) | (1L << (NCHAR_CS - 261)) | (1L << (NCLOB - 261)) | (1L << (NESTED - 261)) | (1L << (NEVER - 261)) | (1L << (NEW - 261)) | (1L << (NO - 261)) | (1L << (NOAUDIT - 261)) | (1L << (NOCOPY - 261)) | (1L << (NOCYCLE - 261)) | (1L << (NOENTITYESCAPING - 261)))) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & ((1L << (NONE - 329)) | (1L << (NOSCHEMACHECK - 329)) | (1L << (NVL - 329)) | (1L << (NULLS - 329)) | (1L << (NUMBER - 329)) | (1L << (NUMERIC - 329)) | (1L << (NVARCHAR2 - 329)) | (1L << (MATERIALIZED - 329)) | (1L << (OBJECT - 329)) | (1L << (OFF - 329)) | (1L << (OID - 329)) | (1L << (OLD - 329)) | (1L << (ONLY - 329)) | (1L << (OPEN - 329)) | (1L << (ORADATA - 329)) | (1L << (ORDINALITY - 329)) | (1L << (OSERROR - 329)) | (1L << (OUT - 329)) | (1L << (OUTER - 329)) | (1L << (OVER - 329)) | (1L << (OVERRIDING - 329)) | (1L << (PACKAGE - 329)) | (1L << (PARALLEL_ENABLE - 329)) | (1L << (PARAMETERS - 329)) | (1L << (PARENT - 329)) | (1L << (PARTITION - 329)) | (1L << (PASSING - 329)) | (1L << (PATH - 329)) | (1L << (PIPELINED - 329)) | (1L << (PLAN - 329)) | (1L << (PLS_INTEGER - 329)) | (1L << (POSITIVE - 329)) | (1L << (POSITIVEN - 329)) | (1L << (PRAGMA - 329)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (PREBUILT - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)) | (1L << (PRESENT - 393)) | (1L << (PUBLIC - 393)) | (1L << (RAISE - 393)) | (1L << (RANGE - 393)) | (1L << (RAW - 393)) | (1L << (READ - 393)) | (1L << (REAL - 393)) | (1L << (RECORD - 393)) | (1L << (REDUCED - 393)) | (1L << (REF - 393)) | (1L << (REFERENCE - 393)) | (1L << (REFERENCING - 393)) | (1L << (REFRESH - 393)) | (1L << (REJECT - 393)) | (1L << (RELIES_ON - 393)) | (1L << (RENAME - 393)) | (1L << (REPLACE - 393)) | (1L << (RESPECT - 393)) | (1L << (RESTRICT_REFERENCES - 393)) | (1L << (RESULT - 393)) | (1L << (RESULT_CACHE - 393)) | (1L << (RETURN - 393)) | (1L << (RETURNING - 393)) | (1L << (REUSE - 393)) | (1L << (REVERSE - 393)) | (1L << (REWRITE - 393)) | (1L << (RIGHT - 393)) | (1L << (ROLE - 393)) | (1L << (ROLLBACK - 393)) | (1L << (ROLLUP - 393)) | (1L << (ROW - 393)) | (1L << (ROWID - 393)) | (1L << (ROWS - 393)) | (1L << (RULES - 393)) | (1L << (SAMPLE - 393)) | (1L << (SAVE - 393)) | (1L << (SAVEPOINT - 393)) | (1L << (SCHEMA - 393)) | (1L << (SCHEMACHECK - 393)) | (1L << (SCN - 393)) | (1L << (SECOND - 393)))) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & ((1L << (SEED - 458)) | (1L << (SEGMENT - 458)) | (1L << (SELF - 458)) | (1L << (SEQUENTIAL - 458)) | (1L << (SERIALIZABLE - 458)) | (1L << (SERIALLY_REUSABLE - 458)) | (1L << (SERVERERROR - 458)) | (1L << (SESSIONTIMEZONE - 458)) | (1L << (SET - 458)) | (1L << (SETS - 458)) | (1L << (SETTINGS - 458)) | (1L << (SHOW - 458)) | (1L << (SHUTDOWN - 458)) | (1L << (SIBLINGS - 458)) | (1L << (SIGNTYPE - 458)) | (1L << (SIMPLE_INTEGER - 458)) | (1L << (SINGLE - 458)) | (1L << (SIZE - 458)) | (1L << (SKIP_ - 458)) | (1L << (SMALLINT - 458)) | (1L << (SNAPSHOT - 458)) | (1L << (SOME - 458)) | (1L << (SPECIFICATION - 458)) | (1L << (SQLDATA - 458)) | (1L << (SQLERROR - 458)) | (1L << (STANDALONE - 458)) | (1L << (STARTUP - 458)) | (1L << (STATEMENT - 458)) | (1L << (STATEMENT_ID - 458)) | (1L << (STATIC - 458)) | (1L << (STATISTICS - 458)) | (1L << (STRING - 458)) | (1L << (SUBMULTISET - 458)) | (1L << (SUBPARTITION - 458)) | (1L << (SUBSTITUTABLE - 458)) | (1L << (SUBSTRING - 458)) | (1L << (SUBTYPE - 458)) | (1L << (SUCCESS - 458)) | (1L << (SUSPEND - 458)) | (1L << (TABLES - 458)) | (1L << (TIME - 458)) | (1L << (TIMESTAMP - 458)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 458)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 458)) | (1L << (TIMESTAMP_UNCONSTRAINED - 458)))) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & ((1L << (TIMEZONE_ABBR - 522)) | (1L << (TIMEZONE_HOUR - 522)) | (1L << (TIMEZONE_MINUTE - 522)) | (1L << (TIMEZONE_REGION - 522)) | (1L << (TO_CHAR - 522)) | (1L << (TO_DATE - 522)) | (1L << (TRAILING - 522)) | (1L << (TRANSACTION - 522)) | (1L << (TRANSLATE - 522)) | (1L << (TREAT - 522)) | (1L << (TRIGGER - 522)) | (1L << (TRIM - 522)) | (1L << (TRUNCATE - 522)) | (1L << (TRUSTED - 522)) | (1L << (TYPE - 522)) | (1L << (UNBOUNDED - 522)) | (1L << (UNDER - 522)) | (1L << (UNLIMITED - 522)) | (1L << (UNTIL - 522)) | (1L << (UPDATED - 522)) | (1L << (UPSERT - 522)) | (1L << (UROWID - 522)) | (1L << (USE - 522)) | (1L << (VALIDATE - 522)) | (1L << (VALUE - 522)) | (1L << (VARCHAR - 522)) | (1L << (VARCHAR2 - 522)) | (1L << (VARIABLE - 522)) | (1L << (VARRAY - 522)) | (1L << (VARYING - 522)) | (1L << (VERBOSE - 522)) | (1L << (VERSION - 522)) | (1L << (VERSIONS - 522)) | (1L << (VIEW - 522)) | (1L << (WAIT - 522)) | (1L << (WARNING - 522)) | (1L << (WELLFORMED - 522)) | (1L << (WHENEVER - 522)) | (1L << (WHILE - 522)) | (1L << (WITHOUT - 522)) | (1L << (WITHIN - 522)) | (1L << (WORK - 522)) | (1L << (WRITE - 522)) | (1L << (XML - 522)) | (1L << (XMLAGG - 522)) | (1L << (XMLATTRIBUTES - 522)))) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & ((1L << (XMLCAST - 586)) | (1L << (XMLCOLATTVAL - 586)) | (1L << (XMLELEMENT - 586)) | (1L << (XMLEXISTS - 586)) | (1L << (XMLFOREST - 586)) | (1L << (XMLNAMESPACES - 586)) | (1L << (XMLPARSE - 586)) | (1L << (XMLPI - 586)) | (1L << (XMLQUERY - 586)) | (1L << (XMLROOT - 586)) | (1L << (XMLSERIALIZE - 586)) | (1L << (XMLTABLE - 586)) | (1L << (YEAR - 586)) | (1L << (YES - 586)) | (1L << (YMINTERVAL_UNCONSTRAINED - 586)) | (1L << (ZONE - 586)) | (1L << (PREDICTION - 586)) | (1L << (PREDICTION_BOUNDS - 586)) | (1L << (PREDICTION_COST - 586)) | (1L << (PREDICTION_DETAILS - 586)) | (1L << (PREDICTION_PROBABILITY - 586)) | (1L << (PREDICTION_SET - 586)) | (1L << (CUME_DIST - 586)) | (1L << (DENSE_RANK - 586)) | (1L << (LISTAGG - 586)) | (1L << (PERCENT_RANK - 586)) | (1L << (PERCENTILE_CONT - 586)) | (1L << (PERCENTILE_DISC - 586)) | (1L << (RANK - 586)) | (1L << (AVG - 586)) | (1L << (CORR - 586)) | (1L << (LAG - 586)) | (1L << (LEAD - 586)) | (1L << (MAX - 586)) | (1L << (MEDIAN - 586)) | (1L << (MIN - 586)) | (1L << (NTILE - 586)) | (1L << (RATIO_TO_REPORT - 586)) | (1L << (ROW_NUMBER - 586)) | (1L << (SUM - 586)) | (1L << (VARIANCE - 586)) | (1L << (REGR_ - 586)) | (1L << (STDDEV - 586)) | (1L << (VAR_ - 586)) | (1L << (COVAR_ - 586)) | (1L << (NATIONAL_CHAR_STRING_LIT - 586)) | (1L << (CHAR_STRING - 586)) | (1L << (DELIMITED_ID - 586)))) != 0) || _la==COMMA || _la==REGULAR_ID );
			setState(2067);
			match(RIGHT_PAREN);
			setState(2068);
			match(FROM);
			setState(2075); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(2070);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(2069);
					match(COMMA);
					}
				}

				setState(2072);
				tableview_name();
				setState(2073);
				table_alias();
				}
				}
				setState(2077); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BUILD) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (CHR - 65)) | (1L << (CLOB - 65)) | (1L << (CLOSE - 65)) | (1L << (CLUSTER - 65)) | (1L << (COALESCE - 65)) | (1L << (COLLECT - 65)) | (1L << (COLUMNS - 65)) | (1L << (COMMENT - 65)) | (1L << (COMMIT - 65)) | (1L << (COMMITTED - 65)) | (1L << (COMPATIBILITY - 65)) | (1L << (COMPILE - 65)) | (1L << (COMPLETE - 65)) | (1L << (COMPOUND - 65)) | (1L << (CONCAT - 65)) | (1L << (CONSTANT - 65)) | (1L << (CONSTRAINT - 65)) | (1L << (CONSTRAINTS - 65)) | (1L << (CONSTRUCTOR - 65)) | (1L << (CONTENT - 65)) | (1L << (CONTEXT - 65)) | (1L << (CONTINUE - 65)) | (1L << (CONVERT - 65)) | (1L << (CORRUPT_XID - 65)) | (1L << (CORRUPT_XID_ALL - 65)) | (1L << (COST - 65)) | (1L << (COUNT - 65)) | (1L << (CROSS - 65)) | (1L << (CUBE - 65)) | (1L << (CURRENT_USER - 65)) | (1L << (CURSOR - 65)) | (1L << (CUSTOMDATUM - 65)) | (1L << (CYCLE - 65)) | (1L << (DATA - 65)) | (1L << (DATABASE - 65)) | (1L << (DATE - 65)) | (1L << (DAY - 65)) | (1L << (DB_ROLE_CHANGE - 65)) | (1L << (DBTIMEZONE - 65)) | (1L << (DDL - 65)) | (1L << (DEBUG - 65)) | (1L << (DEC - 65)) | (1L << (DECIMAL - 65)) | (1L << (DECODE - 65)) | (1L << (DECOMPOSE - 65)) | (1L << (DECREMENT - 65)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DEMAND - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (EDITIONING - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENFORCED - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FAST - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)) | (1L << (FOLLOWING - 129)) | (1L << (FOLLOWS - 129)) | (1L << (FORALL - 129)) | (1L << (FORCE - 129)))) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & ((1L << (FULL - 197)) | (1L << (FUNCTION - 197)) | (1L << (GROUPING - 197)) | (1L << (HASH - 197)) | (1L << (HIDE - 197)) | (1L << (HOUR - 197)) | (1L << (IGNORE - 197)) | (1L << (IMMEDIATE - 197)) | (1L << (INCLUDE - 197)) | (1L << (INCLUDING - 197)) | (1L << (INCREMENT - 197)) | (1L << (INDENT - 197)) | (1L << (INDEXED - 197)) | (1L << (INDICATOR - 197)) | (1L << (INDICES - 197)) | (1L << (INFINITE - 197)) | (1L << (INLINE - 197)) | (1L << (INNER - 197)) | (1L << (INOUT - 197)) | (1L << (INSTANTIABLE - 197)) | (1L << (INSTEAD - 197)) | (1L << (INT - 197)) | (1L << (INTEGER - 197)) | (1L << (INTERVAL - 197)) | (1L << (INVALIDATE - 197)) | (1L << (ISOLATION - 197)) | (1L << (ITERATE - 197)) | (1L << (JAVA - 197)) | (1L << (JOIN - 197)) | (1L << (KEEP - 197)) | (1L << (LANGUAGE - 197)) | (1L << (LAST - 197)) | (1L << (LAST_VALUE - 197)) | (1L << (LEADING - 197)) | (1L << (LEFT - 197)) | (1L << (LEVEL - 197)))) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & ((1L << (LIBRARY - 261)) | (1L << (LIKE2 - 261)) | (1L << (LIKE4 - 261)) | (1L << (LIKEC - 261)) | (1L << (LIMIT - 261)) | (1L << (LIST - 261)) | (1L << (LOCAL - 261)) | (1L << (LOCKED - 261)) | (1L << (LOG - 261)) | (1L << (LOGOFF - 261)) | (1L << (LOGON - 261)) | (1L << (LONG - 261)) | (1L << (LOOP - 261)) | (1L << (MAIN - 261)) | (1L << (MAP - 261)) | (1L << (MASTER - 261)) | (1L << (MATCHED - 261)) | (1L << (MAXVALUE - 261)) | (1L << (MEASURES - 261)) | (1L << (MEMBER - 261)) | (1L << (MERGE - 261)) | (1L << (MINUTE - 261)) | (1L << (MINVALUE - 261)) | (1L << (MLSLABEL - 261)) | (1L << (MODEL - 261)) | (1L << (MODIFY - 261)) | (1L << (MONTH - 261)) | (1L << (MULTISET - 261)) | (1L << (NAME - 261)) | (1L << (NAN - 261)) | (1L << (NATURAL - 261)) | (1L << (NATURALN - 261)) | (1L << (NAV - 261)) | (1L << (NCHAR - 261)) | (1L << (NCHAR_CS - 261)) | (1L << (NCLOB - 261)) | (1L << (NESTED - 261)) | (1L << (NEVER - 261)) | (1L << (NEW - 261)) | (1L << (NO - 261)) | (1L << (NOAUDIT - 261)) | (1L << (NOCOPY - 261)) | (1L << (NOCYCLE - 261)) | (1L << (NOENTITYESCAPING - 261)))) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & ((1L << (NONE - 329)) | (1L << (NOSCHEMACHECK - 329)) | (1L << (NVL - 329)) | (1L << (NULLS - 329)) | (1L << (NUMBER - 329)) | (1L << (NUMERIC - 329)) | (1L << (NVARCHAR2 - 329)) | (1L << (MATERIALIZED - 329)) | (1L << (OBJECT - 329)) | (1L << (OFF - 329)) | (1L << (OID - 329)) | (1L << (OLD - 329)) | (1L << (ONLY - 329)) | (1L << (OPEN - 329)) | (1L << (ORADATA - 329)) | (1L << (ORDINALITY - 329)) | (1L << (OSERROR - 329)) | (1L << (OUT - 329)) | (1L << (OUTER - 329)) | (1L << (OVER - 329)) | (1L << (OVERRIDING - 329)) | (1L << (PACKAGE - 329)) | (1L << (PARALLEL_ENABLE - 329)) | (1L << (PARAMETERS - 329)) | (1L << (PARENT - 329)) | (1L << (PARTITION - 329)) | (1L << (PASSING - 329)) | (1L << (PATH - 329)) | (1L << (PIPELINED - 329)) | (1L << (PLAN - 329)) | (1L << (PLS_INTEGER - 329)) | (1L << (POSITIVE - 329)) | (1L << (POSITIVEN - 329)) | (1L << (PRAGMA - 329)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (PREBUILT - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)) | (1L << (PRESENT - 393)) | (1L << (PUBLIC - 393)) | (1L << (RAISE - 393)) | (1L << (RANGE - 393)) | (1L << (RAW - 393)) | (1L << (READ - 393)) | (1L << (REAL - 393)) | (1L << (RECORD - 393)) | (1L << (REDUCED - 393)) | (1L << (REF - 393)) | (1L << (REFERENCE - 393)) | (1L << (REFERENCING - 393)) | (1L << (REFRESH - 393)) | (1L << (REJECT - 393)) | (1L << (RELIES_ON - 393)) | (1L << (RENAME - 393)) | (1L << (REPLACE - 393)) | (1L << (RESPECT - 393)) | (1L << (RESTRICT_REFERENCES - 393)) | (1L << (RESULT - 393)) | (1L << (RESULT_CACHE - 393)) | (1L << (RETURN - 393)) | (1L << (RETURNING - 393)) | (1L << (REUSE - 393)) | (1L << (REVERSE - 393)) | (1L << (REWRITE - 393)) | (1L << (RIGHT - 393)) | (1L << (ROLE - 393)) | (1L << (ROLLBACK - 393)) | (1L << (ROLLUP - 393)) | (1L << (ROW - 393)) | (1L << (ROWID - 393)) | (1L << (ROWS - 393)) | (1L << (RULES - 393)) | (1L << (SAMPLE - 393)) | (1L << (SAVE - 393)) | (1L << (SAVEPOINT - 393)) | (1L << (SCHEMA - 393)) | (1L << (SCHEMACHECK - 393)) | (1L << (SCN - 393)) | (1L << (SECOND - 393)))) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & ((1L << (SEED - 458)) | (1L << (SEGMENT - 458)) | (1L << (SELF - 458)) | (1L << (SEQUENTIAL - 458)) | (1L << (SERIALIZABLE - 458)) | (1L << (SERIALLY_REUSABLE - 458)) | (1L << (SERVERERROR - 458)) | (1L << (SESSIONTIMEZONE - 458)) | (1L << (SET - 458)) | (1L << (SETS - 458)) | (1L << (SETTINGS - 458)) | (1L << (SHOW - 458)) | (1L << (SHUTDOWN - 458)) | (1L << (SIBLINGS - 458)) | (1L << (SIGNTYPE - 458)) | (1L << (SIMPLE_INTEGER - 458)) | (1L << (SINGLE - 458)) | (1L << (SIZE - 458)) | (1L << (SKIP_ - 458)) | (1L << (SMALLINT - 458)) | (1L << (SNAPSHOT - 458)) | (1L << (SOME - 458)) | (1L << (SPECIFICATION - 458)) | (1L << (SQLDATA - 458)) | (1L << (SQLERROR - 458)) | (1L << (STANDALONE - 458)) | (1L << (STARTUP - 458)) | (1L << (STATEMENT - 458)) | (1L << (STATEMENT_ID - 458)) | (1L << (STATIC - 458)) | (1L << (STATISTICS - 458)) | (1L << (STRING - 458)) | (1L << (SUBMULTISET - 458)) | (1L << (SUBPARTITION - 458)) | (1L << (SUBSTITUTABLE - 458)) | (1L << (SUBSTRING - 458)) | (1L << (SUBTYPE - 458)) | (1L << (SUCCESS - 458)) | (1L << (SUSPEND - 458)) | (1L << (TABLES - 458)) | (1L << (TIME - 458)) | (1L << (TIMESTAMP - 458)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 458)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 458)) | (1L << (TIMESTAMP_UNCONSTRAINED - 458)))) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & ((1L << (TIMEZONE_ABBR - 522)) | (1L << (TIMEZONE_HOUR - 522)) | (1L << (TIMEZONE_MINUTE - 522)) | (1L << (TIMEZONE_REGION - 522)) | (1L << (TO_CHAR - 522)) | (1L << (TO_DATE - 522)) | (1L << (TRAILING - 522)) | (1L << (TRANSACTION - 522)) | (1L << (TRANSLATE - 522)) | (1L << (TREAT - 522)) | (1L << (TRIGGER - 522)) | (1L << (TRIM - 522)) | (1L << (TRUNCATE - 522)) | (1L << (TRUSTED - 522)) | (1L << (TYPE - 522)) | (1L << (UNBOUNDED - 522)) | (1L << (UNDER - 522)) | (1L << (UNLIMITED - 522)) | (1L << (UNTIL - 522)) | (1L << (UPDATED - 522)) | (1L << (UPSERT - 522)) | (1L << (UROWID - 522)) | (1L << (USE - 522)) | (1L << (VALIDATE - 522)) | (1L << (VALUE - 522)) | (1L << (VARCHAR - 522)) | (1L << (VARCHAR2 - 522)) | (1L << (VARIABLE - 522)) | (1L << (VARRAY - 522)) | (1L << (VARYING - 522)) | (1L << (VERBOSE - 522)) | (1L << (VERSION - 522)) | (1L << (VERSIONS - 522)) | (1L << (VIEW - 522)) | (1L << (WAIT - 522)) | (1L << (WARNING - 522)) | (1L << (WELLFORMED - 522)) | (1L << (WHENEVER - 522)) | (1L << (WHILE - 522)) | (1L << (WITHOUT - 522)) | (1L << (WITHIN - 522)) | (1L << (WORK - 522)) | (1L << (WRITE - 522)) | (1L << (XML - 522)) | (1L << (XMLAGG - 522)) | (1L << (XMLATTRIBUTES - 522)))) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & ((1L << (XMLCAST - 586)) | (1L << (XMLCOLATTVAL - 586)) | (1L << (XMLELEMENT - 586)) | (1L << (XMLEXISTS - 586)) | (1L << (XMLFOREST - 586)) | (1L << (XMLNAMESPACES - 586)) | (1L << (XMLPARSE - 586)) | (1L << (XMLPI - 586)) | (1L << (XMLQUERY - 586)) | (1L << (XMLROOT - 586)) | (1L << (XMLSERIALIZE - 586)) | (1L << (XMLTABLE - 586)) | (1L << (YEAR - 586)) | (1L << (YES - 586)) | (1L << (YMINTERVAL_UNCONSTRAINED - 586)) | (1L << (ZONE - 586)) | (1L << (PREDICTION - 586)) | (1L << (PREDICTION_BOUNDS - 586)) | (1L << (PREDICTION_COST - 586)) | (1L << (PREDICTION_DETAILS - 586)) | (1L << (PREDICTION_PROBABILITY - 586)) | (1L << (PREDICTION_SET - 586)) | (1L << (CUME_DIST - 586)) | (1L << (DENSE_RANK - 586)) | (1L << (LISTAGG - 586)) | (1L << (PERCENT_RANK - 586)) | (1L << (PERCENTILE_CONT - 586)) | (1L << (PERCENTILE_DISC - 586)) | (1L << (RANK - 586)) | (1L << (AVG - 586)) | (1L << (CORR - 586)) | (1L << (LAG - 586)) | (1L << (LEAD - 586)) | (1L << (MAX - 586)) | (1L << (MEDIAN - 586)) | (1L << (MIN - 586)) | (1L << (NTILE - 586)) | (1L << (RATIO_TO_REPORT - 586)) | (1L << (ROW_NUMBER - 586)) | (1L << (SUM - 586)) | (1L << (VARIANCE - 586)) | (1L << (REGR_ - 586)) | (1L << (STDDEV - 586)) | (1L << (VAR_ - 586)) | (1L << (COVAR_ - 586)) | (1L << (DELIMITED_ID - 586)))) != 0) || _la==COMMA || _la==REGULAR_ID );
			setState(2079);
			where_clause();
			setState(2081);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOCAL) {
				{
				setState(2080);
				local_partitioned_index();
				}
			}

			setState(2084);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMPRESS || _la==FILESYSTEM_LIKE_LOGGING || _la==INITRANS || _la==INVISIBLE || _la==LOGGING || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (NOCOMPRESS - 320)) | (1L << (NOLOGGING - 320)) | (1L << (NOPARALLEL - 320)) | (1L << (NOSORT - 320)) | (1L << (PARALLEL - 320)) | (1L << (PCTFREE - 320)) | (1L << (PCTUSED - 320)))) != 0) || ((((_la - 435)) & ~0x3f) == 0 && ((1L << (_la - 435)) & ((1L << (REVERSE - 435)) | (1L << (SORT - 435)) | (1L << (STORAGE - 435)))) != 0) || _la==TABLESPACE || _la==VISIBLE) {
				{
				setState(2083);
				index_attributes();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_tableContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PLSQLParser.CREATE, 0); }
		public TerminalNode TABLE() { return getToken(PLSQLParser.TABLE, 0); }
		public List<Tableview_nameContext> tableview_name() {
			return getRuleContexts(Tableview_nameContext.class);
		}
		public Tableview_nameContext tableview_name(int i) {
			return getRuleContext(Tableview_nameContext.class,i);
		}
		public Relational_tableContext relational_table() {
			return getRuleContext(Relational_tableContext.class,0);
		}
		public Object_tableContext object_table() {
			return getRuleContext(Object_tableContext.class,0);
		}
		public Xmltype_tableContext xmltype_table() {
			return getRuleContext(Xmltype_tableContext.class,0);
		}
		public TerminalNode TEMPORARY() { return getToken(PLSQLParser.TEMPORARY, 0); }
		public TerminalNode AS() { return getToken(PLSQLParser.AS, 0); }
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public TerminalNode PARTITION() { return getToken(PLSQLParser.PARTITION, 0); }
		public TerminalNode OF() { return getToken(PLSQLParser.OF, 0); }
		public TerminalNode DEFAULT() { return getToken(PLSQLParser.DEFAULT, 0); }
		public TerminalNode GLOBAL() { return getToken(PLSQLParser.GLOBAL, 0); }
		public TerminalNode FOR() { return getToken(PLSQLParser.FOR, 0); }
		public TerminalNode VALUES() { return getToken(PLSQLParser.VALUES, 0); }
		public TerminalNode IN() { return getToken(PLSQLParser.IN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PLSQLParser.LEFT_PAREN, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PLSQLParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PLSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLSQLParser.COMMA, i);
		}
		public Create_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterCreate_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitCreate_table(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitCreate_table(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_tableContext create_table() throws RecognitionException {
		Create_tableContext _localctx = new Create_tableContext(_ctx, getState());
		enterRule(_localctx, 116, RULE_create_table);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2086);
			match(CREATE);
			setState(2091);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==GLOBAL || _la==TEMPORARY) {
				{
				setState(2088);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==GLOBAL) {
					{
					setState(2087);
					match(GLOBAL);
					}
				}

				setState(2090);
				match(TEMPORARY);
				}
			}

			setState(2093);
			match(TABLE);
			setState(2094);
			tableview_name();
			setState(2098);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,193,_ctx) ) {
			case 1:
				{
				setState(2095);
				relational_table();
				}
				break;
			case 2:
				{
				setState(2096);
				object_table();
				}
				break;
			case 3:
				{
				setState(2097);
				xmltype_table();
				}
				break;
			}
			setState(2102);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(2100);
				match(AS);
				setState(2101);
				select_statement();
				}
			}

			setState(2124);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(2104);
				match(PARTITION);
				setState(2105);
				match(OF);
				setState(2106);
				tableview_name();
				setState(2122);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case FOR:
					{
					{
					setState(2107);
					match(FOR);
					setState(2108);
					match(VALUES);
					setState(2109);
					match(IN);
					setState(2110);
					match(LEFT_PAREN);
					setState(2111);
					expression(0);
					setState(2116);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(2112);
						match(COMMA);
						setState(2113);
						expression(0);
						}
						}
						setState(2118);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(2119);
					match(RIGHT_PAREN);
					}
					}
					break;
				case DEFAULT:
					{
					setState(2121);
					match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Relational_tableContext extends ParserRuleContext {
		public List<TerminalNode> LEFT_PAREN() { return getTokens(PLSQLParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(PLSQLParser.LEFT_PAREN, i);
		}
		public Relational_propertiesContext relational_properties() {
			return getRuleContext(Relational_propertiesContext.class,0);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(PLSQLParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(PLSQLParser.RIGHT_PAREN, i);
		}
		public TerminalNode ON() { return getToken(PLSQLParser.ON, 0); }
		public TerminalNode COMMIT() { return getToken(PLSQLParser.COMMIT, 0); }
		public TerminalNode ROWS() { return getToken(PLSQLParser.ROWS, 0); }
		public Physical_propertiesContext physical_properties() {
			return getRuleContext(Physical_propertiesContext.class,0);
		}
		public Column_propertiesContext column_properties() {
			return getRuleContext(Column_propertiesContext.class,0);
		}
		public Table_partitioning_clausesContext table_partitioning_clauses() {
			return getRuleContext(Table_partitioning_clausesContext.class,0);
		}
		public TerminalNode RESULT_CACHE() { return getToken(PLSQLParser.RESULT_CACHE, 0); }
		public TerminalNode MODE() { return getToken(PLSQLParser.MODE, 0); }
		public Parallel_clauseContext parallel_clause() {
			return getRuleContext(Parallel_clauseContext.class,0);
		}
		public Row_movement_clauseContext row_movement_clause() {
			return getRuleContext(Row_movement_clauseContext.class,0);
		}
		public Flashback_archive_clauseContext flashback_archive_clause() {
			return getRuleContext(Flashback_archive_clauseContext.class,0);
		}
		public TerminalNode DELETE() { return getToken(PLSQLParser.DELETE, 0); }
		public TerminalNode PRESERVE() { return getToken(PLSQLParser.PRESERVE, 0); }
		public TerminalNode CACHE() { return getToken(PLSQLParser.CACHE, 0); }
		public TerminalNode NOCACHE() { return getToken(PLSQLParser.NOCACHE, 0); }
		public TerminalNode DEFAULT() { return getToken(PLSQLParser.DEFAULT, 0); }
		public TerminalNode FORCE() { return getToken(PLSQLParser.FORCE, 0); }
		public TerminalNode ROWDEPENDENCIES() { return getToken(PLSQLParser.ROWDEPENDENCIES, 0); }
		public TerminalNode NOROWDEPENDENCIES() { return getToken(PLSQLParser.NOROWDEPENDENCIES, 0); }
		public List<Enable_disable_clauseContext> enable_disable_clause() {
			return getRuleContexts(Enable_disable_clauseContext.class);
		}
		public Enable_disable_clauseContext enable_disable_clause(int i) {
			return getRuleContext(Enable_disable_clauseContext.class,i);
		}
		public Relational_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_relational_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterRelational_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitRelational_table(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitRelational_table(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Relational_tableContext relational_table() throws RecognitionException {
		Relational_tableContext _localctx = new Relational_tableContext(_ctx, getState());
		enterRule(_localctx, 118, RULE_relational_table);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2130);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,198,_ctx) ) {
			case 1:
				{
				setState(2126);
				match(LEFT_PAREN);
				setState(2127);
				relational_properties();
				setState(2128);
				match(RIGHT_PAREN);
				}
				break;
			}
			setState(2136);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(2132);
				match(ON);
				setState(2133);
				match(COMMIT);
				setState(2134);
				_la = _input.LA(1);
				if ( !(_la==DELETE || _la==PRESERVE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2135);
				match(ROWS);
				}
			}

			setState(2139);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FILESYSTEM_LIKE_LOGGING || _la==INITRANS || _la==LOGGING || _la==NOLOGGING || _la==PCTFREE || _la==PCTUSED || ((((_la - 459)) & ~0x3f) == 0 && ((1L << (_la - 459)) & ((1L << (SEGMENT - 459)) | (1L << (STORAGE - 459)) | (1L << (TABLESPACE - 459)))) != 0)) {
				{
				setState(2138);
				physical_properties();
				}
			}

			setState(2142);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COLUMN || _la==LOB || _la==NESTED || _la==VARRAY || _la==XMLTYPE) {
				{
				setState(2141);
				column_properties();
				}
			}

			setState(2145);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,202,_ctx) ) {
			case 1:
				{
				setState(2144);
				table_partitioning_clauses();
				}
				break;
			}
			setState(2148);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CACHE || _la==NOCACHE) {
				{
				setState(2147);
				_la = _input.LA(1);
				if ( !(_la==CACHE || _la==NOCACHE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(2155);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RESULT_CACHE) {
				{
				setState(2150);
				match(RESULT_CACHE);
				setState(2151);
				match(LEFT_PAREN);
				setState(2152);
				match(MODE);
				setState(2153);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || _la==FORCE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2154);
				match(RIGHT_PAREN);
				}
			}

			setState(2158);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOPARALLEL || _la==PARALLEL) {
				{
				setState(2157);
				parallel_clause();
				}
			}

			setState(2161);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOROWDEPENDENCIES || _la==ROWDEPENDENCIES) {
				{
				setState(2160);
				_la = _input.LA(1);
				if ( !(_la==NOROWDEPENDENCIES || _la==ROWDEPENDENCIES) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(2168);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,208,_ctx) ) {
			case 1:
				{
				setState(2164); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(2163);
						enable_disable_clause();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(2166); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,207,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			}
			setState(2171);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DISABLE || _la==ENABLE || _la==ROW) {
				{
				setState(2170);
				row_movement_clause();
				}
			}

			setState(2174);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FLASHBACK || _la==NO) {
				{
				setState(2173);
				flashback_archive_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Relational_propertiesContext extends ParserRuleContext {
		public List<Column_definitionContext> column_definition() {
			return getRuleContexts(Column_definitionContext.class);
		}
		public Column_definitionContext column_definition(int i) {
			return getRuleContext(Column_definitionContext.class,i);
		}
		public List<Virtual_column_definitionContext> virtual_column_definition() {
			return getRuleContexts(Virtual_column_definitionContext.class);
		}
		public Virtual_column_definitionContext virtual_column_definition(int i) {
			return getRuleContext(Virtual_column_definitionContext.class,i);
		}
		public List<Out_of_line_constraintContext> out_of_line_constraint() {
			return getRuleContexts(Out_of_line_constraintContext.class);
		}
		public Out_of_line_constraintContext out_of_line_constraint(int i) {
			return getRuleContext(Out_of_line_constraintContext.class,i);
		}
		public List<Out_of_line_ref_constraintContext> out_of_line_ref_constraint() {
			return getRuleContexts(Out_of_line_ref_constraintContext.class);
		}
		public Out_of_line_ref_constraintContext out_of_line_ref_constraint(int i) {
			return getRuleContext(Out_of_line_ref_constraintContext.class,i);
		}
		public List<Supplemental_logging_propsContext> supplemental_logging_props() {
			return getRuleContexts(Supplemental_logging_propsContext.class);
		}
		public Supplemental_logging_propsContext supplemental_logging_props(int i) {
			return getRuleContext(Supplemental_logging_propsContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLSQLParser.COMMA, i);
		}
		public Relational_propertiesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_relational_properties; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterRelational_properties(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitRelational_properties(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitRelational_properties(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Relational_propertiesContext relational_properties() throws RecognitionException {
		Relational_propertiesContext _localctx = new Relational_propertiesContext(_ctx, getState());
		enterRule(_localctx, 120, RULE_relational_properties);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2186); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(2177);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(2176);
					match(COMMA);
					}
				}

				setState(2184);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,212,_ctx) ) {
				case 1:
					{
					setState(2179);
					column_definition();
					}
					break;
				case 2:
					{
					setState(2180);
					virtual_column_definition();
					}
					break;
				case 3:
					{
					setState(2181);
					out_of_line_constraint();
					}
					break;
				case 4:
					{
					setState(2182);
					out_of_line_ref_constraint();
					}
					break;
				case 5:
					{
					setState(2183);
					supplemental_logging_props();
					}
					break;
				}
				}
				}
				setState(2188); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BUILD) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHECK))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (CHR - 65)) | (1L << (CLOB - 65)) | (1L << (CLOSE - 65)) | (1L << (CLUSTER - 65)) | (1L << (COALESCE - 65)) | (1L << (COLLECT - 65)) | (1L << (COLUMNS - 65)) | (1L << (COMMENT - 65)) | (1L << (COMMIT - 65)) | (1L << (COMMITTED - 65)) | (1L << (COMPATIBILITY - 65)) | (1L << (COMPILE - 65)) | (1L << (COMPLETE - 65)) | (1L << (COMPOUND - 65)) | (1L << (CONCAT - 65)) | (1L << (CONSTANT - 65)) | (1L << (CONSTRAINT - 65)) | (1L << (CONSTRAINTS - 65)) | (1L << (CONSTRUCTOR - 65)) | (1L << (CONTENT - 65)) | (1L << (CONTEXT - 65)) | (1L << (CONTINUE - 65)) | (1L << (CONVERT - 65)) | (1L << (CORRUPT_XID - 65)) | (1L << (CORRUPT_XID_ALL - 65)) | (1L << (COST - 65)) | (1L << (COUNT - 65)) | (1L << (CROSS - 65)) | (1L << (CUBE - 65)) | (1L << (CURRENT_USER - 65)) | (1L << (CURSOR - 65)) | (1L << (CUSTOMDATUM - 65)) | (1L << (CYCLE - 65)) | (1L << (DATA - 65)) | (1L << (DATABASE - 65)) | (1L << (DATE - 65)) | (1L << (DAY - 65)) | (1L << (DB_ROLE_CHANGE - 65)) | (1L << (DBTIMEZONE - 65)) | (1L << (DDL - 65)) | (1L << (DEBUG - 65)) | (1L << (DEC - 65)) | (1L << (DECIMAL - 65)) | (1L << (DECODE - 65)) | (1L << (DECOMPOSE - 65)) | (1L << (DECREMENT - 65)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DEMAND - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (EDITIONING - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENFORCED - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FAST - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)) | (1L << (FOLLOWING - 129)) | (1L << (FOLLOWS - 129)) | (1L << (FORALL - 129)) | (1L << (FORCE - 129)) | (1L << (FOREIGN - 129)))) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & ((1L << (FULL - 197)) | (1L << (FUNCTION - 197)) | (1L << (GROUPING - 197)) | (1L << (HASH - 197)) | (1L << (HIDE - 197)) | (1L << (HOUR - 197)) | (1L << (IGNORE - 197)) | (1L << (IMMEDIATE - 197)) | (1L << (INCLUDE - 197)) | (1L << (INCLUDING - 197)) | (1L << (INCREMENT - 197)) | (1L << (INDENT - 197)) | (1L << (INDEXED - 197)) | (1L << (INDICATOR - 197)) | (1L << (INDICES - 197)) | (1L << (INFINITE - 197)) | (1L << (INLINE - 197)) | (1L << (INNER - 197)) | (1L << (INOUT - 197)) | (1L << (INSTANTIABLE - 197)) | (1L << (INSTEAD - 197)) | (1L << (INT - 197)) | (1L << (INTEGER - 197)) | (1L << (INTERVAL - 197)) | (1L << (INVALIDATE - 197)) | (1L << (ISOLATION - 197)) | (1L << (ITERATE - 197)) | (1L << (JAVA - 197)) | (1L << (JOIN - 197)) | (1L << (KEEP - 197)) | (1L << (LANGUAGE - 197)) | (1L << (LAST - 197)) | (1L << (LAST_VALUE - 197)) | (1L << (LEADING - 197)) | (1L << (LEFT - 197)) | (1L << (LEVEL - 197)))) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & ((1L << (LIBRARY - 261)) | (1L << (LIKE2 - 261)) | (1L << (LIKE4 - 261)) | (1L << (LIKEC - 261)) | (1L << (LIMIT - 261)) | (1L << (LIST - 261)) | (1L << (LOCAL - 261)) | (1L << (LOCKED - 261)) | (1L << (LOG - 261)) | (1L << (LOGOFF - 261)) | (1L << (LOGON - 261)) | (1L << (LONG - 261)) | (1L << (LOOP - 261)) | (1L << (MAIN - 261)) | (1L << (MAP - 261)) | (1L << (MASTER - 261)) | (1L << (MATCHED - 261)) | (1L << (MAXVALUE - 261)) | (1L << (MEASURES - 261)) | (1L << (MEMBER - 261)) | (1L << (MERGE - 261)) | (1L << (MINUTE - 261)) | (1L << (MINVALUE - 261)) | (1L << (MLSLABEL - 261)) | (1L << (MODEL - 261)) | (1L << (MODIFY - 261)) | (1L << (MONTH - 261)) | (1L << (MULTISET - 261)) | (1L << (NAME - 261)) | (1L << (NAN - 261)) | (1L << (NATURAL - 261)) | (1L << (NATURALN - 261)) | (1L << (NAV - 261)) | (1L << (NCHAR - 261)) | (1L << (NCHAR_CS - 261)) | (1L << (NCLOB - 261)) | (1L << (NESTED - 261)) | (1L << (NEVER - 261)) | (1L << (NEW - 261)) | (1L << (NO - 261)) | (1L << (NOAUDIT - 261)) | (1L << (NOCOPY - 261)) | (1L << (NOCYCLE - 261)) | (1L << (NOENTITYESCAPING - 261)))) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & ((1L << (NONE - 329)) | (1L << (NOSCHEMACHECK - 329)) | (1L << (NVL - 329)) | (1L << (NULLS - 329)) | (1L << (NUMBER - 329)) | (1L << (NUMERIC - 329)) | (1L << (NVARCHAR2 - 329)) | (1L << (MATERIALIZED - 329)) | (1L << (OBJECT - 329)) | (1L << (OFF - 329)) | (1L << (OID - 329)) | (1L << (OLD - 329)) | (1L << (ONLY - 329)) | (1L << (OPEN - 329)) | (1L << (ORADATA - 329)) | (1L << (ORDINALITY - 329)) | (1L << (OSERROR - 329)) | (1L << (OUT - 329)) | (1L << (OUTER - 329)) | (1L << (OVER - 329)) | (1L << (OVERRIDING - 329)) | (1L << (PACKAGE - 329)) | (1L << (PARALLEL_ENABLE - 329)) | (1L << (PARAMETERS - 329)) | (1L << (PARENT - 329)) | (1L << (PARTITION - 329)) | (1L << (PASSING - 329)) | (1L << (PATH - 329)) | (1L << (PIPELINED - 329)) | (1L << (PLAN - 329)) | (1L << (PLS_INTEGER - 329)) | (1L << (POSITIVE - 329)) | (1L << (POSITIVEN - 329)) | (1L << (PRAGMA - 329)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (PREBUILT - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)) | (1L << (PRESENT - 393)) | (1L << (PRIMARY - 393)) | (1L << (PUBLIC - 393)) | (1L << (RAISE - 393)) | (1L << (RANGE - 393)) | (1L << (RAW - 393)) | (1L << (READ - 393)) | (1L << (REAL - 393)) | (1L << (RECORD - 393)) | (1L << (REDUCED - 393)) | (1L << (REF - 393)) | (1L << (REFERENCE - 393)) | (1L << (REFERENCING - 393)) | (1L << (REFRESH - 393)) | (1L << (REJECT - 393)) | (1L << (RELIES_ON - 393)) | (1L << (RENAME - 393)) | (1L << (REPLACE - 393)) | (1L << (RESPECT - 393)) | (1L << (RESTRICT_REFERENCES - 393)) | (1L << (RESULT - 393)) | (1L << (RESULT_CACHE - 393)) | (1L << (RETURN - 393)) | (1L << (RETURNING - 393)) | (1L << (REUSE - 393)) | (1L << (REVERSE - 393)) | (1L << (REWRITE - 393)) | (1L << (RIGHT - 393)) | (1L << (ROLE - 393)) | (1L << (ROLLBACK - 393)) | (1L << (ROLLUP - 393)) | (1L << (ROW - 393)) | (1L << (ROWID - 393)) | (1L << (ROWS - 393)) | (1L << (RULES - 393)) | (1L << (SAMPLE - 393)) | (1L << (SAVE - 393)) | (1L << (SAVEPOINT - 393)) | (1L << (SCHEMA - 393)) | (1L << (SCHEMACHECK - 393)) | (1L << (SCN - 393)) | (1L << (SCOPE - 393)) | (1L << (SECOND - 393)))) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & ((1L << (SEED - 458)) | (1L << (SEGMENT - 458)) | (1L << (SELF - 458)) | (1L << (SEQUENTIAL - 458)) | (1L << (SERIALIZABLE - 458)) | (1L << (SERIALLY_REUSABLE - 458)) | (1L << (SERVERERROR - 458)) | (1L << (SESSIONTIMEZONE - 458)) | (1L << (SET - 458)) | (1L << (SETS - 458)) | (1L << (SETTINGS - 458)) | (1L << (SHOW - 458)) | (1L << (SHUTDOWN - 458)) | (1L << (SIBLINGS - 458)) | (1L << (SIGNTYPE - 458)) | (1L << (SIMPLE_INTEGER - 458)) | (1L << (SINGLE - 458)) | (1L << (SIZE - 458)) | (1L << (SKIP_ - 458)) | (1L << (SMALLINT - 458)) | (1L << (SNAPSHOT - 458)) | (1L << (SOME - 458)) | (1L << (SPECIFICATION - 458)) | (1L << (SQLDATA - 458)) | (1L << (SQLERROR - 458)) | (1L << (STANDALONE - 458)) | (1L << (STARTUP - 458)) | (1L << (STATEMENT - 458)) | (1L << (STATEMENT_ID - 458)) | (1L << (STATIC - 458)) | (1L << (STATISTICS - 458)) | (1L << (STRING - 458)) | (1L << (SUBMULTISET - 458)) | (1L << (SUBPARTITION - 458)) | (1L << (SUBSTITUTABLE - 458)) | (1L << (SUBSTRING - 458)) | (1L << (SUBTYPE - 458)) | (1L << (SUCCESS - 458)) | (1L << (SUPPLEMENTAL - 458)) | (1L << (SUSPEND - 458)) | (1L << (TABLES - 458)) | (1L << (TIME - 458)) | (1L << (TIMESTAMP - 458)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 458)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 458)) | (1L << (TIMESTAMP_UNCONSTRAINED - 458)))) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & ((1L << (TIMEZONE_ABBR - 522)) | (1L << (TIMEZONE_HOUR - 522)) | (1L << (TIMEZONE_MINUTE - 522)) | (1L << (TIMEZONE_REGION - 522)) | (1L << (TO_CHAR - 522)) | (1L << (TO_DATE - 522)) | (1L << (TRAILING - 522)) | (1L << (TRANSACTION - 522)) | (1L << (TRANSLATE - 522)) | (1L << (TREAT - 522)) | (1L << (TRIGGER - 522)) | (1L << (TRIM - 522)) | (1L << (TRUNCATE - 522)) | (1L << (TRUSTED - 522)) | (1L << (TYPE - 522)) | (1L << (UNBOUNDED - 522)) | (1L << (UNDER - 522)) | (1L << (UNIQUE - 522)) | (1L << (UNLIMITED - 522)) | (1L << (UNTIL - 522)) | (1L << (UPDATED - 522)) | (1L << (UPSERT - 522)) | (1L << (UROWID - 522)) | (1L << (USE - 522)) | (1L << (VALIDATE - 522)) | (1L << (VALUE - 522)) | (1L << (VARCHAR - 522)) | (1L << (VARCHAR2 - 522)) | (1L << (VARIABLE - 522)) | (1L << (VARRAY - 522)) | (1L << (VARYING - 522)) | (1L << (VERBOSE - 522)) | (1L << (VERSION - 522)) | (1L << (VERSIONS - 522)) | (1L << (VIEW - 522)) | (1L << (WAIT - 522)) | (1L << (WARNING - 522)) | (1L << (WELLFORMED - 522)) | (1L << (WHENEVER - 522)) | (1L << (WHILE - 522)) | (1L << (WITHOUT - 522)) | (1L << (WITHIN - 522)) | (1L << (WORK - 522)) | (1L << (WRITE - 522)) | (1L << (XML - 522)) | (1L << (XMLAGG - 522)) | (1L << (XMLATTRIBUTES - 522)))) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & ((1L << (XMLCAST - 586)) | (1L << (XMLCOLATTVAL - 586)) | (1L << (XMLELEMENT - 586)) | (1L << (XMLEXISTS - 586)) | (1L << (XMLFOREST - 586)) | (1L << (XMLNAMESPACES - 586)) | (1L << (XMLPARSE - 586)) | (1L << (XMLPI - 586)) | (1L << (XMLQUERY - 586)) | (1L << (XMLROOT - 586)) | (1L << (XMLSERIALIZE - 586)) | (1L << (XMLTABLE - 586)) | (1L << (YEAR - 586)) | (1L << (YES - 586)) | (1L << (YMINTERVAL_UNCONSTRAINED - 586)) | (1L << (ZONE - 586)) | (1L << (PREDICTION - 586)) | (1L << (PREDICTION_BOUNDS - 586)) | (1L << (PREDICTION_COST - 586)) | (1L << (PREDICTION_DETAILS - 586)) | (1L << (PREDICTION_PROBABILITY - 586)) | (1L << (PREDICTION_SET - 586)) | (1L << (CUME_DIST - 586)) | (1L << (DENSE_RANK - 586)) | (1L << (LISTAGG - 586)) | (1L << (PERCENT_RANK - 586)) | (1L << (PERCENTILE_CONT - 586)) | (1L << (PERCENTILE_DISC - 586)) | (1L << (RANK - 586)) | (1L << (AVG - 586)) | (1L << (CORR - 586)) | (1L << (LAG - 586)) | (1L << (LEAD - 586)) | (1L << (MAX - 586)) | (1L << (MEDIAN - 586)) | (1L << (MIN - 586)) | (1L << (NTILE - 586)) | (1L << (RATIO_TO_REPORT - 586)) | (1L << (ROW_NUMBER - 586)) | (1L << (SUM - 586)) | (1L << (VARIANCE - 586)) | (1L << (REGR_ - 586)) | (1L << (STDDEV - 586)) | (1L << (VAR_ - 586)) | (1L << (COVAR_ - 586)) | (1L << (DELIMITED_ID - 586)))) != 0) || _la==COMMA || _la==REGULAR_ID );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_definitionContext extends ParserRuleContext {
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public DatatypeContext datatype() {
			return getRuleContext(DatatypeContext.class,0);
		}
		public Type_nameContext type_name() {
			return getRuleContext(Type_nameContext.class,0);
		}
		public Inline_ref_constraintContext inline_ref_constraint() {
			return getRuleContext(Inline_ref_constraintContext.class,0);
		}
		public TerminalNode SORT() { return getToken(PLSQLParser.SORT, 0); }
		public List<TerminalNode> DEFAULT() { return getTokens(PLSQLParser.DEFAULT); }
		public TerminalNode DEFAULT(int i) {
			return getToken(PLSQLParser.DEFAULT, i);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode ENCRYPT() { return getToken(PLSQLParser.ENCRYPT, 0); }
		public List<Inline_constraintContext> inline_constraint() {
			return getRuleContexts(Inline_constraintContext.class);
		}
		public Inline_constraintContext inline_constraint(int i) {
			return getRuleContext(Inline_constraintContext.class,i);
		}
		public TerminalNode USING() { return getToken(PLSQLParser.USING, 0); }
		public List<TerminalNode> CHAR_STRING() { return getTokens(PLSQLParser.CHAR_STRING); }
		public TerminalNode CHAR_STRING(int i) {
			return getToken(PLSQLParser.CHAR_STRING, i);
		}
		public TerminalNode IDENTIFIED() { return getToken(PLSQLParser.IDENTIFIED, 0); }
		public TerminalNode BY() { return getToken(PLSQLParser.BY, 0); }
		public Regular_idContext regular_id() {
			return getRuleContext(Regular_idContext.class,0);
		}
		public TerminalNode SALT() { return getToken(PLSQLParser.SALT, 0); }
		public TerminalNode NO() { return getToken(PLSQLParser.NO, 0); }
		public Column_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterColumn_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitColumn_definition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitColumn_definition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Column_definitionContext column_definition() throws RecognitionException {
		Column_definitionContext _localctx = new Column_definitionContext(_ctx, getState());
		enterRule(_localctx, 122, RULE_column_definition);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2190);
			column_name();
			setState(2193);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,214,_ctx) ) {
			case 1:
				{
				setState(2191);
				datatype();
				}
				break;
			case 2:
				{
				setState(2192);
				type_name();
				}
				break;
			}
			setState(2196);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SORT) {
				{
				setState(2195);
				match(SORT);
				}
			}

			setState(2200);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,216,_ctx) ) {
			case 1:
				{
				setState(2198);
				match(DEFAULT);
				setState(2199);
				expression(0);
				}
				break;
			}
			setState(2221);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ENCRYPT) {
				{
				setState(2202);
				match(ENCRYPT);
				setState(2205);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(2203);
					match(USING);
					setState(2204);
					match(CHAR_STRING);
					}
				}

				setState(2210);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IDENTIFIED) {
					{
					setState(2207);
					match(IDENTIFIED);
					setState(2208);
					match(BY);
					setState(2209);
					regular_id();
					}
				}

				setState(2213);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CHAR_STRING) {
					{
					setState(2212);
					match(CHAR_STRING);
					}
				}

				setState(2219);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,221,_ctx) ) {
				case 1:
					{
					setState(2216);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==NO) {
						{
						setState(2215);
						match(NO);
						}
					}

					setState(2218);
					match(SALT);
					}
					break;
				}
				}
			}

			setState(2230);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,224,_ctx) ) {
			case 1:
				{
				setState(2226);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,223,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(2223);
						inline_constraint();
						}
						} 
					}
					setState(2228);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,223,_ctx);
				}
				}
				break;
			case 2:
				{
				setState(2229);
				inline_ref_constraint();
				}
				break;
			}
			setState(2234);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFAULT) {
				{
				setState(2232);
				match(DEFAULT);
				setState(2233);
				expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Inline_ref_constraintContext extends ParserRuleContext {
		public TerminalNode SCOPE() { return getToken(PLSQLParser.SCOPE, 0); }
		public TerminalNode IS() { return getToken(PLSQLParser.IS, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public TerminalNode WITH() { return getToken(PLSQLParser.WITH, 0); }
		public TerminalNode ROWID() { return getToken(PLSQLParser.ROWID, 0); }
		public References_clauseContext references_clause() {
			return getRuleContext(References_clauseContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(PLSQLParser.CONSTRAINT, 0); }
		public Constraint_nameContext constraint_name() {
			return getRuleContext(Constraint_nameContext.class,0);
		}
		public Constraint_stateContext constraint_state() {
			return getRuleContext(Constraint_stateContext.class,0);
		}
		public Inline_ref_constraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_inline_ref_constraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterInline_ref_constraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitInline_ref_constraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitInline_ref_constraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Inline_ref_constraintContext inline_ref_constraint() throws RecognitionException {
		Inline_ref_constraintContext _localctx = new Inline_ref_constraintContext(_ctx, getState());
		enterRule(_localctx, 124, RULE_inline_ref_constraint);
		int _la;
		try {
			setState(2249);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SCOPE:
				enterOuterAlt(_localctx, 1);
				{
				setState(2236);
				match(SCOPE);
				setState(2237);
				match(IS);
				setState(2238);
				tableview_name();
				}
				break;
			case WITH:
				enterOuterAlt(_localctx, 2);
				{
				setState(2239);
				match(WITH);
				setState(2240);
				match(ROWID);
				}
				break;
			case CONSTRAINT:
			case REFERENCES:
				enterOuterAlt(_localctx, 3);
				{
				setState(2243);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(2241);
					match(CONSTRAINT);
					setState(2242);
					constraint_name();
					}
				}

				setState(2245);
				references_clause();
				setState(2247);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,227,_ctx) ) {
				case 1:
					{
					setState(2246);
					constraint_state();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Virtual_column_definitionContext extends ParserRuleContext {
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public TerminalNode AS() { return getToken(PLSQLParser.AS, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PLSQLParser.LEFT_PAREN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PLSQLParser.RIGHT_PAREN, 0); }
		public DatatypeContext datatype() {
			return getRuleContext(DatatypeContext.class,0);
		}
		public TerminalNode GENERATED() { return getToken(PLSQLParser.GENERATED, 0); }
		public TerminalNode ALWAYS() { return getToken(PLSQLParser.ALWAYS, 0); }
		public TerminalNode VIRTUAL() { return getToken(PLSQLParser.VIRTUAL, 0); }
		public List<Inline_constraintContext> inline_constraint() {
			return getRuleContexts(Inline_constraintContext.class);
		}
		public Inline_constraintContext inline_constraint(int i) {
			return getRuleContext(Inline_constraintContext.class,i);
		}
		public Virtual_column_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_virtual_column_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterVirtual_column_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitVirtual_column_definition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitVirtual_column_definition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Virtual_column_definitionContext virtual_column_definition() throws RecognitionException {
		Virtual_column_definitionContext _localctx = new Virtual_column_definitionContext(_ctx, getState());
		enterRule(_localctx, 126, RULE_virtual_column_definition);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2251);
			column_name();
			setState(2253);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 36)) & ~0x3f) == 0 && ((1L << (_la - 36)) & ((1L << (BFILE - 36)) | (1L << (BINARY_DOUBLE - 36)) | (1L << (BINARY_FLOAT - 36)) | (1L << (BINARY_INTEGER - 36)) | (1L << (BLOB - 36)) | (1L << (BOOLEAN - 36)) | (1L << (CHAR - 36)) | (1L << (CHARACTER - 36)) | (1L << (CLOB - 36)))) != 0) || ((((_la - 113)) & ~0x3f) == 0 && ((1L << (_la - 113)) & ((1L << (DATE - 113)) | (1L << (DAY - 113)) | (1L << (DEC - 113)) | (1L << (DECIMAL - 113)) | (1L << (DOUBLE - 113)) | (1L << (DSINTERVAL_UNCONSTRAINED - 113)))) != 0) || ((((_la - 186)) & ~0x3f) == 0 && ((1L << (_la - 186)) & ((1L << (FLOAT - 186)) | (1L << (HOUR - 186)) | (1L << (INT - 186)) | (1L << (INTEGER - 186)) | (1L << (INTERVAL - 186)))) != 0) || ((((_la - 279)) & ~0x3f) == 0 && ((1L << (_la - 279)) & ((1L << (LONG - 279)) | (1L << (MINUTE - 279)) | (1L << (MLSLABEL - 279)) | (1L << (MONTH - 279)) | (1L << (NATURAL - 279)) | (1L << (NATURALN - 279)) | (1L << (NCHAR - 279)) | (1L << (NCLOB - 279)))) != 0) || ((((_la - 343)) & ~0x3f) == 0 && ((1L << (_la - 343)) & ((1L << (NUMBER - 343)) | (1L << (NUMERIC - 343)) | (1L << (NVARCHAR2 - 343)) | (1L << (PLS_INTEGER - 343)) | (1L << (POSITIVE - 343)) | (1L << (POSITIVEN - 343)) | (1L << (RAW - 343)))) != 0) || ((((_la - 409)) & ~0x3f) == 0 && ((1L << (_la - 409)) & ((1L << (REAL - 409)) | (1L << (ROWID - 409)) | (1L << (SECOND - 409)))) != 0) || ((((_la - 476)) & ~0x3f) == 0 && ((1L << (_la - 476)) & ((1L << (SIGNTYPE - 476)) | (1L << (SIMPLE_INTEGER - 476)) | (1L << (SMALLINT - 476)) | (1L << (STRING - 476)) | (1L << (TIMESTAMP - 476)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 476)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 476)) | (1L << (TIMESTAMP_UNCONSTRAINED - 476)) | (1L << (TIMEZONE_ABBR - 476)) | (1L << (TIMEZONE_HOUR - 476)) | (1L << (TIMEZONE_MINUTE - 476)) | (1L << (TIMEZONE_REGION - 476)))) != 0) || ((((_la - 552)) & ~0x3f) == 0 && ((1L << (_la - 552)) & ((1L << (UROWID - 552)) | (1L << (VARCHAR - 552)) | (1L << (VARCHAR2 - 552)) | (1L << (YEAR - 552)) | (1L << (YMINTERVAL_UNCONSTRAINED - 552)))) != 0)) {
				{
				setState(2252);
				datatype();
				}
			}

			setState(2257);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==GENERATED) {
				{
				setState(2255);
				match(GENERATED);
				setState(2256);
				match(ALWAYS);
				}
			}

			setState(2259);
			match(AS);
			setState(2260);
			match(LEFT_PAREN);
			setState(2261);
			expression(0);
			setState(2262);
			match(RIGHT_PAREN);
			setState(2264);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==VIRTUAL) {
				{
				setState(2263);
				match(VIRTUAL);
				}
			}

			setState(2269);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,232,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(2266);
					inline_constraint();
					}
					} 
				}
				setState(2271);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,232,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Out_of_line_constraintContext extends ParserRuleContext {
		public Constraint_stateContext constraint_state() {
			return getRuleContext(Constraint_stateContext.class,0);
		}
		public TerminalNode UNIQUE() { return getToken(PLSQLParser.UNIQUE, 0); }
		public Paren_column_listContext paren_column_list() {
			return getRuleContext(Paren_column_listContext.class,0);
		}
		public TerminalNode PRIMARY() { return getToken(PLSQLParser.PRIMARY, 0); }
		public TerminalNode KEY() { return getToken(PLSQLParser.KEY, 0); }
		public Foreign_key_clauseContext foreign_key_clause() {
			return getRuleContext(Foreign_key_clauseContext.class,0);
		}
		public TerminalNode CHECK() { return getToken(PLSQLParser.CHECK, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PLSQLParser.LEFT_PAREN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PLSQLParser.RIGHT_PAREN, 0); }
		public TerminalNode CONSTRAINT() { return getToken(PLSQLParser.CONSTRAINT, 0); }
		public Constraint_nameContext constraint_name() {
			return getRuleContext(Constraint_nameContext.class,0);
		}
		public Out_of_line_constraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_out_of_line_constraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterOut_of_line_constraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitOut_of_line_constraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitOut_of_line_constraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Out_of_line_constraintContext out_of_line_constraint() throws RecognitionException {
		Out_of_line_constraintContext _localctx = new Out_of_line_constraintContext(_ctx, getState());
		enterRule(_localctx, 128, RULE_out_of_line_constraint);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2274);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONSTRAINT) {
				{
				setState(2272);
				match(CONSTRAINT);
				setState(2273);
				constraint_name();
				}
			}

			setState(2287);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UNIQUE:
				{
				setState(2276);
				match(UNIQUE);
				setState(2277);
				paren_column_list();
				}
				break;
			case PRIMARY:
				{
				setState(2278);
				match(PRIMARY);
				setState(2279);
				match(KEY);
				setState(2280);
				paren_column_list();
				}
				break;
			case FOREIGN:
				{
				setState(2281);
				foreign_key_clause();
				}
				break;
			case CHECK:
				{
				setState(2282);
				match(CHECK);
				setState(2283);
				match(LEFT_PAREN);
				setState(2284);
				expression(0);
				setState(2285);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
			setState(2290);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,235,_ctx) ) {
			case 1:
				{
				setState(2289);
				constraint_state();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Foreign_key_clauseContext extends ParserRuleContext {
		public TerminalNode FOREIGN() { return getToken(PLSQLParser.FOREIGN, 0); }
		public TerminalNode KEY() { return getToken(PLSQLParser.KEY, 0); }
		public Paren_column_listContext paren_column_list() {
			return getRuleContext(Paren_column_listContext.class,0);
		}
		public References_clauseContext references_clause() {
			return getRuleContext(References_clauseContext.class,0);
		}
		public On_delete_clauseContext on_delete_clause() {
			return getRuleContext(On_delete_clauseContext.class,0);
		}
		public Foreign_key_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_foreign_key_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterForeign_key_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitForeign_key_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitForeign_key_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Foreign_key_clauseContext foreign_key_clause() throws RecognitionException {
		Foreign_key_clauseContext _localctx = new Foreign_key_clauseContext(_ctx, getState());
		enterRule(_localctx, 130, RULE_foreign_key_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2292);
			match(FOREIGN);
			setState(2293);
			match(KEY);
			setState(2294);
			paren_column_list();
			setState(2295);
			references_clause();
			setState(2297);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(2296);
				on_delete_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class On_delete_clauseContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(PLSQLParser.ON, 0); }
		public TerminalNode DELETE() { return getToken(PLSQLParser.DELETE, 0); }
		public TerminalNode CASCADE() { return getToken(PLSQLParser.CASCADE, 0); }
		public TerminalNode SET() { return getToken(PLSQLParser.SET, 0); }
		public TerminalNode NULL() { return getToken(PLSQLParser.NULL, 0); }
		public On_delete_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_on_delete_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterOn_delete_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitOn_delete_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitOn_delete_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final On_delete_clauseContext on_delete_clause() throws RecognitionException {
		On_delete_clauseContext _localctx = new On_delete_clauseContext(_ctx, getState());
		enterRule(_localctx, 132, RULE_on_delete_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2299);
			match(ON);
			setState(2300);
			match(DELETE);
			setState(2304);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CASCADE:
				{
				setState(2301);
				match(CASCADE);
				}
				break;
			case SET:
				{
				setState(2302);
				match(SET);
				setState(2303);
				match(NULL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Out_of_line_ref_constraintContext extends ParserRuleContext {
		public Regular_idContext ref_col_or_attr;
		public TerminalNode SCOPE() { return getToken(PLSQLParser.SCOPE, 0); }
		public TerminalNode FOR() { return getToken(PLSQLParser.FOR, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PLSQLParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PLSQLParser.RIGHT_PAREN, 0); }
		public TerminalNode IS() { return getToken(PLSQLParser.IS, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public List<Regular_idContext> regular_id() {
			return getRuleContexts(Regular_idContext.class);
		}
		public Regular_idContext regular_id(int i) {
			return getRuleContext(Regular_idContext.class,i);
		}
		public TerminalNode REF() { return getToken(PLSQLParser.REF, 0); }
		public TerminalNode WITH() { return getToken(PLSQLParser.WITH, 0); }
		public TerminalNode ROWID() { return getToken(PLSQLParser.ROWID, 0); }
		public TerminalNode FOREIGN() { return getToken(PLSQLParser.FOREIGN, 0); }
		public TerminalNode KEY() { return getToken(PLSQLParser.KEY, 0); }
		public References_clauseContext references_clause() {
			return getRuleContext(References_clauseContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(PLSQLParser.CONSTRAINT, 0); }
		public Constraint_nameContext constraint_name() {
			return getRuleContext(Constraint_nameContext.class,0);
		}
		public Constraint_stateContext constraint_state() {
			return getRuleContext(Constraint_stateContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLSQLParser.COMMA, i);
		}
		public Out_of_line_ref_constraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_out_of_line_ref_constraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterOut_of_line_ref_constraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitOut_of_line_ref_constraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitOut_of_line_ref_constraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Out_of_line_ref_constraintContext out_of_line_ref_constraint() throws RecognitionException {
		Out_of_line_ref_constraintContext _localctx = new Out_of_line_ref_constraintContext(_ctx, getState());
		enterRule(_localctx, 134, RULE_out_of_line_ref_constraint);
		int _la;
		try {
			setState(2341);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SCOPE:
				enterOuterAlt(_localctx, 1);
				{
				setState(2306);
				match(SCOPE);
				setState(2307);
				match(FOR);
				setState(2308);
				match(LEFT_PAREN);
				setState(2309);
				((Out_of_line_ref_constraintContext)_localctx).ref_col_or_attr = regular_id();
				setState(2310);
				match(RIGHT_PAREN);
				setState(2311);
				match(IS);
				setState(2312);
				tableview_name();
				}
				break;
			case REF:
				enterOuterAlt(_localctx, 2);
				{
				setState(2314);
				match(REF);
				setState(2315);
				match(LEFT_PAREN);
				setState(2316);
				((Out_of_line_ref_constraintContext)_localctx).ref_col_or_attr = regular_id();
				setState(2317);
				match(RIGHT_PAREN);
				setState(2318);
				match(WITH);
				setState(2319);
				match(ROWID);
				}
				break;
			case CONSTRAINT:
			case FOREIGN:
				enterOuterAlt(_localctx, 3);
				{
				setState(2323);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(2321);
					match(CONSTRAINT);
					setState(2322);
					constraint_name();
					}
				}

				setState(2325);
				match(FOREIGN);
				setState(2326);
				match(KEY);
				setState(2327);
				match(LEFT_PAREN);
				setState(2332); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(2329);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(2328);
						match(COMMA);
						}
					}

					setState(2331);
					((Out_of_line_ref_constraintContext)_localctx).ref_col_or_attr = regular_id();
					}
					}
					setState(2334); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BUILD) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (CHR - 65)) | (1L << (CLOB - 65)) | (1L << (CLOSE - 65)) | (1L << (CLUSTER - 65)) | (1L << (COALESCE - 65)) | (1L << (COLLECT - 65)) | (1L << (COLUMNS - 65)) | (1L << (COMMENT - 65)) | (1L << (COMMIT - 65)) | (1L << (COMMITTED - 65)) | (1L << (COMPATIBILITY - 65)) | (1L << (COMPILE - 65)) | (1L << (COMPLETE - 65)) | (1L << (COMPOUND - 65)) | (1L << (CONCAT - 65)) | (1L << (CONSTANT - 65)) | (1L << (CONSTRAINT - 65)) | (1L << (CONSTRAINTS - 65)) | (1L << (CONSTRUCTOR - 65)) | (1L << (CONTENT - 65)) | (1L << (CONTEXT - 65)) | (1L << (CONTINUE - 65)) | (1L << (CONVERT - 65)) | (1L << (CORRUPT_XID - 65)) | (1L << (CORRUPT_XID_ALL - 65)) | (1L << (COST - 65)) | (1L << (COUNT - 65)) | (1L << (CROSS - 65)) | (1L << (CUBE - 65)) | (1L << (CURRENT_USER - 65)) | (1L << (CURSOR - 65)) | (1L << (CUSTOMDATUM - 65)) | (1L << (CYCLE - 65)) | (1L << (DATA - 65)) | (1L << (DATABASE - 65)) | (1L << (DATE - 65)) | (1L << (DAY - 65)) | (1L << (DB_ROLE_CHANGE - 65)) | (1L << (DBTIMEZONE - 65)) | (1L << (DDL - 65)) | (1L << (DEBUG - 65)) | (1L << (DEC - 65)) | (1L << (DECIMAL - 65)) | (1L << (DECODE - 65)) | (1L << (DECOMPOSE - 65)) | (1L << (DECREMENT - 65)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DEMAND - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (EDITIONING - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENFORCED - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FAST - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)) | (1L << (FOLLOWING - 129)) | (1L << (FOLLOWS - 129)) | (1L << (FORALL - 129)) | (1L << (FORCE - 129)))) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & ((1L << (FULL - 197)) | (1L << (FUNCTION - 197)) | (1L << (GROUPING - 197)) | (1L << (HASH - 197)) | (1L << (HIDE - 197)) | (1L << (HOUR - 197)) | (1L << (IGNORE - 197)) | (1L << (IMMEDIATE - 197)) | (1L << (INCLUDE - 197)) | (1L << (INCLUDING - 197)) | (1L << (INCREMENT - 197)) | (1L << (INDENT - 197)) | (1L << (INDEXED - 197)) | (1L << (INDICATOR - 197)) | (1L << (INDICES - 197)) | (1L << (INFINITE - 197)) | (1L << (INLINE - 197)) | (1L << (INNER - 197)) | (1L << (INOUT - 197)) | (1L << (INSTANTIABLE - 197)) | (1L << (INSTEAD - 197)) | (1L << (INT - 197)) | (1L << (INTEGER - 197)) | (1L << (INTERVAL - 197)) | (1L << (INVALIDATE - 197)) | (1L << (ISOLATION - 197)) | (1L << (ITERATE - 197)) | (1L << (JAVA - 197)) | (1L << (JOIN - 197)) | (1L << (KEEP - 197)) | (1L << (LANGUAGE - 197)) | (1L << (LAST - 197)) | (1L << (LAST_VALUE - 197)) | (1L << (LEADING - 197)) | (1L << (LEFT - 197)) | (1L << (LEVEL - 197)))) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & ((1L << (LIBRARY - 261)) | (1L << (LIKE2 - 261)) | (1L << (LIKE4 - 261)) | (1L << (LIKEC - 261)) | (1L << (LIMIT - 261)) | (1L << (LIST - 261)) | (1L << (LOCAL - 261)) | (1L << (LOCKED - 261)) | (1L << (LOG - 261)) | (1L << (LOGOFF - 261)) | (1L << (LOGON - 261)) | (1L << (LONG - 261)) | (1L << (LOOP - 261)) | (1L << (MAIN - 261)) | (1L << (MAP - 261)) | (1L << (MASTER - 261)) | (1L << (MATCHED - 261)) | (1L << (MAXVALUE - 261)) | (1L << (MEASURES - 261)) | (1L << (MEMBER - 261)) | (1L << (MERGE - 261)) | (1L << (MINUTE - 261)) | (1L << (MINVALUE - 261)) | (1L << (MLSLABEL - 261)) | (1L << (MODEL - 261)) | (1L << (MODIFY - 261)) | (1L << (MONTH - 261)) | (1L << (MULTISET - 261)) | (1L << (NAME - 261)) | (1L << (NAN - 261)) | (1L << (NATURAL - 261)) | (1L << (NATURALN - 261)) | (1L << (NAV - 261)) | (1L << (NCHAR - 261)) | (1L << (NCHAR_CS - 261)) | (1L << (NCLOB - 261)) | (1L << (NESTED - 261)) | (1L << (NEVER - 261)) | (1L << (NEW - 261)) | (1L << (NO - 261)) | (1L << (NOAUDIT - 261)) | (1L << (NOCOPY - 261)) | (1L << (NOCYCLE - 261)) | (1L << (NOENTITYESCAPING - 261)))) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & ((1L << (NONE - 329)) | (1L << (NOSCHEMACHECK - 329)) | (1L << (NVL - 329)) | (1L << (NULLS - 329)) | (1L << (NUMBER - 329)) | (1L << (NUMERIC - 329)) | (1L << (NVARCHAR2 - 329)) | (1L << (MATERIALIZED - 329)) | (1L << (OBJECT - 329)) | (1L << (OFF - 329)) | (1L << (OID - 329)) | (1L << (OLD - 329)) | (1L << (ONLY - 329)) | (1L << (OPEN - 329)) | (1L << (ORADATA - 329)) | (1L << (ORDINALITY - 329)) | (1L << (OSERROR - 329)) | (1L << (OUT - 329)) | (1L << (OUTER - 329)) | (1L << (OVER - 329)) | (1L << (OVERRIDING - 329)) | (1L << (PACKAGE - 329)) | (1L << (PARALLEL_ENABLE - 329)) | (1L << (PARAMETERS - 329)) | (1L << (PARENT - 329)) | (1L << (PARTITION - 329)) | (1L << (PASSING - 329)) | (1L << (PATH - 329)) | (1L << (PIPELINED - 329)) | (1L << (PLAN - 329)) | (1L << (PLS_INTEGER - 329)) | (1L << (POSITIVE - 329)) | (1L << (POSITIVEN - 329)) | (1L << (PRAGMA - 329)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (PREBUILT - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)) | (1L << (PRESENT - 393)) | (1L << (PUBLIC - 393)) | (1L << (RAISE - 393)) | (1L << (RANGE - 393)) | (1L << (RAW - 393)) | (1L << (READ - 393)) | (1L << (REAL - 393)) | (1L << (RECORD - 393)) | (1L << (REDUCED - 393)) | (1L << (REF - 393)) | (1L << (REFERENCE - 393)) | (1L << (REFERENCING - 393)) | (1L << (REFRESH - 393)) | (1L << (REJECT - 393)) | (1L << (RELIES_ON - 393)) | (1L << (RENAME - 393)) | (1L << (REPLACE - 393)) | (1L << (RESPECT - 393)) | (1L << (RESTRICT_REFERENCES - 393)) | (1L << (RESULT - 393)) | (1L << (RESULT_CACHE - 393)) | (1L << (RETURN - 393)) | (1L << (RETURNING - 393)) | (1L << (REUSE - 393)) | (1L << (REVERSE - 393)) | (1L << (REWRITE - 393)) | (1L << (RIGHT - 393)) | (1L << (ROLE - 393)) | (1L << (ROLLBACK - 393)) | (1L << (ROLLUP - 393)) | (1L << (ROW - 393)) | (1L << (ROWID - 393)) | (1L << (ROWS - 393)) | (1L << (RULES - 393)) | (1L << (SAMPLE - 393)) | (1L << (SAVE - 393)) | (1L << (SAVEPOINT - 393)) | (1L << (SCHEMA - 393)) | (1L << (SCHEMACHECK - 393)) | (1L << (SCN - 393)) | (1L << (SECOND - 393)))) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & ((1L << (SEED - 458)) | (1L << (SEGMENT - 458)) | (1L << (SELF - 458)) | (1L << (SEQUENTIAL - 458)) | (1L << (SERIALIZABLE - 458)) | (1L << (SERIALLY_REUSABLE - 458)) | (1L << (SERVERERROR - 458)) | (1L << (SESSIONTIMEZONE - 458)) | (1L << (SET - 458)) | (1L << (SETS - 458)) | (1L << (SETTINGS - 458)) | (1L << (SHOW - 458)) | (1L << (SHUTDOWN - 458)) | (1L << (SIBLINGS - 458)) | (1L << (SIGNTYPE - 458)) | (1L << (SIMPLE_INTEGER - 458)) | (1L << (SINGLE - 458)) | (1L << (SIZE - 458)) | (1L << (SKIP_ - 458)) | (1L << (SMALLINT - 458)) | (1L << (SNAPSHOT - 458)) | (1L << (SOME - 458)) | (1L << (SPECIFICATION - 458)) | (1L << (SQLDATA - 458)) | (1L << (SQLERROR - 458)) | (1L << (STANDALONE - 458)) | (1L << (STARTUP - 458)) | (1L << (STATEMENT - 458)) | (1L << (STATEMENT_ID - 458)) | (1L << (STATIC - 458)) | (1L << (STATISTICS - 458)) | (1L << (STRING - 458)) | (1L << (SUBMULTISET - 458)) | (1L << (SUBPARTITION - 458)) | (1L << (SUBSTITUTABLE - 458)) | (1L << (SUBSTRING - 458)) | (1L << (SUBTYPE - 458)) | (1L << (SUCCESS - 458)) | (1L << (SUSPEND - 458)) | (1L << (TABLES - 458)) | (1L << (TIME - 458)) | (1L << (TIMESTAMP - 458)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 458)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 458)) | (1L << (TIMESTAMP_UNCONSTRAINED - 458)))) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & ((1L << (TIMEZONE_ABBR - 522)) | (1L << (TIMEZONE_HOUR - 522)) | (1L << (TIMEZONE_MINUTE - 522)) | (1L << (TIMEZONE_REGION - 522)) | (1L << (TO_CHAR - 522)) | (1L << (TO_DATE - 522)) | (1L << (TRAILING - 522)) | (1L << (TRANSACTION - 522)) | (1L << (TRANSLATE - 522)) | (1L << (TREAT - 522)) | (1L << (TRIGGER - 522)) | (1L << (TRIM - 522)) | (1L << (TRUNCATE - 522)) | (1L << (TRUSTED - 522)) | (1L << (TYPE - 522)) | (1L << (UNBOUNDED - 522)) | (1L << (UNDER - 522)) | (1L << (UNLIMITED - 522)) | (1L << (UNTIL - 522)) | (1L << (UPDATED - 522)) | (1L << (UPSERT - 522)) | (1L << (UROWID - 522)) | (1L << (USE - 522)) | (1L << (VALIDATE - 522)) | (1L << (VALUE - 522)) | (1L << (VARCHAR - 522)) | (1L << (VARCHAR2 - 522)) | (1L << (VARIABLE - 522)) | (1L << (VARRAY - 522)) | (1L << (VARYING - 522)) | (1L << (VERBOSE - 522)) | (1L << (VERSION - 522)) | (1L << (VERSIONS - 522)) | (1L << (VIEW - 522)) | (1L << (WAIT - 522)) | (1L << (WARNING - 522)) | (1L << (WELLFORMED - 522)) | (1L << (WHENEVER - 522)) | (1L << (WHILE - 522)) | (1L << (WITHOUT - 522)) | (1L << (WITHIN - 522)) | (1L << (WORK - 522)) | (1L << (WRITE - 522)) | (1L << (XML - 522)) | (1L << (XMLAGG - 522)) | (1L << (XMLATTRIBUTES - 522)))) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & ((1L << (XMLCAST - 586)) | (1L << (XMLCOLATTVAL - 586)) | (1L << (XMLELEMENT - 586)) | (1L << (XMLEXISTS - 586)) | (1L << (XMLFOREST - 586)) | (1L << (XMLNAMESPACES - 586)) | (1L << (XMLPARSE - 586)) | (1L << (XMLPI - 586)) | (1L << (XMLQUERY - 586)) | (1L << (XMLROOT - 586)) | (1L << (XMLSERIALIZE - 586)) | (1L << (XMLTABLE - 586)) | (1L << (YEAR - 586)) | (1L << (YES - 586)) | (1L << (YMINTERVAL_UNCONSTRAINED - 586)) | (1L << (ZONE - 586)) | (1L << (PREDICTION - 586)) | (1L << (PREDICTION_BOUNDS - 586)) | (1L << (PREDICTION_COST - 586)) | (1L << (PREDICTION_DETAILS - 586)) | (1L << (PREDICTION_PROBABILITY - 586)) | (1L << (PREDICTION_SET - 586)) | (1L << (CUME_DIST - 586)) | (1L << (DENSE_RANK - 586)) | (1L << (LISTAGG - 586)) | (1L << (PERCENT_RANK - 586)) | (1L << (PERCENTILE_CONT - 586)) | (1L << (PERCENTILE_DISC - 586)) | (1L << (RANK - 586)) | (1L << (AVG - 586)) | (1L << (CORR - 586)) | (1L << (LAG - 586)) | (1L << (LEAD - 586)) | (1L << (MAX - 586)) | (1L << (MEDIAN - 586)) | (1L << (MIN - 586)) | (1L << (NTILE - 586)) | (1L << (RATIO_TO_REPORT - 586)) | (1L << (ROW_NUMBER - 586)) | (1L << (SUM - 586)) | (1L << (VARIANCE - 586)) | (1L << (REGR_ - 586)) | (1L << (STDDEV - 586)) | (1L << (VAR_ - 586)) | (1L << (COVAR_ - 586)))) != 0) || _la==COMMA || _la==REGULAR_ID );
				setState(2336);
				match(RIGHT_PAREN);
				setState(2337);
				references_clause();
				setState(2339);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,241,_ctx) ) {
				case 1:
					{
					setState(2338);
					constraint_state();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Supplemental_logging_propsContext extends ParserRuleContext {
		public TerminalNode SUPPLEMENTAL() { return getToken(PLSQLParser.SUPPLEMENTAL, 0); }
		public TerminalNode LOG() { return getToken(PLSQLParser.LOG, 0); }
		public Supplemental_log_grp_clauseContext supplemental_log_grp_clause() {
			return getRuleContext(Supplemental_log_grp_clauseContext.class,0);
		}
		public Supplemental_id_key_clauseContext supplemental_id_key_clause() {
			return getRuleContext(Supplemental_id_key_clauseContext.class,0);
		}
		public Supplemental_logging_propsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_supplemental_logging_props; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterSupplemental_logging_props(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitSupplemental_logging_props(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitSupplemental_logging_props(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Supplemental_logging_propsContext supplemental_logging_props() throws RecognitionException {
		Supplemental_logging_propsContext _localctx = new Supplemental_logging_propsContext(_ctx, getState());
		enterRule(_localctx, 136, RULE_supplemental_logging_props);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2343);
			match(SUPPLEMENTAL);
			setState(2344);
			match(LOG);
			setState(2347);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case GROUP:
				{
				setState(2345);
				supplemental_log_grp_clause();
				}
				break;
			case DATA:
				{
				setState(2346);
				supplemental_id_key_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Supplemental_log_grp_clauseContext extends ParserRuleContext {
		public TerminalNode GROUP() { return getToken(PLSQLParser.GROUP, 0); }
		public Log_grpContext log_grp() {
			return getRuleContext(Log_grpContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(PLSQLParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PLSQLParser.RIGHT_PAREN, 0); }
		public List<Regular_idContext> regular_id() {
			return getRuleContexts(Regular_idContext.class);
		}
		public Regular_idContext regular_id(int i) {
			return getRuleContext(Regular_idContext.class,i);
		}
		public TerminalNode ALWAYS() { return getToken(PLSQLParser.ALWAYS, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PLSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLSQLParser.COMMA, i);
		}
		public List<TerminalNode> NO() { return getTokens(PLSQLParser.NO); }
		public TerminalNode NO(int i) {
			return getToken(PLSQLParser.NO, i);
		}
		public List<TerminalNode> LOG() { return getTokens(PLSQLParser.LOG); }
		public TerminalNode LOG(int i) {
			return getToken(PLSQLParser.LOG, i);
		}
		public Supplemental_log_grp_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_supplemental_log_grp_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterSupplemental_log_grp_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitSupplemental_log_grp_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitSupplemental_log_grp_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Supplemental_log_grp_clauseContext supplemental_log_grp_clause() throws RecognitionException {
		Supplemental_log_grp_clauseContext _localctx = new Supplemental_log_grp_clauseContext(_ctx, getState());
		enterRule(_localctx, 138, RULE_supplemental_log_grp_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2349);
			match(GROUP);
			setState(2350);
			log_grp();
			setState(2351);
			match(LEFT_PAREN);
			setState(2360); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(2353);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(2352);
					match(COMMA);
					}
				}

				setState(2355);
				regular_id();
				setState(2358);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,245,_ctx) ) {
				case 1:
					{
					setState(2356);
					match(NO);
					setState(2357);
					match(LOG);
					}
					break;
				}
				}
				}
				setState(2362); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BUILD) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (CHR - 65)) | (1L << (CLOB - 65)) | (1L << (CLOSE - 65)) | (1L << (CLUSTER - 65)) | (1L << (COALESCE - 65)) | (1L << (COLLECT - 65)) | (1L << (COLUMNS - 65)) | (1L << (COMMENT - 65)) | (1L << (COMMIT - 65)) | (1L << (COMMITTED - 65)) | (1L << (COMPATIBILITY - 65)) | (1L << (COMPILE - 65)) | (1L << (COMPLETE - 65)) | (1L << (COMPOUND - 65)) | (1L << (CONCAT - 65)) | (1L << (CONSTANT - 65)) | (1L << (CONSTRAINT - 65)) | (1L << (CONSTRAINTS - 65)) | (1L << (CONSTRUCTOR - 65)) | (1L << (CONTENT - 65)) | (1L << (CONTEXT - 65)) | (1L << (CONTINUE - 65)) | (1L << (CONVERT - 65)) | (1L << (CORRUPT_XID - 65)) | (1L << (CORRUPT_XID_ALL - 65)) | (1L << (COST - 65)) | (1L << (COUNT - 65)) | (1L << (CROSS - 65)) | (1L << (CUBE - 65)) | (1L << (CURRENT_USER - 65)) | (1L << (CURSOR - 65)) | (1L << (CUSTOMDATUM - 65)) | (1L << (CYCLE - 65)) | (1L << (DATA - 65)) | (1L << (DATABASE - 65)) | (1L << (DATE - 65)) | (1L << (DAY - 65)) | (1L << (DB_ROLE_CHANGE - 65)) | (1L << (DBTIMEZONE - 65)) | (1L << (DDL - 65)) | (1L << (DEBUG - 65)) | (1L << (DEC - 65)) | (1L << (DECIMAL - 65)) | (1L << (DECODE - 65)) | (1L << (DECOMPOSE - 65)) | (1L << (DECREMENT - 65)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DEMAND - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (EDITIONING - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENFORCED - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FAST - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)) | (1L << (FOLLOWING - 129)) | (1L << (FOLLOWS - 129)) | (1L << (FORALL - 129)) | (1L << (FORCE - 129)))) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & ((1L << (FULL - 197)) | (1L << (FUNCTION - 197)) | (1L << (GROUPING - 197)) | (1L << (HASH - 197)) | (1L << (HIDE - 197)) | (1L << (HOUR - 197)) | (1L << (IGNORE - 197)) | (1L << (IMMEDIATE - 197)) | (1L << (INCLUDE - 197)) | (1L << (INCLUDING - 197)) | (1L << (INCREMENT - 197)) | (1L << (INDENT - 197)) | (1L << (INDEXED - 197)) | (1L << (INDICATOR - 197)) | (1L << (INDICES - 197)) | (1L << (INFINITE - 197)) | (1L << (INLINE - 197)) | (1L << (INNER - 197)) | (1L << (INOUT - 197)) | (1L << (INSTANTIABLE - 197)) | (1L << (INSTEAD - 197)) | (1L << (INT - 197)) | (1L << (INTEGER - 197)) | (1L << (INTERVAL - 197)) | (1L << (INVALIDATE - 197)) | (1L << (ISOLATION - 197)) | (1L << (ITERATE - 197)) | (1L << (JAVA - 197)) | (1L << (JOIN - 197)) | (1L << (KEEP - 197)) | (1L << (LANGUAGE - 197)) | (1L << (LAST - 197)) | (1L << (LAST_VALUE - 197)) | (1L << (LEADING - 197)) | (1L << (LEFT - 197)) | (1L << (LEVEL - 197)))) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & ((1L << (LIBRARY - 261)) | (1L << (LIKE2 - 261)) | (1L << (LIKE4 - 261)) | (1L << (LIKEC - 261)) | (1L << (LIMIT - 261)) | (1L << (LIST - 261)) | (1L << (LOCAL - 261)) | (1L << (LOCKED - 261)) | (1L << (LOG - 261)) | (1L << (LOGOFF - 261)) | (1L << (LOGON - 261)) | (1L << (LONG - 261)) | (1L << (LOOP - 261)) | (1L << (MAIN - 261)) | (1L << (MAP - 261)) | (1L << (MASTER - 261)) | (1L << (MATCHED - 261)) | (1L << (MAXVALUE - 261)) | (1L << (MEASURES - 261)) | (1L << (MEMBER - 261)) | (1L << (MERGE - 261)) | (1L << (MINUTE - 261)) | (1L << (MINVALUE - 261)) | (1L << (MLSLABEL - 261)) | (1L << (MODEL - 261)) | (1L << (MODIFY - 261)) | (1L << (MONTH - 261)) | (1L << (MULTISET - 261)) | (1L << (NAME - 261)) | (1L << (NAN - 261)) | (1L << (NATURAL - 261)) | (1L << (NATURALN - 261)) | (1L << (NAV - 261)) | (1L << (NCHAR - 261)) | (1L << (NCHAR_CS - 261)) | (1L << (NCLOB - 261)) | (1L << (NESTED - 261)) | (1L << (NEVER - 261)) | (1L << (NEW - 261)) | (1L << (NO - 261)) | (1L << (NOAUDIT - 261)) | (1L << (NOCOPY - 261)) | (1L << (NOCYCLE - 261)) | (1L << (NOENTITYESCAPING - 261)))) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & ((1L << (NONE - 329)) | (1L << (NOSCHEMACHECK - 329)) | (1L << (NVL - 329)) | (1L << (NULLS - 329)) | (1L << (NUMBER - 329)) | (1L << (NUMERIC - 329)) | (1L << (NVARCHAR2 - 329)) | (1L << (MATERIALIZED - 329)) | (1L << (OBJECT - 329)) | (1L << (OFF - 329)) | (1L << (OID - 329)) | (1L << (OLD - 329)) | (1L << (ONLY - 329)) | (1L << (OPEN - 329)) | (1L << (ORADATA - 329)) | (1L << (ORDINALITY - 329)) | (1L << (OSERROR - 329)) | (1L << (OUT - 329)) | (1L << (OUTER - 329)) | (1L << (OVER - 329)) | (1L << (OVERRIDING - 329)) | (1L << (PACKAGE - 329)) | (1L << (PARALLEL_ENABLE - 329)) | (1L << (PARAMETERS - 329)) | (1L << (PARENT - 329)) | (1L << (PARTITION - 329)) | (1L << (PASSING - 329)) | (1L << (PATH - 329)) | (1L << (PIPELINED - 329)) | (1L << (PLAN - 329)) | (1L << (PLS_INTEGER - 329)) | (1L << (POSITIVE - 329)) | (1L << (POSITIVEN - 329)) | (1L << (PRAGMA - 329)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (PREBUILT - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)) | (1L << (PRESENT - 393)) | (1L << (PUBLIC - 393)) | (1L << (RAISE - 393)) | (1L << (RANGE - 393)) | (1L << (RAW - 393)) | (1L << (READ - 393)) | (1L << (REAL - 393)) | (1L << (RECORD - 393)) | (1L << (REDUCED - 393)) | (1L << (REF - 393)) | (1L << (REFERENCE - 393)) | (1L << (REFERENCING - 393)) | (1L << (REFRESH - 393)) | (1L << (REJECT - 393)) | (1L << (RELIES_ON - 393)) | (1L << (RENAME - 393)) | (1L << (REPLACE - 393)) | (1L << (RESPECT - 393)) | (1L << (RESTRICT_REFERENCES - 393)) | (1L << (RESULT - 393)) | (1L << (RESULT_CACHE - 393)) | (1L << (RETURN - 393)) | (1L << (RETURNING - 393)) | (1L << (REUSE - 393)) | (1L << (REVERSE - 393)) | (1L << (REWRITE - 393)) | (1L << (RIGHT - 393)) | (1L << (ROLE - 393)) | (1L << (ROLLBACK - 393)) | (1L << (ROLLUP - 393)) | (1L << (ROW - 393)) | (1L << (ROWID - 393)) | (1L << (ROWS - 393)) | (1L << (RULES - 393)) | (1L << (SAMPLE - 393)) | (1L << (SAVE - 393)) | (1L << (SAVEPOINT - 393)) | (1L << (SCHEMA - 393)) | (1L << (SCHEMACHECK - 393)) | (1L << (SCN - 393)) | (1L << (SECOND - 393)))) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & ((1L << (SEED - 458)) | (1L << (SEGMENT - 458)) | (1L << (SELF - 458)) | (1L << (SEQUENTIAL - 458)) | (1L << (SERIALIZABLE - 458)) | (1L << (SERIALLY_REUSABLE - 458)) | (1L << (SERVERERROR - 458)) | (1L << (SESSIONTIMEZONE - 458)) | (1L << (SET - 458)) | (1L << (SETS - 458)) | (1L << (SETTINGS - 458)) | (1L << (SHOW - 458)) | (1L << (SHUTDOWN - 458)) | (1L << (SIBLINGS - 458)) | (1L << (SIGNTYPE - 458)) | (1L << (SIMPLE_INTEGER - 458)) | (1L << (SINGLE - 458)) | (1L << (SIZE - 458)) | (1L << (SKIP_ - 458)) | (1L << (SMALLINT - 458)) | (1L << (SNAPSHOT - 458)) | (1L << (SOME - 458)) | (1L << (SPECIFICATION - 458)) | (1L << (SQLDATA - 458)) | (1L << (SQLERROR - 458)) | (1L << (STANDALONE - 458)) | (1L << (STARTUP - 458)) | (1L << (STATEMENT - 458)) | (1L << (STATEMENT_ID - 458)) | (1L << (STATIC - 458)) | (1L << (STATISTICS - 458)) | (1L << (STRING - 458)) | (1L << (SUBMULTISET - 458)) | (1L << (SUBPARTITION - 458)) | (1L << (SUBSTITUTABLE - 458)) | (1L << (SUBSTRING - 458)) | (1L << (SUBTYPE - 458)) | (1L << (SUCCESS - 458)) | (1L << (SUSPEND - 458)) | (1L << (TABLES - 458)) | (1L << (TIME - 458)) | (1L << (TIMESTAMP - 458)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 458)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 458)) | (1L << (TIMESTAMP_UNCONSTRAINED - 458)))) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & ((1L << (TIMEZONE_ABBR - 522)) | (1L << (TIMEZONE_HOUR - 522)) | (1L << (TIMEZONE_MINUTE - 522)) | (1L << (TIMEZONE_REGION - 522)) | (1L << (TO_CHAR - 522)) | (1L << (TO_DATE - 522)) | (1L << (TRAILING - 522)) | (1L << (TRANSACTION - 522)) | (1L << (TRANSLATE - 522)) | (1L << (TREAT - 522)) | (1L << (TRIGGER - 522)) | (1L << (TRIM - 522)) | (1L << (TRUNCATE - 522)) | (1L << (TRUSTED - 522)) | (1L << (TYPE - 522)) | (1L << (UNBOUNDED - 522)) | (1L << (UNDER - 522)) | (1L << (UNLIMITED - 522)) | (1L << (UNTIL - 522)) | (1L << (UPDATED - 522)) | (1L << (UPSERT - 522)) | (1L << (UROWID - 522)) | (1L << (USE - 522)) | (1L << (VALIDATE - 522)) | (1L << (VALUE - 522)) | (1L << (VARCHAR - 522)) | (1L << (VARCHAR2 - 522)) | (1L << (VARIABLE - 522)) | (1L << (VARRAY - 522)) | (1L << (VARYING - 522)) | (1L << (VERBOSE - 522)) | (1L << (VERSION - 522)) | (1L << (VERSIONS - 522)) | (1L << (VIEW - 522)) | (1L << (WAIT - 522)) | (1L << (WARNING - 522)) | (1L << (WELLFORMED - 522)) | (1L << (WHENEVER - 522)) | (1L << (WHILE - 522)) | (1L << (WITHOUT - 522)) | (1L << (WITHIN - 522)) | (1L << (WORK - 522)) | (1L << (WRITE - 522)) | (1L << (XML - 522)) | (1L << (XMLAGG - 522)) | (1L << (XMLATTRIBUTES - 522)))) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & ((1L << (XMLCAST - 586)) | (1L << (XMLCOLATTVAL - 586)) | (1L << (XMLELEMENT - 586)) | (1L << (XMLEXISTS - 586)) | (1L << (XMLFOREST - 586)) | (1L << (XMLNAMESPACES - 586)) | (1L << (XMLPARSE - 586)) | (1L << (XMLPI - 586)) | (1L << (XMLQUERY - 586)) | (1L << (XMLROOT - 586)) | (1L << (XMLSERIALIZE - 586)) | (1L << (XMLTABLE - 586)) | (1L << (YEAR - 586)) | (1L << (YES - 586)) | (1L << (YMINTERVAL_UNCONSTRAINED - 586)) | (1L << (ZONE - 586)) | (1L << (PREDICTION - 586)) | (1L << (PREDICTION_BOUNDS - 586)) | (1L << (PREDICTION_COST - 586)) | (1L << (PREDICTION_DETAILS - 586)) | (1L << (PREDICTION_PROBABILITY - 586)) | (1L << (PREDICTION_SET - 586)) | (1L << (CUME_DIST - 586)) | (1L << (DENSE_RANK - 586)) | (1L << (LISTAGG - 586)) | (1L << (PERCENT_RANK - 586)) | (1L << (PERCENTILE_CONT - 586)) | (1L << (PERCENTILE_DISC - 586)) | (1L << (RANK - 586)) | (1L << (AVG - 586)) | (1L << (CORR - 586)) | (1L << (LAG - 586)) | (1L << (LEAD - 586)) | (1L << (MAX - 586)) | (1L << (MEDIAN - 586)) | (1L << (MIN - 586)) | (1L << (NTILE - 586)) | (1L << (RATIO_TO_REPORT - 586)) | (1L << (ROW_NUMBER - 586)) | (1L << (SUM - 586)) | (1L << (VARIANCE - 586)) | (1L << (REGR_ - 586)) | (1L << (STDDEV - 586)) | (1L << (VAR_ - 586)) | (1L << (COVAR_ - 586)))) != 0) || _la==COMMA || _la==REGULAR_ID );
			setState(2364);
			match(RIGHT_PAREN);
			setState(2366);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALWAYS) {
				{
				setState(2365);
				match(ALWAYS);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Log_grpContext extends ParserRuleContext {
		public TerminalNode UNSIGNED_INTEGER() { return getToken(PLSQLParser.UNSIGNED_INTEGER, 0); }
		public Log_grpContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_log_grp; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterLog_grp(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitLog_grp(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitLog_grp(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Log_grpContext log_grp() throws RecognitionException {
		Log_grpContext _localctx = new Log_grpContext(_ctx, getState());
		enterRule(_localctx, 140, RULE_log_grp);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2368);
			match(UNSIGNED_INTEGER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Supplemental_id_key_clauseContext extends ParserRuleContext {
		public TerminalNode DATA() { return getToken(PLSQLParser.DATA, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PLSQLParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PLSQLParser.RIGHT_PAREN, 0); }
		public TerminalNode COLUMNS() { return getToken(PLSQLParser.COLUMNS, 0); }
		public List<TerminalNode> ALL() { return getTokens(PLSQLParser.ALL); }
		public TerminalNode ALL(int i) {
			return getToken(PLSQLParser.ALL, i);
		}
		public List<TerminalNode> PRIMARY() { return getTokens(PLSQLParser.PRIMARY); }
		public TerminalNode PRIMARY(int i) {
			return getToken(PLSQLParser.PRIMARY, i);
		}
		public List<TerminalNode> KEY() { return getTokens(PLSQLParser.KEY); }
		public TerminalNode KEY(int i) {
			return getToken(PLSQLParser.KEY, i);
		}
		public List<TerminalNode> UNIQUE() { return getTokens(PLSQLParser.UNIQUE); }
		public TerminalNode UNIQUE(int i) {
			return getToken(PLSQLParser.UNIQUE, i);
		}
		public List<TerminalNode> FOREIGN() { return getTokens(PLSQLParser.FOREIGN); }
		public TerminalNode FOREIGN(int i) {
			return getToken(PLSQLParser.FOREIGN, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLSQLParser.COMMA, i);
		}
		public Supplemental_id_key_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_supplemental_id_key_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterSupplemental_id_key_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitSupplemental_id_key_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitSupplemental_id_key_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Supplemental_id_key_clauseContext supplemental_id_key_clause() throws RecognitionException {
		Supplemental_id_key_clauseContext _localctx = new Supplemental_id_key_clauseContext(_ctx, getState());
		enterRule(_localctx, 142, RULE_supplemental_id_key_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2370);
			match(DATA);
			setState(2371);
			match(LEFT_PAREN);
			setState(2383); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(2373);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(2372);
					match(COMMA);
					}
				}

				setState(2381);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ALL:
					{
					setState(2375);
					match(ALL);
					}
					break;
				case PRIMARY:
					{
					setState(2376);
					match(PRIMARY);
					setState(2377);
					match(KEY);
					}
					break;
				case UNIQUE:
					{
					setState(2378);
					match(UNIQUE);
					}
					break;
				case FOREIGN:
					{
					setState(2379);
					match(FOREIGN);
					setState(2380);
					match(KEY);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				setState(2385); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==ALL || _la==FOREIGN || _la==PRIMARY || _la==UNIQUE || _la==COMMA );
			setState(2387);
			match(RIGHT_PAREN);
			setState(2388);
			match(COLUMNS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Physical_propertiesContext extends ParserRuleContext {
		public Segment_attributes_clauseContext segment_attributes_clause() {
			return getRuleContext(Segment_attributes_clauseContext.class,0);
		}
		public Deferred_segment_creationContext deferred_segment_creation() {
			return getRuleContext(Deferred_segment_creationContext.class,0);
		}
		public Table_compressionContext table_compression() {
			return getRuleContext(Table_compressionContext.class,0);
		}
		public Physical_propertiesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_physical_properties; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterPhysical_properties(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitPhysical_properties(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitPhysical_properties(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Physical_propertiesContext physical_properties() throws RecognitionException {
		Physical_propertiesContext _localctx = new Physical_propertiesContext(_ctx, getState());
		enterRule(_localctx, 144, RULE_physical_properties);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2391);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SEGMENT) {
				{
				setState(2390);
				deferred_segment_creation();
				}
			}

			setState(2393);
			segment_attributes_clause();
			setState(2395);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMPRESS || _la==NOCOMPRESS) {
				{
				setState(2394);
				table_compression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Deferred_segment_creationContext extends ParserRuleContext {
		public TerminalNode SEGMENT() { return getToken(PLSQLParser.SEGMENT, 0); }
		public TerminalNode CREATION() { return getToken(PLSQLParser.CREATION, 0); }
		public TerminalNode IMMEDIATE() { return getToken(PLSQLParser.IMMEDIATE, 0); }
		public TerminalNode DEFERRED() { return getToken(PLSQLParser.DEFERRED, 0); }
		public Deferred_segment_creationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_deferred_segment_creation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterDeferred_segment_creation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitDeferred_segment_creation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitDeferred_segment_creation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Deferred_segment_creationContext deferred_segment_creation() throws RecognitionException {
		Deferred_segment_creationContext _localctx = new Deferred_segment_creationContext(_ctx, getState());
		enterRule(_localctx, 146, RULE_deferred_segment_creation);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2397);
			match(SEGMENT);
			setState(2398);
			match(CREATION);
			setState(2399);
			_la = _input.LA(1);
			if ( !(_la==DEFERRED || _la==IMMEDIATE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Segment_attributes_clauseContext extends ParserRuleContext {
		public Id_expressionContext tablespace_name;
		public List<Physical_attributes_clauseContext> physical_attributes_clause() {
			return getRuleContexts(Physical_attributes_clauseContext.class);
		}
		public Physical_attributes_clauseContext physical_attributes_clause(int i) {
			return getRuleContext(Physical_attributes_clauseContext.class,i);
		}
		public List<TerminalNode> TABLESPACE() { return getTokens(PLSQLParser.TABLESPACE); }
		public TerminalNode TABLESPACE(int i) {
			return getToken(PLSQLParser.TABLESPACE, i);
		}
		public List<Logging_clauseContext> logging_clause() {
			return getRuleContexts(Logging_clauseContext.class);
		}
		public Logging_clauseContext logging_clause(int i) {
			return getRuleContext(Logging_clauseContext.class,i);
		}
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public Segment_attributes_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_segment_attributes_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterSegment_attributes_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitSegment_attributes_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitSegment_attributes_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Segment_attributes_clauseContext segment_attributes_clause() throws RecognitionException {
		Segment_attributes_clauseContext _localctx = new Segment_attributes_clauseContext(_ctx, getState());
		enterRule(_localctx, 148, RULE_segment_attributes_clause);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2405); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					setState(2405);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case INITRANS:
					case PCTFREE:
					case PCTUSED:
					case STORAGE:
						{
						setState(2401);
						physical_attributes_clause();
						}
						break;
					case TABLESPACE:
						{
						setState(2402);
						match(TABLESPACE);
						setState(2403);
						((Segment_attributes_clauseContext)_localctx).tablespace_name = id_expression();
						}
						break;
					case FILESYSTEM_LIKE_LOGGING:
					case LOGGING:
					case NOLOGGING:
						{
						setState(2404);
						logging_clause();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2407); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,254,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Physical_attributes_clauseContext extends ParserRuleContext {
		public Token pctfree;
		public Token pctused;
		public Token inittrans;
		public List<TerminalNode> PCTFREE() { return getTokens(PLSQLParser.PCTFREE); }
		public TerminalNode PCTFREE(int i) {
			return getToken(PLSQLParser.PCTFREE, i);
		}
		public List<TerminalNode> PCTUSED() { return getTokens(PLSQLParser.PCTUSED); }
		public TerminalNode PCTUSED(int i) {
			return getToken(PLSQLParser.PCTUSED, i);
		}
		public List<TerminalNode> INITRANS() { return getTokens(PLSQLParser.INITRANS); }
		public TerminalNode INITRANS(int i) {
			return getToken(PLSQLParser.INITRANS, i);
		}
		public List<Storage_clauseContext> storage_clause() {
			return getRuleContexts(Storage_clauseContext.class);
		}
		public Storage_clauseContext storage_clause(int i) {
			return getRuleContext(Storage_clauseContext.class,i);
		}
		public List<TerminalNode> UNSIGNED_INTEGER() { return getTokens(PLSQLParser.UNSIGNED_INTEGER); }
		public TerminalNode UNSIGNED_INTEGER(int i) {
			return getToken(PLSQLParser.UNSIGNED_INTEGER, i);
		}
		public Physical_attributes_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_physical_attributes_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterPhysical_attributes_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitPhysical_attributes_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitPhysical_attributes_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Physical_attributes_clauseContext physical_attributes_clause() throws RecognitionException {
		Physical_attributes_clauseContext _localctx = new Physical_attributes_clauseContext(_ctx, getState());
		enterRule(_localctx, 150, RULE_physical_attributes_clause);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2416); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					setState(2416);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case PCTFREE:
						{
						setState(2409);
						match(PCTFREE);
						setState(2410);
						((Physical_attributes_clauseContext)_localctx).pctfree = match(UNSIGNED_INTEGER);
						}
						break;
					case PCTUSED:
						{
						setState(2411);
						match(PCTUSED);
						setState(2412);
						((Physical_attributes_clauseContext)_localctx).pctused = match(UNSIGNED_INTEGER);
						}
						break;
					case INITRANS:
						{
						setState(2413);
						match(INITRANS);
						setState(2414);
						((Physical_attributes_clauseContext)_localctx).inittrans = match(UNSIGNED_INTEGER);
						}
						break;
					case STORAGE:
						{
						setState(2415);
						storage_clause();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2418); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,256,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Storage_clauseContext extends ParserRuleContext {
		public Size_clauseContext initial_size;
		public Size_clauseContext next_size;
		public Token minextents;
		public Token pctincrease;
		public Token freelists;
		public Token freelist_groups;
		public TerminalNode STORAGE() { return getToken(PLSQLParser.STORAGE, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PLSQLParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PLSQLParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> INITIAL() { return getTokens(PLSQLParser.INITIAL); }
		public TerminalNode INITIAL(int i) {
			return getToken(PLSQLParser.INITIAL, i);
		}
		public List<TerminalNode> NEXT() { return getTokens(PLSQLParser.NEXT); }
		public TerminalNode NEXT(int i) {
			return getToken(PLSQLParser.NEXT, i);
		}
		public List<TerminalNode> MINEXTENTS() { return getTokens(PLSQLParser.MINEXTENTS); }
		public TerminalNode MINEXTENTS(int i) {
			return getToken(PLSQLParser.MINEXTENTS, i);
		}
		public List<TerminalNode> MAXEXTENTS() { return getTokens(PLSQLParser.MAXEXTENTS); }
		public TerminalNode MAXEXTENTS(int i) {
			return getToken(PLSQLParser.MAXEXTENTS, i);
		}
		public List<TerminalNode> PCTINCREASE() { return getTokens(PLSQLParser.PCTINCREASE); }
		public TerminalNode PCTINCREASE(int i) {
			return getToken(PLSQLParser.PCTINCREASE, i);
		}
		public List<TerminalNode> FREELISTS() { return getTokens(PLSQLParser.FREELISTS); }
		public TerminalNode FREELISTS(int i) {
			return getToken(PLSQLParser.FREELISTS, i);
		}
		public List<TerminalNode> FREELIST() { return getTokens(PLSQLParser.FREELIST); }
		public TerminalNode FREELIST(int i) {
			return getToken(PLSQLParser.FREELIST, i);
		}
		public List<TerminalNode> GROUPS() { return getTokens(PLSQLParser.GROUPS); }
		public TerminalNode GROUPS(int i) {
			return getToken(PLSQLParser.GROUPS, i);
		}
		public List<TerminalNode> OPTIMAL() { return getTokens(PLSQLParser.OPTIMAL); }
		public TerminalNode OPTIMAL(int i) {
			return getToken(PLSQLParser.OPTIMAL, i);
		}
		public List<TerminalNode> BUFFER_POOL() { return getTokens(PLSQLParser.BUFFER_POOL); }
		public TerminalNode BUFFER_POOL(int i) {
			return getToken(PLSQLParser.BUFFER_POOL, i);
		}
		public List<TerminalNode> FLASH_CACHE() { return getTokens(PLSQLParser.FLASH_CACHE); }
		public TerminalNode FLASH_CACHE(int i) {
			return getToken(PLSQLParser.FLASH_CACHE, i);
		}
		public List<TerminalNode> ENCRYPT() { return getTokens(PLSQLParser.ENCRYPT); }
		public TerminalNode ENCRYPT(int i) {
			return getToken(PLSQLParser.ENCRYPT, i);
		}
		public List<Size_clauseContext> size_clause() {
			return getRuleContexts(Size_clauseContext.class);
		}
		public Size_clauseContext size_clause(int i) {
			return getRuleContext(Size_clauseContext.class,i);
		}
		public List<TerminalNode> UNSIGNED_INTEGER() { return getTokens(PLSQLParser.UNSIGNED_INTEGER); }
		public TerminalNode UNSIGNED_INTEGER(int i) {
			return getToken(PLSQLParser.UNSIGNED_INTEGER, i);
		}
		public List<TerminalNode> KEEP() { return getTokens(PLSQLParser.KEEP); }
		public TerminalNode KEEP(int i) {
			return getToken(PLSQLParser.KEEP, i);
		}
		public List<TerminalNode> RECYCLE() { return getTokens(PLSQLParser.RECYCLE); }
		public TerminalNode RECYCLE(int i) {
			return getToken(PLSQLParser.RECYCLE, i);
		}
		public List<TerminalNode> DEFAULT() { return getTokens(PLSQLParser.DEFAULT); }
		public TerminalNode DEFAULT(int i) {
			return getToken(PLSQLParser.DEFAULT, i);
		}
		public List<TerminalNode> NONE() { return getTokens(PLSQLParser.NONE); }
		public TerminalNode NONE(int i) {
			return getToken(PLSQLParser.NONE, i);
		}
		public List<TerminalNode> UNLIMITED() { return getTokens(PLSQLParser.UNLIMITED); }
		public TerminalNode UNLIMITED(int i) {
			return getToken(PLSQLParser.UNLIMITED, i);
		}
		public List<TerminalNode> NULL() { return getTokens(PLSQLParser.NULL); }
		public TerminalNode NULL(int i) {
			return getToken(PLSQLParser.NULL, i);
		}
		public Storage_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_storage_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterStorage_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitStorage_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitStorage_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Storage_clauseContext storage_clause() throws RecognitionException {
		Storage_clauseContext _localctx = new Storage_clauseContext(_ctx, getState());
		enterRule(_localctx, 152, RULE_storage_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2420);
			match(STORAGE);
			setState(2421);
			match(LEFT_PAREN);
			setState(2447); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				setState(2447);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case INITIAL:
					{
					setState(2422);
					match(INITIAL);
					setState(2423);
					((Storage_clauseContext)_localctx).initial_size = size_clause();
					}
					break;
				case NEXT:
					{
					setState(2424);
					match(NEXT);
					setState(2425);
					((Storage_clauseContext)_localctx).next_size = size_clause();
					}
					break;
				case MINEXTENTS:
					{
					setState(2426);
					match(MINEXTENTS);
					setState(2427);
					((Storage_clauseContext)_localctx).minextents = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==UNLIMITED || _la==UNSIGNED_INTEGER) ) {
						((Storage_clauseContext)_localctx).minextents = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				case MAXEXTENTS:
					{
					setState(2428);
					match(MAXEXTENTS);
					setState(2429);
					((Storage_clauseContext)_localctx).minextents = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==UNLIMITED || _la==UNSIGNED_INTEGER) ) {
						((Storage_clauseContext)_localctx).minextents = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				case PCTINCREASE:
					{
					setState(2430);
					match(PCTINCREASE);
					setState(2431);
					((Storage_clauseContext)_localctx).pctincrease = match(UNSIGNED_INTEGER);
					}
					break;
				case FREELISTS:
					{
					setState(2432);
					match(FREELISTS);
					setState(2433);
					((Storage_clauseContext)_localctx).freelists = match(UNSIGNED_INTEGER);
					}
					break;
				case FREELIST:
					{
					setState(2434);
					match(FREELIST);
					setState(2435);
					match(GROUPS);
					setState(2436);
					((Storage_clauseContext)_localctx).freelist_groups = match(UNSIGNED_INTEGER);
					}
					break;
				case OPTIMAL:
					{
					setState(2437);
					match(OPTIMAL);
					setState(2440);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case UNSIGNED_INTEGER:
						{
						setState(2438);
						size_clause();
						}
						break;
					case NULL:
						{
						setState(2439);
						match(NULL);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				case BUFFER_POOL:
					{
					setState(2442);
					match(BUFFER_POOL);
					setState(2443);
					_la = _input.LA(1);
					if ( !(_la==DEFAULT || _la==KEEP || _la==RECYCLE) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				case FLASH_CACHE:
					{
					setState(2444);
					match(FLASH_CACHE);
					setState(2445);
					_la = _input.LA(1);
					if ( !(_la==DEFAULT || _la==KEEP || _la==NONE) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				case ENCRYPT:
					{
					setState(2446);
					match(ENCRYPT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				setState(2449); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==BUFFER_POOL || ((((_la - 155)) & ~0x3f) == 0 && ((1L << (_la - 155)) & ((1L << (ENCRYPT - 155)) | (1L << (FLASH_CACHE - 155)) | (1L << (FREELIST - 155)) | (1L << (FREELISTS - 155)))) != 0) || _la==INITIAL || _la==MAXEXTENTS || _la==MINEXTENTS || _la==NEXT || _la==OPTIMAL || _la==PCTINCREASE );
			setState(2451);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Size_clauseContext extends ParserRuleContext {
		public TerminalNode UNSIGNED_INTEGER() { return getToken(PLSQLParser.UNSIGNED_INTEGER, 0); }
		public TerminalNode REGULAR_ID() { return getToken(PLSQLParser.REGULAR_ID, 0); }
		public Size_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_size_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterSize_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitSize_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitSize_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Size_clauseContext size_clause() throws RecognitionException {
		Size_clauseContext _localctx = new Size_clauseContext(_ctx, getState());
		enterRule(_localctx, 154, RULE_size_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2453);
			match(UNSIGNED_INTEGER);
			setState(2455);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==REGULAR_ID) {
				{
				setState(2454);
				match(REGULAR_ID);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Logging_clauseContext extends ParserRuleContext {
		public TerminalNode LOGGING() { return getToken(PLSQLParser.LOGGING, 0); }
		public TerminalNode NOLOGGING() { return getToken(PLSQLParser.NOLOGGING, 0); }
		public TerminalNode FILESYSTEM_LIKE_LOGGING() { return getToken(PLSQLParser.FILESYSTEM_LIKE_LOGGING, 0); }
		public Logging_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_logging_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterLogging_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitLogging_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitLogging_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Logging_clauseContext logging_clause() throws RecognitionException {
		Logging_clauseContext _localctx = new Logging_clauseContext(_ctx, getState());
		enterRule(_localctx, 156, RULE_logging_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2457);
			_la = _input.LA(1);
			if ( !(_la==FILESYSTEM_LIKE_LOGGING || _la==LOGGING || _la==NOLOGGING) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_propertiesContext extends ParserRuleContext {
		public Object_type_col_propertiesContext object_type_col_properties() {
			return getRuleContext(Object_type_col_propertiesContext.class,0);
		}
		public Nested_table_col_propertiesContext nested_table_col_properties() {
			return getRuleContext(Nested_table_col_propertiesContext.class,0);
		}
		public Varray_col_propertiesContext varray_col_properties() {
			return getRuleContext(Varray_col_propertiesContext.class,0);
		}
		public Lob_storage_clauseContext lob_storage_clause() {
			return getRuleContext(Lob_storage_clauseContext.class,0);
		}
		public Xmltype_column_propertiesContext xmltype_column_properties() {
			return getRuleContext(Xmltype_column_propertiesContext.class,0);
		}
		public Column_propertiesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_properties; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterColumn_properties(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitColumn_properties(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitColumn_properties(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Column_propertiesContext column_properties() throws RecognitionException {
		Column_propertiesContext _localctx = new Column_propertiesContext(_ctx, getState());
		enterRule(_localctx, 158, RULE_column_properties);
		try {
			setState(2466);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case COLUMN:
				enterOuterAlt(_localctx, 1);
				{
				setState(2459);
				object_type_col_properties();
				}
				break;
			case NESTED:
				enterOuterAlt(_localctx, 2);
				{
				setState(2460);
				nested_table_col_properties();
				}
				break;
			case LOB:
			case VARRAY:
				enterOuterAlt(_localctx, 3);
				{
				setState(2463);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case VARRAY:
					{
					setState(2461);
					varray_col_properties();
					}
					break;
				case LOB:
					{
					setState(2462);
					lob_storage_clause();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case XMLTYPE:
				enterOuterAlt(_localctx, 4);
				{
				setState(2465);
				xmltype_column_properties();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Object_type_col_propertiesContext extends ParserRuleContext {
		public Regular_idContext column;
		public TerminalNode COLUMN() { return getToken(PLSQLParser.COLUMN, 0); }
		public Substitutable_column_clauseContext substitutable_column_clause() {
			return getRuleContext(Substitutable_column_clauseContext.class,0);
		}
		public Regular_idContext regular_id() {
			return getRuleContext(Regular_idContext.class,0);
		}
		public Object_type_col_propertiesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_object_type_col_properties; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterObject_type_col_properties(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitObject_type_col_properties(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitObject_type_col_properties(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Object_type_col_propertiesContext object_type_col_properties() throws RecognitionException {
		Object_type_col_propertiesContext _localctx = new Object_type_col_propertiesContext(_ctx, getState());
		enterRule(_localctx, 160, RULE_object_type_col_properties);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2468);
			match(COLUMN);
			setState(2469);
			((Object_type_col_propertiesContext)_localctx).column = regular_id();
			setState(2470);
			substitutable_column_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Substitutable_column_clauseContext extends ParserRuleContext {
		public TerminalNode IS() { return getToken(PLSQLParser.IS, 0); }
		public TerminalNode OF() { return getToken(PLSQLParser.OF, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PLSQLParser.LEFT_PAREN, 0); }
		public Type_nameContext type_name() {
			return getRuleContext(Type_nameContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PLSQLParser.RIGHT_PAREN, 0); }
		public TerminalNode ELEMENT() { return getToken(PLSQLParser.ELEMENT, 0); }
		public TerminalNode TYPE() { return getToken(PLSQLParser.TYPE, 0); }
		public TerminalNode SUBSTITUTABLE() { return getToken(PLSQLParser.SUBSTITUTABLE, 0); }
		public TerminalNode AT() { return getToken(PLSQLParser.AT, 0); }
		public TerminalNode ALL() { return getToken(PLSQLParser.ALL, 0); }
		public TerminalNode LEVELS() { return getToken(PLSQLParser.LEVELS, 0); }
		public TerminalNode NOT() { return getToken(PLSQLParser.NOT, 0); }
		public Substitutable_column_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_substitutable_column_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterSubstitutable_column_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitSubstitutable_column_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitSubstitutable_column_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Substitutable_column_clauseContext substitutable_column_clause() throws RecognitionException {
		Substitutable_column_clauseContext _localctx = new Substitutable_column_clauseContext(_ctx, getState());
		enterRule(_localctx, 162, RULE_substitutable_column_clause);
		int _la;
		try {
			setState(2491);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ELEMENT:
			case IS:
				enterOuterAlt(_localctx, 1);
				{
				setState(2473);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ELEMENT) {
					{
					setState(2472);
					match(ELEMENT);
					}
				}

				setState(2475);
				match(IS);
				setState(2476);
				match(OF);
				setState(2478);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TYPE) {
					{
					setState(2477);
					match(TYPE);
					}
				}

				setState(2480);
				match(LEFT_PAREN);
				setState(2481);
				type_name();
				setState(2482);
				match(RIGHT_PAREN);
				}
				break;
			case NOT:
			case SUBSTITUTABLE:
				enterOuterAlt(_localctx, 2);
				{
				setState(2485);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(2484);
					match(NOT);
					}
				}

				setState(2487);
				match(SUBSTITUTABLE);
				setState(2488);
				match(AT);
				setState(2489);
				match(ALL);
				setState(2490);
				match(LEVELS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Nested_table_col_propertiesContext extends ParserRuleContext {
		public TerminalNode NESTED() { return getToken(PLSQLParser.NESTED, 0); }
		public TerminalNode TABLE() { return getToken(PLSQLParser.TABLE, 0); }
		public TerminalNode STORE() { return getToken(PLSQLParser.STORE, 0); }
		public List<TerminalNode> AS() { return getTokens(PLSQLParser.AS); }
		public TerminalNode AS(int i) {
			return getToken(PLSQLParser.AS, i);
		}
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public Nested_itemContext nested_item() {
			return getRuleContext(Nested_itemContext.class,0);
		}
		public TerminalNode COLUMN_VALUE() { return getToken(PLSQLParser.COLUMN_VALUE, 0); }
		public Substitutable_column_clauseContext substitutable_column_clause() {
			return getRuleContext(Substitutable_column_clauseContext.class,0);
		}
		public List<TerminalNode> LEFT_PAREN() { return getTokens(PLSQLParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(PLSQLParser.LEFT_PAREN, i);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(PLSQLParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(PLSQLParser.RIGHT_PAREN, i);
		}
		public TerminalNode RETURN() { return getToken(PLSQLParser.RETURN, 0); }
		public TerminalNode LOCAL() { return getToken(PLSQLParser.LOCAL, 0); }
		public TerminalNode GLOBAL() { return getToken(PLSQLParser.GLOBAL, 0); }
		public TerminalNode LOCATOR() { return getToken(PLSQLParser.LOCATOR, 0); }
		public TerminalNode VALUE() { return getToken(PLSQLParser.VALUE, 0); }
		public List<Object_propertiesContext> object_properties() {
			return getRuleContexts(Object_propertiesContext.class);
		}
		public Object_propertiesContext object_properties(int i) {
			return getRuleContext(Object_propertiesContext.class,i);
		}
		public List<Physical_propertiesContext> physical_properties() {
			return getRuleContexts(Physical_propertiesContext.class);
		}
		public Physical_propertiesContext physical_properties(int i) {
			return getRuleContext(Physical_propertiesContext.class,i);
		}
		public List<Column_propertiesContext> column_properties() {
			return getRuleContexts(Column_propertiesContext.class);
		}
		public Column_propertiesContext column_properties(int i) {
			return getRuleContext(Column_propertiesContext.class,i);
		}
		public Nested_table_col_propertiesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nested_table_col_properties; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterNested_table_col_properties(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitNested_table_col_properties(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitNested_table_col_properties(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Nested_table_col_propertiesContext nested_table_col_properties() throws RecognitionException {
		Nested_table_col_propertiesContext _localctx = new Nested_table_col_propertiesContext(_ctx, getState());
		enterRule(_localctx, 164, RULE_nested_table_col_properties);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2493);
			match(NESTED);
			setState(2494);
			match(TABLE);
			setState(2497);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BUILD:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPLETE:
			case COMPOUND:
			case CONCAT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECODE:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DEMAND:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case EDITIONING:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENFORCED:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FAST:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LIST:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MASTER:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEVER:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NVL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case MATERIALIZED:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PREBUILT:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PUBLIC:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REDUCED:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REFRESH:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case REWRITE:
			case RIGHT:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SIZE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBSTRING:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TABLES:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TO_CHAR:
			case TO_DATE:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TRUSTED:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERBOSE:
			case VERSION:
			case VERSIONS:
			case VIEW:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHOUT:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case REGULAR_ID:
				{
				setState(2495);
				nested_item();
				}
				break;
			case COLUMN_VALUE:
				{
				setState(2496);
				match(COLUMN_VALUE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2500);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ELEMENT || _la==IS || _la==NOT || _la==SUBSTITUTABLE) {
				{
				setState(2499);
				substitutable_column_clause();
				}
			}

			setState(2503);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==GLOBAL || _la==LOCAL) {
				{
				setState(2502);
				_la = _input.LA(1);
				if ( !(_la==GLOBAL || _la==LOCAL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(2505);
			match(STORE);
			setState(2506);
			match(AS);
			setState(2507);
			tableview_name();
			setState(2521);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,272,_ctx) ) {
			case 1:
				{
				setState(2508);
				match(LEFT_PAREN);
				setState(2515); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					setState(2515);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case LEFT_PAREN:
						{
						setState(2509);
						match(LEFT_PAREN);
						setState(2510);
						object_properties();
						setState(2511);
						match(RIGHT_PAREN);
						}
						break;
					case FILESYSTEM_LIKE_LOGGING:
					case INITRANS:
					case LOGGING:
					case NOLOGGING:
					case PCTFREE:
					case PCTUSED:
					case SEGMENT:
					case STORAGE:
					case TABLESPACE:
						{
						setState(2513);
						physical_properties();
						}
						break;
					case COLUMN:
					case LOB:
					case NESTED:
					case VARRAY:
					case XMLTYPE:
						{
						setState(2514);
						column_properties();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					setState(2517); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==COLUMN || _la==FILESYSTEM_LIKE_LOGGING || _la==INITRANS || ((((_la - 269)) & ~0x3f) == 0 && ((1L << (_la - 269)) & ((1L << (LOB - 269)) | (1L << (LOGGING - 269)) | (1L << (NESTED - 269)) | (1L << (NOLOGGING - 269)))) != 0) || _la==PCTFREE || _la==PCTUSED || ((((_la - 459)) & ~0x3f) == 0 && ((1L << (_la - 459)) & ((1L << (SEGMENT - 459)) | (1L << (STORAGE - 459)) | (1L << (TABLESPACE - 459)))) != 0) || _la==VARRAY || _la==XMLTYPE || _la==LEFT_PAREN );
				setState(2519);
				match(RIGHT_PAREN);
				}
				break;
			}
			setState(2528);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RETURN) {
				{
				setState(2523);
				match(RETURN);
				setState(2525);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(2524);
					match(AS);
					}
				}

				setState(2527);
				_la = _input.LA(1);
				if ( !(_la==LOCATOR || _la==VALUE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Nested_itemContext extends ParserRuleContext {
		public Regular_idContext regular_id() {
			return getRuleContext(Regular_idContext.class,0);
		}
		public Nested_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nested_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterNested_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitNested_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitNested_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Nested_itemContext nested_item() throws RecognitionException {
		Nested_itemContext _localctx = new Nested_itemContext(_ctx, getState());
		enterRule(_localctx, 166, RULE_nested_item);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2530);
			regular_id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Object_propertiesContext extends ParserRuleContext {
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public Attribute_nameContext attribute_name() {
			return getRuleContext(Attribute_nameContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(PLSQLParser.DEFAULT, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Inline_ref_constraintContext inline_ref_constraint() {
			return getRuleContext(Inline_ref_constraintContext.class,0);
		}
		public List<Inline_constraintContext> inline_constraint() {
			return getRuleContexts(Inline_constraintContext.class);
		}
		public Inline_constraintContext inline_constraint(int i) {
			return getRuleContext(Inline_constraintContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLSQLParser.COMMA, i);
		}
		public Out_of_line_constraintContext out_of_line_constraint() {
			return getRuleContext(Out_of_line_constraintContext.class,0);
		}
		public Out_of_line_ref_constraintContext out_of_line_ref_constraint() {
			return getRuleContext(Out_of_line_ref_constraintContext.class,0);
		}
		public Supplemental_logging_propsContext supplemental_logging_props() {
			return getRuleContext(Supplemental_logging_propsContext.class,0);
		}
		public Object_propertiesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_object_properties; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterObject_properties(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitObject_properties(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitObject_properties(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Object_propertiesContext object_properties() throws RecognitionException {
		Object_propertiesContext _localctx = new Object_propertiesContext(_ctx, getState());
		enterRule(_localctx, 168, RULE_object_properties);
		int _la;
		try {
			int _alt;
			setState(2554);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,280,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2534);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,275,_ctx) ) {
				case 1:
					{
					setState(2532);
					column_name();
					}
					break;
				case 2:
					{
					setState(2533);
					attribute_name();
					}
					break;
				}
				setState(2538);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEFAULT) {
					{
					setState(2536);
					match(DEFAULT);
					setState(2537);
					expression(0);
					}
				}

				setState(2549);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,279,_ctx) ) {
				case 1:
					{
					setState(2544); 
					_errHandler.sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							{
							setState(2541);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(2540);
								match(COMMA);
								}
							}

							setState(2543);
							inline_constraint();
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						setState(2546); 
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,278,_ctx);
					} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
					}
					break;
				case 2:
					{
					setState(2548);
					inline_ref_constraint();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2551);
				out_of_line_constraint();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2552);
				out_of_line_ref_constraint();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2553);
				supplemental_logging_props();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Inline_constraintContext extends ParserRuleContext {
		public TerminalNode NULL() { return getToken(PLSQLParser.NULL, 0); }
		public TerminalNode UNIQUE() { return getToken(PLSQLParser.UNIQUE, 0); }
		public TerminalNode PRIMARY() { return getToken(PLSQLParser.PRIMARY, 0); }
		public TerminalNode KEY() { return getToken(PLSQLParser.KEY, 0); }
		public References_clauseContext references_clause() {
			return getRuleContext(References_clauseContext.class,0);
		}
		public Check_constraintContext check_constraint() {
			return getRuleContext(Check_constraintContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(PLSQLParser.CONSTRAINT, 0); }
		public Constraint_nameContext constraint_name() {
			return getRuleContext(Constraint_nameContext.class,0);
		}
		public Constraint_stateContext constraint_state() {
			return getRuleContext(Constraint_stateContext.class,0);
		}
		public TerminalNode NOT() { return getToken(PLSQLParser.NOT, 0); }
		public Inline_constraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_inline_constraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterInline_constraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitInline_constraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitInline_constraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Inline_constraintContext inline_constraint() throws RecognitionException {
		Inline_constraintContext _localctx = new Inline_constraintContext(_ctx, getState());
		enterRule(_localctx, 170, RULE_inline_constraint);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2558);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONSTRAINT) {
				{
				setState(2556);
				match(CONSTRAINT);
				setState(2557);
				constraint_name();
				}
			}

			setState(2569);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NOT:
			case NULL:
				{
				setState(2561);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(2560);
					match(NOT);
					}
				}

				setState(2563);
				match(NULL);
				}
				break;
			case UNIQUE:
				{
				setState(2564);
				match(UNIQUE);
				}
				break;
			case PRIMARY:
				{
				setState(2565);
				match(PRIMARY);
				setState(2566);
				match(KEY);
				}
				break;
			case REFERENCES:
				{
				setState(2567);
				references_clause();
				}
				break;
			case CHECK:
				{
				setState(2568);
				check_constraint();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2572);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,284,_ctx) ) {
			case 1:
				{
				setState(2571);
				constraint_state();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class References_clauseContext extends ParserRuleContext {
		public TerminalNode REFERENCES() { return getToken(PLSQLParser.REFERENCES, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public Paren_column_listContext paren_column_list() {
			return getRuleContext(Paren_column_listContext.class,0);
		}
		public References_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_references_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterReferences_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitReferences_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitReferences_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final References_clauseContext references_clause() throws RecognitionException {
		References_clauseContext _localctx = new References_clauseContext(_ctx, getState());
		enterRule(_localctx, 172, RULE_references_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2574);
			match(REFERENCES);
			setState(2575);
			tableview_name();
			setState(2576);
			paren_column_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Paren_column_listContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(PLSQLParser.LEFT_PAREN, 0); }
		public Column_listContext column_list() {
			return getRuleContext(Column_listContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PLSQLParser.RIGHT_PAREN, 0); }
		public Paren_column_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_paren_column_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterParen_column_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitParen_column_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitParen_column_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Paren_column_listContext paren_column_list() throws RecognitionException {
		Paren_column_listContext _localctx = new Paren_column_listContext(_ctx, getState());
		enterRule(_localctx, 174, RULE_paren_column_list);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2578);
			match(LEFT_PAREN);
			setState(2579);
			column_list();
			setState(2580);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_listContext extends ParserRuleContext {
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLSQLParser.COMMA, i);
		}
		public Column_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterColumn_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitColumn_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitColumn_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Column_listContext column_list() throws RecognitionException {
		Column_listContext _localctx = new Column_listContext(_ctx, getState());
		enterRule(_localctx, 176, RULE_column_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2586); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(2583);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(2582);
					match(COMMA);
					}
				}

				setState(2585);
				column_name();
				}
				}
				setState(2588); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BUILD) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (CHR - 65)) | (1L << (CLOB - 65)) | (1L << (CLOSE - 65)) | (1L << (CLUSTER - 65)) | (1L << (COALESCE - 65)) | (1L << (COLLECT - 65)) | (1L << (COLUMNS - 65)) | (1L << (COMMENT - 65)) | (1L << (COMMIT - 65)) | (1L << (COMMITTED - 65)) | (1L << (COMPATIBILITY - 65)) | (1L << (COMPILE - 65)) | (1L << (COMPLETE - 65)) | (1L << (COMPOUND - 65)) | (1L << (CONCAT - 65)) | (1L << (CONSTANT - 65)) | (1L << (CONSTRAINT - 65)) | (1L << (CONSTRAINTS - 65)) | (1L << (CONSTRUCTOR - 65)) | (1L << (CONTENT - 65)) | (1L << (CONTEXT - 65)) | (1L << (CONTINUE - 65)) | (1L << (CONVERT - 65)) | (1L << (CORRUPT_XID - 65)) | (1L << (CORRUPT_XID_ALL - 65)) | (1L << (COST - 65)) | (1L << (COUNT - 65)) | (1L << (CROSS - 65)) | (1L << (CUBE - 65)) | (1L << (CURRENT_USER - 65)) | (1L << (CURSOR - 65)) | (1L << (CUSTOMDATUM - 65)) | (1L << (CYCLE - 65)) | (1L << (DATA - 65)) | (1L << (DATABASE - 65)) | (1L << (DATE - 65)) | (1L << (DAY - 65)) | (1L << (DB_ROLE_CHANGE - 65)) | (1L << (DBTIMEZONE - 65)) | (1L << (DDL - 65)) | (1L << (DEBUG - 65)) | (1L << (DEC - 65)) | (1L << (DECIMAL - 65)) | (1L << (DECODE - 65)) | (1L << (DECOMPOSE - 65)) | (1L << (DECREMENT - 65)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DEMAND - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (EDITIONING - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENFORCED - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FAST - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)) | (1L << (FOLLOWING - 129)) | (1L << (FOLLOWS - 129)) | (1L << (FORALL - 129)) | (1L << (FORCE - 129)))) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & ((1L << (FULL - 197)) | (1L << (FUNCTION - 197)) | (1L << (GROUPING - 197)) | (1L << (HASH - 197)) | (1L << (HIDE - 197)) | (1L << (HOUR - 197)) | (1L << (IGNORE - 197)) | (1L << (IMMEDIATE - 197)) | (1L << (INCLUDE - 197)) | (1L << (INCLUDING - 197)) | (1L << (INCREMENT - 197)) | (1L << (INDENT - 197)) | (1L << (INDEXED - 197)) | (1L << (INDICATOR - 197)) | (1L << (INDICES - 197)) | (1L << (INFINITE - 197)) | (1L << (INLINE - 197)) | (1L << (INNER - 197)) | (1L << (INOUT - 197)) | (1L << (INSTANTIABLE - 197)) | (1L << (INSTEAD - 197)) | (1L << (INT - 197)) | (1L << (INTEGER - 197)) | (1L << (INTERVAL - 197)) | (1L << (INVALIDATE - 197)) | (1L << (ISOLATION - 197)) | (1L << (ITERATE - 197)) | (1L << (JAVA - 197)) | (1L << (JOIN - 197)) | (1L << (KEEP - 197)) | (1L << (LANGUAGE - 197)) | (1L << (LAST - 197)) | (1L << (LAST_VALUE - 197)) | (1L << (LEADING - 197)) | (1L << (LEFT - 197)) | (1L << (LEVEL - 197)))) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & ((1L << (LIBRARY - 261)) | (1L << (LIKE2 - 261)) | (1L << (LIKE4 - 261)) | (1L << (LIKEC - 261)) | (1L << (LIMIT - 261)) | (1L << (LIST - 261)) | (1L << (LOCAL - 261)) | (1L << (LOCKED - 261)) | (1L << (LOG - 261)) | (1L << (LOGOFF - 261)) | (1L << (LOGON - 261)) | (1L << (LONG - 261)) | (1L << (LOOP - 261)) | (1L << (MAIN - 261)) | (1L << (MAP - 261)) | (1L << (MASTER - 261)) | (1L << (MATCHED - 261)) | (1L << (MAXVALUE - 261)) | (1L << (MEASURES - 261)) | (1L << (MEMBER - 261)) | (1L << (MERGE - 261)) | (1L << (MINUTE - 261)) | (1L << (MINVALUE - 261)) | (1L << (MLSLABEL - 261)) | (1L << (MODEL - 261)) | (1L << (MODIFY - 261)) | (1L << (MONTH - 261)) | (1L << (MULTISET - 261)) | (1L << (NAME - 261)) | (1L << (NAN - 261)) | (1L << (NATURAL - 261)) | (1L << (NATURALN - 261)) | (1L << (NAV - 261)) | (1L << (NCHAR - 261)) | (1L << (NCHAR_CS - 261)) | (1L << (NCLOB - 261)) | (1L << (NESTED - 261)) | (1L << (NEVER - 261)) | (1L << (NEW - 261)) | (1L << (NO - 261)) | (1L << (NOAUDIT - 261)) | (1L << (NOCOPY - 261)) | (1L << (NOCYCLE - 261)) | (1L << (NOENTITYESCAPING - 261)))) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & ((1L << (NONE - 329)) | (1L << (NOSCHEMACHECK - 329)) | (1L << (NVL - 329)) | (1L << (NULLS - 329)) | (1L << (NUMBER - 329)) | (1L << (NUMERIC - 329)) | (1L << (NVARCHAR2 - 329)) | (1L << (MATERIALIZED - 329)) | (1L << (OBJECT - 329)) | (1L << (OFF - 329)) | (1L << (OID - 329)) | (1L << (OLD - 329)) | (1L << (ONLY - 329)) | (1L << (OPEN - 329)) | (1L << (ORADATA - 329)) | (1L << (ORDINALITY - 329)) | (1L << (OSERROR - 329)) | (1L << (OUT - 329)) | (1L << (OUTER - 329)) | (1L << (OVER - 329)) | (1L << (OVERRIDING - 329)) | (1L << (PACKAGE - 329)) | (1L << (PARALLEL_ENABLE - 329)) | (1L << (PARAMETERS - 329)) | (1L << (PARENT - 329)) | (1L << (PARTITION - 329)) | (1L << (PASSING - 329)) | (1L << (PATH - 329)) | (1L << (PIPELINED - 329)) | (1L << (PLAN - 329)) | (1L << (PLS_INTEGER - 329)) | (1L << (POSITIVE - 329)) | (1L << (POSITIVEN - 329)) | (1L << (PRAGMA - 329)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (PREBUILT - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)) | (1L << (PRESENT - 393)) | (1L << (PUBLIC - 393)) | (1L << (RAISE - 393)) | (1L << (RANGE - 393)) | (1L << (RAW - 393)) | (1L << (READ - 393)) | (1L << (REAL - 393)) | (1L << (RECORD - 393)) | (1L << (REDUCED - 393)) | (1L << (REF - 393)) | (1L << (REFERENCE - 393)) | (1L << (REFERENCING - 393)) | (1L << (REFRESH - 393)) | (1L << (REJECT - 393)) | (1L << (RELIES_ON - 393)) | (1L << (RENAME - 393)) | (1L << (REPLACE - 393)) | (1L << (RESPECT - 393)) | (1L << (RESTRICT_REFERENCES - 393)) | (1L << (RESULT - 393)) | (1L << (RESULT_CACHE - 393)) | (1L << (RETURN - 393)) | (1L << (RETURNING - 393)) | (1L << (REUSE - 393)) | (1L << (REVERSE - 393)) | (1L << (REWRITE - 393)) | (1L << (RIGHT - 393)) | (1L << (ROLE - 393)) | (1L << (ROLLBACK - 393)) | (1L << (ROLLUP - 393)) | (1L << (ROW - 393)) | (1L << (ROWID - 393)) | (1L << (ROWS - 393)) | (1L << (RULES - 393)) | (1L << (SAMPLE - 393)) | (1L << (SAVE - 393)) | (1L << (SAVEPOINT - 393)) | (1L << (SCHEMA - 393)) | (1L << (SCHEMACHECK - 393)) | (1L << (SCN - 393)) | (1L << (SECOND - 393)))) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & ((1L << (SEED - 458)) | (1L << (SEGMENT - 458)) | (1L << (SELF - 458)) | (1L << (SEQUENTIAL - 458)) | (1L << (SERIALIZABLE - 458)) | (1L << (SERIALLY_REUSABLE - 458)) | (1L << (SERVERERROR - 458)) | (1L << (SESSIONTIMEZONE - 458)) | (1L << (SET - 458)) | (1L << (SETS - 458)) | (1L << (SETTINGS - 458)) | (1L << (SHOW - 458)) | (1L << (SHUTDOWN - 458)) | (1L << (SIBLINGS - 458)) | (1L << (SIGNTYPE - 458)) | (1L << (SIMPLE_INTEGER - 458)) | (1L << (SINGLE - 458)) | (1L << (SIZE - 458)) | (1L << (SKIP_ - 458)) | (1L << (SMALLINT - 458)) | (1L << (SNAPSHOT - 458)) | (1L << (SOME - 458)) | (1L << (SPECIFICATION - 458)) | (1L << (SQLDATA - 458)) | (1L << (SQLERROR - 458)) | (1L << (STANDALONE - 458)) | (1L << (STARTUP - 458)) | (1L << (STATEMENT - 458)) | (1L << (STATEMENT_ID - 458)) | (1L << (STATIC - 458)) | (1L << (STATISTICS - 458)) | (1L << (STRING - 458)) | (1L << (SUBMULTISET - 458)) | (1L << (SUBPARTITION - 458)) | (1L << (SUBSTITUTABLE - 458)) | (1L << (SUBSTRING - 458)) | (1L << (SUBTYPE - 458)) | (1L << (SUCCESS - 458)) | (1L << (SUSPEND - 458)) | (1L << (TABLES - 458)) | (1L << (TIME - 458)) | (1L << (TIMESTAMP - 458)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 458)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 458)) | (1L << (TIMESTAMP_UNCONSTRAINED - 458)))) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & ((1L << (TIMEZONE_ABBR - 522)) | (1L << (TIMEZONE_HOUR - 522)) | (1L << (TIMEZONE_MINUTE - 522)) | (1L << (TIMEZONE_REGION - 522)) | (1L << (TO_CHAR - 522)) | (1L << (TO_DATE - 522)) | (1L << (TRAILING - 522)) | (1L << (TRANSACTION - 522)) | (1L << (TRANSLATE - 522)) | (1L << (TREAT - 522)) | (1L << (TRIGGER - 522)) | (1L << (TRIM - 522)) | (1L << (TRUNCATE - 522)) | (1L << (TRUSTED - 522)) | (1L << (TYPE - 522)) | (1L << (UNBOUNDED - 522)) | (1L << (UNDER - 522)) | (1L << (UNLIMITED - 522)) | (1L << (UNTIL - 522)) | (1L << (UPDATED - 522)) | (1L << (UPSERT - 522)) | (1L << (UROWID - 522)) | (1L << (USE - 522)) | (1L << (VALIDATE - 522)) | (1L << (VALUE - 522)) | (1L << (VARCHAR - 522)) | (1L << (VARCHAR2 - 522)) | (1L << (VARIABLE - 522)) | (1L << (VARRAY - 522)) | (1L << (VARYING - 522)) | (1L << (VERBOSE - 522)) | (1L << (VERSION - 522)) | (1L << (VERSIONS - 522)) | (1L << (VIEW - 522)) | (1L << (WAIT - 522)) | (1L << (WARNING - 522)) | (1L << (WELLFORMED - 522)) | (1L << (WHENEVER - 522)) | (1L << (WHILE - 522)) | (1L << (WITHOUT - 522)) | (1L << (WITHIN - 522)) | (1L << (WORK - 522)) | (1L << (WRITE - 522)) | (1L << (XML - 522)) | (1L << (XMLAGG - 522)) | (1L << (XMLATTRIBUTES - 522)))) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & ((1L << (XMLCAST - 586)) | (1L << (XMLCOLATTVAL - 586)) | (1L << (XMLELEMENT - 586)) | (1L << (XMLEXISTS - 586)) | (1L << (XMLFOREST - 586)) | (1L << (XMLNAMESPACES - 586)) | (1L << (XMLPARSE - 586)) | (1L << (XMLPI - 586)) | (1L << (XMLQUERY - 586)) | (1L << (XMLROOT - 586)) | (1L << (XMLSERIALIZE - 586)) | (1L << (XMLTABLE - 586)) | (1L << (YEAR - 586)) | (1L << (YES - 586)) | (1L << (YMINTERVAL_UNCONSTRAINED - 586)) | (1L << (ZONE - 586)) | (1L << (PREDICTION - 586)) | (1L << (PREDICTION_BOUNDS - 586)) | (1L << (PREDICTION_COST - 586)) | (1L << (PREDICTION_DETAILS - 586)) | (1L << (PREDICTION_PROBABILITY - 586)) | (1L << (PREDICTION_SET - 586)) | (1L << (CUME_DIST - 586)) | (1L << (DENSE_RANK - 586)) | (1L << (LISTAGG - 586)) | (1L << (PERCENT_RANK - 586)) | (1L << (PERCENTILE_CONT - 586)) | (1L << (PERCENTILE_DISC - 586)) | (1L << (RANK - 586)) | (1L << (AVG - 586)) | (1L << (CORR - 586)) | (1L << (LAG - 586)) | (1L << (LEAD - 586)) | (1L << (MAX - 586)) | (1L << (MEDIAN - 586)) | (1L << (MIN - 586)) | (1L << (NTILE - 586)) | (1L << (RATIO_TO_REPORT - 586)) | (1L << (ROW_NUMBER - 586)) | (1L << (SUM - 586)) | (1L << (VARIANCE - 586)) | (1L << (REGR_ - 586)) | (1L << (STDDEV - 586)) | (1L << (VAR_ - 586)) | (1L << (COVAR_ - 586)) | (1L << (DELIMITED_ID - 586)))) != 0) || _la==COMMA || _la==REGULAR_ID );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Check_constraintContext extends ParserRuleContext {
		public TerminalNode CHECK() { return getToken(PLSQLParser.CHECK, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PLSQLParser.LEFT_PAREN, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PLSQLParser.RIGHT_PAREN, 0); }
		public TerminalNode DISABLE() { return getToken(PLSQLParser.DISABLE, 0); }
		public Check_constraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_check_constraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterCheck_constraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitCheck_constraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitCheck_constraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Check_constraintContext check_constraint() throws RecognitionException {
		Check_constraintContext _localctx = new Check_constraintContext(_ctx, getState());
		enterRule(_localctx, 178, RULE_check_constraint);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2590);
			match(CHECK);
			setState(2591);
			match(LEFT_PAREN);
			setState(2592);
			condition();
			setState(2593);
			match(RIGHT_PAREN);
			setState(2595);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,287,_ctx) ) {
			case 1:
				{
				setState(2594);
				match(DISABLE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Constraint_stateContext extends ParserRuleContext {
		public List<TerminalNode> DEFERRABLE() { return getTokens(PLSQLParser.DEFERRABLE); }
		public TerminalNode DEFERRABLE(int i) {
			return getToken(PLSQLParser.DEFERRABLE, i);
		}
		public List<TerminalNode> INITIALLY() { return getTokens(PLSQLParser.INITIALLY); }
		public TerminalNode INITIALLY(int i) {
			return getToken(PLSQLParser.INITIALLY, i);
		}
		public List<Using_index_clauseContext> using_index_clause() {
			return getRuleContexts(Using_index_clauseContext.class);
		}
		public Using_index_clauseContext using_index_clause(int i) {
			return getRuleContext(Using_index_clauseContext.class,i);
		}
		public List<TerminalNode> IMMEDIATE() { return getTokens(PLSQLParser.IMMEDIATE); }
		public TerminalNode IMMEDIATE(int i) {
			return getToken(PLSQLParser.IMMEDIATE, i);
		}
		public List<TerminalNode> DEFERRED() { return getTokens(PLSQLParser.DEFERRED); }
		public TerminalNode DEFERRED(int i) {
			return getToken(PLSQLParser.DEFERRED, i);
		}
		public List<TerminalNode> RELY() { return getTokens(PLSQLParser.RELY); }
		public TerminalNode RELY(int i) {
			return getToken(PLSQLParser.RELY, i);
		}
		public List<TerminalNode> NORELY() { return getTokens(PLSQLParser.NORELY); }
		public TerminalNode NORELY(int i) {
			return getToken(PLSQLParser.NORELY, i);
		}
		public List<TerminalNode> ENABLE() { return getTokens(PLSQLParser.ENABLE); }
		public TerminalNode ENABLE(int i) {
			return getToken(PLSQLParser.ENABLE, i);
		}
		public List<TerminalNode> DISABLE() { return getTokens(PLSQLParser.DISABLE); }
		public TerminalNode DISABLE(int i) {
			return getToken(PLSQLParser.DISABLE, i);
		}
		public List<TerminalNode> VALIDATE() { return getTokens(PLSQLParser.VALIDATE); }
		public TerminalNode VALIDATE(int i) {
			return getToken(PLSQLParser.VALIDATE, i);
		}
		public List<TerminalNode> NOVALIDATE() { return getTokens(PLSQLParser.NOVALIDATE); }
		public TerminalNode NOVALIDATE(int i) {
			return getToken(PLSQLParser.NOVALIDATE, i);
		}
		public List<TerminalNode> NOT() { return getTokens(PLSQLParser.NOT); }
		public TerminalNode NOT(int i) {
			return getToken(PLSQLParser.NOT, i);
		}
		public Constraint_stateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraint_state; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterConstraint_state(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitConstraint_state(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitConstraint_state(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Constraint_stateContext constraint_state() throws RecognitionException {
		Constraint_stateContext _localctx = new Constraint_stateContext(_ctx, getState());
		enterRule(_localctx, 180, RULE_constraint_state);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2607); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					setState(2607);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case DEFERRABLE:
					case NOT:
						{
						setState(2598);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(2597);
							match(NOT);
							}
						}

						setState(2600);
						match(DEFERRABLE);
						}
						break;
					case INITIALLY:
						{
						setState(2601);
						match(INITIALLY);
						setState(2602);
						_la = _input.LA(1);
						if ( !(_la==DEFERRED || _la==IMMEDIATE) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					case NORELY:
					case RELY:
						{
						setState(2603);
						_la = _input.LA(1);
						if ( !(_la==NORELY || _la==RELY) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					case DISABLE:
					case ENABLE:
						{
						setState(2604);
						_la = _input.LA(1);
						if ( !(_la==DISABLE || _la==ENABLE) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					case NOVALIDATE:
					case VALIDATE:
						{
						setState(2605);
						_la = _input.LA(1);
						if ( !(_la==NOVALIDATE || _la==VALIDATE) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					case USING:
						{
						setState(2606);
						using_index_clause();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2609); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,290,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Using_index_clauseContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(PLSQLParser.USING, 0); }
		public TerminalNode INDEX() { return getToken(PLSQLParser.INDEX, 0); }
		public Index_nameContext index_name() {
			return getRuleContext(Index_nameContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(PLSQLParser.LEFT_PAREN, 0); }
		public Create_indexContext create_index() {
			return getRuleContext(Create_indexContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PLSQLParser.RIGHT_PAREN, 0); }
		public Index_attributesContext index_attributes() {
			return getRuleContext(Index_attributesContext.class,0);
		}
		public Using_index_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_using_index_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterUsing_index_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitUsing_index_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitUsing_index_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Using_index_clauseContext using_index_clause() throws RecognitionException {
		Using_index_clauseContext _localctx = new Using_index_clauseContext(_ctx, getState());
		enterRule(_localctx, 182, RULE_using_index_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2611);
			match(USING);
			setState(2612);
			match(INDEX);
			setState(2619);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,291,_ctx) ) {
			case 1:
				{
				setState(2613);
				index_name();
				}
				break;
			case 2:
				{
				setState(2614);
				match(LEFT_PAREN);
				setState(2615);
				create_index();
				setState(2616);
				match(RIGHT_PAREN);
				}
				break;
			case 3:
				{
				setState(2618);
				index_attributes();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Varray_col_propertiesContext extends ParserRuleContext {
		public TerminalNode VARRAY() { return getToken(PLSQLParser.VARRAY, 0); }
		public Varray_itemContext varray_item() {
			return getRuleContext(Varray_itemContext.class,0);
		}
		public Varray_storage_clauseContext varray_storage_clause() {
			return getRuleContext(Varray_storage_clauseContext.class,0);
		}
		public Substitutable_column_clauseContext substitutable_column_clause() {
			return getRuleContext(Substitutable_column_clauseContext.class,0);
		}
		public Varray_col_propertiesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_varray_col_properties; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterVarray_col_properties(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitVarray_col_properties(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitVarray_col_properties(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Varray_col_propertiesContext varray_col_properties() throws RecognitionException {
		Varray_col_propertiesContext _localctx = new Varray_col_propertiesContext(_ctx, getState());
		enterRule(_localctx, 184, RULE_varray_col_properties);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2621);
			match(VARRAY);
			setState(2622);
			varray_item();
			setState(2628);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,293,_ctx) ) {
			case 1:
				{
				setState(2624);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ELEMENT || _la==IS || _la==NOT || _la==SUBSTITUTABLE) {
					{
					setState(2623);
					substitutable_column_clause();
					}
				}

				setState(2626);
				varray_storage_clause();
				}
				break;
			case 2:
				{
				setState(2627);
				substitutable_column_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Varray_storage_clauseContext extends ParserRuleContext {
		public TerminalNode STORE() { return getToken(PLSQLParser.STORE, 0); }
		public TerminalNode AS() { return getToken(PLSQLParser.AS, 0); }
		public TerminalNode LOB() { return getToken(PLSQLParser.LOB, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PLSQLParser.LEFT_PAREN, 0); }
		public Lob_storage_parametersContext lob_storage_parameters() {
			return getRuleContext(Lob_storage_parametersContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PLSQLParser.RIGHT_PAREN, 0); }
		public Lob_segnameContext lob_segname() {
			return getRuleContext(Lob_segnameContext.class,0);
		}
		public TerminalNode SECUREFILE() { return getToken(PLSQLParser.SECUREFILE, 0); }
		public TerminalNode BASICFILE() { return getToken(PLSQLParser.BASICFILE, 0); }
		public Varray_storage_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_varray_storage_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterVarray_storage_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitVarray_storage_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitVarray_storage_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Varray_storage_clauseContext varray_storage_clause() throws RecognitionException {
		Varray_storage_clauseContext _localctx = new Varray_storage_clauseContext(_ctx, getState());
		enterRule(_localctx, 186, RULE_varray_storage_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2630);
			match(STORE);
			setState(2631);
			match(AS);
			setState(2633);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==BASICFILE || _la==SECUREFILE) {
				{
				setState(2632);
				_la = _input.LA(1);
				if ( !(_la==BASICFILE || _la==SECUREFILE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(2635);
			match(LOB);
			setState(2644);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,296,_ctx) ) {
			case 1:
				{
				setState(2637);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BUILD) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (CHR - 65)) | (1L << (CLOB - 65)) | (1L << (CLOSE - 65)) | (1L << (CLUSTER - 65)) | (1L << (COALESCE - 65)) | (1L << (COLLECT - 65)) | (1L << (COLUMNS - 65)) | (1L << (COMMENT - 65)) | (1L << (COMMIT - 65)) | (1L << (COMMITTED - 65)) | (1L << (COMPATIBILITY - 65)) | (1L << (COMPILE - 65)) | (1L << (COMPLETE - 65)) | (1L << (COMPOUND - 65)) | (1L << (CONCAT - 65)) | (1L << (CONSTANT - 65)) | (1L << (CONSTRAINT - 65)) | (1L << (CONSTRAINTS - 65)) | (1L << (CONSTRUCTOR - 65)) | (1L << (CONTENT - 65)) | (1L << (CONTEXT - 65)) | (1L << (CONTINUE - 65)) | (1L << (CONVERT - 65)) | (1L << (CORRUPT_XID - 65)) | (1L << (CORRUPT_XID_ALL - 65)) | (1L << (COST - 65)) | (1L << (COUNT - 65)) | (1L << (CROSS - 65)) | (1L << (CUBE - 65)) | (1L << (CURRENT_USER - 65)) | (1L << (CURSOR - 65)) | (1L << (CUSTOMDATUM - 65)) | (1L << (CYCLE - 65)) | (1L << (DATA - 65)) | (1L << (DATABASE - 65)) | (1L << (DATE - 65)) | (1L << (DAY - 65)) | (1L << (DB_ROLE_CHANGE - 65)) | (1L << (DBTIMEZONE - 65)) | (1L << (DDL - 65)) | (1L << (DEBUG - 65)) | (1L << (DEC - 65)) | (1L << (DECIMAL - 65)) | (1L << (DECODE - 65)) | (1L << (DECOMPOSE - 65)) | (1L << (DECREMENT - 65)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DEMAND - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (EDITIONING - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENFORCED - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FAST - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)) | (1L << (FOLLOWING - 129)) | (1L << (FOLLOWS - 129)) | (1L << (FORALL - 129)) | (1L << (FORCE - 129)))) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & ((1L << (FULL - 197)) | (1L << (FUNCTION - 197)) | (1L << (GROUPING - 197)) | (1L << (HASH - 197)) | (1L << (HIDE - 197)) | (1L << (HOUR - 197)) | (1L << (IGNORE - 197)) | (1L << (IMMEDIATE - 197)) | (1L << (INCLUDE - 197)) | (1L << (INCLUDING - 197)) | (1L << (INCREMENT - 197)) | (1L << (INDENT - 197)) | (1L << (INDEXED - 197)) | (1L << (INDICATOR - 197)) | (1L << (INDICES - 197)) | (1L << (INFINITE - 197)) | (1L << (INLINE - 197)) | (1L << (INNER - 197)) | (1L << (INOUT - 197)) | (1L << (INSTANTIABLE - 197)) | (1L << (INSTEAD - 197)) | (1L << (INT - 197)) | (1L << (INTEGER - 197)) | (1L << (INTERVAL - 197)) | (1L << (INVALIDATE - 197)) | (1L << (ISOLATION - 197)) | (1L << (ITERATE - 197)) | (1L << (JAVA - 197)) | (1L << (JOIN - 197)) | (1L << (KEEP - 197)) | (1L << (LANGUAGE - 197)) | (1L << (LAST - 197)) | (1L << (LAST_VALUE - 197)) | (1L << (LEADING - 197)) | (1L << (LEFT - 197)) | (1L << (LEVEL - 197)))) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & ((1L << (LIBRARY - 261)) | (1L << (LIKE2 - 261)) | (1L << (LIKE4 - 261)) | (1L << (LIKEC - 261)) | (1L << (LIMIT - 261)) | (1L << (LIST - 261)) | (1L << (LOCAL - 261)) | (1L << (LOCKED - 261)) | (1L << (LOG - 261)) | (1L << (LOGOFF - 261)) | (1L << (LOGON - 261)) | (1L << (LONG - 261)) | (1L << (LOOP - 261)) | (1L << (MAIN - 261)) | (1L << (MAP - 261)) | (1L << (MASTER - 261)) | (1L << (MATCHED - 261)) | (1L << (MAXVALUE - 261)) | (1L << (MEASURES - 261)) | (1L << (MEMBER - 261)) | (1L << (MERGE - 261)) | (1L << (MINUTE - 261)) | (1L << (MINVALUE - 261)) | (1L << (MLSLABEL - 261)) | (1L << (MODEL - 261)) | (1L << (MODIFY - 261)) | (1L << (MONTH - 261)) | (1L << (MULTISET - 261)) | (1L << (NAME - 261)) | (1L << (NAN - 261)) | (1L << (NATURAL - 261)) | (1L << (NATURALN - 261)) | (1L << (NAV - 261)) | (1L << (NCHAR - 261)) | (1L << (NCHAR_CS - 261)) | (1L << (NCLOB - 261)) | (1L << (NESTED - 261)) | (1L << (NEVER - 261)) | (1L << (NEW - 261)) | (1L << (NO - 261)) | (1L << (NOAUDIT - 261)) | (1L << (NOCOPY - 261)) | (1L << (NOCYCLE - 261)) | (1L << (NOENTITYESCAPING - 261)))) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & ((1L << (NONE - 329)) | (1L << (NOSCHEMACHECK - 329)) | (1L << (NVL - 329)) | (1L << (NULLS - 329)) | (1L << (NUMBER - 329)) | (1L << (NUMERIC - 329)) | (1L << (NVARCHAR2 - 329)) | (1L << (MATERIALIZED - 329)) | (1L << (OBJECT - 329)) | (1L << (OFF - 329)) | (1L << (OID - 329)) | (1L << (OLD - 329)) | (1L << (ONLY - 329)) | (1L << (OPEN - 329)) | (1L << (ORADATA - 329)) | (1L << (ORDINALITY - 329)) | (1L << (OSERROR - 329)) | (1L << (OUT - 329)) | (1L << (OUTER - 329)) | (1L << (OVER - 329)) | (1L << (OVERRIDING - 329)) | (1L << (PACKAGE - 329)) | (1L << (PARALLEL_ENABLE - 329)) | (1L << (PARAMETERS - 329)) | (1L << (PARENT - 329)) | (1L << (PARTITION - 329)) | (1L << (PASSING - 329)) | (1L << (PATH - 329)) | (1L << (PIPELINED - 329)) | (1L << (PLAN - 329)) | (1L << (PLS_INTEGER - 329)) | (1L << (POSITIVE - 329)) | (1L << (POSITIVEN - 329)) | (1L << (PRAGMA - 329)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (PREBUILT - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)) | (1L << (PRESENT - 393)) | (1L << (PUBLIC - 393)) | (1L << (RAISE - 393)) | (1L << (RANGE - 393)) | (1L << (RAW - 393)) | (1L << (READ - 393)) | (1L << (REAL - 393)) | (1L << (RECORD - 393)) | (1L << (REDUCED - 393)) | (1L << (REF - 393)) | (1L << (REFERENCE - 393)) | (1L << (REFERENCING - 393)) | (1L << (REFRESH - 393)) | (1L << (REJECT - 393)) | (1L << (RELIES_ON - 393)) | (1L << (RENAME - 393)) | (1L << (REPLACE - 393)) | (1L << (RESPECT - 393)) | (1L << (RESTRICT_REFERENCES - 393)) | (1L << (RESULT - 393)) | (1L << (RESULT_CACHE - 393)) | (1L << (RETURN - 393)) | (1L << (RETURNING - 393)) | (1L << (REUSE - 393)) | (1L << (REVERSE - 393)) | (1L << (REWRITE - 393)) | (1L << (RIGHT - 393)) | (1L << (ROLE - 393)) | (1L << (ROLLBACK - 393)) | (1L << (ROLLUP - 393)) | (1L << (ROW - 393)) | (1L << (ROWID - 393)) | (1L << (ROWS - 393)) | (1L << (RULES - 393)) | (1L << (SAMPLE - 393)) | (1L << (SAVE - 393)) | (1L << (SAVEPOINT - 393)) | (1L << (SCHEMA - 393)) | (1L << (SCHEMACHECK - 393)) | (1L << (SCN - 393)) | (1L << (SECOND - 393)))) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & ((1L << (SEED - 458)) | (1L << (SEGMENT - 458)) | (1L << (SELF - 458)) | (1L << (SEQUENTIAL - 458)) | (1L << (SERIALIZABLE - 458)) | (1L << (SERIALLY_REUSABLE - 458)) | (1L << (SERVERERROR - 458)) | (1L << (SESSIONTIMEZONE - 458)) | (1L << (SET - 458)) | (1L << (SETS - 458)) | (1L << (SETTINGS - 458)) | (1L << (SHOW - 458)) | (1L << (SHUTDOWN - 458)) | (1L << (SIBLINGS - 458)) | (1L << (SIGNTYPE - 458)) | (1L << (SIMPLE_INTEGER - 458)) | (1L << (SINGLE - 458)) | (1L << (SIZE - 458)) | (1L << (SKIP_ - 458)) | (1L << (SMALLINT - 458)) | (1L << (SNAPSHOT - 458)) | (1L << (SOME - 458)) | (1L << (SPECIFICATION - 458)) | (1L << (SQLDATA - 458)) | (1L << (SQLERROR - 458)) | (1L << (STANDALONE - 458)) | (1L << (STARTUP - 458)) | (1L << (STATEMENT - 458)) | (1L << (STATEMENT_ID - 458)) | (1L << (STATIC - 458)) | (1L << (STATISTICS - 458)) | (1L << (STRING - 458)) | (1L << (SUBMULTISET - 458)) | (1L << (SUBPARTITION - 458)) | (1L << (SUBSTITUTABLE - 458)) | (1L << (SUBSTRING - 458)) | (1L << (SUBTYPE - 458)) | (1L << (SUCCESS - 458)) | (1L << (SUSPEND - 458)) | (1L << (TABLES - 458)) | (1L << (TIME - 458)) | (1L << (TIMESTAMP - 458)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 458)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 458)) | (1L << (TIMESTAMP_UNCONSTRAINED - 458)))) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & ((1L << (TIMEZONE_ABBR - 522)) | (1L << (TIMEZONE_HOUR - 522)) | (1L << (TIMEZONE_MINUTE - 522)) | (1L << (TIMEZONE_REGION - 522)) | (1L << (TO_CHAR - 522)) | (1L << (TO_DATE - 522)) | (1L << (TRAILING - 522)) | (1L << (TRANSACTION - 522)) | (1L << (TRANSLATE - 522)) | (1L << (TREAT - 522)) | (1L << (TRIGGER - 522)) | (1L << (TRIM - 522)) | (1L << (TRUNCATE - 522)) | (1L << (TRUSTED - 522)) | (1L << (TYPE - 522)) | (1L << (UNBOUNDED - 522)) | (1L << (UNDER - 522)) | (1L << (UNLIMITED - 522)) | (1L << (UNTIL - 522)) | (1L << (UPDATED - 522)) | (1L << (UPSERT - 522)) | (1L << (UROWID - 522)) | (1L << (USE - 522)) | (1L << (VALIDATE - 522)) | (1L << (VALUE - 522)) | (1L << (VARCHAR - 522)) | (1L << (VARCHAR2 - 522)) | (1L << (VARIABLE - 522)) | (1L << (VARRAY - 522)) | (1L << (VARYING - 522)) | (1L << (VERBOSE - 522)) | (1L << (VERSION - 522)) | (1L << (VERSIONS - 522)) | (1L << (VIEW - 522)) | (1L << (WAIT - 522)) | (1L << (WARNING - 522)) | (1L << (WELLFORMED - 522)) | (1L << (WHENEVER - 522)) | (1L << (WHILE - 522)) | (1L << (WITHOUT - 522)) | (1L << (WITHIN - 522)) | (1L << (WORK - 522)) | (1L << (WRITE - 522)) | (1L << (XML - 522)) | (1L << (XMLAGG - 522)) | (1L << (XMLATTRIBUTES - 522)))) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & ((1L << (XMLCAST - 586)) | (1L << (XMLCOLATTVAL - 586)) | (1L << (XMLELEMENT - 586)) | (1L << (XMLEXISTS - 586)) | (1L << (XMLFOREST - 586)) | (1L << (XMLNAMESPACES - 586)) | (1L << (XMLPARSE - 586)) | (1L << (XMLPI - 586)) | (1L << (XMLQUERY - 586)) | (1L << (XMLROOT - 586)) | (1L << (XMLSERIALIZE - 586)) | (1L << (XMLTABLE - 586)) | (1L << (YEAR - 586)) | (1L << (YES - 586)) | (1L << (YMINTERVAL_UNCONSTRAINED - 586)) | (1L << (ZONE - 586)) | (1L << (PREDICTION - 586)) | (1L << (PREDICTION_BOUNDS - 586)) | (1L << (PREDICTION_COST - 586)) | (1L << (PREDICTION_DETAILS - 586)) | (1L << (PREDICTION_PROBABILITY - 586)) | (1L << (PREDICTION_SET - 586)) | (1L << (CUME_DIST - 586)) | (1L << (DENSE_RANK - 586)) | (1L << (LISTAGG - 586)) | (1L << (PERCENT_RANK - 586)) | (1L << (PERCENTILE_CONT - 586)) | (1L << (PERCENTILE_DISC - 586)) | (1L << (RANK - 586)) | (1L << (AVG - 586)) | (1L << (CORR - 586)) | (1L << (LAG - 586)) | (1L << (LEAD - 586)) | (1L << (MAX - 586)) | (1L << (MEDIAN - 586)) | (1L << (MIN - 586)) | (1L << (NTILE - 586)) | (1L << (RATIO_TO_REPORT - 586)) | (1L << (ROW_NUMBER - 586)) | (1L << (SUM - 586)) | (1L << (VARIANCE - 586)) | (1L << (REGR_ - 586)) | (1L << (STDDEV - 586)) | (1L << (VAR_ - 586)) | (1L << (COVAR_ - 586)))) != 0) || _la==REGULAR_ID) {
					{
					setState(2636);
					lob_segname();
					}
				}

				setState(2639);
				match(LEFT_PAREN);
				setState(2640);
				lob_storage_parameters();
				setState(2641);
				match(RIGHT_PAREN);
				}
				break;
			case 2:
				{
				setState(2643);
				lob_segname();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Lob_storage_parametersContext extends ParserRuleContext {
		public TerminalNode TABLESPACE() { return getToken(PLSQLParser.TABLESPACE, 0); }
		public TablespaceContext tablespace() {
			return getRuleContext(TablespaceContext.class,0);
		}
		public Lob_parametersContext lob_parameters() {
			return getRuleContext(Lob_parametersContext.class,0);
		}
		public Storage_clauseContext storage_clause() {
			return getRuleContext(Storage_clauseContext.class,0);
		}
		public Lob_storage_parametersContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lob_storage_parameters; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterLob_storage_parameters(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitLob_storage_parameters(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitLob_storage_parameters(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Lob_storage_parametersContext lob_storage_parameters() throws RecognitionException {
		Lob_storage_parametersContext _localctx = new Lob_storage_parametersContext(_ctx, getState());
		enterRule(_localctx, 188, RULE_lob_storage_parameters);
		int _la;
		try {
			setState(2653);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TABLESPACE:
				enterOuterAlt(_localctx, 1);
				{
				setState(2646);
				match(TABLESPACE);
				setState(2647);
				tablespace();
				}
				break;
			case CACHE:
			case CHUNK:
			case COMPRESS:
			case DECRYPT:
			case DEDUPLICATE:
			case DISABLE:
			case ENABLE:
			case ENCRYPT:
			case FREEPOOLS:
			case KEEP_DUPLICATES:
			case NOCACHE:
			case NOCOMPRESS:
			case PCTVERSION:
			case RETENTION:
				enterOuterAlt(_localctx, 2);
				{
				{
				setState(2648);
				lob_parameters();
				setState(2650);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==STORAGE) {
					{
					setState(2649);
					storage_clause();
					}
				}

				}
				}
				break;
			case STORAGE:
				enterOuterAlt(_localctx, 3);
				{
				setState(2652);
				storage_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Lob_parametersContext extends ParserRuleContext {
		public List<TerminalNode> STORAGE() { return getTokens(PLSQLParser.STORAGE); }
		public TerminalNode STORAGE(int i) {
			return getToken(PLSQLParser.STORAGE, i);
		}
		public List<TerminalNode> IN() { return getTokens(PLSQLParser.IN); }
		public TerminalNode IN(int i) {
			return getToken(PLSQLParser.IN, i);
		}
		public List<TerminalNode> ROW() { return getTokens(PLSQLParser.ROW); }
		public TerminalNode ROW(int i) {
			return getToken(PLSQLParser.ROW, i);
		}
		public List<TerminalNode> CHUNK() { return getTokens(PLSQLParser.CHUNK); }
		public TerminalNode CHUNK(int i) {
			return getToken(PLSQLParser.CHUNK, i);
		}
		public List<TerminalNode> UNSIGNED_INTEGER() { return getTokens(PLSQLParser.UNSIGNED_INTEGER); }
		public TerminalNode UNSIGNED_INTEGER(int i) {
			return getToken(PLSQLParser.UNSIGNED_INTEGER, i);
		}
		public List<TerminalNode> PCTVERSION() { return getTokens(PLSQLParser.PCTVERSION); }
		public TerminalNode PCTVERSION(int i) {
			return getToken(PLSQLParser.PCTVERSION, i);
		}
		public List<TerminalNode> FREEPOOLS() { return getTokens(PLSQLParser.FREEPOOLS); }
		public TerminalNode FREEPOOLS(int i) {
			return getToken(PLSQLParser.FREEPOOLS, i);
		}
		public List<Lob_retention_clauseContext> lob_retention_clause() {
			return getRuleContexts(Lob_retention_clauseContext.class);
		}
		public Lob_retention_clauseContext lob_retention_clause(int i) {
			return getRuleContext(Lob_retention_clauseContext.class,i);
		}
		public List<Lob_deduplicate_clauseContext> lob_deduplicate_clause() {
			return getRuleContexts(Lob_deduplicate_clauseContext.class);
		}
		public Lob_deduplicate_clauseContext lob_deduplicate_clause(int i) {
			return getRuleContext(Lob_deduplicate_clauseContext.class,i);
		}
		public List<Lob_compression_clauseContext> lob_compression_clause() {
			return getRuleContexts(Lob_compression_clauseContext.class);
		}
		public Lob_compression_clauseContext lob_compression_clause(int i) {
			return getRuleContext(Lob_compression_clauseContext.class,i);
		}
		public List<TerminalNode> ENCRYPT() { return getTokens(PLSQLParser.ENCRYPT); }
		public TerminalNode ENCRYPT(int i) {
			return getToken(PLSQLParser.ENCRYPT, i);
		}
		public List<Encryption_specContext> encryption_spec() {
			return getRuleContexts(Encryption_specContext.class);
		}
		public Encryption_specContext encryption_spec(int i) {
			return getRuleContext(Encryption_specContext.class,i);
		}
		public List<TerminalNode> DECRYPT() { return getTokens(PLSQLParser.DECRYPT); }
		public TerminalNode DECRYPT(int i) {
			return getToken(PLSQLParser.DECRYPT, i);
		}
		public List<TerminalNode> ENABLE() { return getTokens(PLSQLParser.ENABLE); }
		public TerminalNode ENABLE(int i) {
			return getToken(PLSQLParser.ENABLE, i);
		}
		public List<TerminalNode> DISABLE() { return getTokens(PLSQLParser.DISABLE); }
		public TerminalNode DISABLE(int i) {
			return getToken(PLSQLParser.DISABLE, i);
		}
		public List<TerminalNode> CACHE() { return getTokens(PLSQLParser.CACHE); }
		public TerminalNode CACHE(int i) {
			return getToken(PLSQLParser.CACHE, i);
		}
		public List<TerminalNode> NOCACHE() { return getTokens(PLSQLParser.NOCACHE); }
		public TerminalNode NOCACHE(int i) {
			return getToken(PLSQLParser.NOCACHE, i);
		}
		public List<TerminalNode> READS() { return getTokens(PLSQLParser.READS); }
		public TerminalNode READS(int i) {
			return getToken(PLSQLParser.READS, i);
		}
		public List<Logging_clauseContext> logging_clause() {
			return getRuleContexts(Logging_clauseContext.class);
		}
		public Logging_clauseContext logging_clause(int i) {
			return getRuleContext(Logging_clauseContext.class,i);
		}
		public Lob_parametersContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lob_parameters; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterLob_parameters(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitLob_parameters(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitLob_parameters(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Lob_parametersContext lob_parameters() throws RecognitionException {
		Lob_parametersContext _localctx = new Lob_parametersContext(_ctx, getState());
		enterRule(_localctx, 190, RULE_lob_parameters);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2680); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				setState(2680);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case DISABLE:
				case ENABLE:
					{
					setState(2655);
					_la = _input.LA(1);
					if ( !(_la==DISABLE || _la==ENABLE) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(2656);
					match(STORAGE);
					setState(2657);
					match(IN);
					setState(2658);
					match(ROW);
					}
					break;
				case CHUNK:
					{
					setState(2659);
					match(CHUNK);
					setState(2660);
					match(UNSIGNED_INTEGER);
					}
					break;
				case PCTVERSION:
					{
					setState(2661);
					match(PCTVERSION);
					setState(2662);
					match(UNSIGNED_INTEGER);
					}
					break;
				case FREEPOOLS:
					{
					setState(2663);
					match(FREEPOOLS);
					setState(2664);
					match(UNSIGNED_INTEGER);
					}
					break;
				case RETENTION:
					{
					setState(2665);
					lob_retention_clause();
					}
					break;
				case DEDUPLICATE:
				case KEEP_DUPLICATES:
					{
					setState(2666);
					lob_deduplicate_clause();
					}
					break;
				case COMPRESS:
				case NOCOMPRESS:
					{
					setState(2667);
					lob_compression_clause();
					}
					break;
				case ENCRYPT:
					{
					setState(2668);
					match(ENCRYPT);
					setState(2669);
					encryption_spec();
					}
					break;
				case DECRYPT:
					{
					setState(2670);
					match(DECRYPT);
					}
					break;
				case CACHE:
				case NOCACHE:
					{
					setState(2675);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,299,_ctx) ) {
					case 1:
						{
						setState(2671);
						match(CACHE);
						}
						break;
					case 2:
						{
						setState(2672);
						match(NOCACHE);
						}
						break;
					case 3:
						{
						setState(2673);
						match(CACHE);
						setState(2674);
						match(READS);
						}
						break;
					}
					setState(2678);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==FILESYSTEM_LIKE_LOGGING || _la==LOGGING || _la==NOLOGGING) {
						{
						setState(2677);
						logging_clause();
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				setState(2682); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( ((((_la - 54)) & ~0x3f) == 0 && ((1L << (_la - 54)) & ((1L << (CACHE - 54)) | (1L << (CHUNK - 54)) | (1L << (COMPRESS - 54)))) != 0) || ((((_la - 126)) & ~0x3f) == 0 && ((1L << (_la - 126)) & ((1L << (DECRYPT - 126)) | (1L << (DEDUPLICATE - 126)) | (1L << (DISABLE - 126)) | (1L << (ENABLE - 126)) | (1L << (ENCRYPT - 126)))) != 0) || _la==FREEPOOLS || _la==KEEP_DUPLICATES || ((((_la - 319)) & ~0x3f) == 0 && ((1L << (_la - 319)) & ((1L << (NOCACHE - 319)) | (1L << (NOCOMPRESS - 319)) | (1L << (PCTVERSION - 319)))) != 0) || _la==RETENTION );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Lob_retention_clauseContext extends ParserRuleContext {
		public TerminalNode RETENTION() { return getToken(PLSQLParser.RETENTION, 0); }
		public TerminalNode MAX() { return getToken(PLSQLParser.MAX, 0); }
		public TerminalNode MIN() { return getToken(PLSQLParser.MIN, 0); }
		public TerminalNode UNSIGNED_INTEGER() { return getToken(PLSQLParser.UNSIGNED_INTEGER, 0); }
		public TerminalNode AUTO() { return getToken(PLSQLParser.AUTO, 0); }
		public TerminalNode NONE() { return getToken(PLSQLParser.NONE, 0); }
		public Lob_retention_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lob_retention_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterLob_retention_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitLob_retention_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitLob_retention_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Lob_retention_clauseContext lob_retention_clause() throws RecognitionException {
		Lob_retention_clauseContext _localctx = new Lob_retention_clauseContext(_ctx, getState());
		enterRule(_localctx, 192, RULE_lob_retention_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2684);
			match(RETENTION);
			setState(2690);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MAX:
				{
				setState(2685);
				match(MAX);
				}
				break;
			case MIN:
				{
				setState(2686);
				match(MIN);
				setState(2687);
				match(UNSIGNED_INTEGER);
				}
				break;
			case AUTO:
				{
				setState(2688);
				match(AUTO);
				}
				break;
			case NONE:
				{
				setState(2689);
				match(NONE);
				}
				break;
			case ALLOCATE:
			case CACHE:
			case CHUNK:
			case COMPRESS:
			case DEALLOCATE:
			case DECRYPT:
			case DEDUPLICATE:
			case DISABLE:
			case ENABLE:
			case ENCRYPT:
			case FREEPOOLS:
			case KEEP_DUPLICATES:
			case NOCACHE:
			case NOCOMPRESS:
			case PCTVERSION:
			case REBUILD:
			case RETENTION:
			case SHRINK:
			case STORAGE:
			case RIGHT_PAREN:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Lob_deduplicate_clauseContext extends ParserRuleContext {
		public TerminalNode DEDUPLICATE() { return getToken(PLSQLParser.DEDUPLICATE, 0); }
		public TerminalNode KEEP_DUPLICATES() { return getToken(PLSQLParser.KEEP_DUPLICATES, 0); }
		public Lob_deduplicate_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lob_deduplicate_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterLob_deduplicate_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitLob_deduplicate_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitLob_deduplicate_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Lob_deduplicate_clauseContext lob_deduplicate_clause() throws RecognitionException {
		Lob_deduplicate_clauseContext _localctx = new Lob_deduplicate_clauseContext(_ctx, getState());
		enterRule(_localctx, 194, RULE_lob_deduplicate_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2692);
			_la = _input.LA(1);
			if ( !(_la==DEDUPLICATE || _la==KEEP_DUPLICATES) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Lob_compression_clauseContext extends ParserRuleContext {
		public TerminalNode NOCOMPRESS() { return getToken(PLSQLParser.NOCOMPRESS, 0); }
		public TerminalNode COMPRESS() { return getToken(PLSQLParser.COMPRESS, 0); }
		public TerminalNode HIGH() { return getToken(PLSQLParser.HIGH, 0); }
		public TerminalNode MEDIUM() { return getToken(PLSQLParser.MEDIUM, 0); }
		public TerminalNode LOW() { return getToken(PLSQLParser.LOW, 0); }
		public Lob_compression_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lob_compression_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterLob_compression_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitLob_compression_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitLob_compression_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Lob_compression_clauseContext lob_compression_clause() throws RecognitionException {
		Lob_compression_clauseContext _localctx = new Lob_compression_clauseContext(_ctx, getState());
		enterRule(_localctx, 196, RULE_lob_compression_clause);
		int _la;
		try {
			setState(2699);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NOCOMPRESS:
				enterOuterAlt(_localctx, 1);
				{
				setState(2694);
				match(NOCOMPRESS);
				}
				break;
			case COMPRESS:
				enterOuterAlt(_localctx, 2);
				{
				setState(2695);
				match(COMPRESS);
				setState(2697);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==HIGH || _la==LOW || _la==MEDIUM) {
					{
					setState(2696);
					_la = _input.LA(1);
					if ( !(_la==HIGH || _la==LOW || _la==MEDIUM) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Encryption_specContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(PLSQLParser.USING, 0); }
		public List<TerminalNode> CHAR_STRING() { return getTokens(PLSQLParser.CHAR_STRING); }
		public TerminalNode CHAR_STRING(int i) {
			return getToken(PLSQLParser.CHAR_STRING, i);
		}
		public TerminalNode IDENTIFIED() { return getToken(PLSQLParser.IDENTIFIED, 0); }
		public TerminalNode BY() { return getToken(PLSQLParser.BY, 0); }
		public TerminalNode REGULAR_ID() { return getToken(PLSQLParser.REGULAR_ID, 0); }
		public TerminalNode SALT() { return getToken(PLSQLParser.SALT, 0); }
		public TerminalNode NO() { return getToken(PLSQLParser.NO, 0); }
		public Encryption_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_encryption_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterEncryption_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitEncryption_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitEncryption_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Encryption_specContext encryption_spec() throws RecognitionException {
		Encryption_specContext _localctx = new Encryption_specContext(_ctx, getState());
		enterRule(_localctx, 198, RULE_encryption_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2703);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USING) {
				{
				setState(2701);
				match(USING);
				setState(2702);
				match(CHAR_STRING);
				}
			}

			setState(2708);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IDENTIFIED) {
				{
				setState(2705);
				match(IDENTIFIED);
				setState(2706);
				match(BY);
				setState(2707);
				match(REGULAR_ID);
				}
			}

			setState(2711);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CHAR_STRING) {
				{
				setState(2710);
				match(CHAR_STRING);
				}
			}

			setState(2717);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,310,_ctx) ) {
			case 1:
				{
				setState(2714);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(2713);
					match(NO);
					}
				}

				setState(2716);
				match(SALT);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Lob_storage_clauseContext extends ParserRuleContext {
		public TerminalNode LOB() { return getToken(PLSQLParser.LOB, 0); }
		public List<TerminalNode> LEFT_PAREN() { return getTokens(PLSQLParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(PLSQLParser.LEFT_PAREN, i);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(PLSQLParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(PLSQLParser.RIGHT_PAREN, i);
		}
		public TerminalNode STORE() { return getToken(PLSQLParser.STORE, 0); }
		public TerminalNode AS() { return getToken(PLSQLParser.AS, 0); }
		public List<Lob_itemContext> lob_item() {
			return getRuleContexts(Lob_itemContext.class);
		}
		public Lob_itemContext lob_item(int i) {
			return getRuleContext(Lob_itemContext.class,i);
		}
		public List<Lob_storage_parametersContext> lob_storage_parameters() {
			return getRuleContexts(Lob_storage_parametersContext.class);
		}
		public Lob_storage_parametersContext lob_storage_parameters(int i) {
			return getRuleContext(Lob_storage_parametersContext.class,i);
		}
		public List<Lob_segnameContext> lob_segname() {
			return getRuleContexts(Lob_segnameContext.class);
		}
		public Lob_segnameContext lob_segname(int i) {
			return getRuleContext(Lob_segnameContext.class,i);
		}
		public List<TerminalNode> SECUREFILE() { return getTokens(PLSQLParser.SECUREFILE); }
		public TerminalNode SECUREFILE(int i) {
			return getToken(PLSQLParser.SECUREFILE, i);
		}
		public List<TerminalNode> BASICFILE() { return getTokens(PLSQLParser.BASICFILE); }
		public TerminalNode BASICFILE(int i) {
			return getToken(PLSQLParser.BASICFILE, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLSQLParser.COMMA, i);
		}
		public Lob_storage_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lob_storage_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterLob_storage_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitLob_storage_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitLob_storage_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Lob_storage_clauseContext lob_storage_clause() throws RecognitionException {
		Lob_storage_clauseContext _localctx = new Lob_storage_clauseContext(_ctx, getState());
		enterRule(_localctx, 200, RULE_lob_storage_clause);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2719);
			match(LOB);
			setState(2756);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,317,_ctx) ) {
			case 1:
				{
				setState(2720);
				match(LEFT_PAREN);
				setState(2725); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(2722);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(2721);
						match(COMMA);
						}
					}

					setState(2724);
					lob_item();
					}
					}
					setState(2727); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BUILD) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (CHR - 65)) | (1L << (CLOB - 65)) | (1L << (CLOSE - 65)) | (1L << (CLUSTER - 65)) | (1L << (COALESCE - 65)) | (1L << (COLLECT - 65)) | (1L << (COLUMNS - 65)) | (1L << (COMMENT - 65)) | (1L << (COMMIT - 65)) | (1L << (COMMITTED - 65)) | (1L << (COMPATIBILITY - 65)) | (1L << (COMPILE - 65)) | (1L << (COMPLETE - 65)) | (1L << (COMPOUND - 65)) | (1L << (CONCAT - 65)) | (1L << (CONSTANT - 65)) | (1L << (CONSTRAINT - 65)) | (1L << (CONSTRAINTS - 65)) | (1L << (CONSTRUCTOR - 65)) | (1L << (CONTENT - 65)) | (1L << (CONTEXT - 65)) | (1L << (CONTINUE - 65)) | (1L << (CONVERT - 65)) | (1L << (CORRUPT_XID - 65)) | (1L << (CORRUPT_XID_ALL - 65)) | (1L << (COST - 65)) | (1L << (COUNT - 65)) | (1L << (CROSS - 65)) | (1L << (CUBE - 65)) | (1L << (CURRENT_USER - 65)) | (1L << (CURSOR - 65)) | (1L << (CUSTOMDATUM - 65)) | (1L << (CYCLE - 65)) | (1L << (DATA - 65)) | (1L << (DATABASE - 65)) | (1L << (DATE - 65)) | (1L << (DAY - 65)) | (1L << (DB_ROLE_CHANGE - 65)) | (1L << (DBTIMEZONE - 65)) | (1L << (DDL - 65)) | (1L << (DEBUG - 65)) | (1L << (DEC - 65)) | (1L << (DECIMAL - 65)) | (1L << (DECODE - 65)) | (1L << (DECOMPOSE - 65)) | (1L << (DECREMENT - 65)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DEMAND - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (EDITIONING - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENFORCED - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FAST - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)) | (1L << (FOLLOWING - 129)) | (1L << (FOLLOWS - 129)) | (1L << (FORALL - 129)) | (1L << (FORCE - 129)))) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & ((1L << (FULL - 197)) | (1L << (FUNCTION - 197)) | (1L << (GROUPING - 197)) | (1L << (HASH - 197)) | (1L << (HIDE - 197)) | (1L << (HOUR - 197)) | (1L << (IGNORE - 197)) | (1L << (IMMEDIATE - 197)) | (1L << (INCLUDE - 197)) | (1L << (INCLUDING - 197)) | (1L << (INCREMENT - 197)) | (1L << (INDENT - 197)) | (1L << (INDEXED - 197)) | (1L << (INDICATOR - 197)) | (1L << (INDICES - 197)) | (1L << (INFINITE - 197)) | (1L << (INLINE - 197)) | (1L << (INNER - 197)) | (1L << (INOUT - 197)) | (1L << (INSTANTIABLE - 197)) | (1L << (INSTEAD - 197)) | (1L << (INT - 197)) | (1L << (INTEGER - 197)) | (1L << (INTERVAL - 197)) | (1L << (INVALIDATE - 197)) | (1L << (ISOLATION - 197)) | (1L << (ITERATE - 197)) | (1L << (JAVA - 197)) | (1L << (JOIN - 197)) | (1L << (KEEP - 197)) | (1L << (LANGUAGE - 197)) | (1L << (LAST - 197)) | (1L << (LAST_VALUE - 197)) | (1L << (LEADING - 197)) | (1L << (LEFT - 197)) | (1L << (LEVEL - 197)))) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & ((1L << (LIBRARY - 261)) | (1L << (LIKE2 - 261)) | (1L << (LIKE4 - 261)) | (1L << (LIKEC - 261)) | (1L << (LIMIT - 261)) | (1L << (LIST - 261)) | (1L << (LOCAL - 261)) | (1L << (LOCKED - 261)) | (1L << (LOG - 261)) | (1L << (LOGOFF - 261)) | (1L << (LOGON - 261)) | (1L << (LONG - 261)) | (1L << (LOOP - 261)) | (1L << (MAIN - 261)) | (1L << (MAP - 261)) | (1L << (MASTER - 261)) | (1L << (MATCHED - 261)) | (1L << (MAXVALUE - 261)) | (1L << (MEASURES - 261)) | (1L << (MEMBER - 261)) | (1L << (MERGE - 261)) | (1L << (MINUTE - 261)) | (1L << (MINVALUE - 261)) | (1L << (MLSLABEL - 261)) | (1L << (MODEL - 261)) | (1L << (MODIFY - 261)) | (1L << (MONTH - 261)) | (1L << (MULTISET - 261)) | (1L << (NAME - 261)) | (1L << (NAN - 261)) | (1L << (NATURAL - 261)) | (1L << (NATURALN - 261)) | (1L << (NAV - 261)) | (1L << (NCHAR - 261)) | (1L << (NCHAR_CS - 261)) | (1L << (NCLOB - 261)) | (1L << (NESTED - 261)) | (1L << (NEVER - 261)) | (1L << (NEW - 261)) | (1L << (NO - 261)) | (1L << (NOAUDIT - 261)) | (1L << (NOCOPY - 261)) | (1L << (NOCYCLE - 261)) | (1L << (NOENTITYESCAPING - 261)))) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & ((1L << (NONE - 329)) | (1L << (NOSCHEMACHECK - 329)) | (1L << (NVL - 329)) | (1L << (NULLS - 329)) | (1L << (NUMBER - 329)) | (1L << (NUMERIC - 329)) | (1L << (NVARCHAR2 - 329)) | (1L << (MATERIALIZED - 329)) | (1L << (OBJECT - 329)) | (1L << (OFF - 329)) | (1L << (OID - 329)) | (1L << (OLD - 329)) | (1L << (ONLY - 329)) | (1L << (OPEN - 329)) | (1L << (ORADATA - 329)) | (1L << (ORDINALITY - 329)) | (1L << (OSERROR - 329)) | (1L << (OUT - 329)) | (1L << (OUTER - 329)) | (1L << (OVER - 329)) | (1L << (OVERRIDING - 329)) | (1L << (PACKAGE - 329)) | (1L << (PARALLEL_ENABLE - 329)) | (1L << (PARAMETERS - 329)) | (1L << (PARENT - 329)) | (1L << (PARTITION - 329)) | (1L << (PASSING - 329)) | (1L << (PATH - 329)) | (1L << (PIPELINED - 329)) | (1L << (PLAN - 329)) | (1L << (PLS_INTEGER - 329)) | (1L << (POSITIVE - 329)) | (1L << (POSITIVEN - 329)) | (1L << (PRAGMA - 329)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (PREBUILT - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)) | (1L << (PRESENT - 393)) | (1L << (PUBLIC - 393)) | (1L << (RAISE - 393)) | (1L << (RANGE - 393)) | (1L << (RAW - 393)) | (1L << (READ - 393)) | (1L << (REAL - 393)) | (1L << (RECORD - 393)) | (1L << (REDUCED - 393)) | (1L << (REF - 393)) | (1L << (REFERENCE - 393)) | (1L << (REFERENCING - 393)) | (1L << (REFRESH - 393)) | (1L << (REJECT - 393)) | (1L << (RELIES_ON - 393)) | (1L << (RENAME - 393)) | (1L << (REPLACE - 393)) | (1L << (RESPECT - 393)) | (1L << (RESTRICT_REFERENCES - 393)) | (1L << (RESULT - 393)) | (1L << (RESULT_CACHE - 393)) | (1L << (RETURN - 393)) | (1L << (RETURNING - 393)) | (1L << (REUSE - 393)) | (1L << (REVERSE - 393)) | (1L << (REWRITE - 393)) | (1L << (RIGHT - 393)) | (1L << (ROLE - 393)) | (1L << (ROLLBACK - 393)) | (1L << (ROLLUP - 393)) | (1L << (ROW - 393)) | (1L << (ROWID - 393)) | (1L << (ROWS - 393)) | (1L << (RULES - 393)) | (1L << (SAMPLE - 393)) | (1L << (SAVE - 393)) | (1L << (SAVEPOINT - 393)) | (1L << (SCHEMA - 393)) | (1L << (SCHEMACHECK - 393)) | (1L << (SCN - 393)) | (1L << (SECOND - 393)))) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & ((1L << (SEED - 458)) | (1L << (SEGMENT - 458)) | (1L << (SELF - 458)) | (1L << (SEQUENTIAL - 458)) | (1L << (SERIALIZABLE - 458)) | (1L << (SERIALLY_REUSABLE - 458)) | (1L << (SERVERERROR - 458)) | (1L << (SESSIONTIMEZONE - 458)) | (1L << (SET - 458)) | (1L << (SETS - 458)) | (1L << (SETTINGS - 458)) | (1L << (SHOW - 458)) | (1L << (SHUTDOWN - 458)) | (1L << (SIBLINGS - 458)) | (1L << (SIGNTYPE - 458)) | (1L << (SIMPLE_INTEGER - 458)) | (1L << (SINGLE - 458)) | (1L << (SIZE - 458)) | (1L << (SKIP_ - 458)) | (1L << (SMALLINT - 458)) | (1L << (SNAPSHOT - 458)) | (1L << (SOME - 458)) | (1L << (SPECIFICATION - 458)) | (1L << (SQLDATA - 458)) | (1L << (SQLERROR - 458)) | (1L << (STANDALONE - 458)) | (1L << (STARTUP - 458)) | (1L << (STATEMENT - 458)) | (1L << (STATEMENT_ID - 458)) | (1L << (STATIC - 458)) | (1L << (STATISTICS - 458)) | (1L << (STRING - 458)) | (1L << (SUBMULTISET - 458)) | (1L << (SUBPARTITION - 458)) | (1L << (SUBSTITUTABLE - 458)) | (1L << (SUBSTRING - 458)) | (1L << (SUBTYPE - 458)) | (1L << (SUCCESS - 458)) | (1L << (SUSPEND - 458)) | (1L << (TABLES - 458)) | (1L << (TIME - 458)) | (1L << (TIMESTAMP - 458)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 458)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 458)) | (1L << (TIMESTAMP_UNCONSTRAINED - 458)))) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & ((1L << (TIMEZONE_ABBR - 522)) | (1L << (TIMEZONE_HOUR - 522)) | (1L << (TIMEZONE_MINUTE - 522)) | (1L << (TIMEZONE_REGION - 522)) | (1L << (TO_CHAR - 522)) | (1L << (TO_DATE - 522)) | (1L << (TRAILING - 522)) | (1L << (TRANSACTION - 522)) | (1L << (TRANSLATE - 522)) | (1L << (TREAT - 522)) | (1L << (TRIGGER - 522)) | (1L << (TRIM - 522)) | (1L << (TRUNCATE - 522)) | (1L << (TRUSTED - 522)) | (1L << (TYPE - 522)) | (1L << (UNBOUNDED - 522)) | (1L << (UNDER - 522)) | (1L << (UNLIMITED - 522)) | (1L << (UNTIL - 522)) | (1L << (UPDATED - 522)) | (1L << (UPSERT - 522)) | (1L << (UROWID - 522)) | (1L << (USE - 522)) | (1L << (VALIDATE - 522)) | (1L << (VALUE - 522)) | (1L << (VARCHAR - 522)) | (1L << (VARCHAR2 - 522)) | (1L << (VARIABLE - 522)) | (1L << (VARRAY - 522)) | (1L << (VARYING - 522)) | (1L << (VERBOSE - 522)) | (1L << (VERSION - 522)) | (1L << (VERSIONS - 522)) | (1L << (VIEW - 522)) | (1L << (WAIT - 522)) | (1L << (WARNING - 522)) | (1L << (WELLFORMED - 522)) | (1L << (WHENEVER - 522)) | (1L << (WHILE - 522)) | (1L << (WITHOUT - 522)) | (1L << (WITHIN - 522)) | (1L << (WORK - 522)) | (1L << (WRITE - 522)) | (1L << (XML - 522)) | (1L << (XMLAGG - 522)) | (1L << (XMLATTRIBUTES - 522)))) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & ((1L << (XMLCAST - 586)) | (1L << (XMLCOLATTVAL - 586)) | (1L << (XMLELEMENT - 586)) | (1L << (XMLEXISTS - 586)) | (1L << (XMLFOREST - 586)) | (1L << (XMLNAMESPACES - 586)) | (1L << (XMLPARSE - 586)) | (1L << (XMLPI - 586)) | (1L << (XMLQUERY - 586)) | (1L << (XMLROOT - 586)) | (1L << (XMLSERIALIZE - 586)) | (1L << (XMLTABLE - 586)) | (1L << (YEAR - 586)) | (1L << (YES - 586)) | (1L << (YMINTERVAL_UNCONSTRAINED - 586)) | (1L << (ZONE - 586)) | (1L << (PREDICTION - 586)) | (1L << (PREDICTION_BOUNDS - 586)) | (1L << (PREDICTION_COST - 586)) | (1L << (PREDICTION_DETAILS - 586)) | (1L << (PREDICTION_PROBABILITY - 586)) | (1L << (PREDICTION_SET - 586)) | (1L << (CUME_DIST - 586)) | (1L << (DENSE_RANK - 586)) | (1L << (LISTAGG - 586)) | (1L << (PERCENT_RANK - 586)) | (1L << (PERCENTILE_CONT - 586)) | (1L << (PERCENTILE_DISC - 586)) | (1L << (RANK - 586)) | (1L << (AVG - 586)) | (1L << (CORR - 586)) | (1L << (LAG - 586)) | (1L << (LEAD - 586)) | (1L << (MAX - 586)) | (1L << (MEDIAN - 586)) | (1L << (MIN - 586)) | (1L << (NTILE - 586)) | (1L << (RATIO_TO_REPORT - 586)) | (1L << (ROW_NUMBER - 586)) | (1L << (SUM - 586)) | (1L << (VARIANCE - 586)) | (1L << (REGR_ - 586)) | (1L << (STDDEV - 586)) | (1L << (VAR_ - 586)) | (1L << (COVAR_ - 586)))) != 0) || _la==COMMA || _la==REGULAR_ID );
				setState(2729);
				match(RIGHT_PAREN);
				setState(2730);
				match(STORE);
				setState(2731);
				match(AS);
				setState(2737); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						setState(2737);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case BASICFILE:
						case SECUREFILE:
							{
							setState(2732);
							_la = _input.LA(1);
							if ( !(_la==BASICFILE || _la==SECUREFILE) ) {
							_errHandler.recoverInline(this);
							}
							else {
								if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
								_errHandler.reportMatch(this);
								consume();
							}
							}
							break;
						case LEFT_PAREN:
							{
							setState(2733);
							match(LEFT_PAREN);
							setState(2734);
							lob_storage_parameters();
							setState(2735);
							match(RIGHT_PAREN);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(2739); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,314,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 2:
				{
				setState(2741);
				match(LEFT_PAREN);
				setState(2742);
				lob_item();
				setState(2743);
				match(RIGHT_PAREN);
				setState(2744);
				match(STORE);
				setState(2745);
				match(AS);
				setState(2752); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						setState(2752);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case BASICFILE:
						case SECUREFILE:
							{
							setState(2746);
							_la = _input.LA(1);
							if ( !(_la==BASICFILE || _la==SECUREFILE) ) {
							_errHandler.recoverInline(this);
							}
							else {
								if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
								_errHandler.reportMatch(this);
								consume();
							}
							}
							break;
						case A_LETTER:
						case ADD:
						case AFTER:
						case AGENT:
						case AGGREGATE:
						case ANALYZE:
						case ARRAY:
						case ASSOCIATE:
						case AT:
						case ATTRIBUTE:
						case AUDIT:
						case AUTHID:
						case AUTO:
						case AUTOMATIC:
						case AUTONOMOUS_TRANSACTION:
						case BATCH:
						case BEFORE:
						case BFILE:
						case BINARY_DOUBLE:
						case BINARY_FLOAT:
						case BINARY_INTEGER:
						case BUILD:
						case BLOB:
						case BLOCK:
						case BODY:
						case BOOLEAN:
						case BOTH:
						case BULK:
						case BYTE:
						case C_LETTER:
						case CALL:
						case CANONICAL:
						case CASCADE:
						case CAST:
						case CHAR:
						case CHAR_CS:
						case CHARACTER:
						case CHR:
						case CLOB:
						case CLOSE:
						case CLUSTER:
						case COALESCE:
						case COLLECT:
						case COLUMNS:
						case COMMENT:
						case COMMIT:
						case COMMITTED:
						case COMPATIBILITY:
						case COMPILE:
						case COMPLETE:
						case COMPOUND:
						case CONCAT:
						case CONSTANT:
						case CONSTRAINT:
						case CONSTRAINTS:
						case CONSTRUCTOR:
						case CONTENT:
						case CONTEXT:
						case CONTINUE:
						case CONVERT:
						case CORRUPT_XID:
						case CORRUPT_XID_ALL:
						case COST:
						case COUNT:
						case CROSS:
						case CUBE:
						case CURRENT_USER:
						case CURSOR:
						case CUSTOMDATUM:
						case CYCLE:
						case DATA:
						case DATABASE:
						case DATE:
						case DAY:
						case DB_ROLE_CHANGE:
						case DBTIMEZONE:
						case DDL:
						case DEBUG:
						case DEC:
						case DECIMAL:
						case DECODE:
						case DECOMPOSE:
						case DECREMENT:
						case DEFAULTS:
						case DEFERRED:
						case DEFINER:
						case DEMAND:
						case DETERMINISTIC:
						case DIMENSION:
						case DISABLE:
						case DISASSOCIATE:
						case DOCUMENT:
						case DOUBLE:
						case DSINTERVAL_UNCONSTRAINED:
						case EACH:
						case EDITIONING:
						case ELEMENT:
						case EMPTY:
						case ENABLE:
						case ENCODING:
						case ENFORCED:
						case ENTITYESCAPING:
						case ERR:
						case ERRORS:
						case ESCAPE:
						case EVALNAME:
						case EXCEPTION:
						case EXCEPTION_INIT:
						case EXCEPTIONS:
						case EXCLUDE:
						case EXECUTE:
						case EXIT:
						case EXPLAIN:
						case EXTERNAL:
						case EXTRACT:
						case FAILURE:
						case FAST:
						case FINAL:
						case FIRST:
						case FIRST_VALUE:
						case FLOAT:
						case FOLLOWING:
						case FOLLOWS:
						case FORALL:
						case FORCE:
						case FULL:
						case FUNCTION:
						case GROUPING:
						case HASH:
						case HIDE:
						case HOUR:
						case IGNORE:
						case IMMEDIATE:
						case INCLUDE:
						case INCLUDING:
						case INCREMENT:
						case INDENT:
						case INDEXED:
						case INDICATOR:
						case INDICES:
						case INFINITE:
						case INLINE:
						case INNER:
						case INOUT:
						case INSTANTIABLE:
						case INSTEAD:
						case INT:
						case INTEGER:
						case INTERVAL:
						case INVALIDATE:
						case ISOLATION:
						case ITERATE:
						case JAVA:
						case JOIN:
						case KEEP:
						case LANGUAGE:
						case LAST:
						case LAST_VALUE:
						case LEADING:
						case LEFT:
						case LEVEL:
						case LIBRARY:
						case LIKE2:
						case LIKE4:
						case LIKEC:
						case LIMIT:
						case LIST:
						case LOCAL:
						case LOCKED:
						case LOG:
						case LOGOFF:
						case LOGON:
						case LONG:
						case LOOP:
						case MAIN:
						case MAP:
						case MASTER:
						case MATCHED:
						case MAXVALUE:
						case MEASURES:
						case MEMBER:
						case MERGE:
						case MINUTE:
						case MINVALUE:
						case MLSLABEL:
						case MODEL:
						case MODIFY:
						case MONTH:
						case MULTISET:
						case NAME:
						case NAN:
						case NATURAL:
						case NATURALN:
						case NAV:
						case NCHAR:
						case NCHAR_CS:
						case NCLOB:
						case NESTED:
						case NEVER:
						case NEW:
						case NO:
						case NOAUDIT:
						case NOCOPY:
						case NOCYCLE:
						case NOENTITYESCAPING:
						case NONE:
						case NOSCHEMACHECK:
						case NVL:
						case NULLS:
						case NUMBER:
						case NUMERIC:
						case NVARCHAR2:
						case MATERIALIZED:
						case OBJECT:
						case OFF:
						case OID:
						case OLD:
						case ONLY:
						case OPEN:
						case ORADATA:
						case ORDINALITY:
						case OSERROR:
						case OUT:
						case OUTER:
						case OVER:
						case OVERRIDING:
						case PACKAGE:
						case PARALLEL_ENABLE:
						case PARAMETERS:
						case PARENT:
						case PARTITION:
						case PASSING:
						case PATH:
						case PIPELINED:
						case PLAN:
						case PLS_INTEGER:
						case POSITIVE:
						case POSITIVEN:
						case PRAGMA:
						case PREBUILT:
						case PRECEDING:
						case PRECISION:
						case PRESENT:
						case PUBLIC:
						case RAISE:
						case RANGE:
						case RAW:
						case READ:
						case REAL:
						case RECORD:
						case REDUCED:
						case REF:
						case REFERENCE:
						case REFERENCING:
						case REFRESH:
						case REJECT:
						case RELIES_ON:
						case RENAME:
						case REPLACE:
						case RESPECT:
						case RESTRICT_REFERENCES:
						case RESULT:
						case RESULT_CACHE:
						case RETURN:
						case RETURNING:
						case REUSE:
						case REVERSE:
						case REWRITE:
						case RIGHT:
						case ROLE:
						case ROLLBACK:
						case ROLLUP:
						case ROW:
						case ROWID:
						case ROWS:
						case RULES:
						case SAMPLE:
						case SAVE:
						case SAVEPOINT:
						case SCHEMA:
						case SCHEMACHECK:
						case SCN:
						case SECOND:
						case SEED:
						case SEGMENT:
						case SELF:
						case SEQUENTIAL:
						case SERIALIZABLE:
						case SERIALLY_REUSABLE:
						case SERVERERROR:
						case SESSIONTIMEZONE:
						case SET:
						case SETS:
						case SETTINGS:
						case SHOW:
						case SHUTDOWN:
						case SIBLINGS:
						case SIGNTYPE:
						case SIMPLE_INTEGER:
						case SINGLE:
						case SIZE:
						case SKIP_:
						case SMALLINT:
						case SNAPSHOT:
						case SOME:
						case SPECIFICATION:
						case SQLDATA:
						case SQLERROR:
						case STANDALONE:
						case STARTUP:
						case STATEMENT:
						case STATEMENT_ID:
						case STATIC:
						case STATISTICS:
						case STRING:
						case SUBMULTISET:
						case SUBPARTITION:
						case SUBSTITUTABLE:
						case SUBSTRING:
						case SUBTYPE:
						case SUCCESS:
						case SUSPEND:
						case TABLES:
						case TIME:
						case TIMESTAMP:
						case TIMESTAMP_LTZ_UNCONSTRAINED:
						case TIMESTAMP_TZ_UNCONSTRAINED:
						case TIMESTAMP_UNCONSTRAINED:
						case TIMEZONE_ABBR:
						case TIMEZONE_HOUR:
						case TIMEZONE_MINUTE:
						case TIMEZONE_REGION:
						case TO_CHAR:
						case TO_DATE:
						case TRAILING:
						case TRANSACTION:
						case TRANSLATE:
						case TREAT:
						case TRIGGER:
						case TRIM:
						case TRUNCATE:
						case TRUSTED:
						case TYPE:
						case UNBOUNDED:
						case UNDER:
						case UNLIMITED:
						case UNTIL:
						case UPDATED:
						case UPSERT:
						case UROWID:
						case USE:
						case VALIDATE:
						case VALUE:
						case VARCHAR:
						case VARCHAR2:
						case VARIABLE:
						case VARRAY:
						case VARYING:
						case VERBOSE:
						case VERSION:
						case VERSIONS:
						case VIEW:
						case WAIT:
						case WARNING:
						case WELLFORMED:
						case WHENEVER:
						case WHILE:
						case WITHOUT:
						case WITHIN:
						case WORK:
						case WRITE:
						case XML:
						case XMLAGG:
						case XMLATTRIBUTES:
						case XMLCAST:
						case XMLCOLATTVAL:
						case XMLELEMENT:
						case XMLEXISTS:
						case XMLFOREST:
						case XMLNAMESPACES:
						case XMLPARSE:
						case XMLPI:
						case XMLQUERY:
						case XMLROOT:
						case XMLSERIALIZE:
						case XMLTABLE:
						case YEAR:
						case YES:
						case YMINTERVAL_UNCONSTRAINED:
						case ZONE:
						case PREDICTION:
						case PREDICTION_BOUNDS:
						case PREDICTION_COST:
						case PREDICTION_DETAILS:
						case PREDICTION_PROBABILITY:
						case PREDICTION_SET:
						case CUME_DIST:
						case DENSE_RANK:
						case LISTAGG:
						case PERCENT_RANK:
						case PERCENTILE_CONT:
						case PERCENTILE_DISC:
						case RANK:
						case AVG:
						case CORR:
						case LAG:
						case LEAD:
						case MAX:
						case MEDIAN:
						case MIN:
						case NTILE:
						case RATIO_TO_REPORT:
						case ROW_NUMBER:
						case SUM:
						case VARIANCE:
						case REGR_:
						case STDDEV:
						case VAR_:
						case COVAR_:
						case REGULAR_ID:
							{
							setState(2747);
							lob_segname();
							}
							break;
						case LEFT_PAREN:
							{
							setState(2748);
							match(LEFT_PAREN);
							setState(2749);
							lob_storage_parameters();
							setState(2750);
							match(RIGHT_PAREN);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(2754); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,316,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xmltype_column_propertiesContext extends ParserRuleContext {
		public TerminalNode XMLTYPE() { return getToken(PLSQLParser.XMLTYPE, 0); }
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public TerminalNode COLUMN() { return getToken(PLSQLParser.COLUMN, 0); }
		public Xmltype_storageContext xmltype_storage() {
			return getRuleContext(Xmltype_storageContext.class,0);
		}
		public Xmlschema_specContext xmlschema_spec() {
			return getRuleContext(Xmlschema_specContext.class,0);
		}
		public Xmltype_column_propertiesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmltype_column_properties; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterXmltype_column_properties(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitXmltype_column_properties(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitXmltype_column_properties(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xmltype_column_propertiesContext xmltype_column_properties() throws RecognitionException {
		Xmltype_column_propertiesContext _localctx = new Xmltype_column_propertiesContext(_ctx, getState());
		enterRule(_localctx, 202, RULE_xmltype_column_properties);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2758);
			match(XMLTYPE);
			setState(2760);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COLUMN) {
				{
				setState(2759);
				match(COLUMN);
				}
			}

			setState(2762);
			column_name();
			setState(2764);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==STORE) {
				{
				setState(2763);
				xmltype_storage();
				}
			}

			setState(2767);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ELEMENT || _la==XMLSCHEMA) {
				{
				setState(2766);
				xmlschema_spec();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xmltype_storageContext extends ParserRuleContext {
		public TerminalNode STORE() { return getToken(PLSQLParser.STORE, 0); }
		public TerminalNode AS() { return getToken(PLSQLParser.AS, 0); }
		public TerminalNode OBJECT() { return getToken(PLSQLParser.OBJECT, 0); }
		public TerminalNode RELATIONAL() { return getToken(PLSQLParser.RELATIONAL, 0); }
		public TerminalNode CLOB() { return getToken(PLSQLParser.CLOB, 0); }
		public TerminalNode BINARY() { return getToken(PLSQLParser.BINARY, 0); }
		public TerminalNode XML() { return getToken(PLSQLParser.XML, 0); }
		public Lob_segnameContext lob_segname() {
			return getRuleContext(Lob_segnameContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(PLSQLParser.LEFT_PAREN, 0); }
		public Lob_parametersContext lob_parameters() {
			return getRuleContext(Lob_parametersContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PLSQLParser.RIGHT_PAREN, 0); }
		public TerminalNode SECUREFILE() { return getToken(PLSQLParser.SECUREFILE, 0); }
		public TerminalNode BASICFILE() { return getToken(PLSQLParser.BASICFILE, 0); }
		public TerminalNode VARRAYS() { return getToken(PLSQLParser.VARRAYS, 0); }
		public TerminalNode LOBS() { return getToken(PLSQLParser.LOBS, 0); }
		public TerminalNode TABLES() { return getToken(PLSQLParser.TABLES, 0); }
		public Xmltype_storageContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmltype_storage; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterXmltype_storage(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitXmltype_storage(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitXmltype_storage(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xmltype_storageContext xmltype_storage() throws RecognitionException {
		Xmltype_storageContext _localctx = new Xmltype_storageContext(_ctx, getState());
		enterRule(_localctx, 204, RULE_xmltype_storage);
		int _la;
		try {
			setState(2800);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,326,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2769);
				match(STORE);
				setState(2770);
				match(AS);
				setState(2794);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case OBJECT:
					{
					setState(2771);
					match(OBJECT);
					setState(2772);
					match(RELATIONAL);
					}
					break;
				case BASICFILE:
				case BINARY:
				case CLOB:
				case SECUREFILE:
					{
					setState(2774);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==BASICFILE || _la==SECUREFILE) {
						{
						setState(2773);
						_la = _input.LA(1);
						if ( !(_la==BASICFILE || _la==SECUREFILE) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
					}

					setState(2779);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case CLOB:
						{
						setState(2776);
						match(CLOB);
						}
						break;
					case BINARY:
						{
						setState(2777);
						match(BINARY);
						setState(2778);
						match(XML);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(2792);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,324,_ctx) ) {
					case 1:
						{
						setState(2781);
						lob_segname();
						setState(2786);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,323,_ctx) ) {
						case 1:
							{
							setState(2782);
							match(LEFT_PAREN);
							setState(2783);
							lob_parameters();
							setState(2784);
							match(RIGHT_PAREN);
							}
							break;
						}
						}
						break;
					case 2:
						{
						setState(2788);
						match(LEFT_PAREN);
						setState(2789);
						lob_parameters();
						setState(2790);
						match(RIGHT_PAREN);
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2796);
				match(STORE);
				setState(2797);
				match(VARRAYS);
				setState(2798);
				match(AS);
				setState(2799);
				_la = _input.LA(1);
				if ( !(_la==LOBS || _la==TABLES) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xmlschema_specContext extends ParserRuleContext {
		public TerminalNode ELEMENT() { return getToken(PLSQLParser.ELEMENT, 0); }
		public List<TerminalNode> DELIMITED_ID() { return getTokens(PLSQLParser.DELIMITED_ID); }
		public TerminalNode DELIMITED_ID(int i) {
			return getToken(PLSQLParser.DELIMITED_ID, i);
		}
		public TerminalNode XMLSCHEMA() { return getToken(PLSQLParser.XMLSCHEMA, 0); }
		public List<Allow_or_disallowContext> allow_or_disallow() {
			return getRuleContexts(Allow_or_disallowContext.class);
		}
		public Allow_or_disallowContext allow_or_disallow(int i) {
			return getRuleContext(Allow_or_disallowContext.class,i);
		}
		public TerminalNode NONSCHEMA() { return getToken(PLSQLParser.NONSCHEMA, 0); }
		public TerminalNode ANYSCHEMA() { return getToken(PLSQLParser.ANYSCHEMA, 0); }
		public Xmlschema_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlschema_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterXmlschema_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitXmlschema_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitXmlschema_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xmlschema_specContext xmlschema_spec() throws RecognitionException {
		Xmlschema_specContext _localctx = new Xmlschema_specContext(_ctx, getState());
		enterRule(_localctx, 206, RULE_xmlschema_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2804);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==XMLSCHEMA) {
				{
				setState(2802);
				match(XMLSCHEMA);
				setState(2803);
				match(DELIMITED_ID);
				}
			}

			setState(2806);
			match(ELEMENT);
			setState(2807);
			match(DELIMITED_ID);
			setState(2811);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,328,_ctx) ) {
			case 1:
				{
				setState(2808);
				allow_or_disallow();
				setState(2809);
				match(NONSCHEMA);
				}
				break;
			}
			setState(2816);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALLOW || _la==DISALLOW) {
				{
				setState(2813);
				allow_or_disallow();
				setState(2814);
				match(ANYSCHEMA);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Allow_or_disallowContext extends ParserRuleContext {
		public TerminalNode ALLOW() { return getToken(PLSQLParser.ALLOW, 0); }
		public TerminalNode DISALLOW() { return getToken(PLSQLParser.DISALLOW, 0); }
		public Allow_or_disallowContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_allow_or_disallow; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterAllow_or_disallow(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitAllow_or_disallow(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitAllow_or_disallow(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Allow_or_disallowContext allow_or_disallow() throws RecognitionException {
		Allow_or_disallowContext _localctx = new Allow_or_disallowContext(_ctx, getState());
		enterRule(_localctx, 208, RULE_allow_or_disallow);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2818);
			_la = _input.LA(1);
			if ( !(_la==ALLOW || _la==DISALLOW) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_partitioning_clausesContext extends ParserRuleContext {
		public Range_partitionsContext range_partitions() {
			return getRuleContext(Range_partitionsContext.class,0);
		}
		public List_partitionsContext list_partitions() {
			return getRuleContext(List_partitionsContext.class,0);
		}
		public Hash_partitionsContext hash_partitions() {
			return getRuleContext(Hash_partitionsContext.class,0);
		}
		public Composite_range_partitionsContext composite_range_partitions() {
			return getRuleContext(Composite_range_partitionsContext.class,0);
		}
		public Composite_list_partitionsContext composite_list_partitions() {
			return getRuleContext(Composite_list_partitionsContext.class,0);
		}
		public Composite_hash_partitionsContext composite_hash_partitions() {
			return getRuleContext(Composite_hash_partitionsContext.class,0);
		}
		public Reference_partitioningContext reference_partitioning() {
			return getRuleContext(Reference_partitioningContext.class,0);
		}
		public System_partitioningContext system_partitioning() {
			return getRuleContext(System_partitioningContext.class,0);
		}
		public Table_partitioning_clausesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_partitioning_clauses; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterTable_partitioning_clauses(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitTable_partitioning_clauses(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitTable_partitioning_clauses(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_partitioning_clausesContext table_partitioning_clauses() throws RecognitionException {
		Table_partitioning_clausesContext _localctx = new Table_partitioning_clausesContext(_ctx, getState());
		enterRule(_localctx, 210, RULE_table_partitioning_clauses);
		try {
			setState(2828);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,330,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2820);
				range_partitions();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2821);
				list_partitions();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2822);
				hash_partitions();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2823);
				composite_range_partitions();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2824);
				composite_list_partitions();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2825);
				composite_hash_partitions();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2826);
				reference_partitioning();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(2827);
				system_partitioning();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Range_partitionsContext extends ParserRuleContext {
		public List<TerminalNode> PARTITION() { return getTokens(PLSQLParser.PARTITION); }
		public TerminalNode PARTITION(int i) {
			return getToken(PLSQLParser.PARTITION, i);
		}
		public TerminalNode BY() { return getToken(PLSQLParser.BY, 0); }
		public TerminalNode RANGE() { return getToken(PLSQLParser.RANGE, 0); }
		public Paren_column_listContext paren_column_list() {
			return getRuleContext(Paren_column_listContext.class,0);
		}
		public List<TerminalNode> LEFT_PAREN() { return getTokens(PLSQLParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(PLSQLParser.LEFT_PAREN, i);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(PLSQLParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(PLSQLParser.RIGHT_PAREN, i);
		}
		public TerminalNode INTERVAL() { return getToken(PLSQLParser.INTERVAL, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public List<Range_values_clauseContext> range_values_clause() {
			return getRuleContexts(Range_values_clauseContext.class);
		}
		public Range_values_clauseContext range_values_clause(int i) {
			return getRuleContext(Range_values_clauseContext.class,i);
		}
		public List<Table_partition_descriptionContext> table_partition_description() {
			return getRuleContexts(Table_partition_descriptionContext.class);
		}
		public Table_partition_descriptionContext table_partition_description(int i) {
			return getRuleContext(Table_partition_descriptionContext.class,i);
		}
		public TerminalNode STORE() { return getToken(PLSQLParser.STORE, 0); }
		public TerminalNode IN() { return getToken(PLSQLParser.IN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PLSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLSQLParser.COMMA, i);
		}
		public List<Partition_nameContext> partition_name() {
			return getRuleContexts(Partition_nameContext.class);
		}
		public Partition_nameContext partition_name(int i) {
			return getRuleContext(Partition_nameContext.class,i);
		}
		public List<TablespaceContext> tablespace() {
			return getRuleContexts(TablespaceContext.class);
		}
		public TablespaceContext tablespace(int i) {
			return getRuleContext(TablespaceContext.class,i);
		}
		public Range_partitionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_range_partitions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterRange_partitions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitRange_partitions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitRange_partitions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Range_partitionsContext range_partitions() throws RecognitionException {
		Range_partitionsContext _localctx = new Range_partitionsContext(_ctx, getState());
		enterRule(_localctx, 212, RULE_range_partitions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2830);
			match(PARTITION);
			setState(2831);
			match(BY);
			setState(2832);
			match(RANGE);
			setState(2833);
			paren_column_list();
			setState(2853);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INTERVAL) {
				{
				setState(2834);
				match(INTERVAL);
				setState(2835);
				match(LEFT_PAREN);
				setState(2836);
				expression(0);
				setState(2837);
				match(RIGHT_PAREN);
				setState(2851);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==STORE) {
					{
					setState(2838);
					match(STORE);
					setState(2839);
					match(IN);
					setState(2840);
					match(LEFT_PAREN);
					setState(2845); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						{
						setState(2842);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(2841);
							match(COMMA);
							}
						}

						setState(2844);
						tablespace();
						}
						}
						setState(2847); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BUILD) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (CHR - 65)) | (1L << (CLOB - 65)) | (1L << (CLOSE - 65)) | (1L << (CLUSTER - 65)) | (1L << (COALESCE - 65)) | (1L << (COLLECT - 65)) | (1L << (COLUMNS - 65)) | (1L << (COMMENT - 65)) | (1L << (COMMIT - 65)) | (1L << (COMMITTED - 65)) | (1L << (COMPATIBILITY - 65)) | (1L << (COMPILE - 65)) | (1L << (COMPLETE - 65)) | (1L << (COMPOUND - 65)) | (1L << (CONCAT - 65)) | (1L << (CONSTANT - 65)) | (1L << (CONSTRAINT - 65)) | (1L << (CONSTRAINTS - 65)) | (1L << (CONSTRUCTOR - 65)) | (1L << (CONTENT - 65)) | (1L << (CONTEXT - 65)) | (1L << (CONTINUE - 65)) | (1L << (CONVERT - 65)) | (1L << (CORRUPT_XID - 65)) | (1L << (CORRUPT_XID_ALL - 65)) | (1L << (COST - 65)) | (1L << (COUNT - 65)) | (1L << (CROSS - 65)) | (1L << (CUBE - 65)) | (1L << (CURRENT_USER - 65)) | (1L << (CURSOR - 65)) | (1L << (CUSTOMDATUM - 65)) | (1L << (CYCLE - 65)) | (1L << (DATA - 65)) | (1L << (DATABASE - 65)) | (1L << (DATE - 65)) | (1L << (DAY - 65)) | (1L << (DB_ROLE_CHANGE - 65)) | (1L << (DBTIMEZONE - 65)) | (1L << (DDL - 65)) | (1L << (DEBUG - 65)) | (1L << (DEC - 65)) | (1L << (DECIMAL - 65)) | (1L << (DECODE - 65)) | (1L << (DECOMPOSE - 65)) | (1L << (DECREMENT - 65)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DEMAND - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (EDITIONING - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENFORCED - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FAST - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)) | (1L << (FOLLOWING - 129)) | (1L << (FOLLOWS - 129)) | (1L << (FORALL - 129)) | (1L << (FORCE - 129)))) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & ((1L << (FULL - 197)) | (1L << (FUNCTION - 197)) | (1L << (GROUPING - 197)) | (1L << (HASH - 197)) | (1L << (HIDE - 197)) | (1L << (HOUR - 197)) | (1L << (IGNORE - 197)) | (1L << (IMMEDIATE - 197)) | (1L << (INCLUDE - 197)) | (1L << (INCLUDING - 197)) | (1L << (INCREMENT - 197)) | (1L << (INDENT - 197)) | (1L << (INDEXED - 197)) | (1L << (INDICATOR - 197)) | (1L << (INDICES - 197)) | (1L << (INFINITE - 197)) | (1L << (INLINE - 197)) | (1L << (INNER - 197)) | (1L << (INOUT - 197)) | (1L << (INSTANTIABLE - 197)) | (1L << (INSTEAD - 197)) | (1L << (INT - 197)) | (1L << (INTEGER - 197)) | (1L << (INTERVAL - 197)) | (1L << (INVALIDATE - 197)) | (1L << (ISOLATION - 197)) | (1L << (ITERATE - 197)) | (1L << (JAVA - 197)) | (1L << (JOIN - 197)) | (1L << (KEEP - 197)) | (1L << (LANGUAGE - 197)) | (1L << (LAST - 197)) | (1L << (LAST_VALUE - 197)) | (1L << (LEADING - 197)) | (1L << (LEFT - 197)) | (1L << (LEVEL - 197)))) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & ((1L << (LIBRARY - 261)) | (1L << (LIKE2 - 261)) | (1L << (LIKE4 - 261)) | (1L << (LIKEC - 261)) | (1L << (LIMIT - 261)) | (1L << (LIST - 261)) | (1L << (LOCAL - 261)) | (1L << (LOCKED - 261)) | (1L << (LOG - 261)) | (1L << (LOGOFF - 261)) | (1L << (LOGON - 261)) | (1L << (LONG - 261)) | (1L << (LOOP - 261)) | (1L << (MAIN - 261)) | (1L << (MAP - 261)) | (1L << (MASTER - 261)) | (1L << (MATCHED - 261)) | (1L << (MAXVALUE - 261)) | (1L << (MEASURES - 261)) | (1L << (MEMBER - 261)) | (1L << (MERGE - 261)) | (1L << (MINUTE - 261)) | (1L << (MINVALUE - 261)) | (1L << (MLSLABEL - 261)) | (1L << (MODEL - 261)) | (1L << (MODIFY - 261)) | (1L << (MONTH - 261)) | (1L << (MULTISET - 261)) | (1L << (NAME - 261)) | (1L << (NAN - 261)) | (1L << (NATURAL - 261)) | (1L << (NATURALN - 261)) | (1L << (NAV - 261)) | (1L << (NCHAR - 261)) | (1L << (NCHAR_CS - 261)) | (1L << (NCLOB - 261)) | (1L << (NESTED - 261)) | (1L << (NEVER - 261)) | (1L << (NEW - 261)) | (1L << (NO - 261)) | (1L << (NOAUDIT - 261)) | (1L << (NOCOPY - 261)) | (1L << (NOCYCLE - 261)) | (1L << (NOENTITYESCAPING - 261)))) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & ((1L << (NONE - 329)) | (1L << (NOSCHEMACHECK - 329)) | (1L << (NVL - 329)) | (1L << (NULLS - 329)) | (1L << (NUMBER - 329)) | (1L << (NUMERIC - 329)) | (1L << (NVARCHAR2 - 329)) | (1L << (MATERIALIZED - 329)) | (1L << (OBJECT - 329)) | (1L << (OFF - 329)) | (1L << (OID - 329)) | (1L << (OLD - 329)) | (1L << (ONLY - 329)) | (1L << (OPEN - 329)) | (1L << (ORADATA - 329)) | (1L << (ORDINALITY - 329)) | (1L << (OSERROR - 329)) | (1L << (OUT - 329)) | (1L << (OUTER - 329)) | (1L << (OVER - 329)) | (1L << (OVERRIDING - 329)) | (1L << (PACKAGE - 329)) | (1L << (PARALLEL_ENABLE - 329)) | (1L << (PARAMETERS - 329)) | (1L << (PARENT - 329)) | (1L << (PARTITION - 329)) | (1L << (PASSING - 329)) | (1L << (PATH - 329)) | (1L << (PIPELINED - 329)) | (1L << (PLAN - 329)) | (1L << (PLS_INTEGER - 329)) | (1L << (POSITIVE - 329)) | (1L << (POSITIVEN - 329)) | (1L << (PRAGMA - 329)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (PREBUILT - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)) | (1L << (PRESENT - 393)) | (1L << (PUBLIC - 393)) | (1L << (RAISE - 393)) | (1L << (RANGE - 393)) | (1L << (RAW - 393)) | (1L << (READ - 393)) | (1L << (REAL - 393)) | (1L << (RECORD - 393)) | (1L << (REDUCED - 393)) | (1L << (REF - 393)) | (1L << (REFERENCE - 393)) | (1L << (REFERENCING - 393)) | (1L << (REFRESH - 393)) | (1L << (REJECT - 393)) | (1L << (RELIES_ON - 393)) | (1L << (RENAME - 393)) | (1L << (REPLACE - 393)) | (1L << (RESPECT - 393)) | (1L << (RESTRICT_REFERENCES - 393)) | (1L << (RESULT - 393)) | (1L << (RESULT_CACHE - 393)) | (1L << (RETURN - 393)) | (1L << (RETURNING - 393)) | (1L << (REUSE - 393)) | (1L << (REVERSE - 393)) | (1L << (REWRITE - 393)) | (1L << (RIGHT - 393)) | (1L << (ROLE - 393)) | (1L << (ROLLBACK - 393)) | (1L << (ROLLUP - 393)) | (1L << (ROW - 393)) | (1L << (ROWID - 393)) | (1L << (ROWS - 393)) | (1L << (RULES - 393)) | (1L << (SAMPLE - 393)) | (1L << (SAVE - 393)) | (1L << (SAVEPOINT - 393)) | (1L << (SCHEMA - 393)) | (1L << (SCHEMACHECK - 393)) | (1L << (SCN - 393)) | (1L << (SECOND - 393)))) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & ((1L << (SEED - 458)) | (1L << (SEGMENT - 458)) | (1L << (SELF - 458)) | (1L << (SEQUENTIAL - 458)) | (1L << (SERIALIZABLE - 458)) | (1L << (SERIALLY_REUSABLE - 458)) | (1L << (SERVERERROR - 458)) | (1L << (SESSIONTIMEZONE - 458)) | (1L << (SET - 458)) | (1L << (SETS - 458)) | (1L << (SETTINGS - 458)) | (1L << (SHOW - 458)) | (1L << (SHUTDOWN - 458)) | (1L << (SIBLINGS - 458)) | (1L << (SIGNTYPE - 458)) | (1L << (SIMPLE_INTEGER - 458)) | (1L << (SINGLE - 458)) | (1L << (SIZE - 458)) | (1L << (SKIP_ - 458)) | (1L << (SMALLINT - 458)) | (1L << (SNAPSHOT - 458)) | (1L << (SOME - 458)) | (1L << (SPECIFICATION - 458)) | (1L << (SQLDATA - 458)) | (1L << (SQLERROR - 458)) | (1L << (STANDALONE - 458)) | (1L << (STARTUP - 458)) | (1L << (STATEMENT - 458)) | (1L << (STATEMENT_ID - 458)) | (1L << (STATIC - 458)) | (1L << (STATISTICS - 458)) | (1L << (STRING - 458)) | (1L << (SUBMULTISET - 458)) | (1L << (SUBPARTITION - 458)) | (1L << (SUBSTITUTABLE - 458)) | (1L << (SUBSTRING - 458)) | (1L << (SUBTYPE - 458)) | (1L << (SUCCESS - 458)) | (1L << (SUSPEND - 458)) | (1L << (TABLES - 458)) | (1L << (TIME - 458)) | (1L << (TIMESTAMP - 458)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 458)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 458)) | (1L << (TIMESTAMP_UNCONSTRAINED - 458)))) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & ((1L << (TIMEZONE_ABBR - 522)) | (1L << (TIMEZONE_HOUR - 522)) | (1L << (TIMEZONE_MINUTE - 522)) | (1L << (TIMEZONE_REGION - 522)) | (1L << (TO_CHAR - 522)) | (1L << (TO_DATE - 522)) | (1L << (TRAILING - 522)) | (1L << (TRANSACTION - 522)) | (1L << (TRANSLATE - 522)) | (1L << (TREAT - 522)) | (1L << (TRIGGER - 522)) | (1L << (TRIM - 522)) | (1L << (TRUNCATE - 522)) | (1L << (TRUSTED - 522)) | (1L << (TYPE - 522)) | (1L << (UNBOUNDED - 522)) | (1L << (UNDER - 522)) | (1L << (UNLIMITED - 522)) | (1L << (UNTIL - 522)) | (1L << (UPDATED - 522)) | (1L << (UPSERT - 522)) | (1L << (UROWID - 522)) | (1L << (USE - 522)) | (1L << (VALIDATE - 522)) | (1L << (VALUE - 522)) | (1L << (VARCHAR - 522)) | (1L << (VARCHAR2 - 522)) | (1L << (VARIABLE - 522)) | (1L << (VARRAY - 522)) | (1L << (VARYING - 522)) | (1L << (VERBOSE - 522)) | (1L << (VERSION - 522)) | (1L << (VERSIONS - 522)) | (1L << (VIEW - 522)) | (1L << (WAIT - 522)) | (1L << (WARNING - 522)) | (1L << (WELLFORMED - 522)) | (1L << (WHENEVER - 522)) | (1L << (WHILE - 522)) | (1L << (WITHOUT - 522)) | (1L << (WITHIN - 522)) | (1L << (WORK - 522)) | (1L << (WRITE - 522)) | (1L << (XML - 522)) | (1L << (XMLAGG - 522)) | (1L << (XMLATTRIBUTES - 522)))) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & ((1L << (XMLCAST - 586)) | (1L << (XMLCOLATTVAL - 586)) | (1L << (XMLELEMENT - 586)) | (1L << (XMLEXISTS - 586)) | (1L << (XMLFOREST - 586)) | (1L << (XMLNAMESPACES - 586)) | (1L << (XMLPARSE - 586)) | (1L << (XMLPI - 586)) | (1L << (XMLQUERY - 586)) | (1L << (XMLROOT - 586)) | (1L << (XMLSERIALIZE - 586)) | (1L << (XMLTABLE - 586)) | (1L << (YEAR - 586)) | (1L << (YES - 586)) | (1L << (YMINTERVAL_UNCONSTRAINED - 586)) | (1L << (ZONE - 586)) | (1L << (PREDICTION - 586)) | (1L << (PREDICTION_BOUNDS - 586)) | (1L << (PREDICTION_COST - 586)) | (1L << (PREDICTION_DETAILS - 586)) | (1L << (PREDICTION_PROBABILITY - 586)) | (1L << (PREDICTION_SET - 586)) | (1L << (CUME_DIST - 586)) | (1L << (DENSE_RANK - 586)) | (1L << (LISTAGG - 586)) | (1L << (PERCENT_RANK - 586)) | (1L << (PERCENTILE_CONT - 586)) | (1L << (PERCENTILE_DISC - 586)) | (1L << (RANK - 586)) | (1L << (AVG - 586)) | (1L << (CORR - 586)) | (1L << (LAG - 586)) | (1L << (LEAD - 586)) | (1L << (MAX - 586)) | (1L << (MEDIAN - 586)) | (1L << (MIN - 586)) | (1L << (NTILE - 586)) | (1L << (RATIO_TO_REPORT - 586)) | (1L << (ROW_NUMBER - 586)) | (1L << (SUM - 586)) | (1L << (VARIANCE - 586)) | (1L << (REGR_ - 586)) | (1L << (STDDEV - 586)) | (1L << (VAR_ - 586)) | (1L << (COVAR_ - 586)))) != 0) || _la==COMMA || _la==REGULAR_ID );
					setState(2849);
					match(RIGHT_PAREN);
					}
				}

				}
			}

			setState(2855);
			match(LEFT_PAREN);
			setState(2866); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(2857);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(2856);
					match(COMMA);
					}
				}

				setState(2859);
				match(PARTITION);
				setState(2861);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BUILD) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (CHR - 65)) | (1L << (CLOB - 65)) | (1L << (CLOSE - 65)) | (1L << (CLUSTER - 65)) | (1L << (COALESCE - 65)) | (1L << (COLLECT - 65)) | (1L << (COLUMNS - 65)) | (1L << (COMMENT - 65)) | (1L << (COMMIT - 65)) | (1L << (COMMITTED - 65)) | (1L << (COMPATIBILITY - 65)) | (1L << (COMPILE - 65)) | (1L << (COMPLETE - 65)) | (1L << (COMPOUND - 65)) | (1L << (CONCAT - 65)) | (1L << (CONSTANT - 65)) | (1L << (CONSTRAINT - 65)) | (1L << (CONSTRAINTS - 65)) | (1L << (CONSTRUCTOR - 65)) | (1L << (CONTENT - 65)) | (1L << (CONTEXT - 65)) | (1L << (CONTINUE - 65)) | (1L << (CONVERT - 65)) | (1L << (CORRUPT_XID - 65)) | (1L << (CORRUPT_XID_ALL - 65)) | (1L << (COST - 65)) | (1L << (COUNT - 65)) | (1L << (CROSS - 65)) | (1L << (CUBE - 65)) | (1L << (CURRENT_USER - 65)) | (1L << (CURSOR - 65)) | (1L << (CUSTOMDATUM - 65)) | (1L << (CYCLE - 65)) | (1L << (DATA - 65)) | (1L << (DATABASE - 65)) | (1L << (DATE - 65)) | (1L << (DAY - 65)) | (1L << (DB_ROLE_CHANGE - 65)) | (1L << (DBTIMEZONE - 65)) | (1L << (DDL - 65)) | (1L << (DEBUG - 65)) | (1L << (DEC - 65)) | (1L << (DECIMAL - 65)) | (1L << (DECODE - 65)) | (1L << (DECOMPOSE - 65)) | (1L << (DECREMENT - 65)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DEMAND - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (EDITIONING - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENFORCED - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FAST - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)) | (1L << (FOLLOWING - 129)) | (1L << (FOLLOWS - 129)) | (1L << (FORALL - 129)) | (1L << (FORCE - 129)))) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & ((1L << (FULL - 197)) | (1L << (FUNCTION - 197)) | (1L << (GROUPING - 197)) | (1L << (HASH - 197)) | (1L << (HIDE - 197)) | (1L << (HOUR - 197)) | (1L << (IGNORE - 197)) | (1L << (IMMEDIATE - 197)) | (1L << (INCLUDE - 197)) | (1L << (INCLUDING - 197)) | (1L << (INCREMENT - 197)) | (1L << (INDENT - 197)) | (1L << (INDEXED - 197)) | (1L << (INDICATOR - 197)) | (1L << (INDICES - 197)) | (1L << (INFINITE - 197)) | (1L << (INLINE - 197)) | (1L << (INNER - 197)) | (1L << (INOUT - 197)) | (1L << (INSTANTIABLE - 197)) | (1L << (INSTEAD - 197)) | (1L << (INT - 197)) | (1L << (INTEGER - 197)) | (1L << (INTERVAL - 197)) | (1L << (INVALIDATE - 197)) | (1L << (ISOLATION - 197)) | (1L << (ITERATE - 197)) | (1L << (JAVA - 197)) | (1L << (JOIN - 197)) | (1L << (KEEP - 197)) | (1L << (LANGUAGE - 197)) | (1L << (LAST - 197)) | (1L << (LAST_VALUE - 197)) | (1L << (LEADING - 197)) | (1L << (LEFT - 197)) | (1L << (LEVEL - 197)))) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & ((1L << (LIBRARY - 261)) | (1L << (LIKE2 - 261)) | (1L << (LIKE4 - 261)) | (1L << (LIKEC - 261)) | (1L << (LIMIT - 261)) | (1L << (LIST - 261)) | (1L << (LOCAL - 261)) | (1L << (LOCKED - 261)) | (1L << (LOG - 261)) | (1L << (LOGOFF - 261)) | (1L << (LOGON - 261)) | (1L << (LONG - 261)) | (1L << (LOOP - 261)) | (1L << (MAIN - 261)) | (1L << (MAP - 261)) | (1L << (MASTER - 261)) | (1L << (MATCHED - 261)) | (1L << (MAXVALUE - 261)) | (1L << (MEASURES - 261)) | (1L << (MEMBER - 261)) | (1L << (MERGE - 261)) | (1L << (MINUTE - 261)) | (1L << (MINVALUE - 261)) | (1L << (MLSLABEL - 261)) | (1L << (MODEL - 261)) | (1L << (MODIFY - 261)) | (1L << (MONTH - 261)) | (1L << (MULTISET - 261)) | (1L << (NAME - 261)) | (1L << (NAN - 261)) | (1L << (NATURAL - 261)) | (1L << (NATURALN - 261)) | (1L << (NAV - 261)) | (1L << (NCHAR - 261)) | (1L << (NCHAR_CS - 261)) | (1L << (NCLOB - 261)) | (1L << (NESTED - 261)) | (1L << (NEVER - 261)) | (1L << (NEW - 261)) | (1L << (NO - 261)) | (1L << (NOAUDIT - 261)) | (1L << (NOCOPY - 261)) | (1L << (NOCYCLE - 261)) | (1L << (NOENTITYESCAPING - 261)))) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & ((1L << (NONE - 329)) | (1L << (NOSCHEMACHECK - 329)) | (1L << (NVL - 329)) | (1L << (NULLS - 329)) | (1L << (NUMBER - 329)) | (1L << (NUMERIC - 329)) | (1L << (NVARCHAR2 - 329)) | (1L << (MATERIALIZED - 329)) | (1L << (OBJECT - 329)) | (1L << (OFF - 329)) | (1L << (OID - 329)) | (1L << (OLD - 329)) | (1L << (ONLY - 329)) | (1L << (OPEN - 329)) | (1L << (ORADATA - 329)) | (1L << (ORDINALITY - 329)) | (1L << (OSERROR - 329)) | (1L << (OUT - 329)) | (1L << (OUTER - 329)) | (1L << (OVER - 329)) | (1L << (OVERRIDING - 329)) | (1L << (PACKAGE - 329)) | (1L << (PARALLEL_ENABLE - 329)) | (1L << (PARAMETERS - 329)) | (1L << (PARENT - 329)) | (1L << (PARTITION - 329)) | (1L << (PASSING - 329)) | (1L << (PATH - 329)) | (1L << (PIPELINED - 329)) | (1L << (PLAN - 329)) | (1L << (PLS_INTEGER - 329)) | (1L << (POSITIVE - 329)) | (1L << (POSITIVEN - 329)) | (1L << (PRAGMA - 329)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (PREBUILT - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)) | (1L << (PRESENT - 393)) | (1L << (PUBLIC - 393)) | (1L << (RAISE - 393)) | (1L << (RANGE - 393)) | (1L << (RAW - 393)) | (1L << (READ - 393)) | (1L << (REAL - 393)) | (1L << (RECORD - 393)) | (1L << (REDUCED - 393)) | (1L << (REF - 393)) | (1L << (REFERENCE - 393)) | (1L << (REFERENCING - 393)) | (1L << (REFRESH - 393)) | (1L << (REJECT - 393)) | (1L << (RELIES_ON - 393)) | (1L << (RENAME - 393)) | (1L << (REPLACE - 393)) | (1L << (RESPECT - 393)) | (1L << (RESTRICT_REFERENCES - 393)) | (1L << (RESULT - 393)) | (1L << (RESULT_CACHE - 393)) | (1L << (RETURN - 393)) | (1L << (RETURNING - 393)) | (1L << (REUSE - 393)) | (1L << (REVERSE - 393)) | (1L << (REWRITE - 393)) | (1L << (RIGHT - 393)) | (1L << (ROLE - 393)) | (1L << (ROLLBACK - 393)) | (1L << (ROLLUP - 393)) | (1L << (ROW - 393)) | (1L << (ROWID - 393)) | (1L << (ROWS - 393)) | (1L << (RULES - 393)) | (1L << (SAMPLE - 393)) | (1L << (SAVE - 393)) | (1L << (SAVEPOINT - 393)) | (1L << (SCHEMA - 393)) | (1L << (SCHEMACHECK - 393)) | (1L << (SCN - 393)) | (1L << (SECOND - 393)))) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & ((1L << (SEED - 458)) | (1L << (SEGMENT - 458)) | (1L << (SELF - 458)) | (1L << (SEQUENTIAL - 458)) | (1L << (SERIALIZABLE - 458)) | (1L << (SERIALLY_REUSABLE - 458)) | (1L << (SERVERERROR - 458)) | (1L << (SESSIONTIMEZONE - 458)) | (1L << (SET - 458)) | (1L << (SETS - 458)) | (1L << (SETTINGS - 458)) | (1L << (SHOW - 458)) | (1L << (SHUTDOWN - 458)) | (1L << (SIBLINGS - 458)) | (1L << (SIGNTYPE - 458)) | (1L << (SIMPLE_INTEGER - 458)) | (1L << (SINGLE - 458)) | (1L << (SIZE - 458)) | (1L << (SKIP_ - 458)) | (1L << (SMALLINT - 458)) | (1L << (SNAPSHOT - 458)) | (1L << (SOME - 458)) | (1L << (SPECIFICATION - 458)) | (1L << (SQLDATA - 458)) | (1L << (SQLERROR - 458)) | (1L << (STANDALONE - 458)) | (1L << (STARTUP - 458)) | (1L << (STATEMENT - 458)) | (1L << (STATEMENT_ID - 458)) | (1L << (STATIC - 458)) | (1L << (STATISTICS - 458)) | (1L << (STRING - 458)) | (1L << (SUBMULTISET - 458)) | (1L << (SUBPARTITION - 458)) | (1L << (SUBSTITUTABLE - 458)) | (1L << (SUBSTRING - 458)) | (1L << (SUBTYPE - 458)) | (1L << (SUCCESS - 458)) | (1L << (SUSPEND - 458)) | (1L << (TABLES - 458)) | (1L << (TIME - 458)) | (1L << (TIMESTAMP - 458)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 458)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 458)) | (1L << (TIMESTAMP_UNCONSTRAINED - 458)))) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & ((1L << (TIMEZONE_ABBR - 522)) | (1L << (TIMEZONE_HOUR - 522)) | (1L << (TIMEZONE_MINUTE - 522)) | (1L << (TIMEZONE_REGION - 522)) | (1L << (TO_CHAR - 522)) | (1L << (TO_DATE - 522)) | (1L << (TRAILING - 522)) | (1L << (TRANSACTION - 522)) | (1L << (TRANSLATE - 522)) | (1L << (TREAT - 522)) | (1L << (TRIGGER - 522)) | (1L << (TRIM - 522)) | (1L << (TRUNCATE - 522)) | (1L << (TRUSTED - 522)) | (1L << (TYPE - 522)) | (1L << (UNBOUNDED - 522)) | (1L << (UNDER - 522)) | (1L << (UNLIMITED - 522)) | (1L << (UNTIL - 522)) | (1L << (UPDATED - 522)) | (1L << (UPSERT - 522)) | (1L << (UROWID - 522)) | (1L << (USE - 522)) | (1L << (VALIDATE - 522)) | (1L << (VALUE - 522)) | (1L << (VARCHAR - 522)) | (1L << (VARCHAR2 - 522)) | (1L << (VARIABLE - 522)) | (1L << (VARRAY - 522)) | (1L << (VARYING - 522)) | (1L << (VERBOSE - 522)) | (1L << (VERSION - 522)) | (1L << (VERSIONS - 522)) | (1L << (VIEW - 522)) | (1L << (WAIT - 522)) | (1L << (WARNING - 522)) | (1L << (WELLFORMED - 522)) | (1L << (WHENEVER - 522)) | (1L << (WHILE - 522)) | (1L << (WITHOUT - 522)) | (1L << (WITHIN - 522)) | (1L << (WORK - 522)) | (1L << (WRITE - 522)) | (1L << (XML - 522)) | (1L << (XMLAGG - 522)) | (1L << (XMLATTRIBUTES - 522)))) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & ((1L << (XMLCAST - 586)) | (1L << (XMLCOLATTVAL - 586)) | (1L << (XMLELEMENT - 586)) | (1L << (XMLEXISTS - 586)) | (1L << (XMLFOREST - 586)) | (1L << (XMLNAMESPACES - 586)) | (1L << (XMLPARSE - 586)) | (1L << (XMLPI - 586)) | (1L << (XMLQUERY - 586)) | (1L << (XMLROOT - 586)) | (1L << (XMLSERIALIZE - 586)) | (1L << (XMLTABLE - 586)) | (1L << (YEAR - 586)) | (1L << (YES - 586)) | (1L << (YMINTERVAL_UNCONSTRAINED - 586)) | (1L << (ZONE - 586)) | (1L << (PREDICTION - 586)) | (1L << (PREDICTION_BOUNDS - 586)) | (1L << (PREDICTION_COST - 586)) | (1L << (PREDICTION_DETAILS - 586)) | (1L << (PREDICTION_PROBABILITY - 586)) | (1L << (PREDICTION_SET - 586)) | (1L << (CUME_DIST - 586)) | (1L << (DENSE_RANK - 586)) | (1L << (LISTAGG - 586)) | (1L << (PERCENT_RANK - 586)) | (1L << (PERCENTILE_CONT - 586)) | (1L << (PERCENTILE_DISC - 586)) | (1L << (RANK - 586)) | (1L << (AVG - 586)) | (1L << (CORR - 586)) | (1L << (LAG - 586)) | (1L << (LEAD - 586)) | (1L << (MAX - 586)) | (1L << (MEDIAN - 586)) | (1L << (MIN - 586)) | (1L << (NTILE - 586)) | (1L << (RATIO_TO_REPORT - 586)) | (1L << (ROW_NUMBER - 586)) | (1L << (SUM - 586)) | (1L << (VARIANCE - 586)) | (1L << (REGR_ - 586)) | (1L << (STDDEV - 586)) | (1L << (VAR_ - 586)) | (1L << (COVAR_ - 586)))) != 0) || _la==REGULAR_ID) {
					{
					setState(2860);
					partition_name();
					}
				}

				setState(2863);
				range_values_clause();
				setState(2864);
				table_partition_description();
				}
				}
				setState(2868); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==PARTITION || _la==COMMA );
			setState(2870);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Range_values_clauseContext extends ParserRuleContext {
		public TerminalNode VALUES() { return getToken(PLSQLParser.VALUES, 0); }
		public TerminalNode LESS() { return getToken(PLSQLParser.LESS, 0); }
		public TerminalNode THAN() { return getToken(PLSQLParser.THAN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PLSQLParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PLSQLParser.RIGHT_PAREN, 0); }
		public List<LiteralContext> literal() {
			return getRuleContexts(LiteralContext.class);
		}
		public LiteralContext literal(int i) {
			return getRuleContext(LiteralContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLSQLParser.COMMA, i);
		}
		public Range_values_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_range_values_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterRange_values_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitRange_values_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitRange_values_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Range_values_clauseContext range_values_clause() throws RecognitionException {
		Range_values_clauseContext _localctx = new Range_values_clauseContext(_ctx, getState());
		enterRule(_localctx, 214, RULE_range_values_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2872);
			match(VALUES);
			setState(2873);
			match(LESS);
			setState(2874);
			match(THAN);
			setState(2875);
			match(LEFT_PAREN);
			setState(2880); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(2877);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(2876);
					match(COMMA);
					}
				}

				setState(2879);
				literal();
				}
				}
				setState(2882); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (CHR - 65)) | (1L << (CONCAT - 65)) | (1L << (DECODE - 65)))) != 0) || _la==MAXVALUE || _la==NVL || ((((_la - 503)) & ~0x3f) == 0 && ((1L << (_la - 503)) & ((1L << (SUBSTRING - 503)) | (1L << (TO_CHAR - 503)) | (1L << (TO_DATE - 503)) | (1L << (TRIM - 503)))) != 0) || ((((_la - 639)) & ~0x3f) == 0 && ((1L << (_la - 639)) & ((1L << (UNSIGNED_INTEGER - 639)) | (1L << (APPROXIMATE_NUM_LIT - 639)) | (1L << (CHAR_STRING - 639)) | (1L << (COMMA - 639)))) != 0) );
			setState(2884);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_partition_descriptionContext extends ParserRuleContext {
		public Deferred_segment_creationContext deferred_segment_creation() {
			return getRuleContext(Deferred_segment_creationContext.class,0);
		}
		public List<Segment_attributes_clauseContext> segment_attributes_clause() {
			return getRuleContexts(Segment_attributes_clauseContext.class);
		}
		public Segment_attributes_clauseContext segment_attributes_clause(int i) {
			return getRuleContext(Segment_attributes_clauseContext.class,i);
		}
		public Table_compressionContext table_compression() {
			return getRuleContext(Table_compressionContext.class,0);
		}
		public Key_compressionContext key_compression() {
			return getRuleContext(Key_compressionContext.class,0);
		}
		public TerminalNode OVERFLOW() { return getToken(PLSQLParser.OVERFLOW, 0); }
		public Lob_storage_clauseContext lob_storage_clause() {
			return getRuleContext(Lob_storage_clauseContext.class,0);
		}
		public Varray_col_propertiesContext varray_col_properties() {
			return getRuleContext(Varray_col_propertiesContext.class,0);
		}
		public Nested_table_col_propertiesContext nested_table_col_properties() {
			return getRuleContext(Nested_table_col_propertiesContext.class,0);
		}
		public Table_partition_descriptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_partition_description; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterTable_partition_description(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitTable_partition_description(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitTable_partition_description(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_partition_descriptionContext table_partition_description() throws RecognitionException {
		Table_partition_descriptionContext _localctx = new Table_partition_descriptionContext(_ctx, getState());
		enterRule(_localctx, 216, RULE_table_partition_description);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2887);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SEGMENT) {
				{
				setState(2886);
				deferred_segment_creation();
				}
			}

			setState(2890);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FILESYSTEM_LIKE_LOGGING || _la==INITRANS || _la==LOGGING || _la==NOLOGGING || _la==PCTFREE || _la==PCTUSED || _la==STORAGE || _la==TABLESPACE) {
				{
				setState(2889);
				segment_attributes_clause();
				}
			}

			setState(2894);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,342,_ctx) ) {
			case 1:
				{
				setState(2892);
				table_compression();
				}
				break;
			case 2:
				{
				setState(2893);
				key_compression();
				}
				break;
			}
			setState(2900);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OVERFLOW) {
				{
				setState(2896);
				match(OVERFLOW);
				setState(2898);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FILESYSTEM_LIKE_LOGGING || _la==INITRANS || _la==LOGGING || _la==NOLOGGING || _la==PCTFREE || _la==PCTUSED || _la==STORAGE || _la==TABLESPACE) {
					{
					setState(2897);
					segment_attributes_clause();
					}
				}

				}
			}

			setState(2905);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LOB:
				{
				setState(2902);
				lob_storage_clause();
				}
				break;
			case VARRAY:
				{
				setState(2903);
				varray_col_properties();
				}
				break;
			case NESTED:
				{
				setState(2904);
				nested_table_col_properties();
				}
				break;
			case EOF:
			case ALTER:
			case AS:
			case CACHE:
			case CREATE:
			case DELETE:
			case DISABLE:
			case DROP:
			case ENABLE:
			case EXPLAIN:
			case FLASHBACK:
			case FUNCTION:
			case GRANT:
			case INSERT:
			case LOCK:
			case MERGE:
			case NO:
			case NOCACHE:
			case NOPARALLEL:
			case NOROWDEPENDENCIES:
			case PARALLEL:
			case PARTITION:
			case PROCEDURE:
			case REFRESH:
			case RESULT_CACHE:
			case REVOKE:
			case ROW:
			case ROWDEPENDENCIES:
			case SELECT:
			case SUBPARTITIONS:
			case UPDATE:
			case WITH:
			case LEFT_PAREN:
			case RIGHT_PAREN:
			case COMMA:
			case SEMICOLON:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class List_partitionsContext extends ParserRuleContext {
		public List<TerminalNode> PARTITION() { return getTokens(PLSQLParser.PARTITION); }
		public TerminalNode PARTITION(int i) {
			return getToken(PLSQLParser.PARTITION, i);
		}
		public TerminalNode BY() { return getToken(PLSQLParser.BY, 0); }
		public TerminalNode LIST() { return getToken(PLSQLParser.LIST, 0); }
		public List<TerminalNode> LEFT_PAREN() { return getTokens(PLSQLParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(PLSQLParser.LEFT_PAREN, i);
		}
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(PLSQLParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(PLSQLParser.RIGHT_PAREN, i);
		}
		public List<List_values_clauseContext> list_values_clause() {
			return getRuleContexts(List_values_clauseContext.class);
		}
		public List_values_clauseContext list_values_clause(int i) {
			return getRuleContext(List_values_clauseContext.class,i);
		}
		public List<Table_partition_descriptionContext> table_partition_description() {
			return getRuleContexts(Table_partition_descriptionContext.class);
		}
		public Table_partition_descriptionContext table_partition_description(int i) {
			return getRuleContext(Table_partition_descriptionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLSQLParser.COMMA, i);
		}
		public List<Partition_nameContext> partition_name() {
			return getRuleContexts(Partition_nameContext.class);
		}
		public Partition_nameContext partition_name(int i) {
			return getRuleContext(Partition_nameContext.class,i);
		}
		public List_partitionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_list_partitions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterList_partitions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitList_partitions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitList_partitions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final List_partitionsContext list_partitions() throws RecognitionException {
		List_partitionsContext _localctx = new List_partitionsContext(_ctx, getState());
		enterRule(_localctx, 218, RULE_list_partitions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2907);
			match(PARTITION);
			setState(2908);
			match(BY);
			setState(2909);
			match(LIST);
			setState(2910);
			match(LEFT_PAREN);
			setState(2911);
			column_name();
			setState(2912);
			match(RIGHT_PAREN);
			setState(2930);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,349,_ctx) ) {
			case 1:
				{
				setState(2913);
				match(LEFT_PAREN);
				setState(2924); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(2915);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(2914);
						match(COMMA);
						}
					}

					setState(2917);
					match(PARTITION);
					setState(2919);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BUILD) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (CHR - 65)) | (1L << (CLOB - 65)) | (1L << (CLOSE - 65)) | (1L << (CLUSTER - 65)) | (1L << (COALESCE - 65)) | (1L << (COLLECT - 65)) | (1L << (COLUMNS - 65)) | (1L << (COMMENT - 65)) | (1L << (COMMIT - 65)) | (1L << (COMMITTED - 65)) | (1L << (COMPATIBILITY - 65)) | (1L << (COMPILE - 65)) | (1L << (COMPLETE - 65)) | (1L << (COMPOUND - 65)) | (1L << (CONCAT - 65)) | (1L << (CONSTANT - 65)) | (1L << (CONSTRAINT - 65)) | (1L << (CONSTRAINTS - 65)) | (1L << (CONSTRUCTOR - 65)) | (1L << (CONTENT - 65)) | (1L << (CONTEXT - 65)) | (1L << (CONTINUE - 65)) | (1L << (CONVERT - 65)) | (1L << (CORRUPT_XID - 65)) | (1L << (CORRUPT_XID_ALL - 65)) | (1L << (COST - 65)) | (1L << (COUNT - 65)) | (1L << (CROSS - 65)) | (1L << (CUBE - 65)) | (1L << (CURRENT_USER - 65)) | (1L << (CURSOR - 65)) | (1L << (CUSTOMDATUM - 65)) | (1L << (CYCLE - 65)) | (1L << (DATA - 65)) | (1L << (DATABASE - 65)) | (1L << (DATE - 65)) | (1L << (DAY - 65)) | (1L << (DB_ROLE_CHANGE - 65)) | (1L << (DBTIMEZONE - 65)) | (1L << (DDL - 65)) | (1L << (DEBUG - 65)) | (1L << (DEC - 65)) | (1L << (DECIMAL - 65)) | (1L << (DECODE - 65)) | (1L << (DECOMPOSE - 65)) | (1L << (DECREMENT - 65)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DEMAND - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (EDITIONING - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENFORCED - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FAST - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)) | (1L << (FOLLOWING - 129)) | (1L << (FOLLOWS - 129)) | (1L << (FORALL - 129)) | (1L << (FORCE - 129)))) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & ((1L << (FULL - 197)) | (1L << (FUNCTION - 197)) | (1L << (GROUPING - 197)) | (1L << (HASH - 197)) | (1L << (HIDE - 197)) | (1L << (HOUR - 197)) | (1L << (IGNORE - 197)) | (1L << (IMMEDIATE - 197)) | (1L << (INCLUDE - 197)) | (1L << (INCLUDING - 197)) | (1L << (INCREMENT - 197)) | (1L << (INDENT - 197)) | (1L << (INDEXED - 197)) | (1L << (INDICATOR - 197)) | (1L << (INDICES - 197)) | (1L << (INFINITE - 197)) | (1L << (INLINE - 197)) | (1L << (INNER - 197)) | (1L << (INOUT - 197)) | (1L << (INSTANTIABLE - 197)) | (1L << (INSTEAD - 197)) | (1L << (INT - 197)) | (1L << (INTEGER - 197)) | (1L << (INTERVAL - 197)) | (1L << (INVALIDATE - 197)) | (1L << (ISOLATION - 197)) | (1L << (ITERATE - 197)) | (1L << (JAVA - 197)) | (1L << (JOIN - 197)) | (1L << (KEEP - 197)) | (1L << (LANGUAGE - 197)) | (1L << (LAST - 197)) | (1L << (LAST_VALUE - 197)) | (1L << (LEADING - 197)) | (1L << (LEFT - 197)) | (1L << (LEVEL - 197)))) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & ((1L << (LIBRARY - 261)) | (1L << (LIKE2 - 261)) | (1L << (LIKE4 - 261)) | (1L << (LIKEC - 261)) | (1L << (LIMIT - 261)) | (1L << (LIST - 261)) | (1L << (LOCAL - 261)) | (1L << (LOCKED - 261)) | (1L << (LOG - 261)) | (1L << (LOGOFF - 261)) | (1L << (LOGON - 261)) | (1L << (LONG - 261)) | (1L << (LOOP - 261)) | (1L << (MAIN - 261)) | (1L << (MAP - 261)) | (1L << (MASTER - 261)) | (1L << (MATCHED - 261)) | (1L << (MAXVALUE - 261)) | (1L << (MEASURES - 261)) | (1L << (MEMBER - 261)) | (1L << (MERGE - 261)) | (1L << (MINUTE - 261)) | (1L << (MINVALUE - 261)) | (1L << (MLSLABEL - 261)) | (1L << (MODEL - 261)) | (1L << (MODIFY - 261)) | (1L << (MONTH - 261)) | (1L << (MULTISET - 261)) | (1L << (NAME - 261)) | (1L << (NAN - 261)) | (1L << (NATURAL - 261)) | (1L << (NATURALN - 261)) | (1L << (NAV - 261)) | (1L << (NCHAR - 261)) | (1L << (NCHAR_CS - 261)) | (1L << (NCLOB - 261)) | (1L << (NESTED - 261)) | (1L << (NEVER - 261)) | (1L << (NEW - 261)) | (1L << (NO - 261)) | (1L << (NOAUDIT - 261)) | (1L << (NOCOPY - 261)) | (1L << (NOCYCLE - 261)) | (1L << (NOENTITYESCAPING - 261)))) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & ((1L << (NONE - 329)) | (1L << (NOSCHEMACHECK - 329)) | (1L << (NVL - 329)) | (1L << (NULLS - 329)) | (1L << (NUMBER - 329)) | (1L << (NUMERIC - 329)) | (1L << (NVARCHAR2 - 329)) | (1L << (MATERIALIZED - 329)) | (1L << (OBJECT - 329)) | (1L << (OFF - 329)) | (1L << (OID - 329)) | (1L << (OLD - 329)) | (1L << (ONLY - 329)) | (1L << (OPEN - 329)) | (1L << (ORADATA - 329)) | (1L << (ORDINALITY - 329)) | (1L << (OSERROR - 329)) | (1L << (OUT - 329)) | (1L << (OUTER - 329)) | (1L << (OVER - 329)) | (1L << (OVERRIDING - 329)) | (1L << (PACKAGE - 329)) | (1L << (PARALLEL_ENABLE - 329)) | (1L << (PARAMETERS - 329)) | (1L << (PARENT - 329)) | (1L << (PARTITION - 329)) | (1L << (PASSING - 329)) | (1L << (PATH - 329)) | (1L << (PIPELINED - 329)) | (1L << (PLAN - 329)) | (1L << (PLS_INTEGER - 329)) | (1L << (POSITIVE - 329)) | (1L << (POSITIVEN - 329)) | (1L << (PRAGMA - 329)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (PREBUILT - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)) | (1L << (PRESENT - 393)) | (1L << (PUBLIC - 393)) | (1L << (RAISE - 393)) | (1L << (RANGE - 393)) | (1L << (RAW - 393)) | (1L << (READ - 393)) | (1L << (REAL - 393)) | (1L << (RECORD - 393)) | (1L << (REDUCED - 393)) | (1L << (REF - 393)) | (1L << (REFERENCE - 393)) | (1L << (REFERENCING - 393)) | (1L << (REFRESH - 393)) | (1L << (REJECT - 393)) | (1L << (RELIES_ON - 393)) | (1L << (RENAME - 393)) | (1L << (REPLACE - 393)) | (1L << (RESPECT - 393)) | (1L << (RESTRICT_REFERENCES - 393)) | (1L << (RESULT - 393)) | (1L << (RESULT_CACHE - 393)) | (1L << (RETURN - 393)) | (1L << (RETURNING - 393)) | (1L << (REUSE - 393)) | (1L << (REVERSE - 393)) | (1L << (REWRITE - 393)) | (1L << (RIGHT - 393)) | (1L << (ROLE - 393)) | (1L << (ROLLBACK - 393)) | (1L << (ROLLUP - 393)) | (1L << (ROW - 393)) | (1L << (ROWID - 393)) | (1L << (ROWS - 393)) | (1L << (RULES - 393)) | (1L << (SAMPLE - 393)) | (1L << (SAVE - 393)) | (1L << (SAVEPOINT - 393)) | (1L << (SCHEMA - 393)) | (1L << (SCHEMACHECK - 393)) | (1L << (SCN - 393)) | (1L << (SECOND - 393)))) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & ((1L << (SEED - 458)) | (1L << (SEGMENT - 458)) | (1L << (SELF - 458)) | (1L << (SEQUENTIAL - 458)) | (1L << (SERIALIZABLE - 458)) | (1L << (SERIALLY_REUSABLE - 458)) | (1L << (SERVERERROR - 458)) | (1L << (SESSIONTIMEZONE - 458)) | (1L << (SET - 458)) | (1L << (SETS - 458)) | (1L << (SETTINGS - 458)) | (1L << (SHOW - 458)) | (1L << (SHUTDOWN - 458)) | (1L << (SIBLINGS - 458)) | (1L << (SIGNTYPE - 458)) | (1L << (SIMPLE_INTEGER - 458)) | (1L << (SINGLE - 458)) | (1L << (SIZE - 458)) | (1L << (SKIP_ - 458)) | (1L << (SMALLINT - 458)) | (1L << (SNAPSHOT - 458)) | (1L << (SOME - 458)) | (1L << (SPECIFICATION - 458)) | (1L << (SQLDATA - 458)) | (1L << (SQLERROR - 458)) | (1L << (STANDALONE - 458)) | (1L << (STARTUP - 458)) | (1L << (STATEMENT - 458)) | (1L << (STATEMENT_ID - 458)) | (1L << (STATIC - 458)) | (1L << (STATISTICS - 458)) | (1L << (STRING - 458)) | (1L << (SUBMULTISET - 458)) | (1L << (SUBPARTITION - 458)) | (1L << (SUBSTITUTABLE - 458)) | (1L << (SUBSTRING - 458)) | (1L << (SUBTYPE - 458)) | (1L << (SUCCESS - 458)) | (1L << (SUSPEND - 458)) | (1L << (TABLES - 458)) | (1L << (TIME - 458)) | (1L << (TIMESTAMP - 458)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 458)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 458)) | (1L << (TIMESTAMP_UNCONSTRAINED - 458)))) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & ((1L << (TIMEZONE_ABBR - 522)) | (1L << (TIMEZONE_HOUR - 522)) | (1L << (TIMEZONE_MINUTE - 522)) | (1L << (TIMEZONE_REGION - 522)) | (1L << (TO_CHAR - 522)) | (1L << (TO_DATE - 522)) | (1L << (TRAILING - 522)) | (1L << (TRANSACTION - 522)) | (1L << (TRANSLATE - 522)) | (1L << (TREAT - 522)) | (1L << (TRIGGER - 522)) | (1L << (TRIM - 522)) | (1L << (TRUNCATE - 522)) | (1L << (TRUSTED - 522)) | (1L << (TYPE - 522)) | (1L << (UNBOUNDED - 522)) | (1L << (UNDER - 522)) | (1L << (UNLIMITED - 522)) | (1L << (UNTIL - 522)) | (1L << (UPDATED - 522)) | (1L << (UPSERT - 522)) | (1L << (UROWID - 522)) | (1L << (USE - 522)) | (1L << (VALIDATE - 522)) | (1L << (VALUE - 522)) | (1L << (VARCHAR - 522)) | (1L << (VARCHAR2 - 522)) | (1L << (VARIABLE - 522)) | (1L << (VARRAY - 522)) | (1L << (VARYING - 522)) | (1L << (VERBOSE - 522)) | (1L << (VERSION - 522)) | (1L << (VERSIONS - 522)) | (1L << (VIEW - 522)) | (1L << (WAIT - 522)) | (1L << (WARNING - 522)) | (1L << (WELLFORMED - 522)) | (1L << (WHENEVER - 522)) | (1L << (WHILE - 522)) | (1L << (WITHOUT - 522)) | (1L << (WITHIN - 522)) | (1L << (WORK - 522)) | (1L << (WRITE - 522)) | (1L << (XML - 522)) | (1L << (XMLAGG - 522)) | (1L << (XMLATTRIBUTES - 522)))) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & ((1L << (XMLCAST - 586)) | (1L << (XMLCOLATTVAL - 586)) | (1L << (XMLELEMENT - 586)) | (1L << (XMLEXISTS - 586)) | (1L << (XMLFOREST - 586)) | (1L << (XMLNAMESPACES - 586)) | (1L << (XMLPARSE - 586)) | (1L << (XMLPI - 586)) | (1L << (XMLQUERY - 586)) | (1L << (XMLROOT - 586)) | (1L << (XMLSERIALIZE - 586)) | (1L << (XMLTABLE - 586)) | (1L << (YEAR - 586)) | (1L << (YES - 586)) | (1L << (YMINTERVAL_UNCONSTRAINED - 586)) | (1L << (ZONE - 586)) | (1L << (PREDICTION - 586)) | (1L << (PREDICTION_BOUNDS - 586)) | (1L << (PREDICTION_COST - 586)) | (1L << (PREDICTION_DETAILS - 586)) | (1L << (PREDICTION_PROBABILITY - 586)) | (1L << (PREDICTION_SET - 586)) | (1L << (CUME_DIST - 586)) | (1L << (DENSE_RANK - 586)) | (1L << (LISTAGG - 586)) | (1L << (PERCENT_RANK - 586)) | (1L << (PERCENTILE_CONT - 586)) | (1L << (PERCENTILE_DISC - 586)) | (1L << (RANK - 586)) | (1L << (AVG - 586)) | (1L << (CORR - 586)) | (1L << (LAG - 586)) | (1L << (LEAD - 586)) | (1L << (MAX - 586)) | (1L << (MEDIAN - 586)) | (1L << (MIN - 586)) | (1L << (NTILE - 586)) | (1L << (RATIO_TO_REPORT - 586)) | (1L << (ROW_NUMBER - 586)) | (1L << (SUM - 586)) | (1L << (VARIANCE - 586)) | (1L << (REGR_ - 586)) | (1L << (STDDEV - 586)) | (1L << (VAR_ - 586)) | (1L << (COVAR_ - 586)))) != 0) || _la==REGULAR_ID) {
						{
						setState(2918);
						partition_name();
						}
					}

					setState(2921);
					list_values_clause();
					setState(2922);
					table_partition_description();
					}
					}
					setState(2926); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==PARTITION || _la==COMMA );
				setState(2928);
				match(RIGHT_PAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class List_values_clauseContext extends ParserRuleContext {
		public TerminalNode VALUES() { return getToken(PLSQLParser.VALUES, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PLSQLParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PLSQLParser.RIGHT_PAREN, 0); }
		public TerminalNode DEFAULT() { return getToken(PLSQLParser.DEFAULT, 0); }
		public List<LiteralContext> literal() {
			return getRuleContexts(LiteralContext.class);
		}
		public LiteralContext literal(int i) {
			return getRuleContext(LiteralContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLSQLParser.COMMA, i);
		}
		public List_values_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_list_values_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterList_values_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitList_values_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitList_values_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final List_values_clauseContext list_values_clause() throws RecognitionException {
		List_values_clauseContext _localctx = new List_values_clauseContext(_ctx, getState());
		enterRule(_localctx, 220, RULE_list_values_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2932);
			match(VALUES);
			setState(2933);
			match(LEFT_PAREN);
			setState(2943);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CHR:
			case CONCAT:
			case DECODE:
			case MAXVALUE:
			case NVL:
			case SUBSTRING:
			case TO_CHAR:
			case TO_DATE:
			case TRIM:
			case UNSIGNED_INTEGER:
			case APPROXIMATE_NUM_LIT:
			case CHAR_STRING:
			case COMMA:
				{
				setState(2938); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(2935);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(2934);
						match(COMMA);
						}
					}

					setState(2937);
					literal();
					}
					}
					setState(2940); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (CHR - 65)) | (1L << (CONCAT - 65)) | (1L << (DECODE - 65)))) != 0) || _la==MAXVALUE || _la==NVL || ((((_la - 503)) & ~0x3f) == 0 && ((1L << (_la - 503)) & ((1L << (SUBSTRING - 503)) | (1L << (TO_CHAR - 503)) | (1L << (TO_DATE - 503)) | (1L << (TRIM - 503)))) != 0) || ((((_la - 639)) & ~0x3f) == 0 && ((1L << (_la - 639)) & ((1L << (UNSIGNED_INTEGER - 639)) | (1L << (APPROXIMATE_NUM_LIT - 639)) | (1L << (CHAR_STRING - 639)) | (1L << (COMMA - 639)))) != 0) );
				}
				break;
			case DEFAULT:
				{
				setState(2942);
				match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2945);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Hash_partitionsContext extends ParserRuleContext {
		public TerminalNode PARTITION() { return getToken(PLSQLParser.PARTITION, 0); }
		public TerminalNode BY() { return getToken(PLSQLParser.BY, 0); }
		public TerminalNode HASH() { return getToken(PLSQLParser.HASH, 0); }
		public Paren_column_listContext paren_column_list() {
			return getRuleContext(Paren_column_listContext.class,0);
		}
		public Individual_hash_partitionsContext individual_hash_partitions() {
			return getRuleContext(Individual_hash_partitionsContext.class,0);
		}
		public Hash_partitions_by_quantityContext hash_partitions_by_quantity() {
			return getRuleContext(Hash_partitions_by_quantityContext.class,0);
		}
		public Hash_partitionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_hash_partitions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterHash_partitions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitHash_partitions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitHash_partitions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Hash_partitionsContext hash_partitions() throws RecognitionException {
		Hash_partitionsContext _localctx = new Hash_partitionsContext(_ctx, getState());
		enterRule(_localctx, 222, RULE_hash_partitions);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2947);
			match(PARTITION);
			setState(2948);
			match(BY);
			setState(2949);
			match(HASH);
			setState(2950);
			paren_column_list();
			setState(2953);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LEFT_PAREN:
				{
				setState(2951);
				individual_hash_partitions();
				}
				break;
			case PARTITIONS:
				{
				setState(2952);
				hash_partitions_by_quantity();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Composite_range_partitionsContext extends ParserRuleContext {
		public TerminalNode PARTITION() { return getToken(PLSQLParser.PARTITION, 0); }
		public TerminalNode BY() { return getToken(PLSQLParser.BY, 0); }
		public TerminalNode RANGE() { return getToken(PLSQLParser.RANGE, 0); }
		public Paren_column_listContext paren_column_list() {
			return getRuleContext(Paren_column_listContext.class,0);
		}
		public List<TerminalNode> LEFT_PAREN() { return getTokens(PLSQLParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(PLSQLParser.LEFT_PAREN, i);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(PLSQLParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(PLSQLParser.RIGHT_PAREN, i);
		}
		public Subpartition_by_rangeContext subpartition_by_range() {
			return getRuleContext(Subpartition_by_rangeContext.class,0);
		}
		public Subpartition_by_listContext subpartition_by_list() {
			return getRuleContext(Subpartition_by_listContext.class,0);
		}
		public Subpartition_by_hashContext subpartition_by_hash() {
			return getRuleContext(Subpartition_by_hashContext.class,0);
		}
		public TerminalNode INTERVAL() { return getToken(PLSQLParser.INTERVAL, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public List<Range_partition_descContext> range_partition_desc() {
			return getRuleContexts(Range_partition_descContext.class);
		}
		public Range_partition_descContext range_partition_desc(int i) {
			return getRuleContext(Range_partition_descContext.class,i);
		}
		public TerminalNode STORE() { return getToken(PLSQLParser.STORE, 0); }
		public TerminalNode IN() { return getToken(PLSQLParser.IN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PLSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLSQLParser.COMMA, i);
		}
		public List<TablespaceContext> tablespace() {
			return getRuleContexts(TablespaceContext.class);
		}
		public TablespaceContext tablespace(int i) {
			return getRuleContext(TablespaceContext.class,i);
		}
		public Composite_range_partitionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_composite_range_partitions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterComposite_range_partitions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitComposite_range_partitions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitComposite_range_partitions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Composite_range_partitionsContext composite_range_partitions() throws RecognitionException {
		Composite_range_partitionsContext _localctx = new Composite_range_partitionsContext(_ctx, getState());
		enterRule(_localctx, 224, RULE_composite_range_partitions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2955);
			match(PARTITION);
			setState(2956);
			match(BY);
			setState(2957);
			match(RANGE);
			setState(2958);
			paren_column_list();
			setState(2978);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INTERVAL) {
				{
				setState(2959);
				match(INTERVAL);
				setState(2960);
				match(LEFT_PAREN);
				setState(2961);
				expression(0);
				setState(2962);
				match(RIGHT_PAREN);
				setState(2976);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==STORE) {
					{
					setState(2963);
					match(STORE);
					setState(2964);
					match(IN);
					setState(2965);
					match(LEFT_PAREN);
					setState(2970); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						{
						setState(2967);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(2966);
							match(COMMA);
							}
						}

						setState(2969);
						tablespace();
						}
						}
						setState(2972); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BUILD) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (CHR - 65)) | (1L << (CLOB - 65)) | (1L << (CLOSE - 65)) | (1L << (CLUSTER - 65)) | (1L << (COALESCE - 65)) | (1L << (COLLECT - 65)) | (1L << (COLUMNS - 65)) | (1L << (COMMENT - 65)) | (1L << (COMMIT - 65)) | (1L << (COMMITTED - 65)) | (1L << (COMPATIBILITY - 65)) | (1L << (COMPILE - 65)) | (1L << (COMPLETE - 65)) | (1L << (COMPOUND - 65)) | (1L << (CONCAT - 65)) | (1L << (CONSTANT - 65)) | (1L << (CONSTRAINT - 65)) | (1L << (CONSTRAINTS - 65)) | (1L << (CONSTRUCTOR - 65)) | (1L << (CONTENT - 65)) | (1L << (CONTEXT - 65)) | (1L << (CONTINUE - 65)) | (1L << (CONVERT - 65)) | (1L << (CORRUPT_XID - 65)) | (1L << (CORRUPT_XID_ALL - 65)) | (1L << (COST - 65)) | (1L << (COUNT - 65)) | (1L << (CROSS - 65)) | (1L << (CUBE - 65)) | (1L << (CURRENT_USER - 65)) | (1L << (CURSOR - 65)) | (1L << (CUSTOMDATUM - 65)) | (1L << (CYCLE - 65)) | (1L << (DATA - 65)) | (1L << (DATABASE - 65)) | (1L << (DATE - 65)) | (1L << (DAY - 65)) | (1L << (DB_ROLE_CHANGE - 65)) | (1L << (DBTIMEZONE - 65)) | (1L << (DDL - 65)) | (1L << (DEBUG - 65)) | (1L << (DEC - 65)) | (1L << (DECIMAL - 65)) | (1L << (DECODE - 65)) | (1L << (DECOMPOSE - 65)) | (1L << (DECREMENT - 65)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DEMAND - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (EDITIONING - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENFORCED - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FAST - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)) | (1L << (FOLLOWING - 129)) | (1L << (FOLLOWS - 129)) | (1L << (FORALL - 129)) | (1L << (FORCE - 129)))) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & ((1L << (FULL - 197)) | (1L << (FUNCTION - 197)) | (1L << (GROUPING - 197)) | (1L << (HASH - 197)) | (1L << (HIDE - 197)) | (1L << (HOUR - 197)) | (1L << (IGNORE - 197)) | (1L << (IMMEDIATE - 197)) | (1L << (INCLUDE - 197)) | (1L << (INCLUDING - 197)) | (1L << (INCREMENT - 197)) | (1L << (INDENT - 197)) | (1L << (INDEXED - 197)) | (1L << (INDICATOR - 197)) | (1L << (INDICES - 197)) | (1L << (INFINITE - 197)) | (1L << (INLINE - 197)) | (1L << (INNER - 197)) | (1L << (INOUT - 197)) | (1L << (INSTANTIABLE - 197)) | (1L << (INSTEAD - 197)) | (1L << (INT - 197)) | (1L << (INTEGER - 197)) | (1L << (INTERVAL - 197)) | (1L << (INVALIDATE - 197)) | (1L << (ISOLATION - 197)) | (1L << (ITERATE - 197)) | (1L << (JAVA - 197)) | (1L << (JOIN - 197)) | (1L << (KEEP - 197)) | (1L << (LANGUAGE - 197)) | (1L << (LAST - 197)) | (1L << (LAST_VALUE - 197)) | (1L << (LEADING - 197)) | (1L << (LEFT - 197)) | (1L << (LEVEL - 197)))) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & ((1L << (LIBRARY - 261)) | (1L << (LIKE2 - 261)) | (1L << (LIKE4 - 261)) | (1L << (LIKEC - 261)) | (1L << (LIMIT - 261)) | (1L << (LIST - 261)) | (1L << (LOCAL - 261)) | (1L << (LOCKED - 261)) | (1L << (LOG - 261)) | (1L << (LOGOFF - 261)) | (1L << (LOGON - 261)) | (1L << (LONG - 261)) | (1L << (LOOP - 261)) | (1L << (MAIN - 261)) | (1L << (MAP - 261)) | (1L << (MASTER - 261)) | (1L << (MATCHED - 261)) | (1L << (MAXVALUE - 261)) | (1L << (MEASURES - 261)) | (1L << (MEMBER - 261)) | (1L << (MERGE - 261)) | (1L << (MINUTE - 261)) | (1L << (MINVALUE - 261)) | (1L << (MLSLABEL - 261)) | (1L << (MODEL - 261)) | (1L << (MODIFY - 261)) | (1L << (MONTH - 261)) | (1L << (MULTISET - 261)) | (1L << (NAME - 261)) | (1L << (NAN - 261)) | (1L << (NATURAL - 261)) | (1L << (NATURALN - 261)) | (1L << (NAV - 261)) | (1L << (NCHAR - 261)) | (1L << (NCHAR_CS - 261)) | (1L << (NCLOB - 261)) | (1L << (NESTED - 261)) | (1L << (NEVER - 261)) | (1L << (NEW - 261)) | (1L << (NO - 261)) | (1L << (NOAUDIT - 261)) | (1L << (NOCOPY - 261)) | (1L << (NOCYCLE - 261)) | (1L << (NOENTITYESCAPING - 261)))) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & ((1L << (NONE - 329)) | (1L << (NOSCHEMACHECK - 329)) | (1L << (NVL - 329)) | (1L << (NULLS - 329)) | (1L << (NUMBER - 329)) | (1L << (NUMERIC - 329)) | (1L << (NVARCHAR2 - 329)) | (1L << (MATERIALIZED - 329)) | (1L << (OBJECT - 329)) | (1L << (OFF - 329)) | (1L << (OID - 329)) | (1L << (OLD - 329)) | (1L << (ONLY - 329)) | (1L << (OPEN - 329)) | (1L << (ORADATA - 329)) | (1L << (ORDINALITY - 329)) | (1L << (OSERROR - 329)) | (1L << (OUT - 329)) | (1L << (OUTER - 329)) | (1L << (OVER - 329)) | (1L << (OVERRIDING - 329)) | (1L << (PACKAGE - 329)) | (1L << (PARALLEL_ENABLE - 329)) | (1L << (PARAMETERS - 329)) | (1L << (PARENT - 329)) | (1L << (PARTITION - 329)) | (1L << (PASSING - 329)) | (1L << (PATH - 329)) | (1L << (PIPELINED - 329)) | (1L << (PLAN - 329)) | (1L << (PLS_INTEGER - 329)) | (1L << (POSITIVE - 329)) | (1L << (POSITIVEN - 329)) | (1L << (PRAGMA - 329)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (PREBUILT - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)) | (1L << (PRESENT - 393)) | (1L << (PUBLIC - 393)) | (1L << (RAISE - 393)) | (1L << (RANGE - 393)) | (1L << (RAW - 393)) | (1L << (READ - 393)) | (1L << (REAL - 393)) | (1L << (RECORD - 393)) | (1L << (REDUCED - 393)) | (1L << (REF - 393)) | (1L << (REFERENCE - 393)) | (1L << (REFERENCING - 393)) | (1L << (REFRESH - 393)) | (1L << (REJECT - 393)) | (1L << (RELIES_ON - 393)) | (1L << (RENAME - 393)) | (1L << (REPLACE - 393)) | (1L << (RESPECT - 393)) | (1L << (RESTRICT_REFERENCES - 393)) | (1L << (RESULT - 393)) | (1L << (RESULT_CACHE - 393)) | (1L << (RETURN - 393)) | (1L << (RETURNING - 393)) | (1L << (REUSE - 393)) | (1L << (REVERSE - 393)) | (1L << (REWRITE - 393)) | (1L << (RIGHT - 393)) | (1L << (ROLE - 393)) | (1L << (ROLLBACK - 393)) | (1L << (ROLLUP - 393)) | (1L << (ROW - 393)) | (1L << (ROWID - 393)) | (1L << (ROWS - 393)) | (1L << (RULES - 393)) | (1L << (SAMPLE - 393)) | (1L << (SAVE - 393)) | (1L << (SAVEPOINT - 393)) | (1L << (SCHEMA - 393)) | (1L << (SCHEMACHECK - 393)) | (1L << (SCN - 393)) | (1L << (SECOND - 393)))) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & ((1L << (SEED - 458)) | (1L << (SEGMENT - 458)) | (1L << (SELF - 458)) | (1L << (SEQUENTIAL - 458)) | (1L << (SERIALIZABLE - 458)) | (1L << (SERIALLY_REUSABLE - 458)) | (1L << (SERVERERROR - 458)) | (1L << (SESSIONTIMEZONE - 458)) | (1L << (SET - 458)) | (1L << (SETS - 458)) | (1L << (SETTINGS - 458)) | (1L << (SHOW - 458)) | (1L << (SHUTDOWN - 458)) | (1L << (SIBLINGS - 458)) | (1L << (SIGNTYPE - 458)) | (1L << (SIMPLE_INTEGER - 458)) | (1L << (SINGLE - 458)) | (1L << (SIZE - 458)) | (1L << (SKIP_ - 458)) | (1L << (SMALLINT - 458)) | (1L << (SNAPSHOT - 458)) | (1L << (SOME - 458)) | (1L << (SPECIFICATION - 458)) | (1L << (SQLDATA - 458)) | (1L << (SQLERROR - 458)) | (1L << (STANDALONE - 458)) | (1L << (STARTUP - 458)) | (1L << (STATEMENT - 458)) | (1L << (STATEMENT_ID - 458)) | (1L << (STATIC - 458)) | (1L << (STATISTICS - 458)) | (1L << (STRING - 458)) | (1L << (SUBMULTISET - 458)) | (1L << (SUBPARTITION - 458)) | (1L << (SUBSTITUTABLE - 458)) | (1L << (SUBSTRING - 458)) | (1L << (SUBTYPE - 458)) | (1L << (SUCCESS - 458)) | (1L << (SUSPEND - 458)) | (1L << (TABLES - 458)) | (1L << (TIME - 458)) | (1L << (TIMESTAMP - 458)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 458)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 458)) | (1L << (TIMESTAMP_UNCONSTRAINED - 458)))) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & ((1L << (TIMEZONE_ABBR - 522)) | (1L << (TIMEZONE_HOUR - 522)) | (1L << (TIMEZONE_MINUTE - 522)) | (1L << (TIMEZONE_REGION - 522)) | (1L << (TO_CHAR - 522)) | (1L << (TO_DATE - 522)) | (1L << (TRAILING - 522)) | (1L << (TRANSACTION - 522)) | (1L << (TRANSLATE - 522)) | (1L << (TREAT - 522)) | (1L << (TRIGGER - 522)) | (1L << (TRIM - 522)) | (1L << (TRUNCATE - 522)) | (1L << (TRUSTED - 522)) | (1L << (TYPE - 522)) | (1L << (UNBOUNDED - 522)) | (1L << (UNDER - 522)) | (1L << (UNLIMITED - 522)) | (1L << (UNTIL - 522)) | (1L << (UPDATED - 522)) | (1L << (UPSERT - 522)) | (1L << (UROWID - 522)) | (1L << (USE - 522)) | (1L << (VALIDATE - 522)) | (1L << (VALUE - 522)) | (1L << (VARCHAR - 522)) | (1L << (VARCHAR2 - 522)) | (1L << (VARIABLE - 522)) | (1L << (VARRAY - 522)) | (1L << (VARYING - 522)) | (1L << (VERBOSE - 522)) | (1L << (VERSION - 522)) | (1L << (VERSIONS - 522)) | (1L << (VIEW - 522)) | (1L << (WAIT - 522)) | (1L << (WARNING - 522)) | (1L << (WELLFORMED - 522)) | (1L << (WHENEVER - 522)) | (1L << (WHILE - 522)) | (1L << (WITHOUT - 522)) | (1L << (WITHIN - 522)) | (1L << (WORK - 522)) | (1L << (WRITE - 522)) | (1L << (XML - 522)) | (1L << (XMLAGG - 522)) | (1L << (XMLATTRIBUTES - 522)))) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & ((1L << (XMLCAST - 586)) | (1L << (XMLCOLATTVAL - 586)) | (1L << (XMLELEMENT - 586)) | (1L << (XMLEXISTS - 586)) | (1L << (XMLFOREST - 586)) | (1L << (XMLNAMESPACES - 586)) | (1L << (XMLPARSE - 586)) | (1L << (XMLPI - 586)) | (1L << (XMLQUERY - 586)) | (1L << (XMLROOT - 586)) | (1L << (XMLSERIALIZE - 586)) | (1L << (XMLTABLE - 586)) | (1L << (YEAR - 586)) | (1L << (YES - 586)) | (1L << (YMINTERVAL_UNCONSTRAINED - 586)) | (1L << (ZONE - 586)) | (1L << (PREDICTION - 586)) | (1L << (PREDICTION_BOUNDS - 586)) | (1L << (PREDICTION_COST - 586)) | (1L << (PREDICTION_DETAILS - 586)) | (1L << (PREDICTION_PROBABILITY - 586)) | (1L << (PREDICTION_SET - 586)) | (1L << (CUME_DIST - 586)) | (1L << (DENSE_RANK - 586)) | (1L << (LISTAGG - 586)) | (1L << (PERCENT_RANK - 586)) | (1L << (PERCENTILE_CONT - 586)) | (1L << (PERCENTILE_DISC - 586)) | (1L << (RANK - 586)) | (1L << (AVG - 586)) | (1L << (CORR - 586)) | (1L << (LAG - 586)) | (1L << (LEAD - 586)) | (1L << (MAX - 586)) | (1L << (MEDIAN - 586)) | (1L << (MIN - 586)) | (1L << (NTILE - 586)) | (1L << (RATIO_TO_REPORT - 586)) | (1L << (ROW_NUMBER - 586)) | (1L << (SUM - 586)) | (1L << (VARIANCE - 586)) | (1L << (REGR_ - 586)) | (1L << (STDDEV - 586)) | (1L << (VAR_ - 586)) | (1L << (COVAR_ - 586)))) != 0) || _la==COMMA || _la==REGULAR_ID );
					setState(2974);
					match(RIGHT_PAREN);
					}
				}

				}
			}

			setState(2983);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,358,_ctx) ) {
			case 1:
				{
				setState(2980);
				subpartition_by_range();
				}
				break;
			case 2:
				{
				setState(2981);
				subpartition_by_list();
				}
				break;
			case 3:
				{
				setState(2982);
				subpartition_by_hash();
				}
				break;
			}
			setState(2985);
			match(LEFT_PAREN);
			setState(2990); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(2987);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(2986);
					match(COMMA);
					}
				}

				setState(2989);
				range_partition_desc();
				}
				}
				setState(2992); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==PARTITION || _la==COMMA );
			setState(2994);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Subpartition_by_rangeContext extends ParserRuleContext {
		public TerminalNode SUBPARTITION() { return getToken(PLSQLParser.SUBPARTITION, 0); }
		public TerminalNode BY() { return getToken(PLSQLParser.BY, 0); }
		public TerminalNode RANGE() { return getToken(PLSQLParser.RANGE, 0); }
		public Paren_column_listContext paren_column_list() {
			return getRuleContext(Paren_column_listContext.class,0);
		}
		public Subpartition_templateContext subpartition_template() {
			return getRuleContext(Subpartition_templateContext.class,0);
		}
		public Subpartition_by_rangeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subpartition_by_range; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterSubpartition_by_range(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitSubpartition_by_range(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitSubpartition_by_range(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Subpartition_by_rangeContext subpartition_by_range() throws RecognitionException {
		Subpartition_by_rangeContext _localctx = new Subpartition_by_rangeContext(_ctx, getState());
		enterRule(_localctx, 226, RULE_subpartition_by_range);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2996);
			match(SUBPARTITION);
			setState(2997);
			match(BY);
			setState(2998);
			match(RANGE);
			setState(2999);
			paren_column_list();
			setState(3001);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SUBPARTITION) {
				{
				setState(3000);
				subpartition_template();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Subpartition_by_listContext extends ParserRuleContext {
		public TerminalNode SUBPARTITION() { return getToken(PLSQLParser.SUBPARTITION, 0); }
		public TerminalNode BY() { return getToken(PLSQLParser.BY, 0); }
		public TerminalNode LIST() { return getToken(PLSQLParser.LIST, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PLSQLParser.LEFT_PAREN, 0); }
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PLSQLParser.RIGHT_PAREN, 0); }
		public Subpartition_templateContext subpartition_template() {
			return getRuleContext(Subpartition_templateContext.class,0);
		}
		public Subpartition_by_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subpartition_by_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterSubpartition_by_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitSubpartition_by_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitSubpartition_by_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Subpartition_by_listContext subpartition_by_list() throws RecognitionException {
		Subpartition_by_listContext _localctx = new Subpartition_by_listContext(_ctx, getState());
		enterRule(_localctx, 228, RULE_subpartition_by_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3003);
			match(SUBPARTITION);
			setState(3004);
			match(BY);
			setState(3005);
			match(LIST);
			setState(3006);
			match(LEFT_PAREN);
			setState(3007);
			column_name();
			setState(3008);
			match(RIGHT_PAREN);
			setState(3010);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SUBPARTITION) {
				{
				setState(3009);
				subpartition_template();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Subpartition_templateContext extends ParserRuleContext {
		public TerminalNode SUBPARTITION() { return getToken(PLSQLParser.SUBPARTITION, 0); }
		public TerminalNode TEMPLATE() { return getToken(PLSQLParser.TEMPLATE, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PLSQLParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PLSQLParser.RIGHT_PAREN, 0); }
		public Hash_subpartition_quantityContext hash_subpartition_quantity() {
			return getRuleContext(Hash_subpartition_quantityContext.class,0);
		}
		public List<Range_subpartition_descContext> range_subpartition_desc() {
			return getRuleContexts(Range_subpartition_descContext.class);
		}
		public Range_subpartition_descContext range_subpartition_desc(int i) {
			return getRuleContext(Range_subpartition_descContext.class,i);
		}
		public List<List_subpartition_descContext> list_subpartition_desc() {
			return getRuleContexts(List_subpartition_descContext.class);
		}
		public List_subpartition_descContext list_subpartition_desc(int i) {
			return getRuleContext(List_subpartition_descContext.class,i);
		}
		public List<Individual_hash_subpartsContext> individual_hash_subparts() {
			return getRuleContexts(Individual_hash_subpartsContext.class);
		}
		public Individual_hash_subpartsContext individual_hash_subparts(int i) {
			return getRuleContext(Individual_hash_subpartsContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLSQLParser.COMMA, i);
		}
		public Subpartition_templateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subpartition_template; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterSubpartition_template(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitSubpartition_template(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitSubpartition_template(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Subpartition_templateContext subpartition_template() throws RecognitionException {
		Subpartition_templateContext _localctx = new Subpartition_templateContext(_ctx, getState());
		enterRule(_localctx, 230, RULE_subpartition_template);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3012);
			match(SUBPARTITION);
			setState(3013);
			match(TEMPLATE);
			{
			setState(3044);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LEFT_PAREN:
				{
				setState(3014);
				match(LEFT_PAREN);
				setState(3039);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,369,_ctx) ) {
				case 1:
					{
					setState(3019); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						{
						setState(3016);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(3015);
							match(COMMA);
							}
						}

						setState(3018);
						range_subpartition_desc();
						}
						}
						setState(3021); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( _la==SUBPARTITION || _la==COMMA );
					}
					break;
				case 2:
					{
					setState(3027); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						{
						setState(3024);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(3023);
							match(COMMA);
							}
						}

						setState(3026);
						list_subpartition_desc();
						}
						}
						setState(3029); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( _la==SUBPARTITION || _la==COMMA );
					}
					break;
				case 3:
					{
					setState(3035); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						{
						setState(3032);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(3031);
							match(COMMA);
							}
						}

						setState(3034);
						individual_hash_subparts();
						}
						}
						setState(3037); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( _la==SUBPARTITION || _la==COMMA );
					}
					break;
				}
				setState(3041);
				match(RIGHT_PAREN);
				}
				break;
			case UNSIGNED_INTEGER:
				{
				setState(3043);
				hash_subpartition_quantity();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Range_subpartition_descContext extends ParserRuleContext {
		public TerminalNode SUBPARTITION() { return getToken(PLSQLParser.SUBPARTITION, 0); }
		public Range_values_clauseContext range_values_clause() {
			return getRuleContext(Range_values_clauseContext.class,0);
		}
		public Subpartition_nameContext subpartition_name() {
			return getRuleContext(Subpartition_nameContext.class,0);
		}
		public Partitioning_storage_clauseContext partitioning_storage_clause() {
			return getRuleContext(Partitioning_storage_clauseContext.class,0);
		}
		public Range_subpartition_descContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_range_subpartition_desc; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterRange_subpartition_desc(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitRange_subpartition_desc(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitRange_subpartition_desc(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Range_subpartition_descContext range_subpartition_desc() throws RecognitionException {
		Range_subpartition_descContext _localctx = new Range_subpartition_descContext(_ctx, getState());
		enterRule(_localctx, 232, RULE_range_subpartition_desc);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3046);
			match(SUBPARTITION);
			setState(3048);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BUILD) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (CHR - 65)) | (1L << (CLOB - 65)) | (1L << (CLOSE - 65)) | (1L << (CLUSTER - 65)) | (1L << (COALESCE - 65)) | (1L << (COLLECT - 65)) | (1L << (COLUMNS - 65)) | (1L << (COMMENT - 65)) | (1L << (COMMIT - 65)) | (1L << (COMMITTED - 65)) | (1L << (COMPATIBILITY - 65)) | (1L << (COMPILE - 65)) | (1L << (COMPLETE - 65)) | (1L << (COMPOUND - 65)) | (1L << (CONCAT - 65)) | (1L << (CONSTANT - 65)) | (1L << (CONSTRAINT - 65)) | (1L << (CONSTRAINTS - 65)) | (1L << (CONSTRUCTOR - 65)) | (1L << (CONTENT - 65)) | (1L << (CONTEXT - 65)) | (1L << (CONTINUE - 65)) | (1L << (CONVERT - 65)) | (1L << (CORRUPT_XID - 65)) | (1L << (CORRUPT_XID_ALL - 65)) | (1L << (COST - 65)) | (1L << (COUNT - 65)) | (1L << (CROSS - 65)) | (1L << (CUBE - 65)) | (1L << (CURRENT_USER - 65)) | (1L << (CURSOR - 65)) | (1L << (CUSTOMDATUM - 65)) | (1L << (CYCLE - 65)) | (1L << (DATA - 65)) | (1L << (DATABASE - 65)) | (1L << (DATE - 65)) | (1L << (DAY - 65)) | (1L << (DB_ROLE_CHANGE - 65)) | (1L << (DBTIMEZONE - 65)) | (1L << (DDL - 65)) | (1L << (DEBUG - 65)) | (1L << (DEC - 65)) | (1L << (DECIMAL - 65)) | (1L << (DECODE - 65)) | (1L << (DECOMPOSE - 65)) | (1L << (DECREMENT - 65)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DEMAND - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (EDITIONING - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENFORCED - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FAST - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)) | (1L << (FOLLOWING - 129)) | (1L << (FOLLOWS - 129)) | (1L << (FORALL - 129)) | (1L << (FORCE - 129)))) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & ((1L << (FULL - 197)) | (1L << (FUNCTION - 197)) | (1L << (GROUPING - 197)) | (1L << (HASH - 197)) | (1L << (HIDE - 197)) | (1L << (HOUR - 197)) | (1L << (IGNORE - 197)) | (1L << (IMMEDIATE - 197)) | (1L << (INCLUDE - 197)) | (1L << (INCLUDING - 197)) | (1L << (INCREMENT - 197)) | (1L << (INDENT - 197)) | (1L << (INDEXED - 197)) | (1L << (INDICATOR - 197)) | (1L << (INDICES - 197)) | (1L << (INFINITE - 197)) | (1L << (INLINE - 197)) | (1L << (INNER - 197)) | (1L << (INOUT - 197)) | (1L << (INSTANTIABLE - 197)) | (1L << (INSTEAD - 197)) | (1L << (INT - 197)) | (1L << (INTEGER - 197)) | (1L << (INTERVAL - 197)) | (1L << (INVALIDATE - 197)) | (1L << (ISOLATION - 197)) | (1L << (ITERATE - 197)) | (1L << (JAVA - 197)) | (1L << (JOIN - 197)) | (1L << (KEEP - 197)) | (1L << (LANGUAGE - 197)) | (1L << (LAST - 197)) | (1L << (LAST_VALUE - 197)) | (1L << (LEADING - 197)) | (1L << (LEFT - 197)) | (1L << (LEVEL - 197)))) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & ((1L << (LIBRARY - 261)) | (1L << (LIKE2 - 261)) | (1L << (LIKE4 - 261)) | (1L << (LIKEC - 261)) | (1L << (LIMIT - 261)) | (1L << (LIST - 261)) | (1L << (LOCAL - 261)) | (1L << (LOCKED - 261)) | (1L << (LOG - 261)) | (1L << (LOGOFF - 261)) | (1L << (LOGON - 261)) | (1L << (LONG - 261)) | (1L << (LOOP - 261)) | (1L << (MAIN - 261)) | (1L << (MAP - 261)) | (1L << (MASTER - 261)) | (1L << (MATCHED - 261)) | (1L << (MAXVALUE - 261)) | (1L << (MEASURES - 261)) | (1L << (MEMBER - 261)) | (1L << (MERGE - 261)) | (1L << (MINUTE - 261)) | (1L << (MINVALUE - 261)) | (1L << (MLSLABEL - 261)) | (1L << (MODEL - 261)) | (1L << (MODIFY - 261)) | (1L << (MONTH - 261)) | (1L << (MULTISET - 261)) | (1L << (NAME - 261)) | (1L << (NAN - 261)) | (1L << (NATURAL - 261)) | (1L << (NATURALN - 261)) | (1L << (NAV - 261)) | (1L << (NCHAR - 261)) | (1L << (NCHAR_CS - 261)) | (1L << (NCLOB - 261)) | (1L << (NESTED - 261)) | (1L << (NEVER - 261)) | (1L << (NEW - 261)) | (1L << (NO - 261)) | (1L << (NOAUDIT - 261)) | (1L << (NOCOPY - 261)) | (1L << (NOCYCLE - 261)) | (1L << (NOENTITYESCAPING - 261)))) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & ((1L << (NONE - 329)) | (1L << (NOSCHEMACHECK - 329)) | (1L << (NVL - 329)) | (1L << (NULLS - 329)) | (1L << (NUMBER - 329)) | (1L << (NUMERIC - 329)) | (1L << (NVARCHAR2 - 329)) | (1L << (MATERIALIZED - 329)) | (1L << (OBJECT - 329)) | (1L << (OFF - 329)) | (1L << (OID - 329)) | (1L << (OLD - 329)) | (1L << (ONLY - 329)) | (1L << (OPEN - 329)) | (1L << (ORADATA - 329)) | (1L << (ORDINALITY - 329)) | (1L << (OSERROR - 329)) | (1L << (OUT - 329)) | (1L << (OUTER - 329)) | (1L << (OVER - 329)) | (1L << (OVERRIDING - 329)) | (1L << (PACKAGE - 329)) | (1L << (PARALLEL_ENABLE - 329)) | (1L << (PARAMETERS - 329)) | (1L << (PARENT - 329)) | (1L << (PARTITION - 329)) | (1L << (PASSING - 329)) | (1L << (PATH - 329)) | (1L << (PIPELINED - 329)) | (1L << (PLAN - 329)) | (1L << (PLS_INTEGER - 329)) | (1L << (POSITIVE - 329)) | (1L << (POSITIVEN - 329)) | (1L << (PRAGMA - 329)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (PREBUILT - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)) | (1L << (PRESENT - 393)) | (1L << (PUBLIC - 393)) | (1L << (RAISE - 393)) | (1L << (RANGE - 393)) | (1L << (RAW - 393)) | (1L << (READ - 393)) | (1L << (REAL - 393)) | (1L << (RECORD - 393)) | (1L << (REDUCED - 393)) | (1L << (REF - 393)) | (1L << (REFERENCE - 393)) | (1L << (REFERENCING - 393)) | (1L << (REFRESH - 393)) | (1L << (REJECT - 393)) | (1L << (RELIES_ON - 393)) | (1L << (RENAME - 393)) | (1L << (REPLACE - 393)) | (1L << (RESPECT - 393)) | (1L << (RESTRICT_REFERENCES - 393)) | (1L << (RESULT - 393)) | (1L << (RESULT_CACHE - 393)) | (1L << (RETURN - 393)) | (1L << (RETURNING - 393)) | (1L << (REUSE - 393)) | (1L << (REVERSE - 393)) | (1L << (REWRITE - 393)) | (1L << (RIGHT - 393)) | (1L << (ROLE - 393)) | (1L << (ROLLBACK - 393)) | (1L << (ROLLUP - 393)) | (1L << (ROW - 393)) | (1L << (ROWID - 393)) | (1L << (ROWS - 393)) | (1L << (RULES - 393)) | (1L << (SAMPLE - 393)) | (1L << (SAVE - 393)) | (1L << (SAVEPOINT - 393)) | (1L << (SCHEMA - 393)) | (1L << (SCHEMACHECK - 393)) | (1L << (SCN - 393)) | (1L << (SECOND - 393)))) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & ((1L << (SEED - 458)) | (1L << (SEGMENT - 458)) | (1L << (SELF - 458)) | (1L << (SEQUENTIAL - 458)) | (1L << (SERIALIZABLE - 458)) | (1L << (SERIALLY_REUSABLE - 458)) | (1L << (SERVERERROR - 458)) | (1L << (SESSIONTIMEZONE - 458)) | (1L << (SET - 458)) | (1L << (SETS - 458)) | (1L << (SETTINGS - 458)) | (1L << (SHOW - 458)) | (1L << (SHUTDOWN - 458)) | (1L << (SIBLINGS - 458)) | (1L << (SIGNTYPE - 458)) | (1L << (SIMPLE_INTEGER - 458)) | (1L << (SINGLE - 458)) | (1L << (SIZE - 458)) | (1L << (SKIP_ - 458)) | (1L << (SMALLINT - 458)) | (1L << (SNAPSHOT - 458)) | (1L << (SOME - 458)) | (1L << (SPECIFICATION - 458)) | (1L << (SQLDATA - 458)) | (1L << (SQLERROR - 458)) | (1L << (STANDALONE - 458)) | (1L << (STARTUP - 458)) | (1L << (STATEMENT - 458)) | (1L << (STATEMENT_ID - 458)) | (1L << (STATIC - 458)) | (1L << (STATISTICS - 458)) | (1L << (STRING - 458)) | (1L << (SUBMULTISET - 458)) | (1L << (SUBPARTITION - 458)) | (1L << (SUBSTITUTABLE - 458)) | (1L << (SUBSTRING - 458)) | (1L << (SUBTYPE - 458)) | (1L << (SUCCESS - 458)) | (1L << (SUSPEND - 458)) | (1L << (TABLES - 458)) | (1L << (TIME - 458)) | (1L << (TIMESTAMP - 458)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 458)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 458)) | (1L << (TIMESTAMP_UNCONSTRAINED - 458)))) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & ((1L << (TIMEZONE_ABBR - 522)) | (1L << (TIMEZONE_HOUR - 522)) | (1L << (TIMEZONE_MINUTE - 522)) | (1L << (TIMEZONE_REGION - 522)) | (1L << (TO_CHAR - 522)) | (1L << (TO_DATE - 522)) | (1L << (TRAILING - 522)) | (1L << (TRANSACTION - 522)) | (1L << (TRANSLATE - 522)) | (1L << (TREAT - 522)) | (1L << (TRIGGER - 522)) | (1L << (TRIM - 522)) | (1L << (TRUNCATE - 522)) | (1L << (TRUSTED - 522)) | (1L << (TYPE - 522)) | (1L << (UNBOUNDED - 522)) | (1L << (UNDER - 522)) | (1L << (UNLIMITED - 522)) | (1L << (UNTIL - 522)) | (1L << (UPDATED - 522)) | (1L << (UPSERT - 522)) | (1L << (UROWID - 522)) | (1L << (USE - 522)) | (1L << (VALIDATE - 522)) | (1L << (VALUE - 522)) | (1L << (VARCHAR - 522)) | (1L << (VARCHAR2 - 522)) | (1L << (VARIABLE - 522)) | (1L << (VARRAY - 522)) | (1L << (VARYING - 522)) | (1L << (VERBOSE - 522)) | (1L << (VERSION - 522)) | (1L << (VERSIONS - 522)) | (1L << (VIEW - 522)) | (1L << (WAIT - 522)) | (1L << (WARNING - 522)) | (1L << (WELLFORMED - 522)) | (1L << (WHENEVER - 522)) | (1L << (WHILE - 522)) | (1L << (WITHOUT - 522)) | (1L << (WITHIN - 522)) | (1L << (WORK - 522)) | (1L << (WRITE - 522)) | (1L << (XML - 522)) | (1L << (XMLAGG - 522)) | (1L << (XMLATTRIBUTES - 522)))) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & ((1L << (XMLCAST - 586)) | (1L << (XMLCOLATTVAL - 586)) | (1L << (XMLELEMENT - 586)) | (1L << (XMLEXISTS - 586)) | (1L << (XMLFOREST - 586)) | (1L << (XMLNAMESPACES - 586)) | (1L << (XMLPARSE - 586)) | (1L << (XMLPI - 586)) | (1L << (XMLQUERY - 586)) | (1L << (XMLROOT - 586)) | (1L << (XMLSERIALIZE - 586)) | (1L << (XMLTABLE - 586)) | (1L << (YEAR - 586)) | (1L << (YES - 586)) | (1L << (YMINTERVAL_UNCONSTRAINED - 586)) | (1L << (ZONE - 586)) | (1L << (PREDICTION - 586)) | (1L << (PREDICTION_BOUNDS - 586)) | (1L << (PREDICTION_COST - 586)) | (1L << (PREDICTION_DETAILS - 586)) | (1L << (PREDICTION_PROBABILITY - 586)) | (1L << (PREDICTION_SET - 586)) | (1L << (CUME_DIST - 586)) | (1L << (DENSE_RANK - 586)) | (1L << (LISTAGG - 586)) | (1L << (PERCENT_RANK - 586)) | (1L << (PERCENTILE_CONT - 586)) | (1L << (PERCENTILE_DISC - 586)) | (1L << (RANK - 586)) | (1L << (AVG - 586)) | (1L << (CORR - 586)) | (1L << (LAG - 586)) | (1L << (LEAD - 586)) | (1L << (MAX - 586)) | (1L << (MEDIAN - 586)) | (1L << (MIN - 586)) | (1L << (NTILE - 586)) | (1L << (RATIO_TO_REPORT - 586)) | (1L << (ROW_NUMBER - 586)) | (1L << (SUM - 586)) | (1L << (VARIANCE - 586)) | (1L << (REGR_ - 586)) | (1L << (STDDEV - 586)) | (1L << (VAR_ - 586)) | (1L << (COVAR_ - 586)))) != 0) || _la==REGULAR_ID) {
				{
				setState(3047);
				subpartition_name();
				}
			}

			setState(3050);
			range_values_clause();
			setState(3052);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMPRESS || _la==LOB || _la==NOCOMPRESS || _la==OVERFLOW || _la==TABLESPACE || _la==VARRAY) {
				{
				setState(3051);
				partitioning_storage_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class List_subpartition_descContext extends ParserRuleContext {
		public TerminalNode SUBPARTITION() { return getToken(PLSQLParser.SUBPARTITION, 0); }
		public List_values_clauseContext list_values_clause() {
			return getRuleContext(List_values_clauseContext.class,0);
		}
		public Subpartition_nameContext subpartition_name() {
			return getRuleContext(Subpartition_nameContext.class,0);
		}
		public Partitioning_storage_clauseContext partitioning_storage_clause() {
			return getRuleContext(Partitioning_storage_clauseContext.class,0);
		}
		public List_subpartition_descContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_list_subpartition_desc; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterList_subpartition_desc(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitList_subpartition_desc(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitList_subpartition_desc(this);
			else return visitor.visitChildren(this);
		}
	}

	public final List_subpartition_descContext list_subpartition_desc() throws RecognitionException {
		List_subpartition_descContext _localctx = new List_subpartition_descContext(_ctx, getState());
		enterRule(_localctx, 234, RULE_list_subpartition_desc);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3054);
			match(SUBPARTITION);
			setState(3056);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BUILD) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (CHR - 65)) | (1L << (CLOB - 65)) | (1L << (CLOSE - 65)) | (1L << (CLUSTER - 65)) | (1L << (COALESCE - 65)) | (1L << (COLLECT - 65)) | (1L << (COLUMNS - 65)) | (1L << (COMMENT - 65)) | (1L << (COMMIT - 65)) | (1L << (COMMITTED - 65)) | (1L << (COMPATIBILITY - 65)) | (1L << (COMPILE - 65)) | (1L << (COMPLETE - 65)) | (1L << (COMPOUND - 65)) | (1L << (CONCAT - 65)) | (1L << (CONSTANT - 65)) | (1L << (CONSTRAINT - 65)) | (1L << (CONSTRAINTS - 65)) | (1L << (CONSTRUCTOR - 65)) | (1L << (CONTENT - 65)) | (1L << (CONTEXT - 65)) | (1L << (CONTINUE - 65)) | (1L << (CONVERT - 65)) | (1L << (CORRUPT_XID - 65)) | (1L << (CORRUPT_XID_ALL - 65)) | (1L << (COST - 65)) | (1L << (COUNT - 65)) | (1L << (CROSS - 65)) | (1L << (CUBE - 65)) | (1L << (CURRENT_USER - 65)) | (1L << (CURSOR - 65)) | (1L << (CUSTOMDATUM - 65)) | (1L << (CYCLE - 65)) | (1L << (DATA - 65)) | (1L << (DATABASE - 65)) | (1L << (DATE - 65)) | (1L << (DAY - 65)) | (1L << (DB_ROLE_CHANGE - 65)) | (1L << (DBTIMEZONE - 65)) | (1L << (DDL - 65)) | (1L << (DEBUG - 65)) | (1L << (DEC - 65)) | (1L << (DECIMAL - 65)) | (1L << (DECODE - 65)) | (1L << (DECOMPOSE - 65)) | (1L << (DECREMENT - 65)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DEMAND - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (EDITIONING - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENFORCED - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FAST - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)) | (1L << (FOLLOWING - 129)) | (1L << (FOLLOWS - 129)) | (1L << (FORALL - 129)) | (1L << (FORCE - 129)))) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & ((1L << (FULL - 197)) | (1L << (FUNCTION - 197)) | (1L << (GROUPING - 197)) | (1L << (HASH - 197)) | (1L << (HIDE - 197)) | (1L << (HOUR - 197)) | (1L << (IGNORE - 197)) | (1L << (IMMEDIATE - 197)) | (1L << (INCLUDE - 197)) | (1L << (INCLUDING - 197)) | (1L << (INCREMENT - 197)) | (1L << (INDENT - 197)) | (1L << (INDEXED - 197)) | (1L << (INDICATOR - 197)) | (1L << (INDICES - 197)) | (1L << (INFINITE - 197)) | (1L << (INLINE - 197)) | (1L << (INNER - 197)) | (1L << (INOUT - 197)) | (1L << (INSTANTIABLE - 197)) | (1L << (INSTEAD - 197)) | (1L << (INT - 197)) | (1L << (INTEGER - 197)) | (1L << (INTERVAL - 197)) | (1L << (INVALIDATE - 197)) | (1L << (ISOLATION - 197)) | (1L << (ITERATE - 197)) | (1L << (JAVA - 197)) | (1L << (JOIN - 197)) | (1L << (KEEP - 197)) | (1L << (LANGUAGE - 197)) | (1L << (LAST - 197)) | (1L << (LAST_VALUE - 197)) | (1L << (LEADING - 197)) | (1L << (LEFT - 197)) | (1L << (LEVEL - 197)))) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & ((1L << (LIBRARY - 261)) | (1L << (LIKE2 - 261)) | (1L << (LIKE4 - 261)) | (1L << (LIKEC - 261)) | (1L << (LIMIT - 261)) | (1L << (LIST - 261)) | (1L << (LOCAL - 261)) | (1L << (LOCKED - 261)) | (1L << (LOG - 261)) | (1L << (LOGOFF - 261)) | (1L << (LOGON - 261)) | (1L << (LONG - 261)) | (1L << (LOOP - 261)) | (1L << (MAIN - 261)) | (1L << (MAP - 261)) | (1L << (MASTER - 261)) | (1L << (MATCHED - 261)) | (1L << (MAXVALUE - 261)) | (1L << (MEASURES - 261)) | (1L << (MEMBER - 261)) | (1L << (MERGE - 261)) | (1L << (MINUTE - 261)) | (1L << (MINVALUE - 261)) | (1L << (MLSLABEL - 261)) | (1L << (MODEL - 261)) | (1L << (MODIFY - 261)) | (1L << (MONTH - 261)) | (1L << (MULTISET - 261)) | (1L << (NAME - 261)) | (1L << (NAN - 261)) | (1L << (NATURAL - 261)) | (1L << (NATURALN - 261)) | (1L << (NAV - 261)) | (1L << (NCHAR - 261)) | (1L << (NCHAR_CS - 261)) | (1L << (NCLOB - 261)) | (1L << (NESTED - 261)) | (1L << (NEVER - 261)) | (1L << (NEW - 261)) | (1L << (NO - 261)) | (1L << (NOAUDIT - 261)) | (1L << (NOCOPY - 261)) | (1L << (NOCYCLE - 261)) | (1L << (NOENTITYESCAPING - 261)))) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & ((1L << (NONE - 329)) | (1L << (NOSCHEMACHECK - 329)) | (1L << (NVL - 329)) | (1L << (NULLS - 329)) | (1L << (NUMBER - 329)) | (1L << (NUMERIC - 329)) | (1L << (NVARCHAR2 - 329)) | (1L << (MATERIALIZED - 329)) | (1L << (OBJECT - 329)) | (1L << (OFF - 329)) | (1L << (OID - 329)) | (1L << (OLD - 329)) | (1L << (ONLY - 329)) | (1L << (OPEN - 329)) | (1L << (ORADATA - 329)) | (1L << (ORDINALITY - 329)) | (1L << (OSERROR - 329)) | (1L << (OUT - 329)) | (1L << (OUTER - 329)) | (1L << (OVER - 329)) | (1L << (OVERRIDING - 329)) | (1L << (PACKAGE - 329)) | (1L << (PARALLEL_ENABLE - 329)) | (1L << (PARAMETERS - 329)) | (1L << (PARENT - 329)) | (1L << (PARTITION - 329)) | (1L << (PASSING - 329)) | (1L << (PATH - 329)) | (1L << (PIPELINED - 329)) | (1L << (PLAN - 329)) | (1L << (PLS_INTEGER - 329)) | (1L << (POSITIVE - 329)) | (1L << (POSITIVEN - 329)) | (1L << (PRAGMA - 329)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (PREBUILT - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)) | (1L << (PRESENT - 393)) | (1L << (PUBLIC - 393)) | (1L << (RAISE - 393)) | (1L << (RANGE - 393)) | (1L << (RAW - 393)) | (1L << (READ - 393)) | (1L << (REAL - 393)) | (1L << (RECORD - 393)) | (1L << (REDUCED - 393)) | (1L << (REF - 393)) | (1L << (REFERENCE - 393)) | (1L << (REFERENCING - 393)) | (1L << (REFRESH - 393)) | (1L << (REJECT - 393)) | (1L << (RELIES_ON - 393)) | (1L << (RENAME - 393)) | (1L << (REPLACE - 393)) | (1L << (RESPECT - 393)) | (1L << (RESTRICT_REFERENCES - 393)) | (1L << (RESULT - 393)) | (1L << (RESULT_CACHE - 393)) | (1L << (RETURN - 393)) | (1L << (RETURNING - 393)) | (1L << (REUSE - 393)) | (1L << (REVERSE - 393)) | (1L << (REWRITE - 393)) | (1L << (RIGHT - 393)) | (1L << (ROLE - 393)) | (1L << (ROLLBACK - 393)) | (1L << (ROLLUP - 393)) | (1L << (ROW - 393)) | (1L << (ROWID - 393)) | (1L << (ROWS - 393)) | (1L << (RULES - 393)) | (1L << (SAMPLE - 393)) | (1L << (SAVE - 393)) | (1L << (SAVEPOINT - 393)) | (1L << (SCHEMA - 393)) | (1L << (SCHEMACHECK - 393)) | (1L << (SCN - 393)) | (1L << (SECOND - 393)))) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & ((1L << (SEED - 458)) | (1L << (SEGMENT - 458)) | (1L << (SELF - 458)) | (1L << (SEQUENTIAL - 458)) | (1L << (SERIALIZABLE - 458)) | (1L << (SERIALLY_REUSABLE - 458)) | (1L << (SERVERERROR - 458)) | (1L << (SESSIONTIMEZONE - 458)) | (1L << (SET - 458)) | (1L << (SETS - 458)) | (1L << (SETTINGS - 458)) | (1L << (SHOW - 458)) | (1L << (SHUTDOWN - 458)) | (1L << (SIBLINGS - 458)) | (1L << (SIGNTYPE - 458)) | (1L << (SIMPLE_INTEGER - 458)) | (1L << (SINGLE - 458)) | (1L << (SIZE - 458)) | (1L << (SKIP_ - 458)) | (1L << (SMALLINT - 458)) | (1L << (SNAPSHOT - 458)) | (1L << (SOME - 458)) | (1L << (SPECIFICATION - 458)) | (1L << (SQLDATA - 458)) | (1L << (SQLERROR - 458)) | (1L << (STANDALONE - 458)) | (1L << (STARTUP - 458)) | (1L << (STATEMENT - 458)) | (1L << (STATEMENT_ID - 458)) | (1L << (STATIC - 458)) | (1L << (STATISTICS - 458)) | (1L << (STRING - 458)) | (1L << (SUBMULTISET - 458)) | (1L << (SUBPARTITION - 458)) | (1L << (SUBSTITUTABLE - 458)) | (1L << (SUBSTRING - 458)) | (1L << (SUBTYPE - 458)) | (1L << (SUCCESS - 458)) | (1L << (SUSPEND - 458)) | (1L << (TABLES - 458)) | (1L << (TIME - 458)) | (1L << (TIMESTAMP - 458)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 458)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 458)) | (1L << (TIMESTAMP_UNCONSTRAINED - 458)))) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & ((1L << (TIMEZONE_ABBR - 522)) | (1L << (TIMEZONE_HOUR - 522)) | (1L << (TIMEZONE_MINUTE - 522)) | (1L << (TIMEZONE_REGION - 522)) | (1L << (TO_CHAR - 522)) | (1L << (TO_DATE - 522)) | (1L << (TRAILING - 522)) | (1L << (TRANSACTION - 522)) | (1L << (TRANSLATE - 522)) | (1L << (TREAT - 522)) | (1L << (TRIGGER - 522)) | (1L << (TRIM - 522)) | (1L << (TRUNCATE - 522)) | (1L << (TRUSTED - 522)) | (1L << (TYPE - 522)) | (1L << (UNBOUNDED - 522)) | (1L << (UNDER - 522)) | (1L << (UNLIMITED - 522)) | (1L << (UNTIL - 522)) | (1L << (UPDATED - 522)) | (1L << (UPSERT - 522)) | (1L << (UROWID - 522)) | (1L << (USE - 522)) | (1L << (VALIDATE - 522)) | (1L << (VALUE - 522)) | (1L << (VARCHAR - 522)) | (1L << (VARCHAR2 - 522)) | (1L << (VARIABLE - 522)) | (1L << (VARRAY - 522)) | (1L << (VARYING - 522)) | (1L << (VERBOSE - 522)) | (1L << (VERSION - 522)) | (1L << (VERSIONS - 522)) | (1L << (VIEW - 522)) | (1L << (WAIT - 522)) | (1L << (WARNING - 522)) | (1L << (WELLFORMED - 522)) | (1L << (WHENEVER - 522)) | (1L << (WHILE - 522)) | (1L << (WITHOUT - 522)) | (1L << (WITHIN - 522)) | (1L << (WORK - 522)) | (1L << (WRITE - 522)) | (1L << (XML - 522)) | (1L << (XMLAGG - 522)) | (1L << (XMLATTRIBUTES - 522)))) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & ((1L << (XMLCAST - 586)) | (1L << (XMLCOLATTVAL - 586)) | (1L << (XMLELEMENT - 586)) | (1L << (XMLEXISTS - 586)) | (1L << (XMLFOREST - 586)) | (1L << (XMLNAMESPACES - 586)) | (1L << (XMLPARSE - 586)) | (1L << (XMLPI - 586)) | (1L << (XMLQUERY - 586)) | (1L << (XMLROOT - 586)) | (1L << (XMLSERIALIZE - 586)) | (1L << (XMLTABLE - 586)) | (1L << (YEAR - 586)) | (1L << (YES - 586)) | (1L << (YMINTERVAL_UNCONSTRAINED - 586)) | (1L << (ZONE - 586)) | (1L << (PREDICTION - 586)) | (1L << (PREDICTION_BOUNDS - 586)) | (1L << (PREDICTION_COST - 586)) | (1L << (PREDICTION_DETAILS - 586)) | (1L << (PREDICTION_PROBABILITY - 586)) | (1L << (PREDICTION_SET - 586)) | (1L << (CUME_DIST - 586)) | (1L << (DENSE_RANK - 586)) | (1L << (LISTAGG - 586)) | (1L << (PERCENT_RANK - 586)) | (1L << (PERCENTILE_CONT - 586)) | (1L << (PERCENTILE_DISC - 586)) | (1L << (RANK - 586)) | (1L << (AVG - 586)) | (1L << (CORR - 586)) | (1L << (LAG - 586)) | (1L << (LEAD - 586)) | (1L << (MAX - 586)) | (1L << (MEDIAN - 586)) | (1L << (MIN - 586)) | (1L << (NTILE - 586)) | (1L << (RATIO_TO_REPORT - 586)) | (1L << (ROW_NUMBER - 586)) | (1L << (SUM - 586)) | (1L << (VARIANCE - 586)) | (1L << (REGR_ - 586)) | (1L << (STDDEV - 586)) | (1L << (VAR_ - 586)) | (1L << (COVAR_ - 586)))) != 0) || _la==REGULAR_ID) {
				{
				setState(3055);
				subpartition_name();
				}
			}

			setState(3058);
			list_values_clause();
			setState(3060);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMPRESS || _la==LOB || _la==NOCOMPRESS || _la==OVERFLOW || _la==TABLESPACE || _la==VARRAY) {
				{
				setState(3059);
				partitioning_storage_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Individual_hash_subpartsContext extends ParserRuleContext {
		public TerminalNode SUBPARTITION() { return getToken(PLSQLParser.SUBPARTITION, 0); }
		public Subpartition_nameContext subpartition_name() {
			return getRuleContext(Subpartition_nameContext.class,0);
		}
		public Partitioning_storage_clauseContext partitioning_storage_clause() {
			return getRuleContext(Partitioning_storage_clauseContext.class,0);
		}
		public Individual_hash_subpartsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_individual_hash_subparts; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterIndividual_hash_subparts(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitIndividual_hash_subparts(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitIndividual_hash_subparts(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Individual_hash_subpartsContext individual_hash_subparts() throws RecognitionException {
		Individual_hash_subpartsContext _localctx = new Individual_hash_subpartsContext(_ctx, getState());
		enterRule(_localctx, 236, RULE_individual_hash_subparts);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3062);
			match(SUBPARTITION);
			setState(3064);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,375,_ctx) ) {
			case 1:
				{
				setState(3063);
				subpartition_name();
				}
				break;
			}
			setState(3067);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMPRESS || _la==LOB || _la==NOCOMPRESS || _la==OVERFLOW || _la==TABLESPACE || _la==VARRAY) {
				{
				setState(3066);
				partitioning_storage_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Hash_subpartition_quantityContext extends ParserRuleContext {
		public TerminalNode UNSIGNED_INTEGER() { return getToken(PLSQLParser.UNSIGNED_INTEGER, 0); }
		public Hash_subpartition_quantityContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_hash_subpartition_quantity; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterHash_subpartition_quantity(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitHash_subpartition_quantity(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitHash_subpartition_quantity(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Hash_subpartition_quantityContext hash_subpartition_quantity() throws RecognitionException {
		Hash_subpartition_quantityContext _localctx = new Hash_subpartition_quantityContext(_ctx, getState());
		enterRule(_localctx, 238, RULE_hash_subpartition_quantity);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3069);
			match(UNSIGNED_INTEGER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Subpartition_by_hashContext extends ParserRuleContext {
		public TerminalNode SUBPARTITION() { return getToken(PLSQLParser.SUBPARTITION, 0); }
		public TerminalNode BY() { return getToken(PLSQLParser.BY, 0); }
		public TerminalNode HASH() { return getToken(PLSQLParser.HASH, 0); }
		public Paren_column_listContext paren_column_list() {
			return getRuleContext(Paren_column_listContext.class,0);
		}
		public TerminalNode SUBPARTITIONS() { return getToken(PLSQLParser.SUBPARTITIONS, 0); }
		public TerminalNode UNSIGNED_INTEGER() { return getToken(PLSQLParser.UNSIGNED_INTEGER, 0); }
		public Subpartition_templateContext subpartition_template() {
			return getRuleContext(Subpartition_templateContext.class,0);
		}
		public TerminalNode STORE() { return getToken(PLSQLParser.STORE, 0); }
		public TerminalNode IN() { return getToken(PLSQLParser.IN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PLSQLParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PLSQLParser.RIGHT_PAREN, 0); }
		public List<TablespaceContext> tablespace() {
			return getRuleContexts(TablespaceContext.class);
		}
		public TablespaceContext tablespace(int i) {
			return getRuleContext(TablespaceContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLSQLParser.COMMA, i);
		}
		public Subpartition_by_hashContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subpartition_by_hash; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterSubpartition_by_hash(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitSubpartition_by_hash(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitSubpartition_by_hash(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Subpartition_by_hashContext subpartition_by_hash() throws RecognitionException {
		Subpartition_by_hashContext _localctx = new Subpartition_by_hashContext(_ctx, getState());
		enterRule(_localctx, 240, RULE_subpartition_by_hash);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3071);
			match(SUBPARTITION);
			setState(3072);
			match(BY);
			setState(3073);
			match(HASH);
			setState(3074);
			paren_column_list();
			setState(3093);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SUBPARTITIONS:
				{
				setState(3075);
				match(SUBPARTITIONS);
				setState(3076);
				match(UNSIGNED_INTEGER);
				setState(3090);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==STORE) {
					{
					setState(3077);
					match(STORE);
					setState(3078);
					match(IN);
					setState(3079);
					match(LEFT_PAREN);
					setState(3084); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						{
						setState(3081);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(3080);
							match(COMMA);
							}
						}

						setState(3083);
						tablespace();
						}
						}
						setState(3086); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BUILD) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (CHR - 65)) | (1L << (CLOB - 65)) | (1L << (CLOSE - 65)) | (1L << (CLUSTER - 65)) | (1L << (COALESCE - 65)) | (1L << (COLLECT - 65)) | (1L << (COLUMNS - 65)) | (1L << (COMMENT - 65)) | (1L << (COMMIT - 65)) | (1L << (COMMITTED - 65)) | (1L << (COMPATIBILITY - 65)) | (1L << (COMPILE - 65)) | (1L << (COMPLETE - 65)) | (1L << (COMPOUND - 65)) | (1L << (CONCAT - 65)) | (1L << (CONSTANT - 65)) | (1L << (CONSTRAINT - 65)) | (1L << (CONSTRAINTS - 65)) | (1L << (CONSTRUCTOR - 65)) | (1L << (CONTENT - 65)) | (1L << (CONTEXT - 65)) | (1L << (CONTINUE - 65)) | (1L << (CONVERT - 65)) | (1L << (CORRUPT_XID - 65)) | (1L << (CORRUPT_XID_ALL - 65)) | (1L << (COST - 65)) | (1L << (COUNT - 65)) | (1L << (CROSS - 65)) | (1L << (CUBE - 65)) | (1L << (CURRENT_USER - 65)) | (1L << (CURSOR - 65)) | (1L << (CUSTOMDATUM - 65)) | (1L << (CYCLE - 65)) | (1L << (DATA - 65)) | (1L << (DATABASE - 65)) | (1L << (DATE - 65)) | (1L << (DAY - 65)) | (1L << (DB_ROLE_CHANGE - 65)) | (1L << (DBTIMEZONE - 65)) | (1L << (DDL - 65)) | (1L << (DEBUG - 65)) | (1L << (DEC - 65)) | (1L << (DECIMAL - 65)) | (1L << (DECODE - 65)) | (1L << (DECOMPOSE - 65)) | (1L << (DECREMENT - 65)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DEMAND - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (EDITIONING - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENFORCED - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FAST - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)) | (1L << (FOLLOWING - 129)) | (1L << (FOLLOWS - 129)) | (1L << (FORALL - 129)) | (1L << (FORCE - 129)))) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & ((1L << (FULL - 197)) | (1L << (FUNCTION - 197)) | (1L << (GROUPING - 197)) | (1L << (HASH - 197)) | (1L << (HIDE - 197)) | (1L << (HOUR - 197)) | (1L << (IGNORE - 197)) | (1L << (IMMEDIATE - 197)) | (1L << (INCLUDE - 197)) | (1L << (INCLUDING - 197)) | (1L << (INCREMENT - 197)) | (1L << (INDENT - 197)) | (1L << (INDEXED - 197)) | (1L << (INDICATOR - 197)) | (1L << (INDICES - 197)) | (1L << (INFINITE - 197)) | (1L << (INLINE - 197)) | (1L << (INNER - 197)) | (1L << (INOUT - 197)) | (1L << (INSTANTIABLE - 197)) | (1L << (INSTEAD - 197)) | (1L << (INT - 197)) | (1L << (INTEGER - 197)) | (1L << (INTERVAL - 197)) | (1L << (INVALIDATE - 197)) | (1L << (ISOLATION - 197)) | (1L << (ITERATE - 197)) | (1L << (JAVA - 197)) | (1L << (JOIN - 197)) | (1L << (KEEP - 197)) | (1L << (LANGUAGE - 197)) | (1L << (LAST - 197)) | (1L << (LAST_VALUE - 197)) | (1L << (LEADING - 197)) | (1L << (LEFT - 197)) | (1L << (LEVEL - 197)))) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & ((1L << (LIBRARY - 261)) | (1L << (LIKE2 - 261)) | (1L << (LIKE4 - 261)) | (1L << (LIKEC - 261)) | (1L << (LIMIT - 261)) | (1L << (LIST - 261)) | (1L << (LOCAL - 261)) | (1L << (LOCKED - 261)) | (1L << (LOG - 261)) | (1L << (LOGOFF - 261)) | (1L << (LOGON - 261)) | (1L << (LONG - 261)) | (1L << (LOOP - 261)) | (1L << (MAIN - 261)) | (1L << (MAP - 261)) | (1L << (MASTER - 261)) | (1L << (MATCHED - 261)) | (1L << (MAXVALUE - 261)) | (1L << (MEASURES - 261)) | (1L << (MEMBER - 261)) | (1L << (MERGE - 261)) | (1L << (MINUTE - 261)) | (1L << (MINVALUE - 261)) | (1L << (MLSLABEL - 261)) | (1L << (MODEL - 261)) | (1L << (MODIFY - 261)) | (1L << (MONTH - 261)) | (1L << (MULTISET - 261)) | (1L << (NAME - 261)) | (1L << (NAN - 261)) | (1L << (NATURAL - 261)) | (1L << (NATURALN - 261)) | (1L << (NAV - 261)) | (1L << (NCHAR - 261)) | (1L << (NCHAR_CS - 261)) | (1L << (NCLOB - 261)) | (1L << (NESTED - 261)) | (1L << (NEVER - 261)) | (1L << (NEW - 261)) | (1L << (NO - 261)) | (1L << (NOAUDIT - 261)) | (1L << (NOCOPY - 261)) | (1L << (NOCYCLE - 261)) | (1L << (NOENTITYESCAPING - 261)))) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & ((1L << (NONE - 329)) | (1L << (NOSCHEMACHECK - 329)) | (1L << (NVL - 329)) | (1L << (NULLS - 329)) | (1L << (NUMBER - 329)) | (1L << (NUMERIC - 329)) | (1L << (NVARCHAR2 - 329)) | (1L << (MATERIALIZED - 329)) | (1L << (OBJECT - 329)) | (1L << (OFF - 329)) | (1L << (OID - 329)) | (1L << (OLD - 329)) | (1L << (ONLY - 329)) | (1L << (OPEN - 329)) | (1L << (ORADATA - 329)) | (1L << (ORDINALITY - 329)) | (1L << (OSERROR - 329)) | (1L << (OUT - 329)) | (1L << (OUTER - 329)) | (1L << (OVER - 329)) | (1L << (OVERRIDING - 329)) | (1L << (PACKAGE - 329)) | (1L << (PARALLEL_ENABLE - 329)) | (1L << (PARAMETERS - 329)) | (1L << (PARENT - 329)) | (1L << (PARTITION - 329)) | (1L << (PASSING - 329)) | (1L << (PATH - 329)) | (1L << (PIPELINED - 329)) | (1L << (PLAN - 329)) | (1L << (PLS_INTEGER - 329)) | (1L << (POSITIVE - 329)) | (1L << (POSITIVEN - 329)) | (1L << (PRAGMA - 329)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (PREBUILT - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)) | (1L << (PRESENT - 393)) | (1L << (PUBLIC - 393)) | (1L << (RAISE - 393)) | (1L << (RANGE - 393)) | (1L << (RAW - 393)) | (1L << (READ - 393)) | (1L << (REAL - 393)) | (1L << (RECORD - 393)) | (1L << (REDUCED - 393)) | (1L << (REF - 393)) | (1L << (REFERENCE - 393)) | (1L << (REFERENCING - 393)) | (1L << (REFRESH - 393)) | (1L << (REJECT - 393)) | (1L << (RELIES_ON - 393)) | (1L << (RENAME - 393)) | (1L << (REPLACE - 393)) | (1L << (RESPECT - 393)) | (1L << (RESTRICT_REFERENCES - 393)) | (1L << (RESULT - 393)) | (1L << (RESULT_CACHE - 393)) | (1L << (RETURN - 393)) | (1L << (RETURNING - 393)) | (1L << (REUSE - 393)) | (1L << (REVERSE - 393)) | (1L << (REWRITE - 393)) | (1L << (RIGHT - 393)) | (1L << (ROLE - 393)) | (1L << (ROLLBACK - 393)) | (1L << (ROLLUP - 393)) | (1L << (ROW - 393)) | (1L << (ROWID - 393)) | (1L << (ROWS - 393)) | (1L << (RULES - 393)) | (1L << (SAMPLE - 393)) | (1L << (SAVE - 393)) | (1L << (SAVEPOINT - 393)) | (1L << (SCHEMA - 393)) | (1L << (SCHEMACHECK - 393)) | (1L << (SCN - 393)) | (1L << (SECOND - 393)))) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & ((1L << (SEED - 458)) | (1L << (SEGMENT - 458)) | (1L << (SELF - 458)) | (1L << (SEQUENTIAL - 458)) | (1L << (SERIALIZABLE - 458)) | (1L << (SERIALLY_REUSABLE - 458)) | (1L << (SERVERERROR - 458)) | (1L << (SESSIONTIMEZONE - 458)) | (1L << (SET - 458)) | (1L << (SETS - 458)) | (1L << (SETTINGS - 458)) | (1L << (SHOW - 458)) | (1L << (SHUTDOWN - 458)) | (1L << (SIBLINGS - 458)) | (1L << (SIGNTYPE - 458)) | (1L << (SIMPLE_INTEGER - 458)) | (1L << (SINGLE - 458)) | (1L << (SIZE - 458)) | (1L << (SKIP_ - 458)) | (1L << (SMALLINT - 458)) | (1L << (SNAPSHOT - 458)) | (1L << (SOME - 458)) | (1L << (SPECIFICATION - 458)) | (1L << (SQLDATA - 458)) | (1L << (SQLERROR - 458)) | (1L << (STANDALONE - 458)) | (1L << (STARTUP - 458)) | (1L << (STATEMENT - 458)) | (1L << (STATEMENT_ID - 458)) | (1L << (STATIC - 458)) | (1L << (STATISTICS - 458)) | (1L << (STRING - 458)) | (1L << (SUBMULTISET - 458)) | (1L << (SUBPARTITION - 458)) | (1L << (SUBSTITUTABLE - 458)) | (1L << (SUBSTRING - 458)) | (1L << (SUBTYPE - 458)) | (1L << (SUCCESS - 458)) | (1L << (SUSPEND - 458)) | (1L << (TABLES - 458)) | (1L << (TIME - 458)) | (1L << (TIMESTAMP - 458)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 458)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 458)) | (1L << (TIMESTAMP_UNCONSTRAINED - 458)))) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & ((1L << (TIMEZONE_ABBR - 522)) | (1L << (TIMEZONE_HOUR - 522)) | (1L << (TIMEZONE_MINUTE - 522)) | (1L << (TIMEZONE_REGION - 522)) | (1L << (TO_CHAR - 522)) | (1L << (TO_DATE - 522)) | (1L << (TRAILING - 522)) | (1L << (TRANSACTION - 522)) | (1L << (TRANSLATE - 522)) | (1L << (TREAT - 522)) | (1L << (TRIGGER - 522)) | (1L << (TRIM - 522)) | (1L << (TRUNCATE - 522)) | (1L << (TRUSTED - 522)) | (1L << (TYPE - 522)) | (1L << (UNBOUNDED - 522)) | (1L << (UNDER - 522)) | (1L << (UNLIMITED - 522)) | (1L << (UNTIL - 522)) | (1L << (UPDATED - 522)) | (1L << (UPSERT - 522)) | (1L << (UROWID - 522)) | (1L << (USE - 522)) | (1L << (VALIDATE - 522)) | (1L << (VALUE - 522)) | (1L << (VARCHAR - 522)) | (1L << (VARCHAR2 - 522)) | (1L << (VARIABLE - 522)) | (1L << (VARRAY - 522)) | (1L << (VARYING - 522)) | (1L << (VERBOSE - 522)) | (1L << (VERSION - 522)) | (1L << (VERSIONS - 522)) | (1L << (VIEW - 522)) | (1L << (WAIT - 522)) | (1L << (WARNING - 522)) | (1L << (WELLFORMED - 522)) | (1L << (WHENEVER - 522)) | (1L << (WHILE - 522)) | (1L << (WITHOUT - 522)) | (1L << (WITHIN - 522)) | (1L << (WORK - 522)) | (1L << (WRITE - 522)) | (1L << (XML - 522)) | (1L << (XMLAGG - 522)) | (1L << (XMLATTRIBUTES - 522)))) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & ((1L << (XMLCAST - 586)) | (1L << (XMLCOLATTVAL - 586)) | (1L << (XMLELEMENT - 586)) | (1L << (XMLEXISTS - 586)) | (1L << (XMLFOREST - 586)) | (1L << (XMLNAMESPACES - 586)) | (1L << (XMLPARSE - 586)) | (1L << (XMLPI - 586)) | (1L << (XMLQUERY - 586)) | (1L << (XMLROOT - 586)) | (1L << (XMLSERIALIZE - 586)) | (1L << (XMLTABLE - 586)) | (1L << (YEAR - 586)) | (1L << (YES - 586)) | (1L << (YMINTERVAL_UNCONSTRAINED - 586)) | (1L << (ZONE - 586)) | (1L << (PREDICTION - 586)) | (1L << (PREDICTION_BOUNDS - 586)) | (1L << (PREDICTION_COST - 586)) | (1L << (PREDICTION_DETAILS - 586)) | (1L << (PREDICTION_PROBABILITY - 586)) | (1L << (PREDICTION_SET - 586)) | (1L << (CUME_DIST - 586)) | (1L << (DENSE_RANK - 586)) | (1L << (LISTAGG - 586)) | (1L << (PERCENT_RANK - 586)) | (1L << (PERCENTILE_CONT - 586)) | (1L << (PERCENTILE_DISC - 586)) | (1L << (RANK - 586)) | (1L << (AVG - 586)) | (1L << (CORR - 586)) | (1L << (LAG - 586)) | (1L << (LEAD - 586)) | (1L << (MAX - 586)) | (1L << (MEDIAN - 586)) | (1L << (MIN - 586)) | (1L << (NTILE - 586)) | (1L << (RATIO_TO_REPORT - 586)) | (1L << (ROW_NUMBER - 586)) | (1L << (SUM - 586)) | (1L << (VARIANCE - 586)) | (1L << (REGR_ - 586)) | (1L << (STDDEV - 586)) | (1L << (VAR_ - 586)) | (1L << (COVAR_ - 586)))) != 0) || _la==COMMA || _la==REGULAR_ID );
					setState(3088);
					match(RIGHT_PAREN);
					}
				}

				}
				break;
			case SUBPARTITION:
				{
				setState(3092);
				subpartition_template();
				}
				break;
			case PARTITIONS:
			case LEFT_PAREN:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Range_partition_descContext extends ParserRuleContext {
		public TerminalNode PARTITION() { return getToken(PLSQLParser.PARTITION, 0); }
		public Range_values_clauseContext range_values_clause() {
			return getRuleContext(Range_values_clauseContext.class,0);
		}
		public Table_partition_descriptionContext table_partition_description() {
			return getRuleContext(Table_partition_descriptionContext.class,0);
		}
		public Partition_nameContext partition_name() {
			return getRuleContext(Partition_nameContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(PLSQLParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PLSQLParser.RIGHT_PAREN, 0); }
		public Hash_subparts_by_quantityContext hash_subparts_by_quantity() {
			return getRuleContext(Hash_subparts_by_quantityContext.class,0);
		}
		public List<Range_subpartition_descContext> range_subpartition_desc() {
			return getRuleContexts(Range_subpartition_descContext.class);
		}
		public Range_subpartition_descContext range_subpartition_desc(int i) {
			return getRuleContext(Range_subpartition_descContext.class,i);
		}
		public List<List_subpartition_descContext> list_subpartition_desc() {
			return getRuleContexts(List_subpartition_descContext.class);
		}
		public List_subpartition_descContext list_subpartition_desc(int i) {
			return getRuleContext(List_subpartition_descContext.class,i);
		}
		public List<Individual_hash_subpartsContext> individual_hash_subparts() {
			return getRuleContexts(Individual_hash_subpartsContext.class);
		}
		public Individual_hash_subpartsContext individual_hash_subparts(int i) {
			return getRuleContext(Individual_hash_subpartsContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLSQLParser.COMMA, i);
		}
		public Range_partition_descContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_range_partition_desc; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterRange_partition_desc(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitRange_partition_desc(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitRange_partition_desc(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Range_partition_descContext range_partition_desc() throws RecognitionException {
		Range_partition_descContext _localctx = new Range_partition_descContext(_ctx, getState());
		enterRule(_localctx, 242, RULE_range_partition_desc);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3095);
			match(PARTITION);
			setState(3097);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BUILD) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (CHR - 65)) | (1L << (CLOB - 65)) | (1L << (CLOSE - 65)) | (1L << (CLUSTER - 65)) | (1L << (COALESCE - 65)) | (1L << (COLLECT - 65)) | (1L << (COLUMNS - 65)) | (1L << (COMMENT - 65)) | (1L << (COMMIT - 65)) | (1L << (COMMITTED - 65)) | (1L << (COMPATIBILITY - 65)) | (1L << (COMPILE - 65)) | (1L << (COMPLETE - 65)) | (1L << (COMPOUND - 65)) | (1L << (CONCAT - 65)) | (1L << (CONSTANT - 65)) | (1L << (CONSTRAINT - 65)) | (1L << (CONSTRAINTS - 65)) | (1L << (CONSTRUCTOR - 65)) | (1L << (CONTENT - 65)) | (1L << (CONTEXT - 65)) | (1L << (CONTINUE - 65)) | (1L << (CONVERT - 65)) | (1L << (CORRUPT_XID - 65)) | (1L << (CORRUPT_XID_ALL - 65)) | (1L << (COST - 65)) | (1L << (COUNT - 65)) | (1L << (CROSS - 65)) | (1L << (CUBE - 65)) | (1L << (CURRENT_USER - 65)) | (1L << (CURSOR - 65)) | (1L << (CUSTOMDATUM - 65)) | (1L << (CYCLE - 65)) | (1L << (DATA - 65)) | (1L << (DATABASE - 65)) | (1L << (DATE - 65)) | (1L << (DAY - 65)) | (1L << (DB_ROLE_CHANGE - 65)) | (1L << (DBTIMEZONE - 65)) | (1L << (DDL - 65)) | (1L << (DEBUG - 65)) | (1L << (DEC - 65)) | (1L << (DECIMAL - 65)) | (1L << (DECODE - 65)) | (1L << (DECOMPOSE - 65)) | (1L << (DECREMENT - 65)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DEMAND - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (EDITIONING - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENFORCED - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FAST - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)) | (1L << (FOLLOWING - 129)) | (1L << (FOLLOWS - 129)) | (1L << (FORALL - 129)) | (1L << (FORCE - 129)))) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & ((1L << (FULL - 197)) | (1L << (FUNCTION - 197)) | (1L << (GROUPING - 197)) | (1L << (HASH - 197)) | (1L << (HIDE - 197)) | (1L << (HOUR - 197)) | (1L << (IGNORE - 197)) | (1L << (IMMEDIATE - 197)) | (1L << (INCLUDE - 197)) | (1L << (INCLUDING - 197)) | (1L << (INCREMENT - 197)) | (1L << (INDENT - 197)) | (1L << (INDEXED - 197)) | (1L << (INDICATOR - 197)) | (1L << (INDICES - 197)) | (1L << (INFINITE - 197)) | (1L << (INLINE - 197)) | (1L << (INNER - 197)) | (1L << (INOUT - 197)) | (1L << (INSTANTIABLE - 197)) | (1L << (INSTEAD - 197)) | (1L << (INT - 197)) | (1L << (INTEGER - 197)) | (1L << (INTERVAL - 197)) | (1L << (INVALIDATE - 197)) | (1L << (ISOLATION - 197)) | (1L << (ITERATE - 197)) | (1L << (JAVA - 197)) | (1L << (JOIN - 197)) | (1L << (KEEP - 197)) | (1L << (LANGUAGE - 197)) | (1L << (LAST - 197)) | (1L << (LAST_VALUE - 197)) | (1L << (LEADING - 197)) | (1L << (LEFT - 197)) | (1L << (LEVEL - 197)))) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & ((1L << (LIBRARY - 261)) | (1L << (LIKE2 - 261)) | (1L << (LIKE4 - 261)) | (1L << (LIKEC - 261)) | (1L << (LIMIT - 261)) | (1L << (LIST - 261)) | (1L << (LOCAL - 261)) | (1L << (LOCKED - 261)) | (1L << (LOG - 261)) | (1L << (LOGOFF - 261)) | (1L << (LOGON - 261)) | (1L << (LONG - 261)) | (1L << (LOOP - 261)) | (1L << (MAIN - 261)) | (1L << (MAP - 261)) | (1L << (MASTER - 261)) | (1L << (MATCHED - 261)) | (1L << (MAXVALUE - 261)) | (1L << (MEASURES - 261)) | (1L << (MEMBER - 261)) | (1L << (MERGE - 261)) | (1L << (MINUTE - 261)) | (1L << (MINVALUE - 261)) | (1L << (MLSLABEL - 261)) | (1L << (MODEL - 261)) | (1L << (MODIFY - 261)) | (1L << (MONTH - 261)) | (1L << (MULTISET - 261)) | (1L << (NAME - 261)) | (1L << (NAN - 261)) | (1L << (NATURAL - 261)) | (1L << (NATURALN - 261)) | (1L << (NAV - 261)) | (1L << (NCHAR - 261)) | (1L << (NCHAR_CS - 261)) | (1L << (NCLOB - 261)) | (1L << (NESTED - 261)) | (1L << (NEVER - 261)) | (1L << (NEW - 261)) | (1L << (NO - 261)) | (1L << (NOAUDIT - 261)) | (1L << (NOCOPY - 261)) | (1L << (NOCYCLE - 261)) | (1L << (NOENTITYESCAPING - 261)))) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & ((1L << (NONE - 329)) | (1L << (NOSCHEMACHECK - 329)) | (1L << (NVL - 329)) | (1L << (NULLS - 329)) | (1L << (NUMBER - 329)) | (1L << (NUMERIC - 329)) | (1L << (NVARCHAR2 - 329)) | (1L << (MATERIALIZED - 329)) | (1L << (OBJECT - 329)) | (1L << (OFF - 329)) | (1L << (OID - 329)) | (1L << (OLD - 329)) | (1L << (ONLY - 329)) | (1L << (OPEN - 329)) | (1L << (ORADATA - 329)) | (1L << (ORDINALITY - 329)) | (1L << (OSERROR - 329)) | (1L << (OUT - 329)) | (1L << (OUTER - 329)) | (1L << (OVER - 329)) | (1L << (OVERRIDING - 329)) | (1L << (PACKAGE - 329)) | (1L << (PARALLEL_ENABLE - 329)) | (1L << (PARAMETERS - 329)) | (1L << (PARENT - 329)) | (1L << (PARTITION - 329)) | (1L << (PASSING - 329)) | (1L << (PATH - 329)) | (1L << (PIPELINED - 329)) | (1L << (PLAN - 329)) | (1L << (PLS_INTEGER - 329)) | (1L << (POSITIVE - 329)) | (1L << (POSITIVEN - 329)) | (1L << (PRAGMA - 329)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (PREBUILT - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)) | (1L << (PRESENT - 393)) | (1L << (PUBLIC - 393)) | (1L << (RAISE - 393)) | (1L << (RANGE - 393)) | (1L << (RAW - 393)) | (1L << (READ - 393)) | (1L << (REAL - 393)) | (1L << (RECORD - 393)) | (1L << (REDUCED - 393)) | (1L << (REF - 393)) | (1L << (REFERENCE - 393)) | (1L << (REFERENCING - 393)) | (1L << (REFRESH - 393)) | (1L << (REJECT - 393)) | (1L << (RELIES_ON - 393)) | (1L << (RENAME - 393)) | (1L << (REPLACE - 393)) | (1L << (RESPECT - 393)) | (1L << (RESTRICT_REFERENCES - 393)) | (1L << (RESULT - 393)) | (1L << (RESULT_CACHE - 393)) | (1L << (RETURN - 393)) | (1L << (RETURNING - 393)) | (1L << (REUSE - 393)) | (1L << (REVERSE - 393)) | (1L << (REWRITE - 393)) | (1L << (RIGHT - 393)) | (1L << (ROLE - 393)) | (1L << (ROLLBACK - 393)) | (1L << (ROLLUP - 393)) | (1L << (ROW - 393)) | (1L << (ROWID - 393)) | (1L << (ROWS - 393)) | (1L << (RULES - 393)) | (1L << (SAMPLE - 393)) | (1L << (SAVE - 393)) | (1L << (SAVEPOINT - 393)) | (1L << (SCHEMA - 393)) | (1L << (SCHEMACHECK - 393)) | (1L << (SCN - 393)) | (1L << (SECOND - 393)))) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & ((1L << (SEED - 458)) | (1L << (SEGMENT - 458)) | (1L << (SELF - 458)) | (1L << (SEQUENTIAL - 458)) | (1L << (SERIALIZABLE - 458)) | (1L << (SERIALLY_REUSABLE - 458)) | (1L << (SERVERERROR - 458)) | (1L << (SESSIONTIMEZONE - 458)) | (1L << (SET - 458)) | (1L << (SETS - 458)) | (1L << (SETTINGS - 458)) | (1L << (SHOW - 458)) | (1L << (SHUTDOWN - 458)) | (1L << (SIBLINGS - 458)) | (1L << (SIGNTYPE - 458)) | (1L << (SIMPLE_INTEGER - 458)) | (1L << (SINGLE - 458)) | (1L << (SIZE - 458)) | (1L << (SKIP_ - 458)) | (1L << (SMALLINT - 458)) | (1L << (SNAPSHOT - 458)) | (1L << (SOME - 458)) | (1L << (SPECIFICATION - 458)) | (1L << (SQLDATA - 458)) | (1L << (SQLERROR - 458)) | (1L << (STANDALONE - 458)) | (1L << (STARTUP - 458)) | (1L << (STATEMENT - 458)) | (1L << (STATEMENT_ID - 458)) | (1L << (STATIC - 458)) | (1L << (STATISTICS - 458)) | (1L << (STRING - 458)) | (1L << (SUBMULTISET - 458)) | (1L << (SUBPARTITION - 458)) | (1L << (SUBSTITUTABLE - 458)) | (1L << (SUBSTRING - 458)) | (1L << (SUBTYPE - 458)) | (1L << (SUCCESS - 458)) | (1L << (SUSPEND - 458)) | (1L << (TABLES - 458)) | (1L << (TIME - 458)) | (1L << (TIMESTAMP - 458)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 458)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 458)) | (1L << (TIMESTAMP_UNCONSTRAINED - 458)))) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & ((1L << (TIMEZONE_ABBR - 522)) | (1L << (TIMEZONE_HOUR - 522)) | (1L << (TIMEZONE_MINUTE - 522)) | (1L << (TIMEZONE_REGION - 522)) | (1L << (TO_CHAR - 522)) | (1L << (TO_DATE - 522)) | (1L << (TRAILING - 522)) | (1L << (TRANSACTION - 522)) | (1L << (TRANSLATE - 522)) | (1L << (TREAT - 522)) | (1L << (TRIGGER - 522)) | (1L << (TRIM - 522)) | (1L << (TRUNCATE - 522)) | (1L << (TRUSTED - 522)) | (1L << (TYPE - 522)) | (1L << (UNBOUNDED - 522)) | (1L << (UNDER - 522)) | (1L << (UNLIMITED - 522)) | (1L << (UNTIL - 522)) | (1L << (UPDATED - 522)) | (1L << (UPSERT - 522)) | (1L << (UROWID - 522)) | (1L << (USE - 522)) | (1L << (VALIDATE - 522)) | (1L << (VALUE - 522)) | (1L << (VARCHAR - 522)) | (1L << (VARCHAR2 - 522)) | (1L << (VARIABLE - 522)) | (1L << (VARRAY - 522)) | (1L << (VARYING - 522)) | (1L << (VERBOSE - 522)) | (1L << (VERSION - 522)) | (1L << (VERSIONS - 522)) | (1L << (VIEW - 522)) | (1L << (WAIT - 522)) | (1L << (WARNING - 522)) | (1L << (WELLFORMED - 522)) | (1L << (WHENEVER - 522)) | (1L << (WHILE - 522)) | (1L << (WITHOUT - 522)) | (1L << (WITHIN - 522)) | (1L << (WORK - 522)) | (1L << (WRITE - 522)) | (1L << (XML - 522)) | (1L << (XMLAGG - 522)) | (1L << (XMLATTRIBUTES - 522)))) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & ((1L << (XMLCAST - 586)) | (1L << (XMLCOLATTVAL - 586)) | (1L << (XMLELEMENT - 586)) | (1L << (XMLEXISTS - 586)) | (1L << (XMLFOREST - 586)) | (1L << (XMLNAMESPACES - 586)) | (1L << (XMLPARSE - 586)) | (1L << (XMLPI - 586)) | (1L << (XMLQUERY - 586)) | (1L << (XMLROOT - 586)) | (1L << (XMLSERIALIZE - 586)) | (1L << (XMLTABLE - 586)) | (1L << (YEAR - 586)) | (1L << (YES - 586)) | (1L << (YMINTERVAL_UNCONSTRAINED - 586)) | (1L << (ZONE - 586)) | (1L << (PREDICTION - 586)) | (1L << (PREDICTION_BOUNDS - 586)) | (1L << (PREDICTION_COST - 586)) | (1L << (PREDICTION_DETAILS - 586)) | (1L << (PREDICTION_PROBABILITY - 586)) | (1L << (PREDICTION_SET - 586)) | (1L << (CUME_DIST - 586)) | (1L << (DENSE_RANK - 586)) | (1L << (LISTAGG - 586)) | (1L << (PERCENT_RANK - 586)) | (1L << (PERCENTILE_CONT - 586)) | (1L << (PERCENTILE_DISC - 586)) | (1L << (RANK - 586)) | (1L << (AVG - 586)) | (1L << (CORR - 586)) | (1L << (LAG - 586)) | (1L << (LEAD - 586)) | (1L << (MAX - 586)) | (1L << (MEDIAN - 586)) | (1L << (MIN - 586)) | (1L << (NTILE - 586)) | (1L << (RATIO_TO_REPORT - 586)) | (1L << (ROW_NUMBER - 586)) | (1L << (SUM - 586)) | (1L << (VARIANCE - 586)) | (1L << (REGR_ - 586)) | (1L << (STDDEV - 586)) | (1L << (VAR_ - 586)) | (1L << (COVAR_ - 586)))) != 0) || _la==REGULAR_ID) {
				{
				setState(3096);
				partition_name();
				}
			}

			setState(3099);
			range_values_clause();
			setState(3100);
			table_partition_description();
			setState(3133);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SUBPARTITIONS || _la==LEFT_PAREN) {
				{
				setState(3131);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case LEFT_PAREN:
					{
					setState(3101);
					match(LEFT_PAREN);
					setState(3126);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,388,_ctx) ) {
					case 1:
						{
						setState(3106); 
						_errHandler.sync(this);
						_la = _input.LA(1);
						do {
							{
							{
							setState(3103);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(3102);
								match(COMMA);
								}
							}

							setState(3105);
							range_subpartition_desc();
							}
							}
							setState(3108); 
							_errHandler.sync(this);
							_la = _input.LA(1);
						} while ( _la==SUBPARTITION || _la==COMMA );
						}
						break;
					case 2:
						{
						setState(3114); 
						_errHandler.sync(this);
						_la = _input.LA(1);
						do {
							{
							{
							setState(3111);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(3110);
								match(COMMA);
								}
							}

							setState(3113);
							list_subpartition_desc();
							}
							}
							setState(3116); 
							_errHandler.sync(this);
							_la = _input.LA(1);
						} while ( _la==SUBPARTITION || _la==COMMA );
						}
						break;
					case 3:
						{
						setState(3122); 
						_errHandler.sync(this);
						_la = _input.LA(1);
						do {
							{
							{
							setState(3119);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(3118);
								match(COMMA);
								}
							}

							setState(3121);
							individual_hash_subparts();
							}
							}
							setState(3124); 
							_errHandler.sync(this);
							_la = _input.LA(1);
						} while ( _la==SUBPARTITION || _la==COMMA );
						}
						break;
					}
					setState(3128);
					match(RIGHT_PAREN);
					}
					break;
				case SUBPARTITIONS:
					{
					setState(3130);
					hash_subparts_by_quantity();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Hash_subparts_by_quantityContext extends ParserRuleContext {
		public TerminalNode SUBPARTITIONS() { return getToken(PLSQLParser.SUBPARTITIONS, 0); }
		public TerminalNode UNSIGNED_INTEGER() { return getToken(PLSQLParser.UNSIGNED_INTEGER, 0); }
		public TerminalNode STORE() { return getToken(PLSQLParser.STORE, 0); }
		public TerminalNode IN() { return getToken(PLSQLParser.IN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PLSQLParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PLSQLParser.RIGHT_PAREN, 0); }
		public List<TablespaceContext> tablespace() {
			return getRuleContexts(TablespaceContext.class);
		}
		public TablespaceContext tablespace(int i) {
			return getRuleContext(TablespaceContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLSQLParser.COMMA, i);
		}
		public Hash_subparts_by_quantityContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_hash_subparts_by_quantity; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterHash_subparts_by_quantity(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitHash_subparts_by_quantity(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitHash_subparts_by_quantity(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Hash_subparts_by_quantityContext hash_subparts_by_quantity() throws RecognitionException {
		Hash_subparts_by_quantityContext _localctx = new Hash_subparts_by_quantityContext(_ctx, getState());
		enterRule(_localctx, 244, RULE_hash_subparts_by_quantity);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3135);
			match(SUBPARTITIONS);
			setState(3136);
			match(UNSIGNED_INTEGER);
			setState(3150);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==STORE) {
				{
				setState(3137);
				match(STORE);
				setState(3138);
				match(IN);
				setState(3139);
				match(LEFT_PAREN);
				setState(3144); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(3141);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(3140);
						match(COMMA);
						}
					}

					setState(3143);
					tablespace();
					}
					}
					setState(3146); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BUILD) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (CHR - 65)) | (1L << (CLOB - 65)) | (1L << (CLOSE - 65)) | (1L << (CLUSTER - 65)) | (1L << (COALESCE - 65)) | (1L << (COLLECT - 65)) | (1L << (COLUMNS - 65)) | (1L << (COMMENT - 65)) | (1L << (COMMIT - 65)) | (1L << (COMMITTED - 65)) | (1L << (COMPATIBILITY - 65)) | (1L << (COMPILE - 65)) | (1L << (COMPLETE - 65)) | (1L << (COMPOUND - 65)) | (1L << (CONCAT - 65)) | (1L << (CONSTANT - 65)) | (1L << (CONSTRAINT - 65)) | (1L << (CONSTRAINTS - 65)) | (1L << (CONSTRUCTOR - 65)) | (1L << (CONTENT - 65)) | (1L << (CONTEXT - 65)) | (1L << (CONTINUE - 65)) | (1L << (CONVERT - 65)) | (1L << (CORRUPT_XID - 65)) | (1L << (CORRUPT_XID_ALL - 65)) | (1L << (COST - 65)) | (1L << (COUNT - 65)) | (1L << (CROSS - 65)) | (1L << (CUBE - 65)) | (1L << (CURRENT_USER - 65)) | (1L << (CURSOR - 65)) | (1L << (CUSTOMDATUM - 65)) | (1L << (CYCLE - 65)) | (1L << (DATA - 65)) | (1L << (DATABASE - 65)) | (1L << (DATE - 65)) | (1L << (DAY - 65)) | (1L << (DB_ROLE_CHANGE - 65)) | (1L << (DBTIMEZONE - 65)) | (1L << (DDL - 65)) | (1L << (DEBUG - 65)) | (1L << (DEC - 65)) | (1L << (DECIMAL - 65)) | (1L << (DECODE - 65)) | (1L << (DECOMPOSE - 65)) | (1L << (DECREMENT - 65)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DEMAND - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (EDITIONING - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENFORCED - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FAST - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)) | (1L << (FOLLOWING - 129)) | (1L << (FOLLOWS - 129)) | (1L << (FORALL - 129)) | (1L << (FORCE - 129)))) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & ((1L << (FULL - 197)) | (1L << (FUNCTION - 197)) | (1L << (GROUPING - 197)) | (1L << (HASH - 197)) | (1L << (HIDE - 197)) | (1L << (HOUR - 197)) | (1L << (IGNORE - 197)) | (1L << (IMMEDIATE - 197)) | (1L << (INCLUDE - 197)) | (1L << (INCLUDING - 197)) | (1L << (INCREMENT - 197)) | (1L << (INDENT - 197)) | (1L << (INDEXED - 197)) | (1L << (INDICATOR - 197)) | (1L << (INDICES - 197)) | (1L << (INFINITE - 197)) | (1L << (INLINE - 197)) | (1L << (INNER - 197)) | (1L << (INOUT - 197)) | (1L << (INSTANTIABLE - 197)) | (1L << (INSTEAD - 197)) | (1L << (INT - 197)) | (1L << (INTEGER - 197)) | (1L << (INTERVAL - 197)) | (1L << (INVALIDATE - 197)) | (1L << (ISOLATION - 197)) | (1L << (ITERATE - 197)) | (1L << (JAVA - 197)) | (1L << (JOIN - 197)) | (1L << (KEEP - 197)) | (1L << (LANGUAGE - 197)) | (1L << (LAST - 197)) | (1L << (LAST_VALUE - 197)) | (1L << (LEADING - 197)) | (1L << (LEFT - 197)) | (1L << (LEVEL - 197)))) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & ((1L << (LIBRARY - 261)) | (1L << (LIKE2 - 261)) | (1L << (LIKE4 - 261)) | (1L << (LIKEC - 261)) | (1L << (LIMIT - 261)) | (1L << (LIST - 261)) | (1L << (LOCAL - 261)) | (1L << (LOCKED - 261)) | (1L << (LOG - 261)) | (1L << (LOGOFF - 261)) | (1L << (LOGON - 261)) | (1L << (LONG - 261)) | (1L << (LOOP - 261)) | (1L << (MAIN - 261)) | (1L << (MAP - 261)) | (1L << (MASTER - 261)) | (1L << (MATCHED - 261)) | (1L << (MAXVALUE - 261)) | (1L << (MEASURES - 261)) | (1L << (MEMBER - 261)) | (1L << (MERGE - 261)) | (1L << (MINUTE - 261)) | (1L << (MINVALUE - 261)) | (1L << (MLSLABEL - 261)) | (1L << (MODEL - 261)) | (1L << (MODIFY - 261)) | (1L << (MONTH - 261)) | (1L << (MULTISET - 261)) | (1L << (NAME - 261)) | (1L << (NAN - 261)) | (1L << (NATURAL - 261)) | (1L << (NATURALN - 261)) | (1L << (NAV - 261)) | (1L << (NCHAR - 261)) | (1L << (NCHAR_CS - 261)) | (1L << (NCLOB - 261)) | (1L << (NESTED - 261)) | (1L << (NEVER - 261)) | (1L << (NEW - 261)) | (1L << (NO - 261)) | (1L << (NOAUDIT - 261)) | (1L << (NOCOPY - 261)) | (1L << (NOCYCLE - 261)) | (1L << (NOENTITYESCAPING - 261)))) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & ((1L << (NONE - 329)) | (1L << (NOSCHEMACHECK - 329)) | (1L << (NVL - 329)) | (1L << (NULLS - 329)) | (1L << (NUMBER - 329)) | (1L << (NUMERIC - 329)) | (1L << (NVARCHAR2 - 329)) | (1L << (MATERIALIZED - 329)) | (1L << (OBJECT - 329)) | (1L << (OFF - 329)) | (1L << (OID - 329)) | (1L << (OLD - 329)) | (1L << (ONLY - 329)) | (1L << (OPEN - 329)) | (1L << (ORADATA - 329)) | (1L << (ORDINALITY - 329)) | (1L << (OSERROR - 329)) | (1L << (OUT - 329)) | (1L << (OUTER - 329)) | (1L << (OVER - 329)) | (1L << (OVERRIDING - 329)) | (1L << (PACKAGE - 329)) | (1L << (PARALLEL_ENABLE - 329)) | (1L << (PARAMETERS - 329)) | (1L << (PARENT - 329)) | (1L << (PARTITION - 329)) | (1L << (PASSING - 329)) | (1L << (PATH - 329)) | (1L << (PIPELINED - 329)) | (1L << (PLAN - 329)) | (1L << (PLS_INTEGER - 329)) | (1L << (POSITIVE - 329)) | (1L << (POSITIVEN - 329)) | (1L << (PRAGMA - 329)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (PREBUILT - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)) | (1L << (PRESENT - 393)) | (1L << (PUBLIC - 393)) | (1L << (RAISE - 393)) | (1L << (RANGE - 393)) | (1L << (RAW - 393)) | (1L << (READ - 393)) | (1L << (REAL - 393)) | (1L << (RECORD - 393)) | (1L << (REDUCED - 393)) | (1L << (REF - 393)) | (1L << (REFERENCE - 393)) | (1L << (REFERENCING - 393)) | (1L << (REFRESH - 393)) | (1L << (REJECT - 393)) | (1L << (RELIES_ON - 393)) | (1L << (RENAME - 393)) | (1L << (REPLACE - 393)) | (1L << (RESPECT - 393)) | (1L << (RESTRICT_REFERENCES - 393)) | (1L << (RESULT - 393)) | (1L << (RESULT_CACHE - 393)) | (1L << (RETURN - 393)) | (1L << (RETURNING - 393)) | (1L << (REUSE - 393)) | (1L << (REVERSE - 393)) | (1L << (REWRITE - 393)) | (1L << (RIGHT - 393)) | (1L << (ROLE - 393)) | (1L << (ROLLBACK - 393)) | (1L << (ROLLUP - 393)) | (1L << (ROW - 393)) | (1L << (ROWID - 393)) | (1L << (ROWS - 393)) | (1L << (RULES - 393)) | (1L << (SAMPLE - 393)) | (1L << (SAVE - 393)) | (1L << (SAVEPOINT - 393)) | (1L << (SCHEMA - 393)) | (1L << (SCHEMACHECK - 393)) | (1L << (SCN - 393)) | (1L << (SECOND - 393)))) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & ((1L << (SEED - 458)) | (1L << (SEGMENT - 458)) | (1L << (SELF - 458)) | (1L << (SEQUENTIAL - 458)) | (1L << (SERIALIZABLE - 458)) | (1L << (SERIALLY_REUSABLE - 458)) | (1L << (SERVERERROR - 458)) | (1L << (SESSIONTIMEZONE - 458)) | (1L << (SET - 458)) | (1L << (SETS - 458)) | (1L << (SETTINGS - 458)) | (1L << (SHOW - 458)) | (1L << (SHUTDOWN - 458)) | (1L << (SIBLINGS - 458)) | (1L << (SIGNTYPE - 458)) | (1L << (SIMPLE_INTEGER - 458)) | (1L << (SINGLE - 458)) | (1L << (SIZE - 458)) | (1L << (SKIP_ - 458)) | (1L << (SMALLINT - 458)) | (1L << (SNAPSHOT - 458)) | (1L << (SOME - 458)) | (1L << (SPECIFICATION - 458)) | (1L << (SQLDATA - 458)) | (1L << (SQLERROR - 458)) | (1L << (STANDALONE - 458)) | (1L << (STARTUP - 458)) | (1L << (STATEMENT - 458)) | (1L << (STATEMENT_ID - 458)) | (1L << (STATIC - 458)) | (1L << (STATISTICS - 458)) | (1L << (STRING - 458)) | (1L << (SUBMULTISET - 458)) | (1L << (SUBPARTITION - 458)) | (1L << (SUBSTITUTABLE - 458)) | (1L << (SUBSTRING - 458)) | (1L << (SUBTYPE - 458)) | (1L << (SUCCESS - 458)) | (1L << (SUSPEND - 458)) | (1L << (TABLES - 458)) | (1L << (TIME - 458)) | (1L << (TIMESTAMP - 458)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 458)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 458)) | (1L << (TIMESTAMP_UNCONSTRAINED - 458)))) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & ((1L << (TIMEZONE_ABBR - 522)) | (1L << (TIMEZONE_HOUR - 522)) | (1L << (TIMEZONE_MINUTE - 522)) | (1L << (TIMEZONE_REGION - 522)) | (1L << (TO_CHAR - 522)) | (1L << (TO_DATE - 522)) | (1L << (TRAILING - 522)) | (1L << (TRANSACTION - 522)) | (1L << (TRANSLATE - 522)) | (1L << (TREAT - 522)) | (1L << (TRIGGER - 522)) | (1L << (TRIM - 522)) | (1L << (TRUNCATE - 522)) | (1L << (TRUSTED - 522)) | (1L << (TYPE - 522)) | (1L << (UNBOUNDED - 522)) | (1L << (UNDER - 522)) | (1L << (UNLIMITED - 522)) | (1L << (UNTIL - 522)) | (1L << (UPDATED - 522)) | (1L << (UPSERT - 522)) | (1L << (UROWID - 522)) | (1L << (USE - 522)) | (1L << (VALIDATE - 522)) | (1L << (VALUE - 522)) | (1L << (VARCHAR - 522)) | (1L << (VARCHAR2 - 522)) | (1L << (VARIABLE - 522)) | (1L << (VARRAY - 522)) | (1L << (VARYING - 522)) | (1L << (VERBOSE - 522)) | (1L << (VERSION - 522)) | (1L << (VERSIONS - 522)) | (1L << (VIEW - 522)) | (1L << (WAIT - 522)) | (1L << (WARNING - 522)) | (1L << (WELLFORMED - 522)) | (1L << (WHENEVER - 522)) | (1L << (WHILE - 522)) | (1L << (WITHOUT - 522)) | (1L << (WITHIN - 522)) | (1L << (WORK - 522)) | (1L << (WRITE - 522)) | (1L << (XML - 522)) | (1L << (XMLAGG - 522)) | (1L << (XMLATTRIBUTES - 522)))) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & ((1L << (XMLCAST - 586)) | (1L << (XMLCOLATTVAL - 586)) | (1L << (XMLELEMENT - 586)) | (1L << (XMLEXISTS - 586)) | (1L << (XMLFOREST - 586)) | (1L << (XMLNAMESPACES - 586)) | (1L << (XMLPARSE - 586)) | (1L << (XMLPI - 586)) | (1L << (XMLQUERY - 586)) | (1L << (XMLROOT - 586)) | (1L << (XMLSERIALIZE - 586)) | (1L << (XMLTABLE - 586)) | (1L << (YEAR - 586)) | (1L << (YES - 586)) | (1L << (YMINTERVAL_UNCONSTRAINED - 586)) | (1L << (ZONE - 586)) | (1L << (PREDICTION - 586)) | (1L << (PREDICTION_BOUNDS - 586)) | (1L << (PREDICTION_COST - 586)) | (1L << (PREDICTION_DETAILS - 586)) | (1L << (PREDICTION_PROBABILITY - 586)) | (1L << (PREDICTION_SET - 586)) | (1L << (CUME_DIST - 586)) | (1L << (DENSE_RANK - 586)) | (1L << (LISTAGG - 586)) | (1L << (PERCENT_RANK - 586)) | (1L << (PERCENTILE_CONT - 586)) | (1L << (PERCENTILE_DISC - 586)) | (1L << (RANK - 586)) | (1L << (AVG - 586)) | (1L << (CORR - 586)) | (1L << (LAG - 586)) | (1L << (LEAD - 586)) | (1L << (MAX - 586)) | (1L << (MEDIAN - 586)) | (1L << (MIN - 586)) | (1L << (NTILE - 586)) | (1L << (RATIO_TO_REPORT - 586)) | (1L << (ROW_NUMBER - 586)) | (1L << (SUM - 586)) | (1L << (VARIANCE - 586)) | (1L << (REGR_ - 586)) | (1L << (STDDEV - 586)) | (1L << (VAR_ - 586)) | (1L << (COVAR_ - 586)))) != 0) || _la==COMMA || _la==REGULAR_ID );
				setState(3148);
				match(RIGHT_PAREN);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Composite_list_partitionsContext extends ParserRuleContext {
		public TerminalNode PARTITION() { return getToken(PLSQLParser.PARTITION, 0); }
		public TerminalNode BY() { return getToken(PLSQLParser.BY, 0); }
		public TerminalNode LIST() { return getToken(PLSQLParser.LIST, 0); }
		public List<TerminalNode> LEFT_PAREN() { return getTokens(PLSQLParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(PLSQLParser.LEFT_PAREN, i);
		}
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(PLSQLParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(PLSQLParser.RIGHT_PAREN, i);
		}
		public Subpartition_by_rangeContext subpartition_by_range() {
			return getRuleContext(Subpartition_by_rangeContext.class,0);
		}
		public Subpartition_by_listContext subpartition_by_list() {
			return getRuleContext(Subpartition_by_listContext.class,0);
		}
		public Subpartition_by_hashContext subpartition_by_hash() {
			return getRuleContext(Subpartition_by_hashContext.class,0);
		}
		public List<List_partition_descContext> list_partition_desc() {
			return getRuleContexts(List_partition_descContext.class);
		}
		public List_partition_descContext list_partition_desc(int i) {
			return getRuleContext(List_partition_descContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLSQLParser.COMMA, i);
		}
		public Composite_list_partitionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_composite_list_partitions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterComposite_list_partitions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitComposite_list_partitions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitComposite_list_partitions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Composite_list_partitionsContext composite_list_partitions() throws RecognitionException {
		Composite_list_partitionsContext _localctx = new Composite_list_partitionsContext(_ctx, getState());
		enterRule(_localctx, 246, RULE_composite_list_partitions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3152);
			match(PARTITION);
			setState(3153);
			match(BY);
			setState(3154);
			match(LIST);
			setState(3155);
			match(LEFT_PAREN);
			setState(3156);
			column_name();
			setState(3157);
			match(RIGHT_PAREN);
			setState(3161);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,394,_ctx) ) {
			case 1:
				{
				setState(3158);
				subpartition_by_range();
				}
				break;
			case 2:
				{
				setState(3159);
				subpartition_by_list();
				}
				break;
			case 3:
				{
				setState(3160);
				subpartition_by_hash();
				}
				break;
			}
			setState(3163);
			match(LEFT_PAREN);
			setState(3168); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(3165);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(3164);
					match(COMMA);
					}
				}

				setState(3167);
				list_partition_desc();
				}
				}
				setState(3170); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==PARTITION || _la==COMMA );
			setState(3172);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class List_partition_descContext extends ParserRuleContext {
		public TerminalNode PARTITION() { return getToken(PLSQLParser.PARTITION, 0); }
		public List_values_clauseContext list_values_clause() {
			return getRuleContext(List_values_clauseContext.class,0);
		}
		public Table_partition_descriptionContext table_partition_description() {
			return getRuleContext(Table_partition_descriptionContext.class,0);
		}
		public Partition_nameContext partition_name() {
			return getRuleContext(Partition_nameContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(PLSQLParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PLSQLParser.RIGHT_PAREN, 0); }
		public Hash_subparts_by_quantityContext hash_subparts_by_quantity() {
			return getRuleContext(Hash_subparts_by_quantityContext.class,0);
		}
		public List<Range_subpartition_descContext> range_subpartition_desc() {
			return getRuleContexts(Range_subpartition_descContext.class);
		}
		public Range_subpartition_descContext range_subpartition_desc(int i) {
			return getRuleContext(Range_subpartition_descContext.class,i);
		}
		public List<List_subpartition_descContext> list_subpartition_desc() {
			return getRuleContexts(List_subpartition_descContext.class);
		}
		public List_subpartition_descContext list_subpartition_desc(int i) {
			return getRuleContext(List_subpartition_descContext.class,i);
		}
		public List<Individual_hash_subpartsContext> individual_hash_subparts() {
			return getRuleContexts(Individual_hash_subpartsContext.class);
		}
		public Individual_hash_subpartsContext individual_hash_subparts(int i) {
			return getRuleContext(Individual_hash_subpartsContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLSQLParser.COMMA, i);
		}
		public List_partition_descContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_list_partition_desc; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterList_partition_desc(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitList_partition_desc(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitList_partition_desc(this);
			else return visitor.visitChildren(this);
		}
	}

	public final List_partition_descContext list_partition_desc() throws RecognitionException {
		List_partition_descContext _localctx = new List_partition_descContext(_ctx, getState());
		enterRule(_localctx, 248, RULE_list_partition_desc);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3174);
			match(PARTITION);
			setState(3176);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BUILD) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (CHR - 65)) | (1L << (CLOB - 65)) | (1L << (CLOSE - 65)) | (1L << (CLUSTER - 65)) | (1L << (COALESCE - 65)) | (1L << (COLLECT - 65)) | (1L << (COLUMNS - 65)) | (1L << (COMMENT - 65)) | (1L << (COMMIT - 65)) | (1L << (COMMITTED - 65)) | (1L << (COMPATIBILITY - 65)) | (1L << (COMPILE - 65)) | (1L << (COMPLETE - 65)) | (1L << (COMPOUND - 65)) | (1L << (CONCAT - 65)) | (1L << (CONSTANT - 65)) | (1L << (CONSTRAINT - 65)) | (1L << (CONSTRAINTS - 65)) | (1L << (CONSTRUCTOR - 65)) | (1L << (CONTENT - 65)) | (1L << (CONTEXT - 65)) | (1L << (CONTINUE - 65)) | (1L << (CONVERT - 65)) | (1L << (CORRUPT_XID - 65)) | (1L << (CORRUPT_XID_ALL - 65)) | (1L << (COST - 65)) | (1L << (COUNT - 65)) | (1L << (CROSS - 65)) | (1L << (CUBE - 65)) | (1L << (CURRENT_USER - 65)) | (1L << (CURSOR - 65)) | (1L << (CUSTOMDATUM - 65)) | (1L << (CYCLE - 65)) | (1L << (DATA - 65)) | (1L << (DATABASE - 65)) | (1L << (DATE - 65)) | (1L << (DAY - 65)) | (1L << (DB_ROLE_CHANGE - 65)) | (1L << (DBTIMEZONE - 65)) | (1L << (DDL - 65)) | (1L << (DEBUG - 65)) | (1L << (DEC - 65)) | (1L << (DECIMAL - 65)) | (1L << (DECODE - 65)) | (1L << (DECOMPOSE - 65)) | (1L << (DECREMENT - 65)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DEMAND - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (EDITIONING - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENFORCED - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FAST - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)) | (1L << (FOLLOWING - 129)) | (1L << (FOLLOWS - 129)) | (1L << (FORALL - 129)) | (1L << (FORCE - 129)))) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & ((1L << (FULL - 197)) | (1L << (FUNCTION - 197)) | (1L << (GROUPING - 197)) | (1L << (HASH - 197)) | (1L << (HIDE - 197)) | (1L << (HOUR - 197)) | (1L << (IGNORE - 197)) | (1L << (IMMEDIATE - 197)) | (1L << (INCLUDE - 197)) | (1L << (INCLUDING - 197)) | (1L << (INCREMENT - 197)) | (1L << (INDENT - 197)) | (1L << (INDEXED - 197)) | (1L << (INDICATOR - 197)) | (1L << (INDICES - 197)) | (1L << (INFINITE - 197)) | (1L << (INLINE - 197)) | (1L << (INNER - 197)) | (1L << (INOUT - 197)) | (1L << (INSTANTIABLE - 197)) | (1L << (INSTEAD - 197)) | (1L << (INT - 197)) | (1L << (INTEGER - 197)) | (1L << (INTERVAL - 197)) | (1L << (INVALIDATE - 197)) | (1L << (ISOLATION - 197)) | (1L << (ITERATE - 197)) | (1L << (JAVA - 197)) | (1L << (JOIN - 197)) | (1L << (KEEP - 197)) | (1L << (LANGUAGE - 197)) | (1L << (LAST - 197)) | (1L << (LAST_VALUE - 197)) | (1L << (LEADING - 197)) | (1L << (LEFT - 197)) | (1L << (LEVEL - 197)))) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & ((1L << (LIBRARY - 261)) | (1L << (LIKE2 - 261)) | (1L << (LIKE4 - 261)) | (1L << (LIKEC - 261)) | (1L << (LIMIT - 261)) | (1L << (LIST - 261)) | (1L << (LOCAL - 261)) | (1L << (LOCKED - 261)) | (1L << (LOG - 261)) | (1L << (LOGOFF - 261)) | (1L << (LOGON - 261)) | (1L << (LONG - 261)) | (1L << (LOOP - 261)) | (1L << (MAIN - 261)) | (1L << (MAP - 261)) | (1L << (MASTER - 261)) | (1L << (MATCHED - 261)) | (1L << (MAXVALUE - 261)) | (1L << (MEASURES - 261)) | (1L << (MEMBER - 261)) | (1L << (MERGE - 261)) | (1L << (MINUTE - 261)) | (1L << (MINVALUE - 261)) | (1L << (MLSLABEL - 261)) | (1L << (MODEL - 261)) | (1L << (MODIFY - 261)) | (1L << (MONTH - 261)) | (1L << (MULTISET - 261)) | (1L << (NAME - 261)) | (1L << (NAN - 261)) | (1L << (NATURAL - 261)) | (1L << (NATURALN - 261)) | (1L << (NAV - 261)) | (1L << (NCHAR - 261)) | (1L << (NCHAR_CS - 261)) | (1L << (NCLOB - 261)) | (1L << (NESTED - 261)) | (1L << (NEVER - 261)) | (1L << (NEW - 261)) | (1L << (NO - 261)) | (1L << (NOAUDIT - 261)) | (1L << (NOCOPY - 261)) | (1L << (NOCYCLE - 261)) | (1L << (NOENTITYESCAPING - 261)))) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & ((1L << (NONE - 329)) | (1L << (NOSCHEMACHECK - 329)) | (1L << (NVL - 329)) | (1L << (NULLS - 329)) | (1L << (NUMBER - 329)) | (1L << (NUMERIC - 329)) | (1L << (NVARCHAR2 - 329)) | (1L << (MATERIALIZED - 329)) | (1L << (OBJECT - 329)) | (1L << (OFF - 329)) | (1L << (OID - 329)) | (1L << (OLD - 329)) | (1L << (ONLY - 329)) | (1L << (OPEN - 329)) | (1L << (ORADATA - 329)) | (1L << (ORDINALITY - 329)) | (1L << (OSERROR - 329)) | (1L << (OUT - 329)) | (1L << (OUTER - 329)) | (1L << (OVER - 329)) | (1L << (OVERRIDING - 329)) | (1L << (PACKAGE - 329)) | (1L << (PARALLEL_ENABLE - 329)) | (1L << (PARAMETERS - 329)) | (1L << (PARENT - 329)) | (1L << (PARTITION - 329)) | (1L << (PASSING - 329)) | (1L << (PATH - 329)) | (1L << (PIPELINED - 329)) | (1L << (PLAN - 329)) | (1L << (PLS_INTEGER - 329)) | (1L << (POSITIVE - 329)) | (1L << (POSITIVEN - 329)) | (1L << (PRAGMA - 329)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (PREBUILT - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)) | (1L << (PRESENT - 393)) | (1L << (PUBLIC - 393)) | (1L << (RAISE - 393)) | (1L << (RANGE - 393)) | (1L << (RAW - 393)) | (1L << (READ - 393)) | (1L << (REAL - 393)) | (1L << (RECORD - 393)) | (1L << (REDUCED - 393)) | (1L << (REF - 393)) | (1L << (REFERENCE - 393)) | (1L << (REFERENCING - 393)) | (1L << (REFRESH - 393)) | (1L << (REJECT - 393)) | (1L << (RELIES_ON - 393)) | (1L << (RENAME - 393)) | (1L << (REPLACE - 393)) | (1L << (RESPECT - 393)) | (1L << (RESTRICT_REFERENCES - 393)) | (1L << (RESULT - 393)) | (1L << (RESULT_CACHE - 393)) | (1L << (RETURN - 393)) | (1L << (RETURNING - 393)) | (1L << (REUSE - 393)) | (1L << (REVERSE - 393)) | (1L << (REWRITE - 393)) | (1L << (RIGHT - 393)) | (1L << (ROLE - 393)) | (1L << (ROLLBACK - 393)) | (1L << (ROLLUP - 393)) | (1L << (ROW - 393)) | (1L << (ROWID - 393)) | (1L << (ROWS - 393)) | (1L << (RULES - 393)) | (1L << (SAMPLE - 393)) | (1L << (SAVE - 393)) | (1L << (SAVEPOINT - 393)) | (1L << (SCHEMA - 393)) | (1L << (SCHEMACHECK - 393)) | (1L << (SCN - 393)) | (1L << (SECOND - 393)))) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & ((1L << (SEED - 458)) | (1L << (SEGMENT - 458)) | (1L << (SELF - 458)) | (1L << (SEQUENTIAL - 458)) | (1L << (SERIALIZABLE - 458)) | (1L << (SERIALLY_REUSABLE - 458)) | (1L << (SERVERERROR - 458)) | (1L << (SESSIONTIMEZONE - 458)) | (1L << (SET - 458)) | (1L << (SETS - 458)) | (1L << (SETTINGS - 458)) | (1L << (SHOW - 458)) | (1L << (SHUTDOWN - 458)) | (1L << (SIBLINGS - 458)) | (1L << (SIGNTYPE - 458)) | (1L << (SIMPLE_INTEGER - 458)) | (1L << (SINGLE - 458)) | (1L << (SIZE - 458)) | (1L << (SKIP_ - 458)) | (1L << (SMALLINT - 458)) | (1L << (SNAPSHOT - 458)) | (1L << (SOME - 458)) | (1L << (SPECIFICATION - 458)) | (1L << (SQLDATA - 458)) | (1L << (SQLERROR - 458)) | (1L << (STANDALONE - 458)) | (1L << (STARTUP - 458)) | (1L << (STATEMENT - 458)) | (1L << (STATEMENT_ID - 458)) | (1L << (STATIC - 458)) | (1L << (STATISTICS - 458)) | (1L << (STRING - 458)) | (1L << (SUBMULTISET - 458)) | (1L << (SUBPARTITION - 458)) | (1L << (SUBSTITUTABLE - 458)) | (1L << (SUBSTRING - 458)) | (1L << (SUBTYPE - 458)) | (1L << (SUCCESS - 458)) | (1L << (SUSPEND - 458)) | (1L << (TABLES - 458)) | (1L << (TIME - 458)) | (1L << (TIMESTAMP - 458)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 458)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 458)) | (1L << (TIMESTAMP_UNCONSTRAINED - 458)))) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & ((1L << (TIMEZONE_ABBR - 522)) | (1L << (TIMEZONE_HOUR - 522)) | (1L << (TIMEZONE_MINUTE - 522)) | (1L << (TIMEZONE_REGION - 522)) | (1L << (TO_CHAR - 522)) | (1L << (TO_DATE - 522)) | (1L << (TRAILING - 522)) | (1L << (TRANSACTION - 522)) | (1L << (TRANSLATE - 522)) | (1L << (TREAT - 522)) | (1L << (TRIGGER - 522)) | (1L << (TRIM - 522)) | (1L << (TRUNCATE - 522)) | (1L << (TRUSTED - 522)) | (1L << (TYPE - 522)) | (1L << (UNBOUNDED - 522)) | (1L << (UNDER - 522)) | (1L << (UNLIMITED - 522)) | (1L << (UNTIL - 522)) | (1L << (UPDATED - 522)) | (1L << (UPSERT - 522)) | (1L << (UROWID - 522)) | (1L << (USE - 522)) | (1L << (VALIDATE - 522)) | (1L << (VALUE - 522)) | (1L << (VARCHAR - 522)) | (1L << (VARCHAR2 - 522)) | (1L << (VARIABLE - 522)) | (1L << (VARRAY - 522)) | (1L << (VARYING - 522)) | (1L << (VERBOSE - 522)) | (1L << (VERSION - 522)) | (1L << (VERSIONS - 522)) | (1L << (VIEW - 522)) | (1L << (WAIT - 522)) | (1L << (WARNING - 522)) | (1L << (WELLFORMED - 522)) | (1L << (WHENEVER - 522)) | (1L << (WHILE - 522)) | (1L << (WITHOUT - 522)) | (1L << (WITHIN - 522)) | (1L << (WORK - 522)) | (1L << (WRITE - 522)) | (1L << (XML - 522)) | (1L << (XMLAGG - 522)) | (1L << (XMLATTRIBUTES - 522)))) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & ((1L << (XMLCAST - 586)) | (1L << (XMLCOLATTVAL - 586)) | (1L << (XMLELEMENT - 586)) | (1L << (XMLEXISTS - 586)) | (1L << (XMLFOREST - 586)) | (1L << (XMLNAMESPACES - 586)) | (1L << (XMLPARSE - 586)) | (1L << (XMLPI - 586)) | (1L << (XMLQUERY - 586)) | (1L << (XMLROOT - 586)) | (1L << (XMLSERIALIZE - 586)) | (1L << (XMLTABLE - 586)) | (1L << (YEAR - 586)) | (1L << (YES - 586)) | (1L << (YMINTERVAL_UNCONSTRAINED - 586)) | (1L << (ZONE - 586)) | (1L << (PREDICTION - 586)) | (1L << (PREDICTION_BOUNDS - 586)) | (1L << (PREDICTION_COST - 586)) | (1L << (PREDICTION_DETAILS - 586)) | (1L << (PREDICTION_PROBABILITY - 586)) | (1L << (PREDICTION_SET - 586)) | (1L << (CUME_DIST - 586)) | (1L << (DENSE_RANK - 586)) | (1L << (LISTAGG - 586)) | (1L << (PERCENT_RANK - 586)) | (1L << (PERCENTILE_CONT - 586)) | (1L << (PERCENTILE_DISC - 586)) | (1L << (RANK - 586)) | (1L << (AVG - 586)) | (1L << (CORR - 586)) | (1L << (LAG - 586)) | (1L << (LEAD - 586)) | (1L << (MAX - 586)) | (1L << (MEDIAN - 586)) | (1L << (MIN - 586)) | (1L << (NTILE - 586)) | (1L << (RATIO_TO_REPORT - 586)) | (1L << (ROW_NUMBER - 586)) | (1L << (SUM - 586)) | (1L << (VARIANCE - 586)) | (1L << (REGR_ - 586)) | (1L << (STDDEV - 586)) | (1L << (VAR_ - 586)) | (1L << (COVAR_ - 586)))) != 0) || _la==REGULAR_ID) {
				{
				setState(3175);
				partition_name();
				}
			}

			setState(3178);
			list_values_clause();
			setState(3179);
			table_partition_description();
			setState(3212);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SUBPARTITIONS || _la==LEFT_PAREN) {
				{
				setState(3210);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case LEFT_PAREN:
					{
					setState(3180);
					match(LEFT_PAREN);
					setState(3205);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,404,_ctx) ) {
					case 1:
						{
						setState(3185); 
						_errHandler.sync(this);
						_la = _input.LA(1);
						do {
							{
							{
							setState(3182);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(3181);
								match(COMMA);
								}
							}

							setState(3184);
							range_subpartition_desc();
							}
							}
							setState(3187); 
							_errHandler.sync(this);
							_la = _input.LA(1);
						} while ( _la==SUBPARTITION || _la==COMMA );
						}
						break;
					case 2:
						{
						setState(3193); 
						_errHandler.sync(this);
						_la = _input.LA(1);
						do {
							{
							{
							setState(3190);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(3189);
								match(COMMA);
								}
							}

							setState(3192);
							list_subpartition_desc();
							}
							}
							setState(3195); 
							_errHandler.sync(this);
							_la = _input.LA(1);
						} while ( _la==SUBPARTITION || _la==COMMA );
						}
						break;
					case 3:
						{
						setState(3201); 
						_errHandler.sync(this);
						_la = _input.LA(1);
						do {
							{
							{
							setState(3198);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(3197);
								match(COMMA);
								}
							}

							setState(3200);
							individual_hash_subparts();
							}
							}
							setState(3203); 
							_errHandler.sync(this);
							_la = _input.LA(1);
						} while ( _la==SUBPARTITION || _la==COMMA );
						}
						break;
					}
					setState(3207);
					match(RIGHT_PAREN);
					}
					break;
				case SUBPARTITIONS:
					{
					setState(3209);
					hash_subparts_by_quantity();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Composite_hash_partitionsContext extends ParserRuleContext {
		public TerminalNode PARTITION() { return getToken(PLSQLParser.PARTITION, 0); }
		public TerminalNode BY() { return getToken(PLSQLParser.BY, 0); }
		public TerminalNode HASH() { return getToken(PLSQLParser.HASH, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PLSQLParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PLSQLParser.RIGHT_PAREN, 0); }
		public Subpartition_by_rangeContext subpartition_by_range() {
			return getRuleContext(Subpartition_by_rangeContext.class,0);
		}
		public Subpartition_by_listContext subpartition_by_list() {
			return getRuleContext(Subpartition_by_listContext.class,0);
		}
		public Subpartition_by_hashContext subpartition_by_hash() {
			return getRuleContext(Subpartition_by_hashContext.class,0);
		}
		public Individual_hash_partitionsContext individual_hash_partitions() {
			return getRuleContext(Individual_hash_partitionsContext.class,0);
		}
		public Hash_partitions_by_quantityContext hash_partitions_by_quantity() {
			return getRuleContext(Hash_partitions_by_quantityContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLSQLParser.COMMA, i);
		}
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public Composite_hash_partitionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_composite_hash_partitions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterComposite_hash_partitions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitComposite_hash_partitions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitComposite_hash_partitions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Composite_hash_partitionsContext composite_hash_partitions() throws RecognitionException {
		Composite_hash_partitionsContext _localctx = new Composite_hash_partitionsContext(_ctx, getState());
		enterRule(_localctx, 250, RULE_composite_hash_partitions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3214);
			match(PARTITION);
			setState(3215);
			match(BY);
			setState(3216);
			match(HASH);
			setState(3217);
			match(LEFT_PAREN);
			setState(3220); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(3218);
				match(COMMA);
				setState(3219);
				column_name();
				}
				}
				setState(3222); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==COMMA );
			setState(3224);
			match(RIGHT_PAREN);
			setState(3228);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,408,_ctx) ) {
			case 1:
				{
				setState(3225);
				subpartition_by_range();
				}
				break;
			case 2:
				{
				setState(3226);
				subpartition_by_list();
				}
				break;
			case 3:
				{
				setState(3227);
				subpartition_by_hash();
				}
				break;
			}
			setState(3232);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LEFT_PAREN:
				{
				setState(3230);
				individual_hash_partitions();
				}
				break;
			case PARTITIONS:
				{
				setState(3231);
				hash_partitions_by_quantity();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Reference_partitioningContext extends ParserRuleContext {
		public TerminalNode PARTITION() { return getToken(PLSQLParser.PARTITION, 0); }
		public TerminalNode BY() { return getToken(PLSQLParser.BY, 0); }
		public TerminalNode REFERENCE() { return getToken(PLSQLParser.REFERENCE, 0); }
		public List<TerminalNode> LEFT_PAREN() { return getTokens(PLSQLParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(PLSQLParser.LEFT_PAREN, i);
		}
		public Regular_idContext regular_id() {
			return getRuleContext(Regular_idContext.class,0);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(PLSQLParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(PLSQLParser.RIGHT_PAREN, i);
		}
		public List<Reference_partition_descContext> reference_partition_desc() {
			return getRuleContexts(Reference_partition_descContext.class);
		}
		public Reference_partition_descContext reference_partition_desc(int i) {
			return getRuleContext(Reference_partition_descContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLSQLParser.COMMA, i);
		}
		public Reference_partitioningContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reference_partitioning; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterReference_partitioning(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitReference_partitioning(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitReference_partitioning(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Reference_partitioningContext reference_partitioning() throws RecognitionException {
		Reference_partitioningContext _localctx = new Reference_partitioningContext(_ctx, getState());
		enterRule(_localctx, 252, RULE_reference_partitioning);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3234);
			match(PARTITION);
			setState(3235);
			match(BY);
			setState(3236);
			match(REFERENCE);
			setState(3237);
			match(LEFT_PAREN);
			setState(3238);
			regular_id();
			setState(3239);
			match(RIGHT_PAREN);
			setState(3251);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,412,_ctx) ) {
			case 1:
				{
				setState(3240);
				match(LEFT_PAREN);
				setState(3245); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(3242);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(3241);
						match(COMMA);
						}
					}

					setState(3244);
					reference_partition_desc();
					}
					}
					setState(3247); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==PARTITION || _la==COMMA );
				setState(3249);
				match(RIGHT_PAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Reference_partition_descContext extends ParserRuleContext {
		public TerminalNode PARTITION() { return getToken(PLSQLParser.PARTITION, 0); }
		public Table_partition_descriptionContext table_partition_description() {
			return getRuleContext(Table_partition_descriptionContext.class,0);
		}
		public Partition_nameContext partition_name() {
			return getRuleContext(Partition_nameContext.class,0);
		}
		public Reference_partition_descContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reference_partition_desc; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterReference_partition_desc(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitReference_partition_desc(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitReference_partition_desc(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Reference_partition_descContext reference_partition_desc() throws RecognitionException {
		Reference_partition_descContext _localctx = new Reference_partition_descContext(_ctx, getState());
		enterRule(_localctx, 254, RULE_reference_partition_desc);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3253);
			match(PARTITION);
			setState(3255);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,413,_ctx) ) {
			case 1:
				{
				setState(3254);
				partition_name();
				}
				break;
			}
			setState(3257);
			table_partition_description();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class System_partitioningContext extends ParserRuleContext {
		public TerminalNode PARTITION() { return getToken(PLSQLParser.PARTITION, 0); }
		public TerminalNode BY() { return getToken(PLSQLParser.BY, 0); }
		public TerminalNode SYSTEM() { return getToken(PLSQLParser.SYSTEM, 0); }
		public TerminalNode PARTITIONS() { return getToken(PLSQLParser.PARTITIONS, 0); }
		public TerminalNode UNSIGNED_INTEGER() { return getToken(PLSQLParser.UNSIGNED_INTEGER, 0); }
		public List<Reference_partition_descContext> reference_partition_desc() {
			return getRuleContexts(Reference_partition_descContext.class);
		}
		public Reference_partition_descContext reference_partition_desc(int i) {
			return getRuleContext(Reference_partition_descContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLSQLParser.COMMA, i);
		}
		public System_partitioningContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_system_partitioning; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterSystem_partitioning(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitSystem_partitioning(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitSystem_partitioning(this);
			else return visitor.visitChildren(this);
		}
	}

	public final System_partitioningContext system_partitioning() throws RecognitionException {
		System_partitioningContext _localctx = new System_partitioningContext(_ctx, getState());
		enterRule(_localctx, 256, RULE_system_partitioning);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3259);
			match(PARTITION);
			setState(3260);
			match(BY);
			setState(3261);
			match(SYSTEM);
			setState(3272);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,416,_ctx) ) {
			case 1:
				{
				setState(3262);
				match(PARTITIONS);
				setState(3263);
				match(UNSIGNED_INTEGER);
				}
				break;
			case 2:
				{
				setState(3268); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(3265);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(3264);
							match(COMMA);
							}
						}

						setState(3267);
						reference_partition_desc();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(3270); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,415,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Enable_disable_clauseContext extends ParserRuleContext {
		public TerminalNode ENABLE() { return getToken(PLSQLParser.ENABLE, 0); }
		public TerminalNode DISABLE() { return getToken(PLSQLParser.DISABLE, 0); }
		public TerminalNode UNIQUE() { return getToken(PLSQLParser.UNIQUE, 0); }
		public Paren_column_listContext paren_column_list() {
			return getRuleContext(Paren_column_listContext.class,0);
		}
		public TerminalNode PRIMARY() { return getToken(PLSQLParser.PRIMARY, 0); }
		public TerminalNode KEY() { return getToken(PLSQLParser.KEY, 0); }
		public TerminalNode CONSTRAINT() { return getToken(PLSQLParser.CONSTRAINT, 0); }
		public Constraint_nameContext constraint_name() {
			return getRuleContext(Constraint_nameContext.class,0);
		}
		public Using_index_clauseContext using_index_clause() {
			return getRuleContext(Using_index_clauseContext.class,0);
		}
		public Exceptions_clauseContext exceptions_clause() {
			return getRuleContext(Exceptions_clauseContext.class,0);
		}
		public TerminalNode CASCADE() { return getToken(PLSQLParser.CASCADE, 0); }
		public TerminalNode INDEX() { return getToken(PLSQLParser.INDEX, 0); }
		public TerminalNode VALIDATE() { return getToken(PLSQLParser.VALIDATE, 0); }
		public TerminalNode NOVALIDATE() { return getToken(PLSQLParser.NOVALIDATE, 0); }
		public TerminalNode KEEP() { return getToken(PLSQLParser.KEEP, 0); }
		public TerminalNode DROP() { return getToken(PLSQLParser.DROP, 0); }
		public Enable_disable_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_enable_disable_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterEnable_disable_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitEnable_disable_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitEnable_disable_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Enable_disable_clauseContext enable_disable_clause() throws RecognitionException {
		Enable_disable_clauseContext _localctx = new Enable_disable_clauseContext(_ctx, getState());
		enterRule(_localctx, 258, RULE_enable_disable_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3274);
			_la = _input.LA(1);
			if ( !(_la==DISABLE || _la==ENABLE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3276);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOVALIDATE || _la==VALIDATE) {
				{
				setState(3275);
				_la = _input.LA(1);
				if ( !(_la==NOVALIDATE || _la==VALIDATE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(3284);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UNIQUE:
				{
				setState(3278);
				match(UNIQUE);
				setState(3279);
				paren_column_list();
				}
				break;
			case PRIMARY:
				{
				setState(3280);
				match(PRIMARY);
				setState(3281);
				match(KEY);
				}
				break;
			case CONSTRAINT:
				{
				setState(3282);
				match(CONSTRAINT);
				setState(3283);
				constraint_name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3287);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USING) {
				{
				setState(3286);
				using_index_clause();
				}
			}

			setState(3290);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EXCEPTIONS) {
				{
				setState(3289);
				exceptions_clause();
				}
			}

			setState(3293);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE) {
				{
				setState(3292);
				match(CASCADE);
				}
			}

			setState(3297);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,422,_ctx) ) {
			case 1:
				{
				setState(3295);
				_la = _input.LA(1);
				if ( !(_la==DROP || _la==KEEP) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3296);
				match(INDEX);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Exceptions_clauseContext extends ParserRuleContext {
		public TerminalNode EXCEPTIONS() { return getToken(PLSQLParser.EXCEPTIONS, 0); }
		public TerminalNode INTO() { return getToken(PLSQLParser.INTO, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public Exceptions_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exceptions_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterExceptions_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitExceptions_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitExceptions_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Exceptions_clauseContext exceptions_clause() throws RecognitionException {
		Exceptions_clauseContext _localctx = new Exceptions_clauseContext(_ctx, getState());
		enterRule(_localctx, 260, RULE_exceptions_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3299);
			match(EXCEPTIONS);
			setState(3300);
			match(INTO);
			setState(3301);
			tableview_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Row_movement_clauseContext extends ParserRuleContext {
		public TerminalNode ROW() { return getToken(PLSQLParser.ROW, 0); }
		public TerminalNode MOVEMENT() { return getToken(PLSQLParser.MOVEMENT, 0); }
		public TerminalNode ENABLE() { return getToken(PLSQLParser.ENABLE, 0); }
		public TerminalNode DISABLE() { return getToken(PLSQLParser.DISABLE, 0); }
		public Row_movement_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_row_movement_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterRow_movement_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitRow_movement_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitRow_movement_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Row_movement_clauseContext row_movement_clause() throws RecognitionException {
		Row_movement_clauseContext _localctx = new Row_movement_clauseContext(_ctx, getState());
		enterRule(_localctx, 262, RULE_row_movement_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3304);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DISABLE || _la==ENABLE) {
				{
				setState(3303);
				_la = _input.LA(1);
				if ( !(_la==DISABLE || _la==ENABLE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(3306);
			match(ROW);
			setState(3307);
			match(MOVEMENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Flashback_archive_clauseContext extends ParserRuleContext {
		public Token flashback_archive;
		public TerminalNode FLASHBACK() { return getToken(PLSQLParser.FLASHBACK, 0); }
		public TerminalNode ARCHIVE() { return getToken(PLSQLParser.ARCHIVE, 0); }
		public TerminalNode REGULAR_ID() { return getToken(PLSQLParser.REGULAR_ID, 0); }
		public TerminalNode NO() { return getToken(PLSQLParser.NO, 0); }
		public Flashback_archive_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_flashback_archive_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterFlashback_archive_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitFlashback_archive_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitFlashback_archive_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Flashback_archive_clauseContext flashback_archive_clause() throws RecognitionException {
		Flashback_archive_clauseContext _localctx = new Flashback_archive_clauseContext(_ctx, getState());
		enterRule(_localctx, 264, RULE_flashback_archive_clause);
		try {
			setState(3315);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FLASHBACK:
				enterOuterAlt(_localctx, 1);
				{
				setState(3309);
				match(FLASHBACK);
				setState(3310);
				match(ARCHIVE);
				setState(3311);
				((Flashback_archive_clauseContext)_localctx).flashback_archive = match(REGULAR_ID);
				}
				break;
			case NO:
				enterOuterAlt(_localctx, 2);
				{
				setState(3312);
				match(NO);
				setState(3313);
				match(FLASHBACK);
				setState(3314);
				match(ARCHIVE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Object_tableContext extends ParserRuleContext {
		public TerminalNode OF() { return getToken(PLSQLParser.OF, 0); }
		public Type_nameContext type_name() {
			return getRuleContext(Type_nameContext.class,0);
		}
		public Object_table_substitutionContext object_table_substitution() {
			return getRuleContext(Object_table_substitutionContext.class,0);
		}
		public List<TerminalNode> LEFT_PAREN() { return getTokens(PLSQLParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(PLSQLParser.LEFT_PAREN, i);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(PLSQLParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(PLSQLParser.RIGHT_PAREN, i);
		}
		public TerminalNode ON() { return getToken(PLSQLParser.ON, 0); }
		public TerminalNode COMMIT() { return getToken(PLSQLParser.COMMIT, 0); }
		public TerminalNode ROWS() { return getToken(PLSQLParser.ROWS, 0); }
		public Oid_clauseContext oid_clause() {
			return getRuleContext(Oid_clauseContext.class,0);
		}
		public Oid_index_clauseContext oid_index_clause() {
			return getRuleContext(Oid_index_clauseContext.class,0);
		}
		public Physical_propertiesContext physical_properties() {
			return getRuleContext(Physical_propertiesContext.class,0);
		}
		public Column_propertiesContext column_properties() {
			return getRuleContext(Column_propertiesContext.class,0);
		}
		public Table_partitioning_clausesContext table_partitioning_clauses() {
			return getRuleContext(Table_partitioning_clausesContext.class,0);
		}
		public TerminalNode RESULT_CACHE() { return getToken(PLSQLParser.RESULT_CACHE, 0); }
		public TerminalNode MODE() { return getToken(PLSQLParser.MODE, 0); }
		public Parallel_clauseContext parallel_clause() {
			return getRuleContext(Parallel_clauseContext.class,0);
		}
		public Row_movement_clauseContext row_movement_clause() {
			return getRuleContext(Row_movement_clauseContext.class,0);
		}
		public Flashback_archive_clauseContext flashback_archive_clause() {
			return getRuleContext(Flashback_archive_clauseContext.class,0);
		}
		public TerminalNode DELETE() { return getToken(PLSQLParser.DELETE, 0); }
		public TerminalNode PRESERVE() { return getToken(PLSQLParser.PRESERVE, 0); }
		public TerminalNode CACHE() { return getToken(PLSQLParser.CACHE, 0); }
		public TerminalNode NOCACHE() { return getToken(PLSQLParser.NOCACHE, 0); }
		public TerminalNode DEFAULT() { return getToken(PLSQLParser.DEFAULT, 0); }
		public TerminalNode FORCE() { return getToken(PLSQLParser.FORCE, 0); }
		public TerminalNode ROWDEPENDENCIES() { return getToken(PLSQLParser.ROWDEPENDENCIES, 0); }
		public TerminalNode NOROWDEPENDENCIES() { return getToken(PLSQLParser.NOROWDEPENDENCIES, 0); }
		public List<Object_propertiesContext> object_properties() {
			return getRuleContexts(Object_propertiesContext.class);
		}
		public Object_propertiesContext object_properties(int i) {
			return getRuleContext(Object_propertiesContext.class,i);
		}
		public List<Enable_disable_clauseContext> enable_disable_clause() {
			return getRuleContexts(Enable_disable_clauseContext.class);
		}
		public Enable_disable_clauseContext enable_disable_clause(int i) {
			return getRuleContext(Enable_disable_clauseContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLSQLParser.COMMA, i);
		}
		public Object_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_object_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterObject_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitObject_table(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitObject_table(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Object_tableContext object_table() throws RecognitionException {
		Object_tableContext _localctx = new Object_tableContext(_ctx, getState());
		enterRule(_localctx, 266, RULE_object_table);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3317);
			match(OF);
			setState(3318);
			type_name();
			setState(3320);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT || _la==SUBSTITUTABLE) {
				{
				setState(3319);
				object_table_substitution();
				}
			}

			setState(3333);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,428,_ctx) ) {
			case 1:
				{
				setState(3322);
				match(LEFT_PAREN);
				setState(3327); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(3324);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(3323);
						match(COMMA);
						}
					}

					setState(3326);
					object_properties();
					}
					}
					setState(3329); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BUILD) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHECK))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (CHR - 65)) | (1L << (CLOB - 65)) | (1L << (CLOSE - 65)) | (1L << (CLUSTER - 65)) | (1L << (COALESCE - 65)) | (1L << (COLLECT - 65)) | (1L << (COLUMNS - 65)) | (1L << (COMMENT - 65)) | (1L << (COMMIT - 65)) | (1L << (COMMITTED - 65)) | (1L << (COMPATIBILITY - 65)) | (1L << (COMPILE - 65)) | (1L << (COMPLETE - 65)) | (1L << (COMPOUND - 65)) | (1L << (CONCAT - 65)) | (1L << (CONSTANT - 65)) | (1L << (CONSTRAINT - 65)) | (1L << (CONSTRAINTS - 65)) | (1L << (CONSTRUCTOR - 65)) | (1L << (CONTENT - 65)) | (1L << (CONTEXT - 65)) | (1L << (CONTINUE - 65)) | (1L << (CONVERT - 65)) | (1L << (CORRUPT_XID - 65)) | (1L << (CORRUPT_XID_ALL - 65)) | (1L << (COST - 65)) | (1L << (COUNT - 65)) | (1L << (CROSS - 65)) | (1L << (CUBE - 65)) | (1L << (CURRENT_USER - 65)) | (1L << (CURSOR - 65)) | (1L << (CUSTOMDATUM - 65)) | (1L << (CYCLE - 65)) | (1L << (DATA - 65)) | (1L << (DATABASE - 65)) | (1L << (DATE - 65)) | (1L << (DAY - 65)) | (1L << (DB_ROLE_CHANGE - 65)) | (1L << (DBTIMEZONE - 65)) | (1L << (DDL - 65)) | (1L << (DEBUG - 65)) | (1L << (DEC - 65)) | (1L << (DECIMAL - 65)) | (1L << (DECODE - 65)) | (1L << (DECOMPOSE - 65)) | (1L << (DECREMENT - 65)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DEMAND - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (EDITIONING - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENFORCED - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FAST - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)) | (1L << (FOLLOWING - 129)) | (1L << (FOLLOWS - 129)) | (1L << (FORALL - 129)) | (1L << (FORCE - 129)) | (1L << (FOREIGN - 129)))) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & ((1L << (FULL - 197)) | (1L << (FUNCTION - 197)) | (1L << (GROUPING - 197)) | (1L << (HASH - 197)) | (1L << (HIDE - 197)) | (1L << (HOUR - 197)) | (1L << (IGNORE - 197)) | (1L << (IMMEDIATE - 197)) | (1L << (INCLUDE - 197)) | (1L << (INCLUDING - 197)) | (1L << (INCREMENT - 197)) | (1L << (INDENT - 197)) | (1L << (INDEXED - 197)) | (1L << (INDICATOR - 197)) | (1L << (INDICES - 197)) | (1L << (INFINITE - 197)) | (1L << (INLINE - 197)) | (1L << (INNER - 197)) | (1L << (INOUT - 197)) | (1L << (INSTANTIABLE - 197)) | (1L << (INSTEAD - 197)) | (1L << (INT - 197)) | (1L << (INTEGER - 197)) | (1L << (INTERVAL - 197)) | (1L << (INVALIDATE - 197)) | (1L << (ISOLATION - 197)) | (1L << (ITERATE - 197)) | (1L << (JAVA - 197)) | (1L << (JOIN - 197)) | (1L << (KEEP - 197)) | (1L << (LANGUAGE - 197)) | (1L << (LAST - 197)) | (1L << (LAST_VALUE - 197)) | (1L << (LEADING - 197)) | (1L << (LEFT - 197)) | (1L << (LEVEL - 197)))) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & ((1L << (LIBRARY - 261)) | (1L << (LIKE2 - 261)) | (1L << (LIKE4 - 261)) | (1L << (LIKEC - 261)) | (1L << (LIMIT - 261)) | (1L << (LIST - 261)) | (1L << (LOCAL - 261)) | (1L << (LOCKED - 261)) | (1L << (LOG - 261)) | (1L << (LOGOFF - 261)) | (1L << (LOGON - 261)) | (1L << (LONG - 261)) | (1L << (LOOP - 261)) | (1L << (MAIN - 261)) | (1L << (MAP - 261)) | (1L << (MASTER - 261)) | (1L << (MATCHED - 261)) | (1L << (MAXVALUE - 261)) | (1L << (MEASURES - 261)) | (1L << (MEMBER - 261)) | (1L << (MERGE - 261)) | (1L << (MINUTE - 261)) | (1L << (MINVALUE - 261)) | (1L << (MLSLABEL - 261)) | (1L << (MODEL - 261)) | (1L << (MODIFY - 261)) | (1L << (MONTH - 261)) | (1L << (MULTISET - 261)) | (1L << (NAME - 261)) | (1L << (NAN - 261)) | (1L << (NATURAL - 261)) | (1L << (NATURALN - 261)) | (1L << (NAV - 261)) | (1L << (NCHAR - 261)) | (1L << (NCHAR_CS - 261)) | (1L << (NCLOB - 261)) | (1L << (NESTED - 261)) | (1L << (NEVER - 261)) | (1L << (NEW - 261)) | (1L << (NO - 261)) | (1L << (NOAUDIT - 261)) | (1L << (NOCOPY - 261)) | (1L << (NOCYCLE - 261)) | (1L << (NOENTITYESCAPING - 261)))) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & ((1L << (NONE - 329)) | (1L << (NOSCHEMACHECK - 329)) | (1L << (NVL - 329)) | (1L << (NULLS - 329)) | (1L << (NUMBER - 329)) | (1L << (NUMERIC - 329)) | (1L << (NVARCHAR2 - 329)) | (1L << (MATERIALIZED - 329)) | (1L << (OBJECT - 329)) | (1L << (OFF - 329)) | (1L << (OID - 329)) | (1L << (OLD - 329)) | (1L << (ONLY - 329)) | (1L << (OPEN - 329)) | (1L << (ORADATA - 329)) | (1L << (ORDINALITY - 329)) | (1L << (OSERROR - 329)) | (1L << (OUT - 329)) | (1L << (OUTER - 329)) | (1L << (OVER - 329)) | (1L << (OVERRIDING - 329)) | (1L << (PACKAGE - 329)) | (1L << (PARALLEL_ENABLE - 329)) | (1L << (PARAMETERS - 329)) | (1L << (PARENT - 329)) | (1L << (PARTITION - 329)) | (1L << (PASSING - 329)) | (1L << (PATH - 329)) | (1L << (PIPELINED - 329)) | (1L << (PLAN - 329)) | (1L << (PLS_INTEGER - 329)) | (1L << (POSITIVE - 329)) | (1L << (POSITIVEN - 329)) | (1L << (PRAGMA - 329)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (PREBUILT - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)) | (1L << (PRESENT - 393)) | (1L << (PRIMARY - 393)) | (1L << (PUBLIC - 393)) | (1L << (RAISE - 393)) | (1L << (RANGE - 393)) | (1L << (RAW - 393)) | (1L << (READ - 393)) | (1L << (REAL - 393)) | (1L << (RECORD - 393)) | (1L << (REDUCED - 393)) | (1L << (REF - 393)) | (1L << (REFERENCE - 393)) | (1L << (REFERENCING - 393)) | (1L << (REFRESH - 393)) | (1L << (REJECT - 393)) | (1L << (RELIES_ON - 393)) | (1L << (RENAME - 393)) | (1L << (REPLACE - 393)) | (1L << (RESPECT - 393)) | (1L << (RESTRICT_REFERENCES - 393)) | (1L << (RESULT - 393)) | (1L << (RESULT_CACHE - 393)) | (1L << (RETURN - 393)) | (1L << (RETURNING - 393)) | (1L << (REUSE - 393)) | (1L << (REVERSE - 393)) | (1L << (REWRITE - 393)) | (1L << (RIGHT - 393)) | (1L << (ROLE - 393)) | (1L << (ROLLBACK - 393)) | (1L << (ROLLUP - 393)) | (1L << (ROW - 393)) | (1L << (ROWID - 393)) | (1L << (ROWS - 393)) | (1L << (RULES - 393)) | (1L << (SAMPLE - 393)) | (1L << (SAVE - 393)) | (1L << (SAVEPOINT - 393)) | (1L << (SCHEMA - 393)) | (1L << (SCHEMACHECK - 393)) | (1L << (SCN - 393)) | (1L << (SCOPE - 393)) | (1L << (SECOND - 393)))) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & ((1L << (SEED - 458)) | (1L << (SEGMENT - 458)) | (1L << (SELF - 458)) | (1L << (SEQUENTIAL - 458)) | (1L << (SERIALIZABLE - 458)) | (1L << (SERIALLY_REUSABLE - 458)) | (1L << (SERVERERROR - 458)) | (1L << (SESSIONTIMEZONE - 458)) | (1L << (SET - 458)) | (1L << (SETS - 458)) | (1L << (SETTINGS - 458)) | (1L << (SHOW - 458)) | (1L << (SHUTDOWN - 458)) | (1L << (SIBLINGS - 458)) | (1L << (SIGNTYPE - 458)) | (1L << (SIMPLE_INTEGER - 458)) | (1L << (SINGLE - 458)) | (1L << (SIZE - 458)) | (1L << (SKIP_ - 458)) | (1L << (SMALLINT - 458)) | (1L << (SNAPSHOT - 458)) | (1L << (SOME - 458)) | (1L << (SPECIFICATION - 458)) | (1L << (SQLDATA - 458)) | (1L << (SQLERROR - 458)) | (1L << (STANDALONE - 458)) | (1L << (STARTUP - 458)) | (1L << (STATEMENT - 458)) | (1L << (STATEMENT_ID - 458)) | (1L << (STATIC - 458)) | (1L << (STATISTICS - 458)) | (1L << (STRING - 458)) | (1L << (SUBMULTISET - 458)) | (1L << (SUBPARTITION - 458)) | (1L << (SUBSTITUTABLE - 458)) | (1L << (SUBSTRING - 458)) | (1L << (SUBTYPE - 458)) | (1L << (SUCCESS - 458)) | (1L << (SUPPLEMENTAL - 458)) | (1L << (SUSPEND - 458)) | (1L << (TABLES - 458)) | (1L << (TIME - 458)) | (1L << (TIMESTAMP - 458)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 458)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 458)) | (1L << (TIMESTAMP_UNCONSTRAINED - 458)))) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & ((1L << (TIMEZONE_ABBR - 522)) | (1L << (TIMEZONE_HOUR - 522)) | (1L << (TIMEZONE_MINUTE - 522)) | (1L << (TIMEZONE_REGION - 522)) | (1L << (TO_CHAR - 522)) | (1L << (TO_DATE - 522)) | (1L << (TRAILING - 522)) | (1L << (TRANSACTION - 522)) | (1L << (TRANSLATE - 522)) | (1L << (TREAT - 522)) | (1L << (TRIGGER - 522)) | (1L << (TRIM - 522)) | (1L << (TRUNCATE - 522)) | (1L << (TRUSTED - 522)) | (1L << (TYPE - 522)) | (1L << (UNBOUNDED - 522)) | (1L << (UNDER - 522)) | (1L << (UNIQUE - 522)) | (1L << (UNLIMITED - 522)) | (1L << (UNTIL - 522)) | (1L << (UPDATED - 522)) | (1L << (UPSERT - 522)) | (1L << (UROWID - 522)) | (1L << (USE - 522)) | (1L << (VALIDATE - 522)) | (1L << (VALUE - 522)) | (1L << (VARCHAR - 522)) | (1L << (VARCHAR2 - 522)) | (1L << (VARIABLE - 522)) | (1L << (VARRAY - 522)) | (1L << (VARYING - 522)) | (1L << (VERBOSE - 522)) | (1L << (VERSION - 522)) | (1L << (VERSIONS - 522)) | (1L << (VIEW - 522)) | (1L << (WAIT - 522)) | (1L << (WARNING - 522)) | (1L << (WELLFORMED - 522)) | (1L << (WHENEVER - 522)) | (1L << (WHILE - 522)) | (1L << (WITHOUT - 522)) | (1L << (WITHIN - 522)) | (1L << (WORK - 522)) | (1L << (WRITE - 522)) | (1L << (XML - 522)) | (1L << (XMLAGG - 522)) | (1L << (XMLATTRIBUTES - 522)))) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & ((1L << (XMLCAST - 586)) | (1L << (XMLCOLATTVAL - 586)) | (1L << (XMLELEMENT - 586)) | (1L << (XMLEXISTS - 586)) | (1L << (XMLFOREST - 586)) | (1L << (XMLNAMESPACES - 586)) | (1L << (XMLPARSE - 586)) | (1L << (XMLPI - 586)) | (1L << (XMLQUERY - 586)) | (1L << (XMLROOT - 586)) | (1L << (XMLSERIALIZE - 586)) | (1L << (XMLTABLE - 586)) | (1L << (YEAR - 586)) | (1L << (YES - 586)) | (1L << (YMINTERVAL_UNCONSTRAINED - 586)) | (1L << (ZONE - 586)) | (1L << (PREDICTION - 586)) | (1L << (PREDICTION_BOUNDS - 586)) | (1L << (PREDICTION_COST - 586)) | (1L << (PREDICTION_DETAILS - 586)) | (1L << (PREDICTION_PROBABILITY - 586)) | (1L << (PREDICTION_SET - 586)) | (1L << (CUME_DIST - 586)) | (1L << (DENSE_RANK - 586)) | (1L << (LISTAGG - 586)) | (1L << (PERCENT_RANK - 586)) | (1L << (PERCENTILE_CONT - 586)) | (1L << (PERCENTILE_DISC - 586)) | (1L << (RANK - 586)) | (1L << (AVG - 586)) | (1L << (CORR - 586)) | (1L << (LAG - 586)) | (1L << (LEAD - 586)) | (1L << (MAX - 586)) | (1L << (MEDIAN - 586)) | (1L << (MIN - 586)) | (1L << (NTILE - 586)) | (1L << (RATIO_TO_REPORT - 586)) | (1L << (ROW_NUMBER - 586)) | (1L << (SUM - 586)) | (1L << (VARIANCE - 586)) | (1L << (REGR_ - 586)) | (1L << (STDDEV - 586)) | (1L << (VAR_ - 586)) | (1L << (COVAR_ - 586)) | (1L << (DELIMITED_ID - 586)))) != 0) || _la==COMMA || _la==REGULAR_ID );
				setState(3331);
				match(RIGHT_PAREN);
				}
				break;
			}
			setState(3339);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(3335);
				match(ON);
				setState(3336);
				match(COMMIT);
				setState(3337);
				_la = _input.LA(1);
				if ( !(_la==DELETE || _la==PRESERVE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3338);
				match(ROWS);
				}
			}

			setState(3342);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OBJECT) {
				{
				setState(3341);
				oid_clause();
				}
			}

			setState(3345);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OIDINDEX) {
				{
				setState(3344);
				oid_index_clause();
				}
			}

			setState(3348);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FILESYSTEM_LIKE_LOGGING || _la==INITRANS || _la==LOGGING || _la==NOLOGGING || _la==PCTFREE || _la==PCTUSED || ((((_la - 459)) & ~0x3f) == 0 && ((1L << (_la - 459)) & ((1L << (SEGMENT - 459)) | (1L << (STORAGE - 459)) | (1L << (TABLESPACE - 459)))) != 0)) {
				{
				setState(3347);
				physical_properties();
				}
			}

			setState(3351);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COLUMN || _la==LOB || _la==NESTED || _la==VARRAY || _la==XMLTYPE) {
				{
				setState(3350);
				column_properties();
				}
			}

			setState(3354);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,434,_ctx) ) {
			case 1:
				{
				setState(3353);
				table_partitioning_clauses();
				}
				break;
			}
			setState(3357);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CACHE || _la==NOCACHE) {
				{
				setState(3356);
				_la = _input.LA(1);
				if ( !(_la==CACHE || _la==NOCACHE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(3364);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RESULT_CACHE) {
				{
				setState(3359);
				match(RESULT_CACHE);
				setState(3360);
				match(LEFT_PAREN);
				setState(3361);
				match(MODE);
				setState(3362);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || _la==FORCE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3363);
				match(RIGHT_PAREN);
				}
			}

			setState(3367);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOPARALLEL || _la==PARALLEL) {
				{
				setState(3366);
				parallel_clause();
				}
			}

			setState(3370);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOROWDEPENDENCIES || _la==ROWDEPENDENCIES) {
				{
				setState(3369);
				_la = _input.LA(1);
				if ( !(_la==NOROWDEPENDENCIES || _la==ROWDEPENDENCIES) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(3377);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,440,_ctx) ) {
			case 1:
				{
				setState(3373); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(3372);
						enable_disable_clause();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(3375); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,439,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			}
			setState(3380);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DISABLE || _la==ENABLE || _la==ROW) {
				{
				setState(3379);
				row_movement_clause();
				}
			}

			setState(3383);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FLASHBACK || _la==NO) {
				{
				setState(3382);
				flashback_archive_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Object_table_substitutionContext extends ParserRuleContext {
		public TerminalNode SUBSTITUTABLE() { return getToken(PLSQLParser.SUBSTITUTABLE, 0); }
		public TerminalNode AT() { return getToken(PLSQLParser.AT, 0); }
		public TerminalNode ALL() { return getToken(PLSQLParser.ALL, 0); }
		public TerminalNode LEVELS() { return getToken(PLSQLParser.LEVELS, 0); }
		public TerminalNode NOT() { return getToken(PLSQLParser.NOT, 0); }
		public Object_table_substitutionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_object_table_substitution; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterObject_table_substitution(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitObject_table_substitution(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitObject_table_substitution(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Object_table_substitutionContext object_table_substitution() throws RecognitionException {
		Object_table_substitutionContext _localctx = new Object_table_substitutionContext(_ctx, getState());
		enterRule(_localctx, 268, RULE_object_table_substitution);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3386);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(3385);
				match(NOT);
				}
			}

			setState(3388);
			match(SUBSTITUTABLE);
			setState(3389);
			match(AT);
			setState(3390);
			match(ALL);
			setState(3391);
			match(LEVELS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Oid_clauseContext extends ParserRuleContext {
		public TerminalNode OBJECT() { return getToken(PLSQLParser.OBJECT, 0); }
		public TerminalNode IDENTIFIER() { return getToken(PLSQLParser.IDENTIFIER, 0); }
		public TerminalNode IS() { return getToken(PLSQLParser.IS, 0); }
		public TerminalNode SYSTEM() { return getToken(PLSQLParser.SYSTEM, 0); }
		public TerminalNode GENERATED() { return getToken(PLSQLParser.GENERATED, 0); }
		public TerminalNode PRIMARY() { return getToken(PLSQLParser.PRIMARY, 0); }
		public TerminalNode KEY() { return getToken(PLSQLParser.KEY, 0); }
		public Oid_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_oid_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterOid_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitOid_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitOid_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Oid_clauseContext oid_clause() throws RecognitionException {
		Oid_clauseContext _localctx = new Oid_clauseContext(_ctx, getState());
		enterRule(_localctx, 270, RULE_oid_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3393);
			match(OBJECT);
			setState(3394);
			match(IDENTIFIER);
			setState(3395);
			match(IS);
			setState(3400);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SYSTEM:
				{
				setState(3396);
				match(SYSTEM);
				setState(3397);
				match(GENERATED);
				}
				break;
			case PRIMARY:
				{
				setState(3398);
				match(PRIMARY);
				setState(3399);
				match(KEY);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Oid_index_clauseContext extends ParserRuleContext {
		public TerminalNode OIDINDEX() { return getToken(PLSQLParser.OIDINDEX, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PLSQLParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PLSQLParser.RIGHT_PAREN, 0); }
		public Index_nameContext index_name() {
			return getRuleContext(Index_nameContext.class,0);
		}
		public List<Physical_attributes_clauseContext> physical_attributes_clause() {
			return getRuleContexts(Physical_attributes_clauseContext.class);
		}
		public Physical_attributes_clauseContext physical_attributes_clause(int i) {
			return getRuleContext(Physical_attributes_clauseContext.class,i);
		}
		public List<TerminalNode> TABLESPACE() { return getTokens(PLSQLParser.TABLESPACE); }
		public TerminalNode TABLESPACE(int i) {
			return getToken(PLSQLParser.TABLESPACE, i);
		}
		public List<TablespaceContext> tablespace() {
			return getRuleContexts(TablespaceContext.class);
		}
		public TablespaceContext tablespace(int i) {
			return getRuleContext(TablespaceContext.class,i);
		}
		public Oid_index_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_oid_index_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterOid_index_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitOid_index_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitOid_index_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Oid_index_clauseContext oid_index_clause() throws RecognitionException {
		Oid_index_clauseContext _localctx = new Oid_index_clauseContext(_ctx, getState());
		enterRule(_localctx, 272, RULE_oid_index_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3402);
			match(OIDINDEX);
			setState(3404);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BUILD) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (CHR - 65)) | (1L << (CLOB - 65)) | (1L << (CLOSE - 65)) | (1L << (CLUSTER - 65)) | (1L << (COALESCE - 65)) | (1L << (COLLECT - 65)) | (1L << (COLUMNS - 65)) | (1L << (COMMENT - 65)) | (1L << (COMMIT - 65)) | (1L << (COMMITTED - 65)) | (1L << (COMPATIBILITY - 65)) | (1L << (COMPILE - 65)) | (1L << (COMPLETE - 65)) | (1L << (COMPOUND - 65)) | (1L << (CONCAT - 65)) | (1L << (CONSTANT - 65)) | (1L << (CONSTRAINT - 65)) | (1L << (CONSTRAINTS - 65)) | (1L << (CONSTRUCTOR - 65)) | (1L << (CONTENT - 65)) | (1L << (CONTEXT - 65)) | (1L << (CONTINUE - 65)) | (1L << (CONVERT - 65)) | (1L << (CORRUPT_XID - 65)) | (1L << (CORRUPT_XID_ALL - 65)) | (1L << (COST - 65)) | (1L << (COUNT - 65)) | (1L << (CROSS - 65)) | (1L << (CUBE - 65)) | (1L << (CURRENT_USER - 65)) | (1L << (CURSOR - 65)) | (1L << (CUSTOMDATUM - 65)) | (1L << (CYCLE - 65)) | (1L << (DATA - 65)) | (1L << (DATABASE - 65)) | (1L << (DATE - 65)) | (1L << (DAY - 65)) | (1L << (DB_ROLE_CHANGE - 65)) | (1L << (DBTIMEZONE - 65)) | (1L << (DDL - 65)) | (1L << (DEBUG - 65)) | (1L << (DEC - 65)) | (1L << (DECIMAL - 65)) | (1L << (DECODE - 65)) | (1L << (DECOMPOSE - 65)) | (1L << (DECREMENT - 65)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DEMAND - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (EDITIONING - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENFORCED - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FAST - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)) | (1L << (FOLLOWING - 129)) | (1L << (FOLLOWS - 129)) | (1L << (FORALL - 129)) | (1L << (FORCE - 129)))) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & ((1L << (FULL - 197)) | (1L << (FUNCTION - 197)) | (1L << (GROUPING - 197)) | (1L << (HASH - 197)) | (1L << (HIDE - 197)) | (1L << (HOUR - 197)) | (1L << (IGNORE - 197)) | (1L << (IMMEDIATE - 197)) | (1L << (INCLUDE - 197)) | (1L << (INCLUDING - 197)) | (1L << (INCREMENT - 197)) | (1L << (INDENT - 197)) | (1L << (INDEXED - 197)) | (1L << (INDICATOR - 197)) | (1L << (INDICES - 197)) | (1L << (INFINITE - 197)) | (1L << (INLINE - 197)) | (1L << (INNER - 197)) | (1L << (INOUT - 197)) | (1L << (INSTANTIABLE - 197)) | (1L << (INSTEAD - 197)) | (1L << (INT - 197)) | (1L << (INTEGER - 197)) | (1L << (INTERVAL - 197)) | (1L << (INVALIDATE - 197)) | (1L << (ISOLATION - 197)) | (1L << (ITERATE - 197)) | (1L << (JAVA - 197)) | (1L << (JOIN - 197)) | (1L << (KEEP - 197)) | (1L << (LANGUAGE - 197)) | (1L << (LAST - 197)) | (1L << (LAST_VALUE - 197)) | (1L << (LEADING - 197)) | (1L << (LEFT - 197)) | (1L << (LEVEL - 197)))) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & ((1L << (LIBRARY - 261)) | (1L << (LIKE2 - 261)) | (1L << (LIKE4 - 261)) | (1L << (LIKEC - 261)) | (1L << (LIMIT - 261)) | (1L << (LIST - 261)) | (1L << (LOCAL - 261)) | (1L << (LOCKED - 261)) | (1L << (LOG - 261)) | (1L << (LOGOFF - 261)) | (1L << (LOGON - 261)) | (1L << (LONG - 261)) | (1L << (LOOP - 261)) | (1L << (MAIN - 261)) | (1L << (MAP - 261)) | (1L << (MASTER - 261)) | (1L << (MATCHED - 261)) | (1L << (MAXVALUE - 261)) | (1L << (MEASURES - 261)) | (1L << (MEMBER - 261)) | (1L << (MERGE - 261)) | (1L << (MINUTE - 261)) | (1L << (MINVALUE - 261)) | (1L << (MLSLABEL - 261)) | (1L << (MODEL - 261)) | (1L << (MODIFY - 261)) | (1L << (MONTH - 261)) | (1L << (MULTISET - 261)) | (1L << (NAME - 261)) | (1L << (NAN - 261)) | (1L << (NATURAL - 261)) | (1L << (NATURALN - 261)) | (1L << (NAV - 261)) | (1L << (NCHAR - 261)) | (1L << (NCHAR_CS - 261)) | (1L << (NCLOB - 261)) | (1L << (NESTED - 261)) | (1L << (NEVER - 261)) | (1L << (NEW - 261)) | (1L << (NO - 261)) | (1L << (NOAUDIT - 261)) | (1L << (NOCOPY - 261)) | (1L << (NOCYCLE - 261)) | (1L << (NOENTITYESCAPING - 261)))) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & ((1L << (NONE - 329)) | (1L << (NOSCHEMACHECK - 329)) | (1L << (NVL - 329)) | (1L << (NULLS - 329)) | (1L << (NUMBER - 329)) | (1L << (NUMERIC - 329)) | (1L << (NVARCHAR2 - 329)) | (1L << (MATERIALIZED - 329)) | (1L << (OBJECT - 329)) | (1L << (OFF - 329)) | (1L << (OID - 329)) | (1L << (OLD - 329)) | (1L << (ONLY - 329)) | (1L << (OPEN - 329)) | (1L << (ORADATA - 329)) | (1L << (ORDINALITY - 329)) | (1L << (OSERROR - 329)) | (1L << (OUT - 329)) | (1L << (OUTER - 329)) | (1L << (OVER - 329)) | (1L << (OVERRIDING - 329)) | (1L << (PACKAGE - 329)) | (1L << (PARALLEL_ENABLE - 329)) | (1L << (PARAMETERS - 329)) | (1L << (PARENT - 329)) | (1L << (PARTITION - 329)) | (1L << (PASSING - 329)) | (1L << (PATH - 329)) | (1L << (PIPELINED - 329)) | (1L << (PLAN - 329)) | (1L << (PLS_INTEGER - 329)) | (1L << (POSITIVE - 329)) | (1L << (POSITIVEN - 329)) | (1L << (PRAGMA - 329)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (PREBUILT - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)) | (1L << (PRESENT - 393)) | (1L << (PUBLIC - 393)) | (1L << (RAISE - 393)) | (1L << (RANGE - 393)) | (1L << (RAW - 393)) | (1L << (READ - 393)) | (1L << (REAL - 393)) | (1L << (RECORD - 393)) | (1L << (REDUCED - 393)) | (1L << (REF - 393)) | (1L << (REFERENCE - 393)) | (1L << (REFERENCING - 393)) | (1L << (REFRESH - 393)) | (1L << (REJECT - 393)) | (1L << (RELIES_ON - 393)) | (1L << (RENAME - 393)) | (1L << (REPLACE - 393)) | (1L << (RESPECT - 393)) | (1L << (RESTRICT_REFERENCES - 393)) | (1L << (RESULT - 393)) | (1L << (RESULT_CACHE - 393)) | (1L << (RETURN - 393)) | (1L << (RETURNING - 393)) | (1L << (REUSE - 393)) | (1L << (REVERSE - 393)) | (1L << (REWRITE - 393)) | (1L << (RIGHT - 393)) | (1L << (ROLE - 393)) | (1L << (ROLLBACK - 393)) | (1L << (ROLLUP - 393)) | (1L << (ROW - 393)) | (1L << (ROWID - 393)) | (1L << (ROWS - 393)) | (1L << (RULES - 393)) | (1L << (SAMPLE - 393)) | (1L << (SAVE - 393)) | (1L << (SAVEPOINT - 393)) | (1L << (SCHEMA - 393)) | (1L << (SCHEMACHECK - 393)) | (1L << (SCN - 393)) | (1L << (SECOND - 393)))) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & ((1L << (SEED - 458)) | (1L << (SEGMENT - 458)) | (1L << (SELF - 458)) | (1L << (SEQUENTIAL - 458)) | (1L << (SERIALIZABLE - 458)) | (1L << (SERIALLY_REUSABLE - 458)) | (1L << (SERVERERROR - 458)) | (1L << (SESSIONTIMEZONE - 458)) | (1L << (SET - 458)) | (1L << (SETS - 458)) | (1L << (SETTINGS - 458)) | (1L << (SHOW - 458)) | (1L << (SHUTDOWN - 458)) | (1L << (SIBLINGS - 458)) | (1L << (SIGNTYPE - 458)) | (1L << (SIMPLE_INTEGER - 458)) | (1L << (SINGLE - 458)) | (1L << (SIZE - 458)) | (1L << (SKIP_ - 458)) | (1L << (SMALLINT - 458)) | (1L << (SNAPSHOT - 458)) | (1L << (SOME - 458)) | (1L << (SPECIFICATION - 458)) | (1L << (SQLDATA - 458)) | (1L << (SQLERROR - 458)) | (1L << (STANDALONE - 458)) | (1L << (STARTUP - 458)) | (1L << (STATEMENT - 458)) | (1L << (STATEMENT_ID - 458)) | (1L << (STATIC - 458)) | (1L << (STATISTICS - 458)) | (1L << (STRING - 458)) | (1L << (SUBMULTISET - 458)) | (1L << (SUBPARTITION - 458)) | (1L << (SUBSTITUTABLE - 458)) | (1L << (SUBSTRING - 458)) | (1L << (SUBTYPE - 458)) | (1L << (SUCCESS - 458)) | (1L << (SUSPEND - 458)) | (1L << (TABLES - 458)) | (1L << (TIME - 458)) | (1L << (TIMESTAMP - 458)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 458)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 458)) | (1L << (TIMESTAMP_UNCONSTRAINED - 458)))) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & ((1L << (TIMEZONE_ABBR - 522)) | (1L << (TIMEZONE_HOUR - 522)) | (1L << (TIMEZONE_MINUTE - 522)) | (1L << (TIMEZONE_REGION - 522)) | (1L << (TO_CHAR - 522)) | (1L << (TO_DATE - 522)) | (1L << (TRAILING - 522)) | (1L << (TRANSACTION - 522)) | (1L << (TRANSLATE - 522)) | (1L << (TREAT - 522)) | (1L << (TRIGGER - 522)) | (1L << (TRIM - 522)) | (1L << (TRUNCATE - 522)) | (1L << (TRUSTED - 522)) | (1L << (TYPE - 522)) | (1L << (UNBOUNDED - 522)) | (1L << (UNDER - 522)) | (1L << (UNLIMITED - 522)) | (1L << (UNTIL - 522)) | (1L << (UPDATED - 522)) | (1L << (UPSERT - 522)) | (1L << (UROWID - 522)) | (1L << (USE - 522)) | (1L << (VALIDATE - 522)) | (1L << (VALUE - 522)) | (1L << (VARCHAR - 522)) | (1L << (VARCHAR2 - 522)) | (1L << (VARIABLE - 522)) | (1L << (VARRAY - 522)) | (1L << (VARYING - 522)) | (1L << (VERBOSE - 522)) | (1L << (VERSION - 522)) | (1L << (VERSIONS - 522)) | (1L << (VIEW - 522)) | (1L << (WAIT - 522)) | (1L << (WARNING - 522)) | (1L << (WELLFORMED - 522)) | (1L << (WHENEVER - 522)) | (1L << (WHILE - 522)) | (1L << (WITHOUT - 522)) | (1L << (WITHIN - 522)) | (1L << (WORK - 522)) | (1L << (WRITE - 522)) | (1L << (XML - 522)) | (1L << (XMLAGG - 522)) | (1L << (XMLATTRIBUTES - 522)))) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & ((1L << (XMLCAST - 586)) | (1L << (XMLCOLATTVAL - 586)) | (1L << (XMLELEMENT - 586)) | (1L << (XMLEXISTS - 586)) | (1L << (XMLFOREST - 586)) | (1L << (XMLNAMESPACES - 586)) | (1L << (XMLPARSE - 586)) | (1L << (XMLPI - 586)) | (1L << (XMLQUERY - 586)) | (1L << (XMLROOT - 586)) | (1L << (XMLSERIALIZE - 586)) | (1L << (XMLTABLE - 586)) | (1L << (YEAR - 586)) | (1L << (YES - 586)) | (1L << (YMINTERVAL_UNCONSTRAINED - 586)) | (1L << (ZONE - 586)) | (1L << (PREDICTION - 586)) | (1L << (PREDICTION_BOUNDS - 586)) | (1L << (PREDICTION_COST - 586)) | (1L << (PREDICTION_DETAILS - 586)) | (1L << (PREDICTION_PROBABILITY - 586)) | (1L << (PREDICTION_SET - 586)) | (1L << (CUME_DIST - 586)) | (1L << (DENSE_RANK - 586)) | (1L << (LISTAGG - 586)) | (1L << (PERCENT_RANK - 586)) | (1L << (PERCENTILE_CONT - 586)) | (1L << (PERCENTILE_DISC - 586)) | (1L << (RANK - 586)) | (1L << (AVG - 586)) | (1L << (CORR - 586)) | (1L << (LAG - 586)) | (1L << (LEAD - 586)) | (1L << (MAX - 586)) | (1L << (MEDIAN - 586)) | (1L << (MIN - 586)) | (1L << (NTILE - 586)) | (1L << (RATIO_TO_REPORT - 586)) | (1L << (ROW_NUMBER - 586)) | (1L << (SUM - 586)) | (1L << (VARIANCE - 586)) | (1L << (REGR_ - 586)) | (1L << (STDDEV - 586)) | (1L << (VAR_ - 586)) | (1L << (COVAR_ - 586)) | (1L << (DELIMITED_ID - 586)))) != 0) || _la==REGULAR_ID) {
				{
				setState(3403);
				index_name();
				}
			}

			setState(3406);
			match(LEFT_PAREN);
			setState(3410); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				setState(3410);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case INITRANS:
				case PCTFREE:
				case PCTUSED:
				case STORAGE:
					{
					setState(3407);
					physical_attributes_clause();
					}
					break;
				case TABLESPACE:
					{
					setState(3408);
					match(TABLESPACE);
					setState(3409);
					tablespace();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				setState(3412); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==INITRANS || _la==PCTFREE || _la==PCTUSED || _la==STORAGE || _la==TABLESPACE );
			setState(3414);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xmltype_tableContext extends ParserRuleContext {
		public TerminalNode OF() { return getToken(PLSQLParser.OF, 0); }
		public List<TerminalNode> XMLTYPE() { return getTokens(PLSQLParser.XMLTYPE); }
		public TerminalNode XMLTYPE(int i) {
			return getToken(PLSQLParser.XMLTYPE, i);
		}
		public List<TerminalNode> LEFT_PAREN() { return getTokens(PLSQLParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(PLSQLParser.LEFT_PAREN, i);
		}
		public Object_propertiesContext object_properties() {
			return getRuleContext(Object_propertiesContext.class,0);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(PLSQLParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(PLSQLParser.RIGHT_PAREN, i);
		}
		public Xmltype_storageContext xmltype_storage() {
			return getRuleContext(Xmltype_storageContext.class,0);
		}
		public Xmlschema_specContext xmlschema_spec() {
			return getRuleContext(Xmlschema_specContext.class,0);
		}
		public Xmltype_virtual_columnsContext xmltype_virtual_columns() {
			return getRuleContext(Xmltype_virtual_columnsContext.class,0);
		}
		public TerminalNode ON() { return getToken(PLSQLParser.ON, 0); }
		public TerminalNode COMMIT() { return getToken(PLSQLParser.COMMIT, 0); }
		public TerminalNode ROWS() { return getToken(PLSQLParser.ROWS, 0); }
		public Oid_clauseContext oid_clause() {
			return getRuleContext(Oid_clauseContext.class,0);
		}
		public Oid_index_clauseContext oid_index_clause() {
			return getRuleContext(Oid_index_clauseContext.class,0);
		}
		public Physical_propertiesContext physical_properties() {
			return getRuleContext(Physical_propertiesContext.class,0);
		}
		public Column_propertiesContext column_properties() {
			return getRuleContext(Column_propertiesContext.class,0);
		}
		public Table_partitioning_clausesContext table_partitioning_clauses() {
			return getRuleContext(Table_partitioning_clausesContext.class,0);
		}
		public TerminalNode RESULT_CACHE() { return getToken(PLSQLParser.RESULT_CACHE, 0); }
		public TerminalNode MODE() { return getToken(PLSQLParser.MODE, 0); }
		public Parallel_clauseContext parallel_clause() {
			return getRuleContext(Parallel_clauseContext.class,0);
		}
		public Row_movement_clauseContext row_movement_clause() {
			return getRuleContext(Row_movement_clauseContext.class,0);
		}
		public Flashback_archive_clauseContext flashback_archive_clause() {
			return getRuleContext(Flashback_archive_clauseContext.class,0);
		}
		public TerminalNode DELETE() { return getToken(PLSQLParser.DELETE, 0); }
		public TerminalNode PRESERVE() { return getToken(PLSQLParser.PRESERVE, 0); }
		public TerminalNode CACHE() { return getToken(PLSQLParser.CACHE, 0); }
		public TerminalNode NOCACHE() { return getToken(PLSQLParser.NOCACHE, 0); }
		public TerminalNode DEFAULT() { return getToken(PLSQLParser.DEFAULT, 0); }
		public TerminalNode FORCE() { return getToken(PLSQLParser.FORCE, 0); }
		public TerminalNode ROWDEPENDENCIES() { return getToken(PLSQLParser.ROWDEPENDENCIES, 0); }
		public TerminalNode NOROWDEPENDENCIES() { return getToken(PLSQLParser.NOROWDEPENDENCIES, 0); }
		public List<Enable_disable_clauseContext> enable_disable_clause() {
			return getRuleContexts(Enable_disable_clauseContext.class);
		}
		public Enable_disable_clauseContext enable_disable_clause(int i) {
			return getRuleContext(Enable_disable_clauseContext.class,i);
		}
		public Xmltype_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmltype_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterXmltype_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitXmltype_table(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitXmltype_table(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xmltype_tableContext xmltype_table() throws RecognitionException {
		Xmltype_tableContext _localctx = new Xmltype_tableContext(_ctx, getState());
		enterRule(_localctx, 274, RULE_xmltype_table);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3416);
			match(OF);
			setState(3417);
			match(XMLTYPE);
			setState(3422);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,448,_ctx) ) {
			case 1:
				{
				setState(3418);
				match(LEFT_PAREN);
				setState(3419);
				object_properties();
				setState(3420);
				match(RIGHT_PAREN);
				}
				break;
			}
			setState(3426);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,449,_ctx) ) {
			case 1:
				{
				setState(3424);
				match(XMLTYPE);
				setState(3425);
				xmltype_storage();
				}
				break;
			}
			setState(3429);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ELEMENT || _la==XMLSCHEMA) {
				{
				setState(3428);
				xmlschema_spec();
				}
			}

			setState(3432);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==VIRTUAL) {
				{
				setState(3431);
				xmltype_virtual_columns();
				}
			}

			setState(3438);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(3434);
				match(ON);
				setState(3435);
				match(COMMIT);
				setState(3436);
				_la = _input.LA(1);
				if ( !(_la==DELETE || _la==PRESERVE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3437);
				match(ROWS);
				}
			}

			setState(3441);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OBJECT) {
				{
				setState(3440);
				oid_clause();
				}
			}

			setState(3444);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OIDINDEX) {
				{
				setState(3443);
				oid_index_clause();
				}
			}

			setState(3447);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FILESYSTEM_LIKE_LOGGING || _la==INITRANS || _la==LOGGING || _la==NOLOGGING || _la==PCTFREE || _la==PCTUSED || ((((_la - 459)) & ~0x3f) == 0 && ((1L << (_la - 459)) & ((1L << (SEGMENT - 459)) | (1L << (STORAGE - 459)) | (1L << (TABLESPACE - 459)))) != 0)) {
				{
				setState(3446);
				physical_properties();
				}
			}

			setState(3450);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COLUMN || _la==LOB || _la==NESTED || _la==VARRAY || _la==XMLTYPE) {
				{
				setState(3449);
				column_properties();
				}
			}

			setState(3453);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,457,_ctx) ) {
			case 1:
				{
				setState(3452);
				table_partitioning_clauses();
				}
				break;
			}
			setState(3456);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CACHE || _la==NOCACHE) {
				{
				setState(3455);
				_la = _input.LA(1);
				if ( !(_la==CACHE || _la==NOCACHE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(3463);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RESULT_CACHE) {
				{
				setState(3458);
				match(RESULT_CACHE);
				setState(3459);
				match(LEFT_PAREN);
				setState(3460);
				match(MODE);
				setState(3461);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || _la==FORCE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3462);
				match(RIGHT_PAREN);
				}
			}

			setState(3466);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOPARALLEL || _la==PARALLEL) {
				{
				setState(3465);
				parallel_clause();
				}
			}

			setState(3469);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOROWDEPENDENCIES || _la==ROWDEPENDENCIES) {
				{
				setState(3468);
				_la = _input.LA(1);
				if ( !(_la==NOROWDEPENDENCIES || _la==ROWDEPENDENCIES) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(3476);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,463,_ctx) ) {
			case 1:
				{
				setState(3472); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(3471);
						enable_disable_clause();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(3474); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,462,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			}
			setState(3479);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DISABLE || _la==ENABLE || _la==ROW) {
				{
				setState(3478);
				row_movement_clause();
				}
			}

			setState(3482);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FLASHBACK || _la==NO) {
				{
				setState(3481);
				flashback_archive_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xmltype_virtual_columnsContext extends ParserRuleContext {
		public TerminalNode VIRTUAL() { return getToken(PLSQLParser.VIRTUAL, 0); }
		public TerminalNode COLUMNS() { return getToken(PLSQLParser.COLUMNS, 0); }
		public List<TerminalNode> LEFT_PAREN() { return getTokens(PLSQLParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(PLSQLParser.LEFT_PAREN, i);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(PLSQLParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(PLSQLParser.RIGHT_PAREN, i);
		}
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public List<TerminalNode> AS() { return getTokens(PLSQLParser.AS); }
		public TerminalNode AS(int i) {
			return getToken(PLSQLParser.AS, i);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLSQLParser.COMMA, i);
		}
		public Xmltype_virtual_columnsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmltype_virtual_columns; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterXmltype_virtual_columns(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitXmltype_virtual_columns(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitXmltype_virtual_columns(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xmltype_virtual_columnsContext xmltype_virtual_columns() throws RecognitionException {
		Xmltype_virtual_columnsContext _localctx = new Xmltype_virtual_columnsContext(_ctx, getState());
		enterRule(_localctx, 276, RULE_xmltype_virtual_columns);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3484);
			match(VIRTUAL);
			setState(3485);
			match(COLUMNS);
			setState(3486);
			match(LEFT_PAREN);
			setState(3496); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(3488);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(3487);
					match(COMMA);
					}
				}

				setState(3490);
				column_name();
				setState(3491);
				match(AS);
				setState(3492);
				match(LEFT_PAREN);
				setState(3493);
				expression(0);
				setState(3494);
				match(RIGHT_PAREN);
				}
				}
				setState(3498); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BUILD) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (CHR - 65)) | (1L << (CLOB - 65)) | (1L << (CLOSE - 65)) | (1L << (CLUSTER - 65)) | (1L << (COALESCE - 65)) | (1L << (COLLECT - 65)) | (1L << (COLUMNS - 65)) | (1L << (COMMENT - 65)) | (1L << (COMMIT - 65)) | (1L << (COMMITTED - 65)) | (1L << (COMPATIBILITY - 65)) | (1L << (COMPILE - 65)) | (1L << (COMPLETE - 65)) | (1L << (COMPOUND - 65)) | (1L << (CONCAT - 65)) | (1L << (CONSTANT - 65)) | (1L << (CONSTRAINT - 65)) | (1L << (CONSTRAINTS - 65)) | (1L << (CONSTRUCTOR - 65)) | (1L << (CONTENT - 65)) | (1L << (CONTEXT - 65)) | (1L << (CONTINUE - 65)) | (1L << (CONVERT - 65)) | (1L << (CORRUPT_XID - 65)) | (1L << (CORRUPT_XID_ALL - 65)) | (1L << (COST - 65)) | (1L << (COUNT - 65)) | (1L << (CROSS - 65)) | (1L << (CUBE - 65)) | (1L << (CURRENT_USER - 65)) | (1L << (CURSOR - 65)) | (1L << (CUSTOMDATUM - 65)) | (1L << (CYCLE - 65)) | (1L << (DATA - 65)) | (1L << (DATABASE - 65)) | (1L << (DATE - 65)) | (1L << (DAY - 65)) | (1L << (DB_ROLE_CHANGE - 65)) | (1L << (DBTIMEZONE - 65)) | (1L << (DDL - 65)) | (1L << (DEBUG - 65)) | (1L << (DEC - 65)) | (1L << (DECIMAL - 65)) | (1L << (DECODE - 65)) | (1L << (DECOMPOSE - 65)) | (1L << (DECREMENT - 65)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DEMAND - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (EDITIONING - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENFORCED - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FAST - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)) | (1L << (FOLLOWING - 129)) | (1L << (FOLLOWS - 129)) | (1L << (FORALL - 129)) | (1L << (FORCE - 129)))) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & ((1L << (FULL - 197)) | (1L << (FUNCTION - 197)) | (1L << (GROUPING - 197)) | (1L << (HASH - 197)) | (1L << (HIDE - 197)) | (1L << (HOUR - 197)) | (1L << (IGNORE - 197)) | (1L << (IMMEDIATE - 197)) | (1L << (INCLUDE - 197)) | (1L << (INCLUDING - 197)) | (1L << (INCREMENT - 197)) | (1L << (INDENT - 197)) | (1L << (INDEXED - 197)) | (1L << (INDICATOR - 197)) | (1L << (INDICES - 197)) | (1L << (INFINITE - 197)) | (1L << (INLINE - 197)) | (1L << (INNER - 197)) | (1L << (INOUT - 197)) | (1L << (INSTANTIABLE - 197)) | (1L << (INSTEAD - 197)) | (1L << (INT - 197)) | (1L << (INTEGER - 197)) | (1L << (INTERVAL - 197)) | (1L << (INVALIDATE - 197)) | (1L << (ISOLATION - 197)) | (1L << (ITERATE - 197)) | (1L << (JAVA - 197)) | (1L << (JOIN - 197)) | (1L << (KEEP - 197)) | (1L << (LANGUAGE - 197)) | (1L << (LAST - 197)) | (1L << (LAST_VALUE - 197)) | (1L << (LEADING - 197)) | (1L << (LEFT - 197)) | (1L << (LEVEL - 197)))) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & ((1L << (LIBRARY - 261)) | (1L << (LIKE2 - 261)) | (1L << (LIKE4 - 261)) | (1L << (LIKEC - 261)) | (1L << (LIMIT - 261)) | (1L << (LIST - 261)) | (1L << (LOCAL - 261)) | (1L << (LOCKED - 261)) | (1L << (LOG - 261)) | (1L << (LOGOFF - 261)) | (1L << (LOGON - 261)) | (1L << (LONG - 261)) | (1L << (LOOP - 261)) | (1L << (MAIN - 261)) | (1L << (MAP - 261)) | (1L << (MASTER - 261)) | (1L << (MATCHED - 261)) | (1L << (MAXVALUE - 261)) | (1L << (MEASURES - 261)) | (1L << (MEMBER - 261)) | (1L << (MERGE - 261)) | (1L << (MINUTE - 261)) | (1L << (MINVALUE - 261)) | (1L << (MLSLABEL - 261)) | (1L << (MODEL - 261)) | (1L << (MODIFY - 261)) | (1L << (MONTH - 261)) | (1L << (MULTISET - 261)) | (1L << (NAME - 261)) | (1L << (NAN - 261)) | (1L << (NATURAL - 261)) | (1L << (NATURALN - 261)) | (1L << (NAV - 261)) | (1L << (NCHAR - 261)) | (1L << (NCHAR_CS - 261)) | (1L << (NCLOB - 261)) | (1L << (NESTED - 261)) | (1L << (NEVER - 261)) | (1L << (NEW - 261)) | (1L << (NO - 261)) | (1L << (NOAUDIT - 261)) | (1L << (NOCOPY - 261)) | (1L << (NOCYCLE - 261)) | (1L << (NOENTITYESCAPING - 261)))) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & ((1L << (NONE - 329)) | (1L << (NOSCHEMACHECK - 329)) | (1L << (NVL - 329)) | (1L << (NULLS - 329)) | (1L << (NUMBER - 329)) | (1L << (NUMERIC - 329)) | (1L << (NVARCHAR2 - 329)) | (1L << (MATERIALIZED - 329)) | (1L << (OBJECT - 329)) | (1L << (OFF - 329)) | (1L << (OID - 329)) | (1L << (OLD - 329)) | (1L << (ONLY - 329)) | (1L << (OPEN - 329)) | (1L << (ORADATA - 329)) | (1L << (ORDINALITY - 329)) | (1L << (OSERROR - 329)) | (1L << (OUT - 329)) | (1L << (OUTER - 329)) | (1L << (OVER - 329)) | (1L << (OVERRIDING - 329)) | (1L << (PACKAGE - 329)) | (1L << (PARALLEL_ENABLE - 329)) | (1L << (PARAMETERS - 329)) | (1L << (PARENT - 329)) | (1L << (PARTITION - 329)) | (1L << (PASSING - 329)) | (1L << (PATH - 329)) | (1L << (PIPELINED - 329)) | (1L << (PLAN - 329)) | (1L << (PLS_INTEGER - 329)) | (1L << (POSITIVE - 329)) | (1L << (POSITIVEN - 329)) | (1L << (PRAGMA - 329)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (PREBUILT - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)) | (1L << (PRESENT - 393)) | (1L << (PUBLIC - 393)) | (1L << (RAISE - 393)) | (1L << (RANGE - 393)) | (1L << (RAW - 393)) | (1L << (READ - 393)) | (1L << (REAL - 393)) | (1L << (RECORD - 393)) | (1L << (REDUCED - 393)) | (1L << (REF - 393)) | (1L << (REFERENCE - 393)) | (1L << (REFERENCING - 393)) | (1L << (REFRESH - 393)) | (1L << (REJECT - 393)) | (1L << (RELIES_ON - 393)) | (1L << (RENAME - 393)) | (1L << (REPLACE - 393)) | (1L << (RESPECT - 393)) | (1L << (RESTRICT_REFERENCES - 393)) | (1L << (RESULT - 393)) | (1L << (RESULT_CACHE - 393)) | (1L << (RETURN - 393)) | (1L << (RETURNING - 393)) | (1L << (REUSE - 393)) | (1L << (REVERSE - 393)) | (1L << (REWRITE - 393)) | (1L << (RIGHT - 393)) | (1L << (ROLE - 393)) | (1L << (ROLLBACK - 393)) | (1L << (ROLLUP - 393)) | (1L << (ROW - 393)) | (1L << (ROWID - 393)) | (1L << (ROWS - 393)) | (1L << (RULES - 393)) | (1L << (SAMPLE - 393)) | (1L << (SAVE - 393)) | (1L << (SAVEPOINT - 393)) | (1L << (SCHEMA - 393)) | (1L << (SCHEMACHECK - 393)) | (1L << (SCN - 393)) | (1L << (SECOND - 393)))) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & ((1L << (SEED - 458)) | (1L << (SEGMENT - 458)) | (1L << (SELF - 458)) | (1L << (SEQUENTIAL - 458)) | (1L << (SERIALIZABLE - 458)) | (1L << (SERIALLY_REUSABLE - 458)) | (1L << (SERVERERROR - 458)) | (1L << (SESSIONTIMEZONE - 458)) | (1L << (SET - 458)) | (1L << (SETS - 458)) | (1L << (SETTINGS - 458)) | (1L << (SHOW - 458)) | (1L << (SHUTDOWN - 458)) | (1L << (SIBLINGS - 458)) | (1L << (SIGNTYPE - 458)) | (1L << (SIMPLE_INTEGER - 458)) | (1L << (SINGLE - 458)) | (1L << (SIZE - 458)) | (1L << (SKIP_ - 458)) | (1L << (SMALLINT - 458)) | (1L << (SNAPSHOT - 458)) | (1L << (SOME - 458)) | (1L << (SPECIFICATION - 458)) | (1L << (SQLDATA - 458)) | (1L << (SQLERROR - 458)) | (1L << (STANDALONE - 458)) | (1L << (STARTUP - 458)) | (1L << (STATEMENT - 458)) | (1L << (STATEMENT_ID - 458)) | (1L << (STATIC - 458)) | (1L << (STATISTICS - 458)) | (1L << (STRING - 458)) | (1L << (SUBMULTISET - 458)) | (1L << (SUBPARTITION - 458)) | (1L << (SUBSTITUTABLE - 458)) | (1L << (SUBSTRING - 458)) | (1L << (SUBTYPE - 458)) | (1L << (SUCCESS - 458)) | (1L << (SUSPEND - 458)) | (1L << (TABLES - 458)) | (1L << (TIME - 458)) | (1L << (TIMESTAMP - 458)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 458)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 458)) | (1L << (TIMESTAMP_UNCONSTRAINED - 458)))) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & ((1L << (TIMEZONE_ABBR - 522)) | (1L << (TIMEZONE_HOUR - 522)) | (1L << (TIMEZONE_MINUTE - 522)) | (1L << (TIMEZONE_REGION - 522)) | (1L << (TO_CHAR - 522)) | (1L << (TO_DATE - 522)) | (1L << (TRAILING - 522)) | (1L << (TRANSACTION - 522)) | (1L << (TRANSLATE - 522)) | (1L << (TREAT - 522)) | (1L << (TRIGGER - 522)) | (1L << (TRIM - 522)) | (1L << (TRUNCATE - 522)) | (1L << (TRUSTED - 522)) | (1L << (TYPE - 522)) | (1L << (UNBOUNDED - 522)) | (1L << (UNDER - 522)) | (1L << (UNLIMITED - 522)) | (1L << (UNTIL - 522)) | (1L << (UPDATED - 522)) | (1L << (UPSERT - 522)) | (1L << (UROWID - 522)) | (1L << (USE - 522)) | (1L << (VALIDATE - 522)) | (1L << (VALUE - 522)) | (1L << (VARCHAR - 522)) | (1L << (VARCHAR2 - 522)) | (1L << (VARIABLE - 522)) | (1L << (VARRAY - 522)) | (1L << (VARYING - 522)) | (1L << (VERBOSE - 522)) | (1L << (VERSION - 522)) | (1L << (VERSIONS - 522)) | (1L << (VIEW - 522)) | (1L << (WAIT - 522)) | (1L << (WARNING - 522)) | (1L << (WELLFORMED - 522)) | (1L << (WHENEVER - 522)) | (1L << (WHILE - 522)) | (1L << (WITHOUT - 522)) | (1L << (WITHIN - 522)) | (1L << (WORK - 522)) | (1L << (WRITE - 522)) | (1L << (XML - 522)) | (1L << (XMLAGG - 522)) | (1L << (XMLATTRIBUTES - 522)))) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & ((1L << (XMLCAST - 586)) | (1L << (XMLCOLATTVAL - 586)) | (1L << (XMLELEMENT - 586)) | (1L << (XMLEXISTS - 586)) | (1L << (XMLFOREST - 586)) | (1L << (XMLNAMESPACES - 586)) | (1L << (XMLPARSE - 586)) | (1L << (XMLPI - 586)) | (1L << (XMLQUERY - 586)) | (1L << (XMLROOT - 586)) | (1L << (XMLSERIALIZE - 586)) | (1L << (XMLTABLE - 586)) | (1L << (YEAR - 586)) | (1L << (YES - 586)) | (1L << (YMINTERVAL_UNCONSTRAINED - 586)) | (1L << (ZONE - 586)) | (1L << (PREDICTION - 586)) | (1L << (PREDICTION_BOUNDS - 586)) | (1L << (PREDICTION_COST - 586)) | (1L << (PREDICTION_DETAILS - 586)) | (1L << (PREDICTION_PROBABILITY - 586)) | (1L << (PREDICTION_SET - 586)) | (1L << (CUME_DIST - 586)) | (1L << (DENSE_RANK - 586)) | (1L << (LISTAGG - 586)) | (1L << (PERCENT_RANK - 586)) | (1L << (PERCENTILE_CONT - 586)) | (1L << (PERCENTILE_DISC - 586)) | (1L << (RANK - 586)) | (1L << (AVG - 586)) | (1L << (CORR - 586)) | (1L << (LAG - 586)) | (1L << (LEAD - 586)) | (1L << (MAX - 586)) | (1L << (MEDIAN - 586)) | (1L << (MIN - 586)) | (1L << (NTILE - 586)) | (1L << (RATIO_TO_REPORT - 586)) | (1L << (ROW_NUMBER - 586)) | (1L << (SUM - 586)) | (1L << (VARIANCE - 586)) | (1L << (REGR_ - 586)) | (1L << (STDDEV - 586)) | (1L << (VAR_ - 586)) | (1L << (COVAR_ - 586)) | (1L << (DELIMITED_ID - 586)))) != 0) || _la==COMMA || _la==REGULAR_ID );
			setState(3500);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_tableContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PLSQLParser.DROP, 0); }
		public TerminalNode TABLE() { return getToken(PLSQLParser.TABLE, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public TerminalNode IF() { return getToken(PLSQLParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PLSQLParser.EXISTS, 0); }
		public TerminalNode PURGE() { return getToken(PLSQLParser.PURGE, 0); }
		public Drop_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterDrop_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitDrop_table(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitDrop_table(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_tableContext drop_table() throws RecognitionException {
		Drop_tableContext _localctx = new Drop_tableContext(_ctx, getState());
		enterRule(_localctx, 278, RULE_drop_table);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3502);
			match(DROP);
			setState(3503);
			match(TABLE);
			setState(3506);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(3504);
				match(IF);
				setState(3505);
				match(EXISTS);
				}
			}

			setState(3508);
			tableview_name();
			setState(3510);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PURGE) {
				{
				setState(3509);
				match(PURGE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_tableContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PLSQLParser.ALTER, 0); }
		public TerminalNode TABLE() { return getToken(PLSQLParser.TABLE, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public Alter_table_propertiesContext alter_table_properties() {
			return getRuleContext(Alter_table_propertiesContext.class,0);
		}
		public Constraint_clausesContext constraint_clauses() {
			return getRuleContext(Constraint_clausesContext.class,0);
		}
		public Column_clausesContext column_clauses() {
			return getRuleContext(Column_clausesContext.class,0);
		}
		public Alter_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterAlter_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitAlter_table(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitAlter_table(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_tableContext alter_table() throws RecognitionException {
		Alter_tableContext _localctx = new Alter_tableContext(_ctx, getState());
		enterRule(_localctx, 280, RULE_alter_table);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3512);
			match(ALTER);
			setState(3513);
			match(TABLE);
			setState(3514);
			tableview_name();
			setState(3519);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,470,_ctx) ) {
			case 1:
				{
				}
				break;
			case 2:
				{
				setState(3516);
				alter_table_properties();
				}
				break;
			case 3:
				{
				setState(3517);
				constraint_clauses();
				}
				break;
			case 4:
				{
				setState(3518);
				column_clauses();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_table_propertiesContext extends ParserRuleContext {
		public Alter_table_properties_1Context alter_table_properties_1() {
			return getRuleContext(Alter_table_properties_1Context.class,0);
		}
		public TerminalNode RENAME() { return getToken(PLSQLParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(PLSQLParser.TO, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public Shrink_clauseContext shrink_clause() {
			return getRuleContext(Shrink_clauseContext.class,0);
		}
		public TerminalNode READ() { return getToken(PLSQLParser.READ, 0); }
		public TerminalNode ONLY() { return getToken(PLSQLParser.ONLY, 0); }
		public TerminalNode WRITE() { return getToken(PLSQLParser.WRITE, 0); }
		public TerminalNode REKEY() { return getToken(PLSQLParser.REKEY, 0); }
		public TerminalNode CHAR_STRING() { return getToken(PLSQLParser.CHAR_STRING, 0); }
		public Alter_table_propertiesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_table_properties; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterAlter_table_properties(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitAlter_table_properties(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitAlter_table_properties(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_table_propertiesContext alter_table_properties() throws RecognitionException {
		Alter_table_propertiesContext _localctx = new Alter_table_propertiesContext(_ctx, getState());
		enterRule(_localctx, 282, RULE_alter_table_properties);
		try {
			setState(3532);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,471,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3521);
				alter_table_properties_1();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3522);
				match(RENAME);
				setState(3523);
				match(TO);
				setState(3524);
				tableview_name();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3525);
				shrink_clause();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3526);
				match(READ);
				setState(3527);
				match(ONLY);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3528);
				match(READ);
				setState(3529);
				match(WRITE);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3530);
				match(REKEY);
				setState(3531);
				match(CHAR_STRING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_table_properties_1Context extends ParserRuleContext {
		public List<Physical_attributes_clauseContext> physical_attributes_clause() {
			return getRuleContexts(Physical_attributes_clauseContext.class);
		}
		public Physical_attributes_clauseContext physical_attributes_clause(int i) {
			return getRuleContext(Physical_attributes_clauseContext.class,i);
		}
		public List<Logging_clauseContext> logging_clause() {
			return getRuleContexts(Logging_clauseContext.class);
		}
		public Logging_clauseContext logging_clause(int i) {
			return getRuleContext(Logging_clauseContext.class,i);
		}
		public List<Table_compressionContext> table_compression() {
			return getRuleContexts(Table_compressionContext.class);
		}
		public Table_compressionContext table_compression(int i) {
			return getRuleContext(Table_compressionContext.class,i);
		}
		public List<Supplemental_table_loggingContext> supplemental_table_logging() {
			return getRuleContexts(Supplemental_table_loggingContext.class);
		}
		public Supplemental_table_loggingContext supplemental_table_logging(int i) {
			return getRuleContext(Supplemental_table_loggingContext.class,i);
		}
		public List<Allocate_extent_clauseContext> allocate_extent_clause() {
			return getRuleContexts(Allocate_extent_clauseContext.class);
		}
		public Allocate_extent_clauseContext allocate_extent_clause(int i) {
			return getRuleContext(Allocate_extent_clauseContext.class,i);
		}
		public List<Deallocate_unused_clauseContext> deallocate_unused_clause() {
			return getRuleContexts(Deallocate_unused_clauseContext.class);
		}
		public Deallocate_unused_clauseContext deallocate_unused_clause(int i) {
			return getRuleContext(Deallocate_unused_clauseContext.class,i);
		}
		public List<TerminalNode> RESULT_CACHE() { return getTokens(PLSQLParser.RESULT_CACHE); }
		public TerminalNode RESULT_CACHE(int i) {
			return getToken(PLSQLParser.RESULT_CACHE, i);
		}
		public List<TerminalNode> LEFT_PAREN() { return getTokens(PLSQLParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(PLSQLParser.LEFT_PAREN, i);
		}
		public List<TerminalNode> MODE() { return getTokens(PLSQLParser.MODE); }
		public TerminalNode MODE(int i) {
			return getToken(PLSQLParser.MODE, i);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(PLSQLParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(PLSQLParser.RIGHT_PAREN, i);
		}
		public List<Upgrade_table_clauseContext> upgrade_table_clause() {
			return getRuleContexts(Upgrade_table_clauseContext.class);
		}
		public Upgrade_table_clauseContext upgrade_table_clause(int i) {
			return getRuleContext(Upgrade_table_clauseContext.class,i);
		}
		public List<Records_per_block_clauseContext> records_per_block_clause() {
			return getRuleContexts(Records_per_block_clauseContext.class);
		}
		public Records_per_block_clauseContext records_per_block_clause(int i) {
			return getRuleContext(Records_per_block_clauseContext.class,i);
		}
		public List<Parallel_clauseContext> parallel_clause() {
			return getRuleContexts(Parallel_clauseContext.class);
		}
		public Parallel_clauseContext parallel_clause(int i) {
			return getRuleContext(Parallel_clauseContext.class,i);
		}
		public List<Row_movement_clauseContext> row_movement_clause() {
			return getRuleContexts(Row_movement_clauseContext.class);
		}
		public Row_movement_clauseContext row_movement_clause(int i) {
			return getRuleContext(Row_movement_clauseContext.class,i);
		}
		public List<Flashback_archive_clauseContext> flashback_archive_clause() {
			return getRuleContexts(Flashback_archive_clauseContext.class);
		}
		public Flashback_archive_clauseContext flashback_archive_clause(int i) {
			return getRuleContext(Flashback_archive_clauseContext.class,i);
		}
		public Alter_iot_clausesContext alter_iot_clauses() {
			return getRuleContext(Alter_iot_clausesContext.class,0);
		}
		public List<TerminalNode> CACHE() { return getTokens(PLSQLParser.CACHE); }
		public TerminalNode CACHE(int i) {
			return getToken(PLSQLParser.CACHE, i);
		}
		public List<TerminalNode> NOCACHE() { return getTokens(PLSQLParser.NOCACHE); }
		public TerminalNode NOCACHE(int i) {
			return getToken(PLSQLParser.NOCACHE, i);
		}
		public List<TerminalNode> DEFAULT() { return getTokens(PLSQLParser.DEFAULT); }
		public TerminalNode DEFAULT(int i) {
			return getToken(PLSQLParser.DEFAULT, i);
		}
		public List<TerminalNode> FORCE() { return getTokens(PLSQLParser.FORCE); }
		public TerminalNode FORCE(int i) {
			return getToken(PLSQLParser.FORCE, i);
		}
		public Alter_table_properties_1Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_table_properties_1; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterAlter_table_properties_1(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitAlter_table_properties_1(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitAlter_table_properties_1(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_table_properties_1Context alter_table_properties_1() throws RecognitionException {
		Alter_table_properties_1Context _localctx = new Alter_table_properties_1Context(_ctx, getState());
		enterRule(_localctx, 284, RULE_alter_table_properties_1);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3551); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					setState(3551);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case INITRANS:
					case PCTFREE:
					case PCTUSED:
					case STORAGE:
						{
						setState(3534);
						physical_attributes_clause();
						}
						break;
					case FILESYSTEM_LIKE_LOGGING:
					case LOGGING:
					case NOLOGGING:
						{
						setState(3535);
						logging_clause();
						}
						break;
					case COMPRESS:
					case NOCOMPRESS:
						{
						setState(3536);
						table_compression();
						}
						break;
					case ADD:
					case DROP:
						{
						setState(3537);
						supplemental_table_logging();
						}
						break;
					case ALLOCATE:
						{
						setState(3538);
						allocate_extent_clause();
						}
						break;
					case DEALLOCATE:
						{
						setState(3539);
						deallocate_unused_clause();
						}
						break;
					case CACHE:
					case NOCACHE:
						{
						setState(3540);
						_la = _input.LA(1);
						if ( !(_la==CACHE || _la==NOCACHE) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					case RESULT_CACHE:
						{
						setState(3541);
						match(RESULT_CACHE);
						setState(3542);
						match(LEFT_PAREN);
						setState(3543);
						match(MODE);
						setState(3544);
						_la = _input.LA(1);
						if ( !(_la==DEFAULT || _la==FORCE) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(3545);
						match(RIGHT_PAREN);
						}
						break;
					case UPGRADE:
						{
						setState(3546);
						upgrade_table_clause();
						}
						break;
					case MINIMIZE:
					case NOMINIMIZE:
					case RECORDS_PER_BLOCK:
						{
						setState(3547);
						records_per_block_clause();
						}
						break;
					case NOPARALLEL:
					case PARALLEL:
						{
						setState(3548);
						parallel_clause();
						}
						break;
					case DISABLE:
					case ENABLE:
					case ROW:
						{
						setState(3549);
						row_movement_clause();
						}
						break;
					case FLASHBACK:
					case NO:
						{
						setState(3550);
						flashback_archive_clause();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(3553); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,473,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			setState(3556);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ADD || _la==COALESCE || _la==COMPRESS || ((((_la - 284)) & ~0x3f) == 0 && ((1L << (_la - 284)) & ((1L << (MAPPING - 284)) | (1L << (NOCOMPRESS - 284)) | (1L << (NOMAPPING - 284)))) != 0) || _la==OVERFLOW || _la==PCTTHRESHOLD) {
				{
				setState(3555);
				alter_iot_clauses();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Supplemental_table_loggingContext extends ParserRuleContext {
		public TerminalNode ADD() { return getToken(PLSQLParser.ADD, 0); }
		public List<TerminalNode> SUPPLEMENTAL() { return getTokens(PLSQLParser.SUPPLEMENTAL); }
		public TerminalNode SUPPLEMENTAL(int i) {
			return getToken(PLSQLParser.SUPPLEMENTAL, i);
		}
		public List<TerminalNode> LOG() { return getTokens(PLSQLParser.LOG); }
		public TerminalNode LOG(int i) {
			return getToken(PLSQLParser.LOG, i);
		}
		public List<Supplemental_log_grp_clauseContext> supplemental_log_grp_clause() {
			return getRuleContexts(Supplemental_log_grp_clauseContext.class);
		}
		public Supplemental_log_grp_clauseContext supplemental_log_grp_clause(int i) {
			return getRuleContext(Supplemental_log_grp_clauseContext.class,i);
		}
		public List<Supplemental_id_key_clauseContext> supplemental_id_key_clause() {
			return getRuleContexts(Supplemental_id_key_clauseContext.class);
		}
		public Supplemental_id_key_clauseContext supplemental_id_key_clause(int i) {
			return getRuleContext(Supplemental_id_key_clauseContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLSQLParser.COMMA, i);
		}
		public TerminalNode DROP() { return getToken(PLSQLParser.DROP, 0); }
		public List<TerminalNode> GROUP() { return getTokens(PLSQLParser.GROUP); }
		public TerminalNode GROUP(int i) {
			return getToken(PLSQLParser.GROUP, i);
		}
		public List<Log_grpContext> log_grp() {
			return getRuleContexts(Log_grpContext.class);
		}
		public Log_grpContext log_grp(int i) {
			return getRuleContext(Log_grpContext.class,i);
		}
		public Supplemental_table_loggingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_supplemental_table_logging; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterSupplemental_table_logging(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitSupplemental_table_logging(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitSupplemental_table_logging(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Supplemental_table_loggingContext supplemental_table_logging() throws RecognitionException {
		Supplemental_table_loggingContext _localctx = new Supplemental_table_loggingContext(_ctx, getState());
		enterRule(_localctx, 286, RULE_supplemental_table_logging);
		int _la;
		try {
			setState(3589);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ADD:
				enterOuterAlt(_localctx, 1);
				{
				setState(3558);
				match(ADD);
				setState(3570);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==SUPPLEMENTAL || _la==COMMA) {
					{
					{
					setState(3560);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(3559);
						match(COMMA);
						}
					}

					setState(3562);
					match(SUPPLEMENTAL);
					setState(3563);
					match(LOG);
					setState(3566);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case GROUP:
						{
						setState(3564);
						supplemental_log_grp_clause();
						}
						break;
					case DATA:
						{
						setState(3565);
						supplemental_id_key_clause();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					}
					setState(3572);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case DROP:
				enterOuterAlt(_localctx, 2);
				{
				setState(3573);
				match(DROP);
				setState(3586);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==SUPPLEMENTAL || _la==COMMA) {
					{
					{
					setState(3575);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(3574);
						match(COMMA);
						}
					}

					setState(3577);
					match(SUPPLEMENTAL);
					setState(3578);
					match(LOG);
					setState(3582);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case DATA:
						{
						setState(3579);
						supplemental_id_key_clause();
						}
						break;
					case GROUP:
						{
						setState(3580);
						match(GROUP);
						setState(3581);
						log_grp();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					}
					setState(3588);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Allocate_extent_clauseContext extends ParserRuleContext {
		public Token datafile;
		public Token inst_num;
		public TerminalNode ALLOCATE() { return getToken(PLSQLParser.ALLOCATE, 0); }
		public TerminalNode EXTENT() { return getToken(PLSQLParser.EXTENT, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PLSQLParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PLSQLParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> SIZE() { return getTokens(PLSQLParser.SIZE); }
		public TerminalNode SIZE(int i) {
			return getToken(PLSQLParser.SIZE, i);
		}
		public List<Size_clauseContext> size_clause() {
			return getRuleContexts(Size_clauseContext.class);
		}
		public Size_clauseContext size_clause(int i) {
			return getRuleContext(Size_clauseContext.class,i);
		}
		public List<TerminalNode> DATAFILE() { return getTokens(PLSQLParser.DATAFILE); }
		public TerminalNode DATAFILE(int i) {
			return getToken(PLSQLParser.DATAFILE, i);
		}
		public List<TerminalNode> INSTANCE() { return getTokens(PLSQLParser.INSTANCE); }
		public TerminalNode INSTANCE(int i) {
			return getToken(PLSQLParser.INSTANCE, i);
		}
		public List<TerminalNode> CHAR_STRING() { return getTokens(PLSQLParser.CHAR_STRING); }
		public TerminalNode CHAR_STRING(int i) {
			return getToken(PLSQLParser.CHAR_STRING, i);
		}
		public List<TerminalNode> UNSIGNED_INTEGER() { return getTokens(PLSQLParser.UNSIGNED_INTEGER); }
		public TerminalNode UNSIGNED_INTEGER(int i) {
			return getToken(PLSQLParser.UNSIGNED_INTEGER, i);
		}
		public Allocate_extent_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_allocate_extent_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterAllocate_extent_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitAllocate_extent_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitAllocate_extent_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Allocate_extent_clauseContext allocate_extent_clause() throws RecognitionException {
		Allocate_extent_clauseContext _localctx = new Allocate_extent_clauseContext(_ctx, getState());
		enterRule(_localctx, 288, RULE_allocate_extent_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3591);
			match(ALLOCATE);
			setState(3592);
			match(EXTENT);
			setState(3605);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,484,_ctx) ) {
			case 1:
				{
				setState(3593);
				match(LEFT_PAREN);
				setState(3600); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					setState(3600);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case SIZE:
						{
						setState(3594);
						match(SIZE);
						setState(3595);
						size_clause();
						}
						break;
					case DATAFILE:
						{
						setState(3596);
						match(DATAFILE);
						setState(3597);
						((Allocate_extent_clauseContext)_localctx).datafile = match(CHAR_STRING);
						}
						break;
					case INSTANCE:
						{
						setState(3598);
						match(INSTANCE);
						setState(3599);
						((Allocate_extent_clauseContext)_localctx).inst_num = match(UNSIGNED_INTEGER);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					setState(3602); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==DATAFILE || _la==INSTANCE || _la==SIZE );
				setState(3604);
				match(RIGHT_PAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Deallocate_unused_clauseContext extends ParserRuleContext {
		public TerminalNode DEALLOCATE() { return getToken(PLSQLParser.DEALLOCATE, 0); }
		public TerminalNode UNUSED() { return getToken(PLSQLParser.UNUSED, 0); }
		public TerminalNode KEEP() { return getToken(PLSQLParser.KEEP, 0); }
		public Size_clauseContext size_clause() {
			return getRuleContext(Size_clauseContext.class,0);
		}
		public Deallocate_unused_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_deallocate_unused_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterDeallocate_unused_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitDeallocate_unused_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitDeallocate_unused_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Deallocate_unused_clauseContext deallocate_unused_clause() throws RecognitionException {
		Deallocate_unused_clauseContext _localctx = new Deallocate_unused_clauseContext(_ctx, getState());
		enterRule(_localctx, 290, RULE_deallocate_unused_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3607);
			match(DEALLOCATE);
			setState(3608);
			match(UNUSED);
			setState(3611);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KEEP) {
				{
				setState(3609);
				match(KEEP);
				setState(3610);
				size_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Upgrade_table_clauseContext extends ParserRuleContext {
		public TerminalNode UPGRADE() { return getToken(PLSQLParser.UPGRADE, 0); }
		public Column_propertiesContext column_properties() {
			return getRuleContext(Column_propertiesContext.class,0);
		}
		public TerminalNode INCLUDING() { return getToken(PLSQLParser.INCLUDING, 0); }
		public TerminalNode DATA() { return getToken(PLSQLParser.DATA, 0); }
		public TerminalNode NOT() { return getToken(PLSQLParser.NOT, 0); }
		public Upgrade_table_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_upgrade_table_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterUpgrade_table_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitUpgrade_table_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitUpgrade_table_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Upgrade_table_clauseContext upgrade_table_clause() throws RecognitionException {
		Upgrade_table_clauseContext _localctx = new Upgrade_table_clauseContext(_ctx, getState());
		enterRule(_localctx, 292, RULE_upgrade_table_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3613);
			match(UPGRADE);
			{
			setState(3615);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(3614);
				match(NOT);
				}
			}

			setState(3617);
			match(INCLUDING);
			setState(3618);
			match(DATA);
			}
			setState(3620);
			column_properties();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Records_per_block_clauseContext extends ParserRuleContext {
		public TerminalNode RECORDS_PER_BLOCK() { return getToken(PLSQLParser.RECORDS_PER_BLOCK, 0); }
		public TerminalNode MINIMIZE() { return getToken(PLSQLParser.MINIMIZE, 0); }
		public TerminalNode NOMINIMIZE() { return getToken(PLSQLParser.NOMINIMIZE, 0); }
		public Records_per_block_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_records_per_block_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterRecords_per_block_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitRecords_per_block_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitRecords_per_block_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Records_per_block_clauseContext records_per_block_clause() throws RecognitionException {
		Records_per_block_clauseContext _localctx = new Records_per_block_clauseContext(_ctx, getState());
		enterRule(_localctx, 294, RULE_records_per_block_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3623);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==MINIMIZE || _la==NOMINIMIZE) {
				{
				setState(3622);
				_la = _input.LA(1);
				if ( !(_la==MINIMIZE || _la==NOMINIMIZE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(3625);
			match(RECORDS_PER_BLOCK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_iot_clausesContext extends ParserRuleContext {
		public Index_org_table_clauseContext index_org_table_clause() {
			return getRuleContext(Index_org_table_clauseContext.class,0);
		}
		public Alter_overflow_clauseContext alter_overflow_clause() {
			return getRuleContext(Alter_overflow_clauseContext.class,0);
		}
		public Alter_mapping_table_clauseContext alter_mapping_table_clause() {
			return getRuleContext(Alter_mapping_table_clauseContext.class,0);
		}
		public TerminalNode COALESCE() { return getToken(PLSQLParser.COALESCE, 0); }
		public Alter_iot_clausesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_iot_clauses; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterAlter_iot_clauses(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitAlter_iot_clauses(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitAlter_iot_clauses(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_iot_clausesContext alter_iot_clauses() throws RecognitionException {
		Alter_iot_clausesContext _localctx = new Alter_iot_clausesContext(_ctx, getState());
		enterRule(_localctx, 296, RULE_alter_iot_clauses);
		try {
			setState(3631);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,488,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3627);
				index_org_table_clause();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3628);
				alter_overflow_clause();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3629);
				alter_mapping_table_clause();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3630);
				match(COALESCE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Index_org_table_clauseContext extends ParserRuleContext {
		public Mapping_table_clauseContext mapping_table_clause() {
			return getRuleContext(Mapping_table_clauseContext.class,0);
		}
		public TerminalNode PCTTHRESHOLD() { return getToken(PLSQLParser.PCTTHRESHOLD, 0); }
		public TerminalNode UNSIGNED_INTEGER() { return getToken(PLSQLParser.UNSIGNED_INTEGER, 0); }
		public Key_compressionContext key_compression() {
			return getRuleContext(Key_compressionContext.class,0);
		}
		public Index_org_overflow_clauseContext index_org_overflow_clause() {
			return getRuleContext(Index_org_overflow_clauseContext.class,0);
		}
		public Index_org_table_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_index_org_table_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterIndex_org_table_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitIndex_org_table_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitIndex_org_table_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Index_org_table_clauseContext index_org_table_clause() throws RecognitionException {
		Index_org_table_clauseContext _localctx = new Index_org_table_clauseContext(_ctx, getState());
		enterRule(_localctx, 298, RULE_index_org_table_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3637);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MAPPING:
			case NOMAPPING:
				{
				setState(3633);
				mapping_table_clause();
				}
				break;
			case PCTTHRESHOLD:
				{
				setState(3634);
				match(PCTTHRESHOLD);
				setState(3635);
				match(UNSIGNED_INTEGER);
				}
				break;
			case COMPRESS:
			case NOCOMPRESS:
				{
				setState(3636);
				key_compression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3640);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INCLUDING || _la==OVERFLOW) {
				{
				setState(3639);
				index_org_overflow_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Mapping_table_clauseContext extends ParserRuleContext {
		public TerminalNode MAPPING() { return getToken(PLSQLParser.MAPPING, 0); }
		public TerminalNode TABLE() { return getToken(PLSQLParser.TABLE, 0); }
		public TerminalNode NOMAPPING() { return getToken(PLSQLParser.NOMAPPING, 0); }
		public Mapping_table_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mapping_table_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterMapping_table_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitMapping_table_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitMapping_table_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Mapping_table_clauseContext mapping_table_clause() throws RecognitionException {
		Mapping_table_clauseContext _localctx = new Mapping_table_clauseContext(_ctx, getState());
		enterRule(_localctx, 300, RULE_mapping_table_clause);
		try {
			setState(3645);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MAPPING:
				enterOuterAlt(_localctx, 1);
				{
				setState(3642);
				match(MAPPING);
				setState(3643);
				match(TABLE);
				}
				break;
			case NOMAPPING:
				enterOuterAlt(_localctx, 2);
				{
				setState(3644);
				match(NOMAPPING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Index_org_overflow_clauseContext extends ParserRuleContext {
		public TerminalNode OVERFLOW() { return getToken(PLSQLParser.OVERFLOW, 0); }
		public TerminalNode INCLUDING() { return getToken(PLSQLParser.INCLUDING, 0); }
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public Segment_attributes_clauseContext segment_attributes_clause() {
			return getRuleContext(Segment_attributes_clauseContext.class,0);
		}
		public Index_org_overflow_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_index_org_overflow_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterIndex_org_overflow_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitIndex_org_overflow_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitIndex_org_overflow_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Index_org_overflow_clauseContext index_org_overflow_clause() throws RecognitionException {
		Index_org_overflow_clauseContext _localctx = new Index_org_overflow_clauseContext(_ctx, getState());
		enterRule(_localctx, 302, RULE_index_org_overflow_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3649);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INCLUDING) {
				{
				setState(3647);
				match(INCLUDING);
				setState(3648);
				column_name();
				}
			}

			setState(3651);
			match(OVERFLOW);
			setState(3653);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FILESYSTEM_LIKE_LOGGING || _la==INITRANS || _la==LOGGING || _la==NOLOGGING || _la==PCTFREE || _la==PCTUSED || _la==STORAGE || _la==TABLESPACE) {
				{
				setState(3652);
				segment_attributes_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_overflow_clauseContext extends ParserRuleContext {
		public Add_overflow_clauseContext add_overflow_clause() {
			return getRuleContext(Add_overflow_clauseContext.class,0);
		}
		public TerminalNode OVERFLOW() { return getToken(PLSQLParser.OVERFLOW, 0); }
		public List<Segment_attributes_clauseContext> segment_attributes_clause() {
			return getRuleContexts(Segment_attributes_clauseContext.class);
		}
		public Segment_attributes_clauseContext segment_attributes_clause(int i) {
			return getRuleContext(Segment_attributes_clauseContext.class,i);
		}
		public List<Allocate_extent_clauseContext> allocate_extent_clause() {
			return getRuleContexts(Allocate_extent_clauseContext.class);
		}
		public Allocate_extent_clauseContext allocate_extent_clause(int i) {
			return getRuleContext(Allocate_extent_clauseContext.class,i);
		}
		public List<Shrink_clauseContext> shrink_clause() {
			return getRuleContexts(Shrink_clauseContext.class);
		}
		public Shrink_clauseContext shrink_clause(int i) {
			return getRuleContext(Shrink_clauseContext.class,i);
		}
		public List<Deallocate_unused_clauseContext> deallocate_unused_clause() {
			return getRuleContexts(Deallocate_unused_clauseContext.class);
		}
		public Deallocate_unused_clauseContext deallocate_unused_clause(int i) {
			return getRuleContext(Deallocate_unused_clauseContext.class,i);
		}
		public Alter_overflow_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_overflow_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterAlter_overflow_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitAlter_overflow_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitAlter_overflow_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_overflow_clauseContext alter_overflow_clause() throws RecognitionException {
		Alter_overflow_clauseContext _localctx = new Alter_overflow_clauseContext(_ctx, getState());
		enterRule(_localctx, 304, RULE_alter_overflow_clause);
		int _la;
		try {
			setState(3665);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ADD:
				enterOuterAlt(_localctx, 1);
				{
				setState(3655);
				add_overflow_clause();
				}
				break;
			case OVERFLOW:
				enterOuterAlt(_localctx, 2);
				{
				setState(3656);
				match(OVERFLOW);
				setState(3661); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					setState(3661);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case FILESYSTEM_LIKE_LOGGING:
					case INITRANS:
					case LOGGING:
					case NOLOGGING:
					case PCTFREE:
					case PCTUSED:
					case STORAGE:
					case TABLESPACE:
						{
						setState(3657);
						segment_attributes_clause();
						}
						break;
					case ALLOCATE:
						{
						setState(3658);
						allocate_extent_clause();
						}
						break;
					case SHRINK:
						{
						setState(3659);
						shrink_clause();
						}
						break;
					case DEALLOCATE:
						{
						setState(3660);
						deallocate_unused_clause();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					setState(3663); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==ALLOCATE || _la==DEALLOCATE || _la==FILESYSTEM_LIKE_LOGGING || _la==INITRANS || _la==LOGGING || ((((_la - 324)) & ~0x3f) == 0 && ((1L << (_la - 324)) & ((1L << (NOLOGGING - 324)) | (1L << (PCTFREE - 324)) | (1L << (PCTUSED - 324)))) != 0) || ((((_la - 473)) & ~0x3f) == 0 && ((1L << (_la - 473)) & ((1L << (SHRINK - 473)) | (1L << (STORAGE - 473)) | (1L << (TABLESPACE - 473)))) != 0) );
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Add_overflow_clauseContext extends ParserRuleContext {
		public TerminalNode ADD() { return getToken(PLSQLParser.ADD, 0); }
		public TerminalNode OVERFLOW() { return getToken(PLSQLParser.OVERFLOW, 0); }
		public List<Segment_attributes_clauseContext> segment_attributes_clause() {
			return getRuleContexts(Segment_attributes_clauseContext.class);
		}
		public Segment_attributes_clauseContext segment_attributes_clause(int i) {
			return getRuleContext(Segment_attributes_clauseContext.class,i);
		}
		public TerminalNode LEFT_PAREN() { return getToken(PLSQLParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PLSQLParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> PARTITION() { return getTokens(PLSQLParser.PARTITION); }
		public TerminalNode PARTITION(int i) {
			return getToken(PLSQLParser.PARTITION, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLSQLParser.COMMA, i);
		}
		public Add_overflow_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_add_overflow_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterAdd_overflow_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitAdd_overflow_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitAdd_overflow_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Add_overflow_clauseContext add_overflow_clause() throws RecognitionException {
		Add_overflow_clauseContext _localctx = new Add_overflow_clauseContext(_ctx, getState());
		enterRule(_localctx, 306, RULE_add_overflow_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3667);
			match(ADD);
			setState(3668);
			match(OVERFLOW);
			setState(3670);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FILESYSTEM_LIKE_LOGGING || _la==INITRANS || _la==LOGGING || _la==NOLOGGING || _la==PCTFREE || _la==PCTUSED || _la==STORAGE || _la==TABLESPACE) {
				{
				setState(3669);
				segment_attributes_clause();
				}
			}

			setState(3685);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,501,_ctx) ) {
			case 1:
				{
				setState(3672);
				match(LEFT_PAREN);
				setState(3680); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(3674);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(3673);
						match(COMMA);
						}
					}

					setState(3676);
					match(PARTITION);
					setState(3678);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==FILESYSTEM_LIKE_LOGGING || _la==INITRANS || _la==LOGGING || _la==NOLOGGING || _la==PCTFREE || _la==PCTUSED || _la==STORAGE || _la==TABLESPACE) {
						{
						setState(3677);
						segment_attributes_clause();
						}
					}

					}
					}
					setState(3682); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==PARTITION || _la==COMMA );
				setState(3684);
				match(RIGHT_PAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Shrink_clauseContext extends ParserRuleContext {
		public TerminalNode SHRINK() { return getToken(PLSQLParser.SHRINK, 0); }
		public TerminalNode SPACE_KEYWORD() { return getToken(PLSQLParser.SPACE_KEYWORD, 0); }
		public TerminalNode COMPACT() { return getToken(PLSQLParser.COMPACT, 0); }
		public TerminalNode CASCADE() { return getToken(PLSQLParser.CASCADE, 0); }
		public Shrink_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_shrink_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterShrink_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitShrink_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitShrink_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Shrink_clauseContext shrink_clause() throws RecognitionException {
		Shrink_clauseContext _localctx = new Shrink_clauseContext(_ctx, getState());
		enterRule(_localctx, 308, RULE_shrink_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3687);
			match(SHRINK);
			setState(3688);
			match(SPACE_KEYWORD);
			setState(3690);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMPACT) {
				{
				setState(3689);
				match(COMPACT);
				}
			}

			setState(3693);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE) {
				{
				setState(3692);
				match(CASCADE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_mapping_table_clauseContext extends ParserRuleContext {
		public TerminalNode MAPPING() { return getToken(PLSQLParser.MAPPING, 0); }
		public TerminalNode TABLE() { return getToken(PLSQLParser.TABLE, 0); }
		public Allocate_extent_clauseContext allocate_extent_clause() {
			return getRuleContext(Allocate_extent_clauseContext.class,0);
		}
		public Deallocate_unused_clauseContext deallocate_unused_clause() {
			return getRuleContext(Deallocate_unused_clauseContext.class,0);
		}
		public Alter_mapping_table_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_mapping_table_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterAlter_mapping_table_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitAlter_mapping_table_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitAlter_mapping_table_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_mapping_table_clauseContext alter_mapping_table_clause() throws RecognitionException {
		Alter_mapping_table_clauseContext _localctx = new Alter_mapping_table_clauseContext(_ctx, getState());
		enterRule(_localctx, 310, RULE_alter_mapping_table_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3695);
			match(MAPPING);
			setState(3696);
			match(TABLE);
			setState(3699);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALLOCATE:
				{
				setState(3697);
				allocate_extent_clause();
				}
				break;
			case DEALLOCATE:
				{
				setState(3698);
				deallocate_unused_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Constraint_clausesContext extends ParserRuleContext {
		public TerminalNode ADD() { return getToken(PLSQLParser.ADD, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PLSQLParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PLSQLParser.RIGHT_PAREN, 0); }
		public Out_of_line_ref_constraintContext out_of_line_ref_constraint() {
			return getRuleContext(Out_of_line_ref_constraintContext.class,0);
		}
		public List<Out_of_line_constraintContext> out_of_line_constraint() {
			return getRuleContexts(Out_of_line_constraintContext.class);
		}
		public Out_of_line_constraintContext out_of_line_constraint(int i) {
			return getRuleContext(Out_of_line_constraintContext.class,i);
		}
		public TerminalNode MODIFY() { return getToken(PLSQLParser.MODIFY, 0); }
		public Constraint_stateContext constraint_state() {
			return getRuleContext(Constraint_stateContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(PLSQLParser.CONSTRAINT, 0); }
		public Constraint_nameContext constraint_name() {
			return getRuleContext(Constraint_nameContext.class,0);
		}
		public TerminalNode PRIMARY() { return getToken(PLSQLParser.PRIMARY, 0); }
		public TerminalNode KEY() { return getToken(PLSQLParser.KEY, 0); }
		public TerminalNode UNIQUE() { return getToken(PLSQLParser.UNIQUE, 0); }
		public Paren_column_listContext paren_column_list() {
			return getRuleContext(Paren_column_listContext.class,0);
		}
		public TerminalNode CASCADE() { return getToken(PLSQLParser.CASCADE, 0); }
		public TerminalNode RENAME() { return getToken(PLSQLParser.RENAME, 0); }
		public Old_constraint_nameContext old_constraint_name() {
			return getRuleContext(Old_constraint_nameContext.class,0);
		}
		public TerminalNode TO() { return getToken(PLSQLParser.TO, 0); }
		public New_constraint_nameContext new_constraint_name() {
			return getRuleContext(New_constraint_nameContext.class,0);
		}
		public List<Drop_constraint_clauseContext> drop_constraint_clause() {
			return getRuleContexts(Drop_constraint_clauseContext.class);
		}
		public Drop_constraint_clauseContext drop_constraint_clause(int i) {
			return getRuleContext(Drop_constraint_clauseContext.class,i);
		}
		public Constraint_clausesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraint_clauses; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterConstraint_clauses(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitConstraint_clauses(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitConstraint_clauses(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Constraint_clausesContext constraint_clauses() throws RecognitionException {
		Constraint_clausesContext _localctx = new Constraint_clausesContext(_ctx, getState());
		enterRule(_localctx, 312, RULE_constraint_clauses);
		int _la;
		try {
			int _alt;
			setState(3747);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,512,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3701);
				match(ADD);
				setState(3702);
				match(LEFT_PAREN);
				setState(3710);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,506,_ctx) ) {
				case 1:
					{
					setState(3706);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==CHECK || _la==CONSTRAINT || _la==FOREIGN || _la==PRIMARY || _la==UNIQUE) {
						{
						{
						setState(3703);
						out_of_line_constraint();
						}
						}
						setState(3708);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
					break;
				case 2:
					{
					setState(3709);
					out_of_line_ref_constraint();
					}
					break;
				}
				setState(3712);
				match(RIGHT_PAREN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3713);
				match(ADD);
				setState(3721);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,508,_ctx) ) {
				case 1:
					{
					setState(3717);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==CHECK || _la==CONSTRAINT || _la==FOREIGN || _la==PRIMARY || _la==UNIQUE) {
						{
						{
						setState(3714);
						out_of_line_constraint();
						}
						}
						setState(3719);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
					break;
				case 2:
					{
					setState(3720);
					out_of_line_ref_constraint();
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3723);
				match(MODIFY);
				setState(3730);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CONSTRAINT:
					{
					setState(3724);
					match(CONSTRAINT);
					setState(3725);
					constraint_name();
					}
					break;
				case PRIMARY:
					{
					setState(3726);
					match(PRIMARY);
					setState(3727);
					match(KEY);
					}
					break;
				case UNIQUE:
					{
					setState(3728);
					match(UNIQUE);
					setState(3729);
					paren_column_list();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(3732);
				constraint_state();
				setState(3734);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CASCADE) {
					{
					setState(3733);
					match(CASCADE);
					}
				}

				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3736);
				match(RENAME);
				setState(3737);
				match(CONSTRAINT);
				setState(3738);
				old_constraint_name();
				setState(3739);
				match(TO);
				setState(3740);
				new_constraint_name();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3743); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(3742);
						drop_constraint_clause();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(3745); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,511,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Old_constraint_nameContext extends ParserRuleContext {
		public Constraint_nameContext constraint_name() {
			return getRuleContext(Constraint_nameContext.class,0);
		}
		public Old_constraint_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_old_constraint_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterOld_constraint_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitOld_constraint_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitOld_constraint_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Old_constraint_nameContext old_constraint_name() throws RecognitionException {
		Old_constraint_nameContext _localctx = new Old_constraint_nameContext(_ctx, getState());
		enterRule(_localctx, 314, RULE_old_constraint_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3749);
			constraint_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class New_constraint_nameContext extends ParserRuleContext {
		public Constraint_nameContext constraint_name() {
			return getRuleContext(Constraint_nameContext.class,0);
		}
		public New_constraint_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_new_constraint_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterNew_constraint_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitNew_constraint_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitNew_constraint_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final New_constraint_nameContext new_constraint_name() throws RecognitionException {
		New_constraint_nameContext _localctx = new New_constraint_nameContext(_ctx, getState());
		enterRule(_localctx, 316, RULE_new_constraint_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3751);
			constraint_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_constraint_clauseContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PLSQLParser.DROP, 0); }
		public Drop_primary_key_or_unique_or_generic_clauseContext drop_primary_key_or_unique_or_generic_clause() {
			return getRuleContext(Drop_primary_key_or_unique_or_generic_clauseContext.class,0);
		}
		public Drop_constraint_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_constraint_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterDrop_constraint_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitDrop_constraint_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitDrop_constraint_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_constraint_clauseContext drop_constraint_clause() throws RecognitionException {
		Drop_constraint_clauseContext _localctx = new Drop_constraint_clauseContext(_ctx, getState());
		enterRule(_localctx, 318, RULE_drop_constraint_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3753);
			match(DROP);
			setState(3754);
			drop_primary_key_or_unique_or_generic_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_primary_key_or_unique_or_generic_clauseContext extends ParserRuleContext {
		public TerminalNode PRIMARY() { return getToken(PLSQLParser.PRIMARY, 0); }
		public TerminalNode KEY() { return getToken(PLSQLParser.KEY, 0); }
		public TerminalNode UNIQUE() { return getToken(PLSQLParser.UNIQUE, 0); }
		public Paren_column_listContext paren_column_list() {
			return getRuleContext(Paren_column_listContext.class,0);
		}
		public TerminalNode CASCADE() { return getToken(PLSQLParser.CASCADE, 0); }
		public TerminalNode KEEP() { return getToken(PLSQLParser.KEEP, 0); }
		public TerminalNode DROP() { return getToken(PLSQLParser.DROP, 0); }
		public TerminalNode CONSTRAINT() { return getToken(PLSQLParser.CONSTRAINT, 0); }
		public Constraint_nameContext constraint_name() {
			return getRuleContext(Constraint_nameContext.class,0);
		}
		public Drop_primary_key_or_unique_or_generic_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_primary_key_or_unique_or_generic_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterDrop_primary_key_or_unique_or_generic_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitDrop_primary_key_or_unique_or_generic_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitDrop_primary_key_or_unique_or_generic_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_primary_key_or_unique_or_generic_clauseContext drop_primary_key_or_unique_or_generic_clause() throws RecognitionException {
		Drop_primary_key_or_unique_or_generic_clauseContext _localctx = new Drop_primary_key_or_unique_or_generic_clauseContext(_ctx, getState());
		enterRule(_localctx, 320, RULE_drop_primary_key_or_unique_or_generic_clause);
		int _la;
		try {
			setState(3773);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PRIMARY:
			case UNIQUE:
				enterOuterAlt(_localctx, 1);
				{
				setState(3760);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case PRIMARY:
					{
					setState(3756);
					match(PRIMARY);
					setState(3757);
					match(KEY);
					}
					break;
				case UNIQUE:
					{
					setState(3758);
					match(UNIQUE);
					setState(3759);
					paren_column_list();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(3763);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CASCADE) {
					{
					setState(3762);
					match(CASCADE);
					}
				}

				setState(3766);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,515,_ctx) ) {
				case 1:
					{
					setState(3765);
					_la = _input.LA(1);
					if ( !(_la==DROP || _la==KEEP) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				}
				break;
			case CONSTRAINT:
				enterOuterAlt(_localctx, 2);
				{
				setState(3768);
				match(CONSTRAINT);
				setState(3769);
				constraint_name();
				setState(3771);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CASCADE) {
					{
					setState(3770);
					match(CASCADE);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_clausesContext extends ParserRuleContext {
		public Add_modify_drop_column_clausesContext add_modify_drop_column_clauses() {
			return getRuleContext(Add_modify_drop_column_clausesContext.class,0);
		}
		public Rename_column_clauseContext rename_column_clause() {
			return getRuleContext(Rename_column_clauseContext.class,0);
		}
		public Modify_collection_retrievalContext modify_collection_retrieval() {
			return getRuleContext(Modify_collection_retrievalContext.class,0);
		}
		public Modify_lob_storage_clauseContext modify_lob_storage_clause() {
			return getRuleContext(Modify_lob_storage_clauseContext.class,0);
		}
		public Column_clausesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_clauses; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterColumn_clauses(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitColumn_clauses(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitColumn_clauses(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Column_clausesContext column_clauses() throws RecognitionException {
		Column_clausesContext _localctx = new Column_clausesContext(_ctx, getState());
		enterRule(_localctx, 322, RULE_column_clauses);
		try {
			setState(3779);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,518,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3775);
				add_modify_drop_column_clauses();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3776);
				rename_column_clause();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3777);
				modify_collection_retrieval();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3778);
				modify_lob_storage_clause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Add_modify_drop_column_clausesContext extends ParserRuleContext {
		public List<Add_column_clauseContext> add_column_clause() {
			return getRuleContexts(Add_column_clauseContext.class);
		}
		public Add_column_clauseContext add_column_clause(int i) {
			return getRuleContext(Add_column_clauseContext.class,i);
		}
		public List<Modify_column_clausesContext> modify_column_clauses() {
			return getRuleContexts(Modify_column_clausesContext.class);
		}
		public Modify_column_clausesContext modify_column_clauses(int i) {
			return getRuleContext(Modify_column_clausesContext.class,i);
		}
		public List<Alter_column_clauseContext> alter_column_clause() {
			return getRuleContexts(Alter_column_clauseContext.class);
		}
		public Alter_column_clauseContext alter_column_clause(int i) {
			return getRuleContext(Alter_column_clauseContext.class,i);
		}
		public List<Drop_column_clauseContext> drop_column_clause() {
			return getRuleContexts(Drop_column_clauseContext.class);
		}
		public Drop_column_clauseContext drop_column_clause(int i) {
			return getRuleContext(Drop_column_clauseContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLSQLParser.COMMA, i);
		}
		public Add_modify_drop_column_clausesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_add_modify_drop_column_clauses; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterAdd_modify_drop_column_clauses(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitAdd_modify_drop_column_clauses(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitAdd_modify_drop_column_clauses(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Add_modify_drop_column_clausesContext add_modify_drop_column_clauses() throws RecognitionException {
		Add_modify_drop_column_clausesContext _localctx = new Add_modify_drop_column_clausesContext(_ctx, getState());
		enterRule(_localctx, 324, RULE_add_modify_drop_column_clauses);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3792); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					setState(3792);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case ADD:
						{
						setState(3781);
						add_column_clause();
						}
						break;
					case MODIFY:
						{
						setState(3782);
						modify_column_clauses();
						}
						break;
					case ALTER:
						{
						setState(3783);
						alter_column_clause();
						}
						break;
					case DROP:
					case SET:
						{
						setState(3784);
						drop_column_clause();
						setState(3789);
						_errHandler.sync(this);
						_la = _input.LA(1);
						while (_la==COMMA) {
							{
							{
							setState(3785);
							match(COMMA);
							setState(3786);
							drop_column_clause();
							}
							}
							setState(3791);
							_errHandler.sync(this);
							_la = _input.LA(1);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(3794); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,521,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Add_column_clauseContext extends ParserRuleContext {
		public TerminalNode ADD() { return getToken(PLSQLParser.ADD, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PLSQLParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PLSQLParser.RIGHT_PAREN, 0); }
		public TerminalNode COLUMN() { return getToken(PLSQLParser.COLUMN, 0); }
		public Column_propertiesContext column_properties() {
			return getRuleContext(Column_propertiesContext.class,0);
		}
		public List<Column_definitionContext> column_definition() {
			return getRuleContexts(Column_definitionContext.class);
		}
		public Column_definitionContext column_definition(int i) {
			return getRuleContext(Column_definitionContext.class,i);
		}
		public List<Virtual_column_definitionContext> virtual_column_definition() {
			return getRuleContexts(Virtual_column_definitionContext.class);
		}
		public Virtual_column_definitionContext virtual_column_definition(int i) {
			return getRuleContext(Virtual_column_definitionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLSQLParser.COMMA, i);
		}
		public Add_column_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_add_column_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterAdd_column_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitAdd_column_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitAdd_column_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Add_column_clauseContext add_column_clause() throws RecognitionException {
		Add_column_clauseContext _localctx = new Add_column_clauseContext(_ctx, getState());
		enterRule(_localctx, 326, RULE_add_column_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3796);
			match(ADD);
			setState(3798);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COLUMN) {
				{
				setState(3797);
				match(COLUMN);
				}
			}

			setState(3819);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LEFT_PAREN:
				{
				setState(3800);
				match(LEFT_PAREN);
				setState(3809); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					setState(3809);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,525,_ctx) ) {
					case 1:
						{
						setState(3802);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(3801);
							match(COMMA);
							}
						}

						setState(3804);
						column_definition();
						}
						break;
					case 2:
						{
						setState(3806);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(3805);
							match(COMMA);
							}
						}

						setState(3808);
						virtual_column_definition();
						}
						break;
					}
					}
					setState(3811); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BUILD) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (CHR - 65)) | (1L << (CLOB - 65)) | (1L << (CLOSE - 65)) | (1L << (CLUSTER - 65)) | (1L << (COALESCE - 65)) | (1L << (COLLECT - 65)) | (1L << (COLUMNS - 65)) | (1L << (COMMENT - 65)) | (1L << (COMMIT - 65)) | (1L << (COMMITTED - 65)) | (1L << (COMPATIBILITY - 65)) | (1L << (COMPILE - 65)) | (1L << (COMPLETE - 65)) | (1L << (COMPOUND - 65)) | (1L << (CONCAT - 65)) | (1L << (CONSTANT - 65)) | (1L << (CONSTRAINT - 65)) | (1L << (CONSTRAINTS - 65)) | (1L << (CONSTRUCTOR - 65)) | (1L << (CONTENT - 65)) | (1L << (CONTEXT - 65)) | (1L << (CONTINUE - 65)) | (1L << (CONVERT - 65)) | (1L << (CORRUPT_XID - 65)) | (1L << (CORRUPT_XID_ALL - 65)) | (1L << (COST - 65)) | (1L << (COUNT - 65)) | (1L << (CROSS - 65)) | (1L << (CUBE - 65)) | (1L << (CURRENT_USER - 65)) | (1L << (CURSOR - 65)) | (1L << (CUSTOMDATUM - 65)) | (1L << (CYCLE - 65)) | (1L << (DATA - 65)) | (1L << (DATABASE - 65)) | (1L << (DATE - 65)) | (1L << (DAY - 65)) | (1L << (DB_ROLE_CHANGE - 65)) | (1L << (DBTIMEZONE - 65)) | (1L << (DDL - 65)) | (1L << (DEBUG - 65)) | (1L << (DEC - 65)) | (1L << (DECIMAL - 65)) | (1L << (DECODE - 65)) | (1L << (DECOMPOSE - 65)) | (1L << (DECREMENT - 65)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DEMAND - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (EDITIONING - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENFORCED - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FAST - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)) | (1L << (FOLLOWING - 129)) | (1L << (FOLLOWS - 129)) | (1L << (FORALL - 129)) | (1L << (FORCE - 129)))) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & ((1L << (FULL - 197)) | (1L << (FUNCTION - 197)) | (1L << (GROUPING - 197)) | (1L << (HASH - 197)) | (1L << (HIDE - 197)) | (1L << (HOUR - 197)) | (1L << (IGNORE - 197)) | (1L << (IMMEDIATE - 197)) | (1L << (INCLUDE - 197)) | (1L << (INCLUDING - 197)) | (1L << (INCREMENT - 197)) | (1L << (INDENT - 197)) | (1L << (INDEXED - 197)) | (1L << (INDICATOR - 197)) | (1L << (INDICES - 197)) | (1L << (INFINITE - 197)) | (1L << (INLINE - 197)) | (1L << (INNER - 197)) | (1L << (INOUT - 197)) | (1L << (INSTANTIABLE - 197)) | (1L << (INSTEAD - 197)) | (1L << (INT - 197)) | (1L << (INTEGER - 197)) | (1L << (INTERVAL - 197)) | (1L << (INVALIDATE - 197)) | (1L << (ISOLATION - 197)) | (1L << (ITERATE - 197)) | (1L << (JAVA - 197)) | (1L << (JOIN - 197)) | (1L << (KEEP - 197)) | (1L << (LANGUAGE - 197)) | (1L << (LAST - 197)) | (1L << (LAST_VALUE - 197)) | (1L << (LEADING - 197)) | (1L << (LEFT - 197)) | (1L << (LEVEL - 197)))) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & ((1L << (LIBRARY - 261)) | (1L << (LIKE2 - 261)) | (1L << (LIKE4 - 261)) | (1L << (LIKEC - 261)) | (1L << (LIMIT - 261)) | (1L << (LIST - 261)) | (1L << (LOCAL - 261)) | (1L << (LOCKED - 261)) | (1L << (LOG - 261)) | (1L << (LOGOFF - 261)) | (1L << (LOGON - 261)) | (1L << (LONG - 261)) | (1L << (LOOP - 261)) | (1L << (MAIN - 261)) | (1L << (MAP - 261)) | (1L << (MASTER - 261)) | (1L << (MATCHED - 261)) | (1L << (MAXVALUE - 261)) | (1L << (MEASURES - 261)) | (1L << (MEMBER - 261)) | (1L << (MERGE - 261)) | (1L << (MINUTE - 261)) | (1L << (MINVALUE - 261)) | (1L << (MLSLABEL - 261)) | (1L << (MODEL - 261)) | (1L << (MODIFY - 261)) | (1L << (MONTH - 261)) | (1L << (MULTISET - 261)) | (1L << (NAME - 261)) | (1L << (NAN - 261)) | (1L << (NATURAL - 261)) | (1L << (NATURALN - 261)) | (1L << (NAV - 261)) | (1L << (NCHAR - 261)) | (1L << (NCHAR_CS - 261)) | (1L << (NCLOB - 261)) | (1L << (NESTED - 261)) | (1L << (NEVER - 261)) | (1L << (NEW - 261)) | (1L << (NO - 261)) | (1L << (NOAUDIT - 261)) | (1L << (NOCOPY - 261)) | (1L << (NOCYCLE - 261)) | (1L << (NOENTITYESCAPING - 261)))) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & ((1L << (NONE - 329)) | (1L << (NOSCHEMACHECK - 329)) | (1L << (NVL - 329)) | (1L << (NULLS - 329)) | (1L << (NUMBER - 329)) | (1L << (NUMERIC - 329)) | (1L << (NVARCHAR2 - 329)) | (1L << (MATERIALIZED - 329)) | (1L << (OBJECT - 329)) | (1L << (OFF - 329)) | (1L << (OID - 329)) | (1L << (OLD - 329)) | (1L << (ONLY - 329)) | (1L << (OPEN - 329)) | (1L << (ORADATA - 329)) | (1L << (ORDINALITY - 329)) | (1L << (OSERROR - 329)) | (1L << (OUT - 329)) | (1L << (OUTER - 329)) | (1L << (OVER - 329)) | (1L << (OVERRIDING - 329)) | (1L << (PACKAGE - 329)) | (1L << (PARALLEL_ENABLE - 329)) | (1L << (PARAMETERS - 329)) | (1L << (PARENT - 329)) | (1L << (PARTITION - 329)) | (1L << (PASSING - 329)) | (1L << (PATH - 329)) | (1L << (PIPELINED - 329)) | (1L << (PLAN - 329)) | (1L << (PLS_INTEGER - 329)) | (1L << (POSITIVE - 329)) | (1L << (POSITIVEN - 329)) | (1L << (PRAGMA - 329)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (PREBUILT - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)) | (1L << (PRESENT - 393)) | (1L << (PUBLIC - 393)) | (1L << (RAISE - 393)) | (1L << (RANGE - 393)) | (1L << (RAW - 393)) | (1L << (READ - 393)) | (1L << (REAL - 393)) | (1L << (RECORD - 393)) | (1L << (REDUCED - 393)) | (1L << (REF - 393)) | (1L << (REFERENCE - 393)) | (1L << (REFERENCING - 393)) | (1L << (REFRESH - 393)) | (1L << (REJECT - 393)) | (1L << (RELIES_ON - 393)) | (1L << (RENAME - 393)) | (1L << (REPLACE - 393)) | (1L << (RESPECT - 393)) | (1L << (RESTRICT_REFERENCES - 393)) | (1L << (RESULT - 393)) | (1L << (RESULT_CACHE - 393)) | (1L << (RETURN - 393)) | (1L << (RETURNING - 393)) | (1L << (REUSE - 393)) | (1L << (REVERSE - 393)) | (1L << (REWRITE - 393)) | (1L << (RIGHT - 393)) | (1L << (ROLE - 393)) | (1L << (ROLLBACK - 393)) | (1L << (ROLLUP - 393)) | (1L << (ROW - 393)) | (1L << (ROWID - 393)) | (1L << (ROWS - 393)) | (1L << (RULES - 393)) | (1L << (SAMPLE - 393)) | (1L << (SAVE - 393)) | (1L << (SAVEPOINT - 393)) | (1L << (SCHEMA - 393)) | (1L << (SCHEMACHECK - 393)) | (1L << (SCN - 393)) | (1L << (SECOND - 393)))) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & ((1L << (SEED - 458)) | (1L << (SEGMENT - 458)) | (1L << (SELF - 458)) | (1L << (SEQUENTIAL - 458)) | (1L << (SERIALIZABLE - 458)) | (1L << (SERIALLY_REUSABLE - 458)) | (1L << (SERVERERROR - 458)) | (1L << (SESSIONTIMEZONE - 458)) | (1L << (SET - 458)) | (1L << (SETS - 458)) | (1L << (SETTINGS - 458)) | (1L << (SHOW - 458)) | (1L << (SHUTDOWN - 458)) | (1L << (SIBLINGS - 458)) | (1L << (SIGNTYPE - 458)) | (1L << (SIMPLE_INTEGER - 458)) | (1L << (SINGLE - 458)) | (1L << (SIZE - 458)) | (1L << (SKIP_ - 458)) | (1L << (SMALLINT - 458)) | (1L << (SNAPSHOT - 458)) | (1L << (SOME - 458)) | (1L << (SPECIFICATION - 458)) | (1L << (SQLDATA - 458)) | (1L << (SQLERROR - 458)) | (1L << (STANDALONE - 458)) | (1L << (STARTUP - 458)) | (1L << (STATEMENT - 458)) | (1L << (STATEMENT_ID - 458)) | (1L << (STATIC - 458)) | (1L << (STATISTICS - 458)) | (1L << (STRING - 458)) | (1L << (SUBMULTISET - 458)) | (1L << (SUBPARTITION - 458)) | (1L << (SUBSTITUTABLE - 458)) | (1L << (SUBSTRING - 458)) | (1L << (SUBTYPE - 458)) | (1L << (SUCCESS - 458)) | (1L << (SUSPEND - 458)) | (1L << (TABLES - 458)) | (1L << (TIME - 458)) | (1L << (TIMESTAMP - 458)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 458)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 458)) | (1L << (TIMESTAMP_UNCONSTRAINED - 458)))) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & ((1L << (TIMEZONE_ABBR - 522)) | (1L << (TIMEZONE_HOUR - 522)) | (1L << (TIMEZONE_MINUTE - 522)) | (1L << (TIMEZONE_REGION - 522)) | (1L << (TO_CHAR - 522)) | (1L << (TO_DATE - 522)) | (1L << (TRAILING - 522)) | (1L << (TRANSACTION - 522)) | (1L << (TRANSLATE - 522)) | (1L << (TREAT - 522)) | (1L << (TRIGGER - 522)) | (1L << (TRIM - 522)) | (1L << (TRUNCATE - 522)) | (1L << (TRUSTED - 522)) | (1L << (TYPE - 522)) | (1L << (UNBOUNDED - 522)) | (1L << (UNDER - 522)) | (1L << (UNLIMITED - 522)) | (1L << (UNTIL - 522)) | (1L << (UPDATED - 522)) | (1L << (UPSERT - 522)) | (1L << (UROWID - 522)) | (1L << (USE - 522)) | (1L << (VALIDATE - 522)) | (1L << (VALUE - 522)) | (1L << (VARCHAR - 522)) | (1L << (VARCHAR2 - 522)) | (1L << (VARIABLE - 522)) | (1L << (VARRAY - 522)) | (1L << (VARYING - 522)) | (1L << (VERBOSE - 522)) | (1L << (VERSION - 522)) | (1L << (VERSIONS - 522)) | (1L << (VIEW - 522)) | (1L << (WAIT - 522)) | (1L << (WARNING - 522)) | (1L << (WELLFORMED - 522)) | (1L << (WHENEVER - 522)) | (1L << (WHILE - 522)) | (1L << (WITHOUT - 522)) | (1L << (WITHIN - 522)) | (1L << (WORK - 522)) | (1L << (WRITE - 522)) | (1L << (XML - 522)) | (1L << (XMLAGG - 522)) | (1L << (XMLATTRIBUTES - 522)))) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & ((1L << (XMLCAST - 586)) | (1L << (XMLCOLATTVAL - 586)) | (1L << (XMLELEMENT - 586)) | (1L << (XMLEXISTS - 586)) | (1L << (XMLFOREST - 586)) | (1L << (XMLNAMESPACES - 586)) | (1L << (XMLPARSE - 586)) | (1L << (XMLPI - 586)) | (1L << (XMLQUERY - 586)) | (1L << (XMLROOT - 586)) | (1L << (XMLSERIALIZE - 586)) | (1L << (XMLTABLE - 586)) | (1L << (YEAR - 586)) | (1L << (YES - 586)) | (1L << (YMINTERVAL_UNCONSTRAINED - 586)) | (1L << (ZONE - 586)) | (1L << (PREDICTION - 586)) | (1L << (PREDICTION_BOUNDS - 586)) | (1L << (PREDICTION_COST - 586)) | (1L << (PREDICTION_DETAILS - 586)) | (1L << (PREDICTION_PROBABILITY - 586)) | (1L << (PREDICTION_SET - 586)) | (1L << (CUME_DIST - 586)) | (1L << (DENSE_RANK - 586)) | (1L << (LISTAGG - 586)) | (1L << (PERCENT_RANK - 586)) | (1L << (PERCENTILE_CONT - 586)) | (1L << (PERCENTILE_DISC - 586)) | (1L << (RANK - 586)) | (1L << (AVG - 586)) | (1L << (CORR - 586)) | (1L << (LAG - 586)) | (1L << (LEAD - 586)) | (1L << (MAX - 586)) | (1L << (MEDIAN - 586)) | (1L << (MIN - 586)) | (1L << (NTILE - 586)) | (1L << (RATIO_TO_REPORT - 586)) | (1L << (ROW_NUMBER - 586)) | (1L << (SUM - 586)) | (1L << (VARIANCE - 586)) | (1L << (REGR_ - 586)) | (1L << (STDDEV - 586)) | (1L << (VAR_ - 586)) | (1L << (COVAR_ - 586)) | (1L << (DELIMITED_ID - 586)))) != 0) || _la==COMMA || _la==REGULAR_ID );
				setState(3813);
				match(RIGHT_PAREN);
				}
				break;
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BUILD:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPLETE:
			case COMPOUND:
			case CONCAT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECODE:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DEMAND:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case EDITIONING:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENFORCED:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FAST:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LIST:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MASTER:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEVER:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NVL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case MATERIALIZED:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PREBUILT:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PUBLIC:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REDUCED:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REFRESH:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case REWRITE:
			case RIGHT:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SIZE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBSTRING:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TABLES:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TO_CHAR:
			case TO_DATE:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TRUSTED:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERBOSE:
			case VERSION:
			case VERSIONS:
			case VIEW:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHOUT:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case REGULAR_ID:
				{
				setState(3817);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,527,_ctx) ) {
				case 1:
					{
					setState(3815);
					column_definition();
					}
					break;
				case 2:
					{
					setState(3816);
					virtual_column_definition();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3822);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COLUMN || _la==LOB || _la==NESTED || _la==VARRAY || _la==XMLTYPE) {
				{
				setState(3821);
				column_properties();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Modify_column_clausesContext extends ParserRuleContext {
		public TerminalNode MODIFY() { return getToken(PLSQLParser.MODIFY, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PLSQLParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PLSQLParser.RIGHT_PAREN, 0); }
		public List<Modify_col_propertiesContext> modify_col_properties() {
			return getRuleContexts(Modify_col_propertiesContext.class);
		}
		public Modify_col_propertiesContext modify_col_properties(int i) {
			return getRuleContext(Modify_col_propertiesContext.class,i);
		}
		public Modify_col_substitutableContext modify_col_substitutable() {
			return getRuleContext(Modify_col_substitutableContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLSQLParser.COMMA, i);
		}
		public Modify_column_clausesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_modify_column_clauses; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterModify_column_clauses(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitModify_column_clauses(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitModify_column_clauses(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Modify_column_clausesContext modify_column_clauses() throws RecognitionException {
		Modify_column_clausesContext _localctx = new Modify_column_clausesContext(_ctx, getState());
		enterRule(_localctx, 328, RULE_modify_column_clauses);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3824);
			match(MODIFY);
			setState(3838);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LEFT_PAREN:
				{
				setState(3825);
				match(LEFT_PAREN);
				setState(3830); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(3827);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(3826);
						match(COMMA);
						}
					}

					setState(3829);
					modify_col_properties();
					}
					}
					setState(3832); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BUILD) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (CHR - 65)) | (1L << (CLOB - 65)) | (1L << (CLOSE - 65)) | (1L << (CLUSTER - 65)) | (1L << (COALESCE - 65)) | (1L << (COLLECT - 65)) | (1L << (COLUMNS - 65)) | (1L << (COMMENT - 65)) | (1L << (COMMIT - 65)) | (1L << (COMMITTED - 65)) | (1L << (COMPATIBILITY - 65)) | (1L << (COMPILE - 65)) | (1L << (COMPLETE - 65)) | (1L << (COMPOUND - 65)) | (1L << (CONCAT - 65)) | (1L << (CONSTANT - 65)) | (1L << (CONSTRAINT - 65)) | (1L << (CONSTRAINTS - 65)) | (1L << (CONSTRUCTOR - 65)) | (1L << (CONTENT - 65)) | (1L << (CONTEXT - 65)) | (1L << (CONTINUE - 65)) | (1L << (CONVERT - 65)) | (1L << (CORRUPT_XID - 65)) | (1L << (CORRUPT_XID_ALL - 65)) | (1L << (COST - 65)) | (1L << (COUNT - 65)) | (1L << (CROSS - 65)) | (1L << (CUBE - 65)) | (1L << (CURRENT_USER - 65)) | (1L << (CURSOR - 65)) | (1L << (CUSTOMDATUM - 65)) | (1L << (CYCLE - 65)) | (1L << (DATA - 65)) | (1L << (DATABASE - 65)) | (1L << (DATE - 65)) | (1L << (DAY - 65)) | (1L << (DB_ROLE_CHANGE - 65)) | (1L << (DBTIMEZONE - 65)) | (1L << (DDL - 65)) | (1L << (DEBUG - 65)) | (1L << (DEC - 65)) | (1L << (DECIMAL - 65)) | (1L << (DECODE - 65)) | (1L << (DECOMPOSE - 65)) | (1L << (DECREMENT - 65)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DEMAND - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (EDITIONING - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENFORCED - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FAST - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)) | (1L << (FOLLOWING - 129)) | (1L << (FOLLOWS - 129)) | (1L << (FORALL - 129)) | (1L << (FORCE - 129)))) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & ((1L << (FULL - 197)) | (1L << (FUNCTION - 197)) | (1L << (GROUPING - 197)) | (1L << (HASH - 197)) | (1L << (HIDE - 197)) | (1L << (HOUR - 197)) | (1L << (IGNORE - 197)) | (1L << (IMMEDIATE - 197)) | (1L << (INCLUDE - 197)) | (1L << (INCLUDING - 197)) | (1L << (INCREMENT - 197)) | (1L << (INDENT - 197)) | (1L << (INDEXED - 197)) | (1L << (INDICATOR - 197)) | (1L << (INDICES - 197)) | (1L << (INFINITE - 197)) | (1L << (INLINE - 197)) | (1L << (INNER - 197)) | (1L << (INOUT - 197)) | (1L << (INSTANTIABLE - 197)) | (1L << (INSTEAD - 197)) | (1L << (INT - 197)) | (1L << (INTEGER - 197)) | (1L << (INTERVAL - 197)) | (1L << (INVALIDATE - 197)) | (1L << (ISOLATION - 197)) | (1L << (ITERATE - 197)) | (1L << (JAVA - 197)) | (1L << (JOIN - 197)) | (1L << (KEEP - 197)) | (1L << (LANGUAGE - 197)) | (1L << (LAST - 197)) | (1L << (LAST_VALUE - 197)) | (1L << (LEADING - 197)) | (1L << (LEFT - 197)) | (1L << (LEVEL - 197)))) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & ((1L << (LIBRARY - 261)) | (1L << (LIKE2 - 261)) | (1L << (LIKE4 - 261)) | (1L << (LIKEC - 261)) | (1L << (LIMIT - 261)) | (1L << (LIST - 261)) | (1L << (LOCAL - 261)) | (1L << (LOCKED - 261)) | (1L << (LOG - 261)) | (1L << (LOGOFF - 261)) | (1L << (LOGON - 261)) | (1L << (LONG - 261)) | (1L << (LOOP - 261)) | (1L << (MAIN - 261)) | (1L << (MAP - 261)) | (1L << (MASTER - 261)) | (1L << (MATCHED - 261)) | (1L << (MAXVALUE - 261)) | (1L << (MEASURES - 261)) | (1L << (MEMBER - 261)) | (1L << (MERGE - 261)) | (1L << (MINUTE - 261)) | (1L << (MINVALUE - 261)) | (1L << (MLSLABEL - 261)) | (1L << (MODEL - 261)) | (1L << (MODIFY - 261)) | (1L << (MONTH - 261)) | (1L << (MULTISET - 261)) | (1L << (NAME - 261)) | (1L << (NAN - 261)) | (1L << (NATURAL - 261)) | (1L << (NATURALN - 261)) | (1L << (NAV - 261)) | (1L << (NCHAR - 261)) | (1L << (NCHAR_CS - 261)) | (1L << (NCLOB - 261)) | (1L << (NESTED - 261)) | (1L << (NEVER - 261)) | (1L << (NEW - 261)) | (1L << (NO - 261)) | (1L << (NOAUDIT - 261)) | (1L << (NOCOPY - 261)) | (1L << (NOCYCLE - 261)) | (1L << (NOENTITYESCAPING - 261)))) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & ((1L << (NONE - 329)) | (1L << (NOSCHEMACHECK - 329)) | (1L << (NVL - 329)) | (1L << (NULLS - 329)) | (1L << (NUMBER - 329)) | (1L << (NUMERIC - 329)) | (1L << (NVARCHAR2 - 329)) | (1L << (MATERIALIZED - 329)) | (1L << (OBJECT - 329)) | (1L << (OFF - 329)) | (1L << (OID - 329)) | (1L << (OLD - 329)) | (1L << (ONLY - 329)) | (1L << (OPEN - 329)) | (1L << (ORADATA - 329)) | (1L << (ORDINALITY - 329)) | (1L << (OSERROR - 329)) | (1L << (OUT - 329)) | (1L << (OUTER - 329)) | (1L << (OVER - 329)) | (1L << (OVERRIDING - 329)) | (1L << (PACKAGE - 329)) | (1L << (PARALLEL_ENABLE - 329)) | (1L << (PARAMETERS - 329)) | (1L << (PARENT - 329)) | (1L << (PARTITION - 329)) | (1L << (PASSING - 329)) | (1L << (PATH - 329)) | (1L << (PIPELINED - 329)) | (1L << (PLAN - 329)) | (1L << (PLS_INTEGER - 329)) | (1L << (POSITIVE - 329)) | (1L << (POSITIVEN - 329)) | (1L << (PRAGMA - 329)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (PREBUILT - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)) | (1L << (PRESENT - 393)) | (1L << (PUBLIC - 393)) | (1L << (RAISE - 393)) | (1L << (RANGE - 393)) | (1L << (RAW - 393)) | (1L << (READ - 393)) | (1L << (REAL - 393)) | (1L << (RECORD - 393)) | (1L << (REDUCED - 393)) | (1L << (REF - 393)) | (1L << (REFERENCE - 393)) | (1L << (REFERENCING - 393)) | (1L << (REFRESH - 393)) | (1L << (REJECT - 393)) | (1L << (RELIES_ON - 393)) | (1L << (RENAME - 393)) | (1L << (REPLACE - 393)) | (1L << (RESPECT - 393)) | (1L << (RESTRICT_REFERENCES - 393)) | (1L << (RESULT - 393)) | (1L << (RESULT_CACHE - 393)) | (1L << (RETURN - 393)) | (1L << (RETURNING - 393)) | (1L << (REUSE - 393)) | (1L << (REVERSE - 393)) | (1L << (REWRITE - 393)) | (1L << (RIGHT - 393)) | (1L << (ROLE - 393)) | (1L << (ROLLBACK - 393)) | (1L << (ROLLUP - 393)) | (1L << (ROW - 393)) | (1L << (ROWID - 393)) | (1L << (ROWS - 393)) | (1L << (RULES - 393)) | (1L << (SAMPLE - 393)) | (1L << (SAVE - 393)) | (1L << (SAVEPOINT - 393)) | (1L << (SCHEMA - 393)) | (1L << (SCHEMACHECK - 393)) | (1L << (SCN - 393)) | (1L << (SECOND - 393)))) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & ((1L << (SEED - 458)) | (1L << (SEGMENT - 458)) | (1L << (SELF - 458)) | (1L << (SEQUENTIAL - 458)) | (1L << (SERIALIZABLE - 458)) | (1L << (SERIALLY_REUSABLE - 458)) | (1L << (SERVERERROR - 458)) | (1L << (SESSIONTIMEZONE - 458)) | (1L << (SET - 458)) | (1L << (SETS - 458)) | (1L << (SETTINGS - 458)) | (1L << (SHOW - 458)) | (1L << (SHUTDOWN - 458)) | (1L << (SIBLINGS - 458)) | (1L << (SIGNTYPE - 458)) | (1L << (SIMPLE_INTEGER - 458)) | (1L << (SINGLE - 458)) | (1L << (SIZE - 458)) | (1L << (SKIP_ - 458)) | (1L << (SMALLINT - 458)) | (1L << (SNAPSHOT - 458)) | (1L << (SOME - 458)) | (1L << (SPECIFICATION - 458)) | (1L << (SQLDATA - 458)) | (1L << (SQLERROR - 458)) | (1L << (STANDALONE - 458)) | (1L << (STARTUP - 458)) | (1L << (STATEMENT - 458)) | (1L << (STATEMENT_ID - 458)) | (1L << (STATIC - 458)) | (1L << (STATISTICS - 458)) | (1L << (STRING - 458)) | (1L << (SUBMULTISET - 458)) | (1L << (SUBPARTITION - 458)) | (1L << (SUBSTITUTABLE - 458)) | (1L << (SUBSTRING - 458)) | (1L << (SUBTYPE - 458)) | (1L << (SUCCESS - 458)) | (1L << (SUSPEND - 458)) | (1L << (TABLES - 458)) | (1L << (TIME - 458)) | (1L << (TIMESTAMP - 458)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 458)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 458)) | (1L << (TIMESTAMP_UNCONSTRAINED - 458)))) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & ((1L << (TIMEZONE_ABBR - 522)) | (1L << (TIMEZONE_HOUR - 522)) | (1L << (TIMEZONE_MINUTE - 522)) | (1L << (TIMEZONE_REGION - 522)) | (1L << (TO_CHAR - 522)) | (1L << (TO_DATE - 522)) | (1L << (TRAILING - 522)) | (1L << (TRANSACTION - 522)) | (1L << (TRANSLATE - 522)) | (1L << (TREAT - 522)) | (1L << (TRIGGER - 522)) | (1L << (TRIM - 522)) | (1L << (TRUNCATE - 522)) | (1L << (TRUSTED - 522)) | (1L << (TYPE - 522)) | (1L << (UNBOUNDED - 522)) | (1L << (UNDER - 522)) | (1L << (UNLIMITED - 522)) | (1L << (UNTIL - 522)) | (1L << (UPDATED - 522)) | (1L << (UPSERT - 522)) | (1L << (UROWID - 522)) | (1L << (USE - 522)) | (1L << (VALIDATE - 522)) | (1L << (VALUE - 522)) | (1L << (VARCHAR - 522)) | (1L << (VARCHAR2 - 522)) | (1L << (VARIABLE - 522)) | (1L << (VARRAY - 522)) | (1L << (VARYING - 522)) | (1L << (VERBOSE - 522)) | (1L << (VERSION - 522)) | (1L << (VERSIONS - 522)) | (1L << (VIEW - 522)) | (1L << (WAIT - 522)) | (1L << (WARNING - 522)) | (1L << (WELLFORMED - 522)) | (1L << (WHENEVER - 522)) | (1L << (WHILE - 522)) | (1L << (WITHOUT - 522)) | (1L << (WITHIN - 522)) | (1L << (WORK - 522)) | (1L << (WRITE - 522)) | (1L << (XML - 522)) | (1L << (XMLAGG - 522)) | (1L << (XMLATTRIBUTES - 522)))) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & ((1L << (XMLCAST - 586)) | (1L << (XMLCOLATTVAL - 586)) | (1L << (XMLELEMENT - 586)) | (1L << (XMLEXISTS - 586)) | (1L << (XMLFOREST - 586)) | (1L << (XMLNAMESPACES - 586)) | (1L << (XMLPARSE - 586)) | (1L << (XMLPI - 586)) | (1L << (XMLQUERY - 586)) | (1L << (XMLROOT - 586)) | (1L << (XMLSERIALIZE - 586)) | (1L << (XMLTABLE - 586)) | (1L << (YEAR - 586)) | (1L << (YES - 586)) | (1L << (YMINTERVAL_UNCONSTRAINED - 586)) | (1L << (ZONE - 586)) | (1L << (PREDICTION - 586)) | (1L << (PREDICTION_BOUNDS - 586)) | (1L << (PREDICTION_COST - 586)) | (1L << (PREDICTION_DETAILS - 586)) | (1L << (PREDICTION_PROBABILITY - 586)) | (1L << (PREDICTION_SET - 586)) | (1L << (CUME_DIST - 586)) | (1L << (DENSE_RANK - 586)) | (1L << (LISTAGG - 586)) | (1L << (PERCENT_RANK - 586)) | (1L << (PERCENTILE_CONT - 586)) | (1L << (PERCENTILE_DISC - 586)) | (1L << (RANK - 586)) | (1L << (AVG - 586)) | (1L << (CORR - 586)) | (1L << (LAG - 586)) | (1L << (LEAD - 586)) | (1L << (MAX - 586)) | (1L << (MEDIAN - 586)) | (1L << (MIN - 586)) | (1L << (NTILE - 586)) | (1L << (RATIO_TO_REPORT - 586)) | (1L << (ROW_NUMBER - 586)) | (1L << (SUM - 586)) | (1L << (VARIANCE - 586)) | (1L << (REGR_ - 586)) | (1L << (STDDEV - 586)) | (1L << (VAR_ - 586)) | (1L << (COVAR_ - 586)) | (1L << (DELIMITED_ID - 586)))) != 0) || _la==COMMA || _la==REGULAR_ID );
				setState(3834);
				match(RIGHT_PAREN);
				}
				break;
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BUILD:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPLETE:
			case COMPOUND:
			case CONCAT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECODE:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DEMAND:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case EDITIONING:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENFORCED:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FAST:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LIST:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MASTER:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEVER:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NVL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case MATERIALIZED:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PREBUILT:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PUBLIC:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REDUCED:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REFRESH:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case REWRITE:
			case RIGHT:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SIZE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBSTRING:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TABLES:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TO_CHAR:
			case TO_DATE:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TRUSTED:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERBOSE:
			case VERSION:
			case VERSIONS:
			case VIEW:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHOUT:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case REGULAR_ID:
				{
				setState(3836);
				modify_col_properties();
				}
				break;
			case COLUMN:
				{
				setState(3837);
				modify_col_substitutable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_column_clauseContext extends ParserRuleContext {
		public Token op;
		public TerminalNode ALTER() { return getToken(PLSQLParser.ALTER, 0); }
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public TerminalNode NOT() { return getToken(PLSQLParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(PLSQLParser.NULL, 0); }
		public TerminalNode TYPE() { return getToken(PLSQLParser.TYPE, 0); }
		public DatatypeContext datatype() {
			return getRuleContext(DatatypeContext.class,0);
		}
		public TerminalNode COLUMN() { return getToken(PLSQLParser.COLUMN, 0); }
		public TerminalNode SET() { return getToken(PLSQLParser.SET, 0); }
		public TerminalNode DROP() { return getToken(PLSQLParser.DROP, 0); }
		public TerminalNode USING() { return getToken(PLSQLParser.USING, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Alter_column_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_column_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterAlter_column_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitAlter_column_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitAlter_column_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_column_clauseContext alter_column_clause() throws RecognitionException {
		Alter_column_clauseContext _localctx = new Alter_column_clauseContext(_ctx, getState());
		enterRule(_localctx, 330, RULE_alter_column_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3840);
			match(ALTER);
			setState(3842);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COLUMN) {
				{
				setState(3841);
				match(COLUMN);
				}
			}

			setState(3844);
			column_name();
			setState(3854);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DROP:
			case SET:
				{
				setState(3845);
				((Alter_column_clauseContext)_localctx).op = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DROP || _la==SET) ) {
					((Alter_column_clauseContext)_localctx).op = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3846);
				match(NOT);
				setState(3847);
				match(NULL);
				}
				break;
			case TYPE:
				{
				setState(3848);
				match(TYPE);
				setState(3849);
				datatype();
				setState(3852);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(3850);
					match(USING);
					{
					setState(3851);
					expression(0);
					}
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Modify_col_propertiesContext extends ParserRuleContext {
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public DatatypeContext datatype() {
			return getRuleContext(DatatypeContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(PLSQLParser.DEFAULT, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode ENCRYPT() { return getToken(PLSQLParser.ENCRYPT, 0); }
		public Encryption_specContext encryption_spec() {
			return getRuleContext(Encryption_specContext.class,0);
		}
		public TerminalNode DECRYPT() { return getToken(PLSQLParser.DECRYPT, 0); }
		public List<Inline_constraintContext> inline_constraint() {
			return getRuleContexts(Inline_constraintContext.class);
		}
		public Inline_constraintContext inline_constraint(int i) {
			return getRuleContext(Inline_constraintContext.class,i);
		}
		public Lob_storage_clauseContext lob_storage_clause() {
			return getRuleContext(Lob_storage_clauseContext.class,0);
		}
		public Modify_col_propertiesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_modify_col_properties; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterModify_col_properties(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitModify_col_properties(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitModify_col_properties(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Modify_col_propertiesContext modify_col_properties() throws RecognitionException {
		Modify_col_propertiesContext _localctx = new Modify_col_propertiesContext(_ctx, getState());
		enterRule(_localctx, 332, RULE_modify_col_properties);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3856);
			column_name();
			setState(3858);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,536,_ctx) ) {
			case 1:
				{
				setState(3857);
				datatype();
				}
				break;
			}
			setState(3862);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFAULT) {
				{
				setState(3860);
				match(DEFAULT);
				setState(3861);
				expression(0);
				}
			}

			setState(3867);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ENCRYPT:
				{
				setState(3864);
				match(ENCRYPT);
				setState(3865);
				encryption_spec();
				}
				break;
			case DECRYPT:
				{
				setState(3866);
				match(DECRYPT);
				}
				break;
			case EOF:
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ALTER:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BUILD:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHECK:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPLETE:
			case COMPOUND:
			case CONCAT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CREATE:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECODE:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DEMAND:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DROP:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case EDITIONING:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENFORCED:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FAST:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GRANT:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSERT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LIST:
			case LOCAL:
			case LOB:
			case LOCK:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MASTER:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEVER:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NOT:
			case NVL:
			case NULL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case MATERIALIZED:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PREBUILT:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIMARY:
			case PROCEDURE:
			case PUBLIC:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REDUCED:
			case REF:
			case REFERENCE:
			case REFERENCES:
			case REFERENCING:
			case REFRESH:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case REVOKE:
			case REWRITE:
			case RIGHT:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELECT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SIZE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBSTRING:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TABLES:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TO_CHAR:
			case TO_DATE:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TRUSTED:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNIQUE:
			case UNLIMITED:
			case UNTIL:
			case UPDATE:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERBOSE:
			case VERSION:
			case VERSIONS:
			case VIEW:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITH:
			case WITHOUT:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case LEFT_PAREN:
			case RIGHT_PAREN:
			case COMMA:
			case SEMICOLON:
			case REGULAR_ID:
				break;
			default:
				break;
			}
			setState(3872);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,539,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3869);
					inline_constraint();
					}
					} 
				}
				setState(3874);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,539,_ctx);
			}
			setState(3876);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOB) {
				{
				setState(3875);
				lob_storage_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Modify_col_substitutableContext extends ParserRuleContext {
		public TerminalNode COLUMN() { return getToken(PLSQLParser.COLUMN, 0); }
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public TerminalNode SUBSTITUTABLE() { return getToken(PLSQLParser.SUBSTITUTABLE, 0); }
		public TerminalNode AT() { return getToken(PLSQLParser.AT, 0); }
		public TerminalNode ALL() { return getToken(PLSQLParser.ALL, 0); }
		public TerminalNode LEVELS() { return getToken(PLSQLParser.LEVELS, 0); }
		public TerminalNode NOT() { return getToken(PLSQLParser.NOT, 0); }
		public TerminalNode FORCE() { return getToken(PLSQLParser.FORCE, 0); }
		public Modify_col_substitutableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_modify_col_substitutable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterModify_col_substitutable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitModify_col_substitutable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitModify_col_substitutable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Modify_col_substitutableContext modify_col_substitutable() throws RecognitionException {
		Modify_col_substitutableContext _localctx = new Modify_col_substitutableContext(_ctx, getState());
		enterRule(_localctx, 334, RULE_modify_col_substitutable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3878);
			match(COLUMN);
			setState(3879);
			column_name();
			setState(3881);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(3880);
				match(NOT);
				}
			}

			setState(3883);
			match(SUBSTITUTABLE);
			setState(3884);
			match(AT);
			setState(3885);
			match(ALL);
			setState(3886);
			match(LEVELS);
			setState(3888);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FORCE) {
				{
				setState(3887);
				match(FORCE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_column_clauseContext extends ParserRuleContext {
		public Column_nameContext column_name;
		public List<Column_nameContext> names = new ArrayList<Column_nameContext>();
		public TerminalNode SET() { return getToken(PLSQLParser.SET, 0); }
		public TerminalNode UNUSED() { return getToken(PLSQLParser.UNUSED, 0); }
		public TerminalNode COLUMN() { return getToken(PLSQLParser.COLUMN, 0); }
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public List<TerminalNode> CASCADE() { return getTokens(PLSQLParser.CASCADE); }
		public TerminalNode CASCADE(int i) {
			return getToken(PLSQLParser.CASCADE, i);
		}
		public List<TerminalNode> CONSTRAINTS() { return getTokens(PLSQLParser.CONSTRAINTS); }
		public TerminalNode CONSTRAINTS(int i) {
			return getToken(PLSQLParser.CONSTRAINTS, i);
		}
		public List<TerminalNode> INVALIDATE() { return getTokens(PLSQLParser.INVALIDATE); }
		public TerminalNode INVALIDATE(int i) {
			return getToken(PLSQLParser.INVALIDATE, i);
		}
		public TerminalNode LEFT_PAREN() { return getToken(PLSQLParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PLSQLParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PLSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLSQLParser.COMMA, i);
		}
		public TerminalNode DROP() { return getToken(PLSQLParser.DROP, 0); }
		public TerminalNode CHECKPOINT() { return getToken(PLSQLParser.CHECKPOINT, 0); }
		public TerminalNode UNSIGNED_INTEGER() { return getToken(PLSQLParser.UNSIGNED_INTEGER, 0); }
		public TerminalNode COLUMNS() { return getToken(PLSQLParser.COLUMNS, 0); }
		public TerminalNode CONTINUE() { return getToken(PLSQLParser.CONTINUE, 0); }
		public Drop_column_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_column_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterDrop_column_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitDrop_column_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitDrop_column_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_column_clauseContext drop_column_clause() throws RecognitionException {
		Drop_column_clauseContext _localctx = new Drop_column_clauseContext(_ctx, getState());
		enterRule(_localctx, 336, RULE_drop_column_clause);
		int _la;
		try {
			setState(3952);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,555,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3890);
				match(SET);
				setState(3891);
				match(UNUSED);
				setState(3905);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case COLUMN:
					{
					setState(3892);
					match(COLUMN);
					setState(3893);
					((Drop_column_clauseContext)_localctx).column_name = column_name();
					((Drop_column_clauseContext)_localctx).names.add(((Drop_column_clauseContext)_localctx).column_name);
					}
					break;
				case LEFT_PAREN:
					{
					{
					setState(3894);
					match(LEFT_PAREN);
					setState(3899); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						{
						setState(3896);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(3895);
							match(COMMA);
							}
						}

						setState(3898);
						((Drop_column_clauseContext)_localctx).column_name = column_name();
						((Drop_column_clauseContext)_localctx).names.add(((Drop_column_clauseContext)_localctx).column_name);
						}
						}
						setState(3901); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BUILD) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (CHR - 65)) | (1L << (CLOB - 65)) | (1L << (CLOSE - 65)) | (1L << (CLUSTER - 65)) | (1L << (COALESCE - 65)) | (1L << (COLLECT - 65)) | (1L << (COLUMNS - 65)) | (1L << (COMMENT - 65)) | (1L << (COMMIT - 65)) | (1L << (COMMITTED - 65)) | (1L << (COMPATIBILITY - 65)) | (1L << (COMPILE - 65)) | (1L << (COMPLETE - 65)) | (1L << (COMPOUND - 65)) | (1L << (CONCAT - 65)) | (1L << (CONSTANT - 65)) | (1L << (CONSTRAINT - 65)) | (1L << (CONSTRAINTS - 65)) | (1L << (CONSTRUCTOR - 65)) | (1L << (CONTENT - 65)) | (1L << (CONTEXT - 65)) | (1L << (CONTINUE - 65)) | (1L << (CONVERT - 65)) | (1L << (CORRUPT_XID - 65)) | (1L << (CORRUPT_XID_ALL - 65)) | (1L << (COST - 65)) | (1L << (COUNT - 65)) | (1L << (CROSS - 65)) | (1L << (CUBE - 65)) | (1L << (CURRENT_USER - 65)) | (1L << (CURSOR - 65)) | (1L << (CUSTOMDATUM - 65)) | (1L << (CYCLE - 65)) | (1L << (DATA - 65)) | (1L << (DATABASE - 65)) | (1L << (DATE - 65)) | (1L << (DAY - 65)) | (1L << (DB_ROLE_CHANGE - 65)) | (1L << (DBTIMEZONE - 65)) | (1L << (DDL - 65)) | (1L << (DEBUG - 65)) | (1L << (DEC - 65)) | (1L << (DECIMAL - 65)) | (1L << (DECODE - 65)) | (1L << (DECOMPOSE - 65)) | (1L << (DECREMENT - 65)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DEMAND - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (EDITIONING - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENFORCED - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FAST - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)) | (1L << (FOLLOWING - 129)) | (1L << (FOLLOWS - 129)) | (1L << (FORALL - 129)) | (1L << (FORCE - 129)))) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & ((1L << (FULL - 197)) | (1L << (FUNCTION - 197)) | (1L << (GROUPING - 197)) | (1L << (HASH - 197)) | (1L << (HIDE - 197)) | (1L << (HOUR - 197)) | (1L << (IGNORE - 197)) | (1L << (IMMEDIATE - 197)) | (1L << (INCLUDE - 197)) | (1L << (INCLUDING - 197)) | (1L << (INCREMENT - 197)) | (1L << (INDENT - 197)) | (1L << (INDEXED - 197)) | (1L << (INDICATOR - 197)) | (1L << (INDICES - 197)) | (1L << (INFINITE - 197)) | (1L << (INLINE - 197)) | (1L << (INNER - 197)) | (1L << (INOUT - 197)) | (1L << (INSTANTIABLE - 197)) | (1L << (INSTEAD - 197)) | (1L << (INT - 197)) | (1L << (INTEGER - 197)) | (1L << (INTERVAL - 197)) | (1L << (INVALIDATE - 197)) | (1L << (ISOLATION - 197)) | (1L << (ITERATE - 197)) | (1L << (JAVA - 197)) | (1L << (JOIN - 197)) | (1L << (KEEP - 197)) | (1L << (LANGUAGE - 197)) | (1L << (LAST - 197)) | (1L << (LAST_VALUE - 197)) | (1L << (LEADING - 197)) | (1L << (LEFT - 197)) | (1L << (LEVEL - 197)))) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & ((1L << (LIBRARY - 261)) | (1L << (LIKE2 - 261)) | (1L << (LIKE4 - 261)) | (1L << (LIKEC - 261)) | (1L << (LIMIT - 261)) | (1L << (LIST - 261)) | (1L << (LOCAL - 261)) | (1L << (LOCKED - 261)) | (1L << (LOG - 261)) | (1L << (LOGOFF - 261)) | (1L << (LOGON - 261)) | (1L << (LONG - 261)) | (1L << (LOOP - 261)) | (1L << (MAIN - 261)) | (1L << (MAP - 261)) | (1L << (MASTER - 261)) | (1L << (MATCHED - 261)) | (1L << (MAXVALUE - 261)) | (1L << (MEASURES - 261)) | (1L << (MEMBER - 261)) | (1L << (MERGE - 261)) | (1L << (MINUTE - 261)) | (1L << (MINVALUE - 261)) | (1L << (MLSLABEL - 261)) | (1L << (MODEL - 261)) | (1L << (MODIFY - 261)) | (1L << (MONTH - 261)) | (1L << (MULTISET - 261)) | (1L << (NAME - 261)) | (1L << (NAN - 261)) | (1L << (NATURAL - 261)) | (1L << (NATURALN - 261)) | (1L << (NAV - 261)) | (1L << (NCHAR - 261)) | (1L << (NCHAR_CS - 261)) | (1L << (NCLOB - 261)) | (1L << (NESTED - 261)) | (1L << (NEVER - 261)) | (1L << (NEW - 261)) | (1L << (NO - 261)) | (1L << (NOAUDIT - 261)) | (1L << (NOCOPY - 261)) | (1L << (NOCYCLE - 261)) | (1L << (NOENTITYESCAPING - 261)))) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & ((1L << (NONE - 329)) | (1L << (NOSCHEMACHECK - 329)) | (1L << (NVL - 329)) | (1L << (NULLS - 329)) | (1L << (NUMBER - 329)) | (1L << (NUMERIC - 329)) | (1L << (NVARCHAR2 - 329)) | (1L << (MATERIALIZED - 329)) | (1L << (OBJECT - 329)) | (1L << (OFF - 329)) | (1L << (OID - 329)) | (1L << (OLD - 329)) | (1L << (ONLY - 329)) | (1L << (OPEN - 329)) | (1L << (ORADATA - 329)) | (1L << (ORDINALITY - 329)) | (1L << (OSERROR - 329)) | (1L << (OUT - 329)) | (1L << (OUTER - 329)) | (1L << (OVER - 329)) | (1L << (OVERRIDING - 329)) | (1L << (PACKAGE - 329)) | (1L << (PARALLEL_ENABLE - 329)) | (1L << (PARAMETERS - 329)) | (1L << (PARENT - 329)) | (1L << (PARTITION - 329)) | (1L << (PASSING - 329)) | (1L << (PATH - 329)) | (1L << (PIPELINED - 329)) | (1L << (PLAN - 329)) | (1L << (PLS_INTEGER - 329)) | (1L << (POSITIVE - 329)) | (1L << (POSITIVEN - 329)) | (1L << (PRAGMA - 329)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (PREBUILT - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)) | (1L << (PRESENT - 393)) | (1L << (PUBLIC - 393)) | (1L << (RAISE - 393)) | (1L << (RANGE - 393)) | (1L << (RAW - 393)) | (1L << (READ - 393)) | (1L << (REAL - 393)) | (1L << (RECORD - 393)) | (1L << (REDUCED - 393)) | (1L << (REF - 393)) | (1L << (REFERENCE - 393)) | (1L << (REFERENCING - 393)) | (1L << (REFRESH - 393)) | (1L << (REJECT - 393)) | (1L << (RELIES_ON - 393)) | (1L << (RENAME - 393)) | (1L << (REPLACE - 393)) | (1L << (RESPECT - 393)) | (1L << (RESTRICT_REFERENCES - 393)) | (1L << (RESULT - 393)) | (1L << (RESULT_CACHE - 393)) | (1L << (RETURN - 393)) | (1L << (RETURNING - 393)) | (1L << (REUSE - 393)) | (1L << (REVERSE - 393)) | (1L << (REWRITE - 393)) | (1L << (RIGHT - 393)) | (1L << (ROLE - 393)) | (1L << (ROLLBACK - 393)) | (1L << (ROLLUP - 393)) | (1L << (ROW - 393)) | (1L << (ROWID - 393)) | (1L << (ROWS - 393)) | (1L << (RULES - 393)) | (1L << (SAMPLE - 393)) | (1L << (SAVE - 393)) | (1L << (SAVEPOINT - 393)) | (1L << (SCHEMA - 393)) | (1L << (SCHEMACHECK - 393)) | (1L << (SCN - 393)) | (1L << (SECOND - 393)))) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & ((1L << (SEED - 458)) | (1L << (SEGMENT - 458)) | (1L << (SELF - 458)) | (1L << (SEQUENTIAL - 458)) | (1L << (SERIALIZABLE - 458)) | (1L << (SERIALLY_REUSABLE - 458)) | (1L << (SERVERERROR - 458)) | (1L << (SESSIONTIMEZONE - 458)) | (1L << (SET - 458)) | (1L << (SETS - 458)) | (1L << (SETTINGS - 458)) | (1L << (SHOW - 458)) | (1L << (SHUTDOWN - 458)) | (1L << (SIBLINGS - 458)) | (1L << (SIGNTYPE - 458)) | (1L << (SIMPLE_INTEGER - 458)) | (1L << (SINGLE - 458)) | (1L << (SIZE - 458)) | (1L << (SKIP_ - 458)) | (1L << (SMALLINT - 458)) | (1L << (SNAPSHOT - 458)) | (1L << (SOME - 458)) | (1L << (SPECIFICATION - 458)) | (1L << (SQLDATA - 458)) | (1L << (SQLERROR - 458)) | (1L << (STANDALONE - 458)) | (1L << (STARTUP - 458)) | (1L << (STATEMENT - 458)) | (1L << (STATEMENT_ID - 458)) | (1L << (STATIC - 458)) | (1L << (STATISTICS - 458)) | (1L << (STRING - 458)) | (1L << (SUBMULTISET - 458)) | (1L << (SUBPARTITION - 458)) | (1L << (SUBSTITUTABLE - 458)) | (1L << (SUBSTRING - 458)) | (1L << (SUBTYPE - 458)) | (1L << (SUCCESS - 458)) | (1L << (SUSPEND - 458)) | (1L << (TABLES - 458)) | (1L << (TIME - 458)) | (1L << (TIMESTAMP - 458)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 458)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 458)) | (1L << (TIMESTAMP_UNCONSTRAINED - 458)))) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & ((1L << (TIMEZONE_ABBR - 522)) | (1L << (TIMEZONE_HOUR - 522)) | (1L << (TIMEZONE_MINUTE - 522)) | (1L << (TIMEZONE_REGION - 522)) | (1L << (TO_CHAR - 522)) | (1L << (TO_DATE - 522)) | (1L << (TRAILING - 522)) | (1L << (TRANSACTION - 522)) | (1L << (TRANSLATE - 522)) | (1L << (TREAT - 522)) | (1L << (TRIGGER - 522)) | (1L << (TRIM - 522)) | (1L << (TRUNCATE - 522)) | (1L << (TRUSTED - 522)) | (1L << (TYPE - 522)) | (1L << (UNBOUNDED - 522)) | (1L << (UNDER - 522)) | (1L << (UNLIMITED - 522)) | (1L << (UNTIL - 522)) | (1L << (UPDATED - 522)) | (1L << (UPSERT - 522)) | (1L << (UROWID - 522)) | (1L << (USE - 522)) | (1L << (VALIDATE - 522)) | (1L << (VALUE - 522)) | (1L << (VARCHAR - 522)) | (1L << (VARCHAR2 - 522)) | (1L << (VARIABLE - 522)) | (1L << (VARRAY - 522)) | (1L << (VARYING - 522)) | (1L << (VERBOSE - 522)) | (1L << (VERSION - 522)) | (1L << (VERSIONS - 522)) | (1L << (VIEW - 522)) | (1L << (WAIT - 522)) | (1L << (WARNING - 522)) | (1L << (WELLFORMED - 522)) | (1L << (WHENEVER - 522)) | (1L << (WHILE - 522)) | (1L << (WITHOUT - 522)) | (1L << (WITHIN - 522)) | (1L << (WORK - 522)) | (1L << (WRITE - 522)) | (1L << (XML - 522)) | (1L << (XMLAGG - 522)) | (1L << (XMLATTRIBUTES - 522)))) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & ((1L << (XMLCAST - 586)) | (1L << (XMLCOLATTVAL - 586)) | (1L << (XMLELEMENT - 586)) | (1L << (XMLEXISTS - 586)) | (1L << (XMLFOREST - 586)) | (1L << (XMLNAMESPACES - 586)) | (1L << (XMLPARSE - 586)) | (1L << (XMLPI - 586)) | (1L << (XMLQUERY - 586)) | (1L << (XMLROOT - 586)) | (1L << (XMLSERIALIZE - 586)) | (1L << (XMLTABLE - 586)) | (1L << (YEAR - 586)) | (1L << (YES - 586)) | (1L << (YMINTERVAL_UNCONSTRAINED - 586)) | (1L << (ZONE - 586)) | (1L << (PREDICTION - 586)) | (1L << (PREDICTION_BOUNDS - 586)) | (1L << (PREDICTION_COST - 586)) | (1L << (PREDICTION_DETAILS - 586)) | (1L << (PREDICTION_PROBABILITY - 586)) | (1L << (PREDICTION_SET - 586)) | (1L << (CUME_DIST - 586)) | (1L << (DENSE_RANK - 586)) | (1L << (LISTAGG - 586)) | (1L << (PERCENT_RANK - 586)) | (1L << (PERCENTILE_CONT - 586)) | (1L << (PERCENTILE_DISC - 586)) | (1L << (RANK - 586)) | (1L << (AVG - 586)) | (1L << (CORR - 586)) | (1L << (LAG - 586)) | (1L << (LEAD - 586)) | (1L << (MAX - 586)) | (1L << (MEDIAN - 586)) | (1L << (MIN - 586)) | (1L << (NTILE - 586)) | (1L << (RATIO_TO_REPORT - 586)) | (1L << (ROW_NUMBER - 586)) | (1L << (SUM - 586)) | (1L << (VARIANCE - 586)) | (1L << (REGR_ - 586)) | (1L << (STDDEV - 586)) | (1L << (VAR_ - 586)) | (1L << (COVAR_ - 586)) | (1L << (DELIMITED_ID - 586)))) != 0) || _la==COMMA || _la==REGULAR_ID );
					setState(3903);
					match(RIGHT_PAREN);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(3912);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==CASCADE || _la==INVALIDATE) {
					{
					setState(3910);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case CASCADE:
						{
						setState(3907);
						match(CASCADE);
						setState(3908);
						match(CONSTRAINTS);
						}
						break;
					case INVALIDATE:
						{
						setState(3909);
						match(INVALIDATE);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					setState(3914);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3915);
				match(DROP);
				setState(3929);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case COLUMN:
					{
					setState(3916);
					match(COLUMN);
					setState(3917);
					((Drop_column_clauseContext)_localctx).column_name = column_name();
					((Drop_column_clauseContext)_localctx).names.add(((Drop_column_clauseContext)_localctx).column_name);
					}
					break;
				case LEFT_PAREN:
					{
					setState(3918);
					match(LEFT_PAREN);
					setState(3923); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						{
						setState(3920);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(3919);
							match(COMMA);
							}
						}

						setState(3922);
						((Drop_column_clauseContext)_localctx).column_name = column_name();
						((Drop_column_clauseContext)_localctx).names.add(((Drop_column_clauseContext)_localctx).column_name);
						}
						}
						setState(3925); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BUILD) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (CHR - 65)) | (1L << (CLOB - 65)) | (1L << (CLOSE - 65)) | (1L << (CLUSTER - 65)) | (1L << (COALESCE - 65)) | (1L << (COLLECT - 65)) | (1L << (COLUMNS - 65)) | (1L << (COMMENT - 65)) | (1L << (COMMIT - 65)) | (1L << (COMMITTED - 65)) | (1L << (COMPATIBILITY - 65)) | (1L << (COMPILE - 65)) | (1L << (COMPLETE - 65)) | (1L << (COMPOUND - 65)) | (1L << (CONCAT - 65)) | (1L << (CONSTANT - 65)) | (1L << (CONSTRAINT - 65)) | (1L << (CONSTRAINTS - 65)) | (1L << (CONSTRUCTOR - 65)) | (1L << (CONTENT - 65)) | (1L << (CONTEXT - 65)) | (1L << (CONTINUE - 65)) | (1L << (CONVERT - 65)) | (1L << (CORRUPT_XID - 65)) | (1L << (CORRUPT_XID_ALL - 65)) | (1L << (COST - 65)) | (1L << (COUNT - 65)) | (1L << (CROSS - 65)) | (1L << (CUBE - 65)) | (1L << (CURRENT_USER - 65)) | (1L << (CURSOR - 65)) | (1L << (CUSTOMDATUM - 65)) | (1L << (CYCLE - 65)) | (1L << (DATA - 65)) | (1L << (DATABASE - 65)) | (1L << (DATE - 65)) | (1L << (DAY - 65)) | (1L << (DB_ROLE_CHANGE - 65)) | (1L << (DBTIMEZONE - 65)) | (1L << (DDL - 65)) | (1L << (DEBUG - 65)) | (1L << (DEC - 65)) | (1L << (DECIMAL - 65)) | (1L << (DECODE - 65)) | (1L << (DECOMPOSE - 65)) | (1L << (DECREMENT - 65)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DEMAND - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (EDITIONING - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENFORCED - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FAST - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)) | (1L << (FOLLOWING - 129)) | (1L << (FOLLOWS - 129)) | (1L << (FORALL - 129)) | (1L << (FORCE - 129)))) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & ((1L << (FULL - 197)) | (1L << (FUNCTION - 197)) | (1L << (GROUPING - 197)) | (1L << (HASH - 197)) | (1L << (HIDE - 197)) | (1L << (HOUR - 197)) | (1L << (IGNORE - 197)) | (1L << (IMMEDIATE - 197)) | (1L << (INCLUDE - 197)) | (1L << (INCLUDING - 197)) | (1L << (INCREMENT - 197)) | (1L << (INDENT - 197)) | (1L << (INDEXED - 197)) | (1L << (INDICATOR - 197)) | (1L << (INDICES - 197)) | (1L << (INFINITE - 197)) | (1L << (INLINE - 197)) | (1L << (INNER - 197)) | (1L << (INOUT - 197)) | (1L << (INSTANTIABLE - 197)) | (1L << (INSTEAD - 197)) | (1L << (INT - 197)) | (1L << (INTEGER - 197)) | (1L << (INTERVAL - 197)) | (1L << (INVALIDATE - 197)) | (1L << (ISOLATION - 197)) | (1L << (ITERATE - 197)) | (1L << (JAVA - 197)) | (1L << (JOIN - 197)) | (1L << (KEEP - 197)) | (1L << (LANGUAGE - 197)) | (1L << (LAST - 197)) | (1L << (LAST_VALUE - 197)) | (1L << (LEADING - 197)) | (1L << (LEFT - 197)) | (1L << (LEVEL - 197)))) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & ((1L << (LIBRARY - 261)) | (1L << (LIKE2 - 261)) | (1L << (LIKE4 - 261)) | (1L << (LIKEC - 261)) | (1L << (LIMIT - 261)) | (1L << (LIST - 261)) | (1L << (LOCAL - 261)) | (1L << (LOCKED - 261)) | (1L << (LOG - 261)) | (1L << (LOGOFF - 261)) | (1L << (LOGON - 261)) | (1L << (LONG - 261)) | (1L << (LOOP - 261)) | (1L << (MAIN - 261)) | (1L << (MAP - 261)) | (1L << (MASTER - 261)) | (1L << (MATCHED - 261)) | (1L << (MAXVALUE - 261)) | (1L << (MEASURES - 261)) | (1L << (MEMBER - 261)) | (1L << (MERGE - 261)) | (1L << (MINUTE - 261)) | (1L << (MINVALUE - 261)) | (1L << (MLSLABEL - 261)) | (1L << (MODEL - 261)) | (1L << (MODIFY - 261)) | (1L << (MONTH - 261)) | (1L << (MULTISET - 261)) | (1L << (NAME - 261)) | (1L << (NAN - 261)) | (1L << (NATURAL - 261)) | (1L << (NATURALN - 261)) | (1L << (NAV - 261)) | (1L << (NCHAR - 261)) | (1L << (NCHAR_CS - 261)) | (1L << (NCLOB - 261)) | (1L << (NESTED - 261)) | (1L << (NEVER - 261)) | (1L << (NEW - 261)) | (1L << (NO - 261)) | (1L << (NOAUDIT - 261)) | (1L << (NOCOPY - 261)) | (1L << (NOCYCLE - 261)) | (1L << (NOENTITYESCAPING - 261)))) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & ((1L << (NONE - 329)) | (1L << (NOSCHEMACHECK - 329)) | (1L << (NVL - 329)) | (1L << (NULLS - 329)) | (1L << (NUMBER - 329)) | (1L << (NUMERIC - 329)) | (1L << (NVARCHAR2 - 329)) | (1L << (MATERIALIZED - 329)) | (1L << (OBJECT - 329)) | (1L << (OFF - 329)) | (1L << (OID - 329)) | (1L << (OLD - 329)) | (1L << (ONLY - 329)) | (1L << (OPEN - 329)) | (1L << (ORADATA - 329)) | (1L << (ORDINALITY - 329)) | (1L << (OSERROR - 329)) | (1L << (OUT - 329)) | (1L << (OUTER - 329)) | (1L << (OVER - 329)) | (1L << (OVERRIDING - 329)) | (1L << (PACKAGE - 329)) | (1L << (PARALLEL_ENABLE - 329)) | (1L << (PARAMETERS - 329)) | (1L << (PARENT - 329)) | (1L << (PARTITION - 329)) | (1L << (PASSING - 329)) | (1L << (PATH - 329)) | (1L << (PIPELINED - 329)) | (1L << (PLAN - 329)) | (1L << (PLS_INTEGER - 329)) | (1L << (POSITIVE - 329)) | (1L << (POSITIVEN - 329)) | (1L << (PRAGMA - 329)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (PREBUILT - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)) | (1L << (PRESENT - 393)) | (1L << (PUBLIC - 393)) | (1L << (RAISE - 393)) | (1L << (RANGE - 393)) | (1L << (RAW - 393)) | (1L << (READ - 393)) | (1L << (REAL - 393)) | (1L << (RECORD - 393)) | (1L << (REDUCED - 393)) | (1L << (REF - 393)) | (1L << (REFERENCE - 393)) | (1L << (REFERENCING - 393)) | (1L << (REFRESH - 393)) | (1L << (REJECT - 393)) | (1L << (RELIES_ON - 393)) | (1L << (RENAME - 393)) | (1L << (REPLACE - 393)) | (1L << (RESPECT - 393)) | (1L << (RESTRICT_REFERENCES - 393)) | (1L << (RESULT - 393)) | (1L << (RESULT_CACHE - 393)) | (1L << (RETURN - 393)) | (1L << (RETURNING - 393)) | (1L << (REUSE - 393)) | (1L << (REVERSE - 393)) | (1L << (REWRITE - 393)) | (1L << (RIGHT - 393)) | (1L << (ROLE - 393)) | (1L << (ROLLBACK - 393)) | (1L << (ROLLUP - 393)) | (1L << (ROW - 393)) | (1L << (ROWID - 393)) | (1L << (ROWS - 393)) | (1L << (RULES - 393)) | (1L << (SAMPLE - 393)) | (1L << (SAVE - 393)) | (1L << (SAVEPOINT - 393)) | (1L << (SCHEMA - 393)) | (1L << (SCHEMACHECK - 393)) | (1L << (SCN - 393)) | (1L << (SECOND - 393)))) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & ((1L << (SEED - 458)) | (1L << (SEGMENT - 458)) | (1L << (SELF - 458)) | (1L << (SEQUENTIAL - 458)) | (1L << (SERIALIZABLE - 458)) | (1L << (SERIALLY_REUSABLE - 458)) | (1L << (SERVERERROR - 458)) | (1L << (SESSIONTIMEZONE - 458)) | (1L << (SET - 458)) | (1L << (SETS - 458)) | (1L << (SETTINGS - 458)) | (1L << (SHOW - 458)) | (1L << (SHUTDOWN - 458)) | (1L << (SIBLINGS - 458)) | (1L << (SIGNTYPE - 458)) | (1L << (SIMPLE_INTEGER - 458)) | (1L << (SINGLE - 458)) | (1L << (SIZE - 458)) | (1L << (SKIP_ - 458)) | (1L << (SMALLINT - 458)) | (1L << (SNAPSHOT - 458)) | (1L << (SOME - 458)) | (1L << (SPECIFICATION - 458)) | (1L << (SQLDATA - 458)) | (1L << (SQLERROR - 458)) | (1L << (STANDALONE - 458)) | (1L << (STARTUP - 458)) | (1L << (STATEMENT - 458)) | (1L << (STATEMENT_ID - 458)) | (1L << (STATIC - 458)) | (1L << (STATISTICS - 458)) | (1L << (STRING - 458)) | (1L << (SUBMULTISET - 458)) | (1L << (SUBPARTITION - 458)) | (1L << (SUBSTITUTABLE - 458)) | (1L << (SUBSTRING - 458)) | (1L << (SUBTYPE - 458)) | (1L << (SUCCESS - 458)) | (1L << (SUSPEND - 458)) | (1L << (TABLES - 458)) | (1L << (TIME - 458)) | (1L << (TIMESTAMP - 458)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 458)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 458)) | (1L << (TIMESTAMP_UNCONSTRAINED - 458)))) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & ((1L << (TIMEZONE_ABBR - 522)) | (1L << (TIMEZONE_HOUR - 522)) | (1L << (TIMEZONE_MINUTE - 522)) | (1L << (TIMEZONE_REGION - 522)) | (1L << (TO_CHAR - 522)) | (1L << (TO_DATE - 522)) | (1L << (TRAILING - 522)) | (1L << (TRANSACTION - 522)) | (1L << (TRANSLATE - 522)) | (1L << (TREAT - 522)) | (1L << (TRIGGER - 522)) | (1L << (TRIM - 522)) | (1L << (TRUNCATE - 522)) | (1L << (TRUSTED - 522)) | (1L << (TYPE - 522)) | (1L << (UNBOUNDED - 522)) | (1L << (UNDER - 522)) | (1L << (UNLIMITED - 522)) | (1L << (UNTIL - 522)) | (1L << (UPDATED - 522)) | (1L << (UPSERT - 522)) | (1L << (UROWID - 522)) | (1L << (USE - 522)) | (1L << (VALIDATE - 522)) | (1L << (VALUE - 522)) | (1L << (VARCHAR - 522)) | (1L << (VARCHAR2 - 522)) | (1L << (VARIABLE - 522)) | (1L << (VARRAY - 522)) | (1L << (VARYING - 522)) | (1L << (VERBOSE - 522)) | (1L << (VERSION - 522)) | (1L << (VERSIONS - 522)) | (1L << (VIEW - 522)) | (1L << (WAIT - 522)) | (1L << (WARNING - 522)) | (1L << (WELLFORMED - 522)) | (1L << (WHENEVER - 522)) | (1L << (WHILE - 522)) | (1L << (WITHOUT - 522)) | (1L << (WITHIN - 522)) | (1L << (WORK - 522)) | (1L << (WRITE - 522)) | (1L << (XML - 522)) | (1L << (XMLAGG - 522)) | (1L << (XMLATTRIBUTES - 522)))) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & ((1L << (XMLCAST - 586)) | (1L << (XMLCOLATTVAL - 586)) | (1L << (XMLELEMENT - 586)) | (1L << (XMLEXISTS - 586)) | (1L << (XMLFOREST - 586)) | (1L << (XMLNAMESPACES - 586)) | (1L << (XMLPARSE - 586)) | (1L << (XMLPI - 586)) | (1L << (XMLQUERY - 586)) | (1L << (XMLROOT - 586)) | (1L << (XMLSERIALIZE - 586)) | (1L << (XMLTABLE - 586)) | (1L << (YEAR - 586)) | (1L << (YES - 586)) | (1L << (YMINTERVAL_UNCONSTRAINED - 586)) | (1L << (ZONE - 586)) | (1L << (PREDICTION - 586)) | (1L << (PREDICTION_BOUNDS - 586)) | (1L << (PREDICTION_COST - 586)) | (1L << (PREDICTION_DETAILS - 586)) | (1L << (PREDICTION_PROBABILITY - 586)) | (1L << (PREDICTION_SET - 586)) | (1L << (CUME_DIST - 586)) | (1L << (DENSE_RANK - 586)) | (1L << (LISTAGG - 586)) | (1L << (PERCENT_RANK - 586)) | (1L << (PERCENTILE_CONT - 586)) | (1L << (PERCENTILE_DISC - 586)) | (1L << (RANK - 586)) | (1L << (AVG - 586)) | (1L << (CORR - 586)) | (1L << (LAG - 586)) | (1L << (LEAD - 586)) | (1L << (MAX - 586)) | (1L << (MEDIAN - 586)) | (1L << (MIN - 586)) | (1L << (NTILE - 586)) | (1L << (RATIO_TO_REPORT - 586)) | (1L << (ROW_NUMBER - 586)) | (1L << (SUM - 586)) | (1L << (VARIANCE - 586)) | (1L << (REGR_ - 586)) | (1L << (STDDEV - 586)) | (1L << (VAR_ - 586)) | (1L << (COVAR_ - 586)) | (1L << (DELIMITED_ID - 586)))) != 0) || _la==COMMA || _la==REGULAR_ID );
					setState(3927);
					match(RIGHT_PAREN);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(3936);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==CASCADE || _la==INVALIDATE) {
					{
					setState(3934);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case CASCADE:
						{
						setState(3931);
						match(CASCADE);
						setState(3932);
						match(CONSTRAINTS);
						}
						break;
					case INVALIDATE:
						{
						setState(3933);
						match(INVALIDATE);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					setState(3938);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3941);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CHECKPOINT) {
					{
					setState(3939);
					match(CHECKPOINT);
					setState(3940);
					match(UNSIGNED_INTEGER);
					}
				}

				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3943);
				match(DROP);
				setState(3948);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case UNUSED:
					{
					setState(3944);
					match(UNUSED);
					setState(3945);
					match(COLUMNS);
					}
					break;
				case COLUMNS:
					{
					setState(3946);
					match(COLUMNS);
					setState(3947);
					match(CONTINUE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				{
				setState(3950);
				match(CHECKPOINT);
				setState(3951);
				match(UNSIGNED_INTEGER);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Rename_column_clauseContext extends ParserRuleContext {
		public TerminalNode RENAME() { return getToken(PLSQLParser.RENAME, 0); }
		public Old_column_nameContext old_column_name() {
			return getRuleContext(Old_column_nameContext.class,0);
		}
		public TerminalNode TO() { return getToken(PLSQLParser.TO, 0); }
		public New_column_nameContext new_column_name() {
			return getRuleContext(New_column_nameContext.class,0);
		}
		public TerminalNode COLUMN() { return getToken(PLSQLParser.COLUMN, 0); }
		public Rename_column_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rename_column_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterRename_column_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitRename_column_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitRename_column_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Rename_column_clauseContext rename_column_clause() throws RecognitionException {
		Rename_column_clauseContext _localctx = new Rename_column_clauseContext(_ctx, getState());
		enterRule(_localctx, 338, RULE_rename_column_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3954);
			match(RENAME);
			setState(3956);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COLUMN) {
				{
				setState(3955);
				match(COLUMN);
				}
			}

			setState(3958);
			old_column_name();
			setState(3959);
			match(TO);
			setState(3960);
			new_column_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Old_column_nameContext extends ParserRuleContext {
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public Old_column_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_old_column_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterOld_column_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitOld_column_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitOld_column_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Old_column_nameContext old_column_name() throws RecognitionException {
		Old_column_nameContext _localctx = new Old_column_nameContext(_ctx, getState());
		enterRule(_localctx, 340, RULE_old_column_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3962);
			column_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class New_column_nameContext extends ParserRuleContext {
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public New_column_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_new_column_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterNew_column_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitNew_column_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitNew_column_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final New_column_nameContext new_column_name() throws RecognitionException {
		New_column_nameContext _localctx = new New_column_nameContext(_ctx, getState());
		enterRule(_localctx, 342, RULE_new_column_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3964);
			column_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Modify_collection_retrievalContext extends ParserRuleContext {
		public TerminalNode MODIFY() { return getToken(PLSQLParser.MODIFY, 0); }
		public TerminalNode NESTED() { return getToken(PLSQLParser.NESTED, 0); }
		public TerminalNode TABLE() { return getToken(PLSQLParser.TABLE, 0); }
		public Collection_itemContext collection_item() {
			return getRuleContext(Collection_itemContext.class,0);
		}
		public TerminalNode RETURN() { return getToken(PLSQLParser.RETURN, 0); }
		public TerminalNode AS() { return getToken(PLSQLParser.AS, 0); }
		public TerminalNode LOCATOR() { return getToken(PLSQLParser.LOCATOR, 0); }
		public TerminalNode VALUE() { return getToken(PLSQLParser.VALUE, 0); }
		public Modify_collection_retrievalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_modify_collection_retrieval; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterModify_collection_retrieval(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitModify_collection_retrieval(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitModify_collection_retrieval(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Modify_collection_retrievalContext modify_collection_retrieval() throws RecognitionException {
		Modify_collection_retrievalContext _localctx = new Modify_collection_retrievalContext(_ctx, getState());
		enterRule(_localctx, 344, RULE_modify_collection_retrieval);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3966);
			match(MODIFY);
			setState(3967);
			match(NESTED);
			setState(3968);
			match(TABLE);
			setState(3969);
			collection_item();
			setState(3970);
			match(RETURN);
			setState(3971);
			match(AS);
			setState(3972);
			_la = _input.LA(1);
			if ( !(_la==LOCATOR || _la==VALUE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Collection_itemContext extends ParserRuleContext {
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public Collection_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_collection_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterCollection_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitCollection_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitCollection_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Collection_itemContext collection_item() throws RecognitionException {
		Collection_itemContext _localctx = new Collection_itemContext(_ctx, getState());
		enterRule(_localctx, 346, RULE_collection_item);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3974);
			tableview_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Modify_lob_storage_clauseContext extends ParserRuleContext {
		public TerminalNode MODIFY() { return getToken(PLSQLParser.MODIFY, 0); }
		public TerminalNode LOB() { return getToken(PLSQLParser.LOB, 0); }
		public List<TerminalNode> LEFT_PAREN() { return getTokens(PLSQLParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(PLSQLParser.LEFT_PAREN, i);
		}
		public Lob_itemContext lob_item() {
			return getRuleContext(Lob_itemContext.class,0);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(PLSQLParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(PLSQLParser.RIGHT_PAREN, i);
		}
		public Modify_lob_parametersContext modify_lob_parameters() {
			return getRuleContext(Modify_lob_parametersContext.class,0);
		}
		public Modify_lob_storage_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_modify_lob_storage_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterModify_lob_storage_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitModify_lob_storage_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitModify_lob_storage_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Modify_lob_storage_clauseContext modify_lob_storage_clause() throws RecognitionException {
		Modify_lob_storage_clauseContext _localctx = new Modify_lob_storage_clauseContext(_ctx, getState());
		enterRule(_localctx, 348, RULE_modify_lob_storage_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3976);
			match(MODIFY);
			setState(3977);
			match(LOB);
			setState(3978);
			match(LEFT_PAREN);
			setState(3979);
			lob_item();
			setState(3980);
			match(RIGHT_PAREN);
			setState(3981);
			match(LEFT_PAREN);
			setState(3982);
			modify_lob_parameters();
			setState(3983);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Modify_lob_parametersContext extends ParserRuleContext {
		public List<Storage_clauseContext> storage_clause() {
			return getRuleContexts(Storage_clauseContext.class);
		}
		public Storage_clauseContext storage_clause(int i) {
			return getRuleContext(Storage_clauseContext.class,i);
		}
		public List<TerminalNode> UNSIGNED_INTEGER() { return getTokens(PLSQLParser.UNSIGNED_INTEGER); }
		public TerminalNode UNSIGNED_INTEGER(int i) {
			return getToken(PLSQLParser.UNSIGNED_INTEGER, i);
		}
		public List<TerminalNode> REBUILD() { return getTokens(PLSQLParser.REBUILD); }
		public TerminalNode REBUILD(int i) {
			return getToken(PLSQLParser.REBUILD, i);
		}
		public List<TerminalNode> FREEPOOLS() { return getTokens(PLSQLParser.FREEPOOLS); }
		public TerminalNode FREEPOOLS(int i) {
			return getToken(PLSQLParser.FREEPOOLS, i);
		}
		public List<Lob_retention_clauseContext> lob_retention_clause() {
			return getRuleContexts(Lob_retention_clauseContext.class);
		}
		public Lob_retention_clauseContext lob_retention_clause(int i) {
			return getRuleContext(Lob_retention_clauseContext.class,i);
		}
		public List<Lob_deduplicate_clauseContext> lob_deduplicate_clause() {
			return getRuleContexts(Lob_deduplicate_clauseContext.class);
		}
		public Lob_deduplicate_clauseContext lob_deduplicate_clause(int i) {
			return getRuleContext(Lob_deduplicate_clauseContext.class,i);
		}
		public List<Lob_compression_clauseContext> lob_compression_clause() {
			return getRuleContexts(Lob_compression_clauseContext.class);
		}
		public Lob_compression_clauseContext lob_compression_clause(int i) {
			return getRuleContext(Lob_compression_clauseContext.class,i);
		}
		public List<TerminalNode> ENCRYPT() { return getTokens(PLSQLParser.ENCRYPT); }
		public TerminalNode ENCRYPT(int i) {
			return getToken(PLSQLParser.ENCRYPT, i);
		}
		public List<Encryption_specContext> encryption_spec() {
			return getRuleContexts(Encryption_specContext.class);
		}
		public Encryption_specContext encryption_spec(int i) {
			return getRuleContext(Encryption_specContext.class,i);
		}
		public List<TerminalNode> DECRYPT() { return getTokens(PLSQLParser.DECRYPT); }
		public TerminalNode DECRYPT(int i) {
			return getToken(PLSQLParser.DECRYPT, i);
		}
		public List<TerminalNode> CACHE() { return getTokens(PLSQLParser.CACHE); }
		public TerminalNode CACHE(int i) {
			return getToken(PLSQLParser.CACHE, i);
		}
		public List<Allocate_extent_clauseContext> allocate_extent_clause() {
			return getRuleContexts(Allocate_extent_clauseContext.class);
		}
		public Allocate_extent_clauseContext allocate_extent_clause(int i) {
			return getRuleContext(Allocate_extent_clauseContext.class,i);
		}
		public List<Shrink_clauseContext> shrink_clause() {
			return getRuleContexts(Shrink_clauseContext.class);
		}
		public Shrink_clauseContext shrink_clause(int i) {
			return getRuleContext(Shrink_clauseContext.class,i);
		}
		public List<Deallocate_unused_clauseContext> deallocate_unused_clause() {
			return getRuleContexts(Deallocate_unused_clauseContext.class);
		}
		public Deallocate_unused_clauseContext deallocate_unused_clause(int i) {
			return getRuleContext(Deallocate_unused_clauseContext.class,i);
		}
		public List<TerminalNode> PCTVERSION() { return getTokens(PLSQLParser.PCTVERSION); }
		public TerminalNode PCTVERSION(int i) {
			return getToken(PLSQLParser.PCTVERSION, i);
		}
		public List<TerminalNode> NOCACHE() { return getTokens(PLSQLParser.NOCACHE); }
		public TerminalNode NOCACHE(int i) {
			return getToken(PLSQLParser.NOCACHE, i);
		}
		public List<TerminalNode> READS() { return getTokens(PLSQLParser.READS); }
		public TerminalNode READS(int i) {
			return getToken(PLSQLParser.READS, i);
		}
		public List<Logging_clauseContext> logging_clause() {
			return getRuleContexts(Logging_clauseContext.class);
		}
		public Logging_clauseContext logging_clause(int i) {
			return getRuleContext(Logging_clauseContext.class,i);
		}
		public Modify_lob_parametersContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_modify_lob_parameters; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterModify_lob_parameters(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitModify_lob_parameters(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitModify_lob_parameters(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Modify_lob_parametersContext modify_lob_parameters() throws RecognitionException {
		Modify_lob_parametersContext _localctx = new Modify_lob_parametersContext(_ctx, getState());
		enterRule(_localctx, 350, RULE_modify_lob_parameters);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4009); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				setState(4009);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,559,_ctx) ) {
				case 1:
					{
					setState(3985);
					storage_clause();
					}
					break;
				case 2:
					{
					setState(3986);
					_la = _input.LA(1);
					if ( !(_la==FREEPOOLS || _la==PCTVERSION) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(3987);
					match(UNSIGNED_INTEGER);
					}
					break;
				case 3:
					{
					setState(3988);
					match(REBUILD);
					setState(3989);
					match(FREEPOOLS);
					}
					break;
				case 4:
					{
					setState(3990);
					lob_retention_clause();
					}
					break;
				case 5:
					{
					setState(3991);
					lob_deduplicate_clause();
					}
					break;
				case 6:
					{
					setState(3992);
					lob_compression_clause();
					}
					break;
				case 7:
					{
					setState(3993);
					match(ENCRYPT);
					setState(3994);
					encryption_spec();
					}
					break;
				case 8:
					{
					setState(3995);
					match(DECRYPT);
					}
					break;
				case 9:
					{
					setState(3996);
					match(CACHE);
					}
					break;
				case 10:
					{
					setState(4001);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,557,_ctx) ) {
					case 1:
						{
						setState(3997);
						match(CACHE);
						}
						break;
					case 2:
						{
						setState(3998);
						match(NOCACHE);
						}
						break;
					case 3:
						{
						setState(3999);
						match(CACHE);
						setState(4000);
						match(READS);
						}
						break;
					}
					setState(4004);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==FILESYSTEM_LIKE_LOGGING || _la==LOGGING || _la==NOLOGGING) {
						{
						setState(4003);
						logging_clause();
						}
					}

					}
					break;
				case 11:
					{
					setState(4006);
					allocate_extent_clause();
					}
					break;
				case 12:
					{
					setState(4007);
					shrink_clause();
					}
					break;
				case 13:
					{
					setState(4008);
					deallocate_unused_clause();
					}
					break;
				}
				}
				setState(4011); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==ALLOCATE || _la==CACHE || ((((_la - 83)) & ~0x3f) == 0 && ((1L << (_la - 83)) & ((1L << (COMPRESS - 83)) | (1L << (DEALLOCATE - 83)) | (1L << (DECRYPT - 83)) | (1L << (DEDUPLICATE - 83)))) != 0) || _la==ENCRYPT || _la==FREEPOOLS || _la==KEEP_DUPLICATES || ((((_la - 319)) & ~0x3f) == 0 && ((1L << (_la - 319)) & ((1L << (NOCACHE - 319)) | (1L << (NOCOMPRESS - 319)) | (1L << (PCTVERSION - 319)))) != 0) || ((((_la - 410)) & ~0x3f) == 0 && ((1L << (_la - 410)) & ((1L << (REBUILD - 410)) | (1L << (RETENTION - 410)) | (1L << (SHRINK - 410)))) != 0) || _la==STORAGE );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_functionContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PLSQLParser.DROP, 0); }
		public TerminalNode FUNCTION() { return getToken(PLSQLParser.FUNCTION, 0); }
		public Function_nameContext function_name() {
			return getRuleContext(Function_nameContext.class,0);
		}
		public Drop_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterDrop_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitDrop_function(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitDrop_function(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_functionContext drop_function() throws RecognitionException {
		Drop_functionContext _localctx = new Drop_functionContext(_ctx, getState());
		enterRule(_localctx, 352, RULE_drop_function);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4013);
			match(DROP);
			setState(4014);
			match(FUNCTION);
			setState(4015);
			function_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_functionContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PLSQLParser.ALTER, 0); }
		public TerminalNode FUNCTION() { return getToken(PLSQLParser.FUNCTION, 0); }
		public Function_nameContext function_name() {
			return getRuleContext(Function_nameContext.class,0);
		}
		public TerminalNode COMPILE() { return getToken(PLSQLParser.COMPILE, 0); }
		public TerminalNode DEBUG() { return getToken(PLSQLParser.DEBUG, 0); }
		public List<Compiler_parameters_clauseContext> compiler_parameters_clause() {
			return getRuleContexts(Compiler_parameters_clauseContext.class);
		}
		public Compiler_parameters_clauseContext compiler_parameters_clause(int i) {
			return getRuleContext(Compiler_parameters_clauseContext.class,i);
		}
		public TerminalNode REUSE() { return getToken(PLSQLParser.REUSE, 0); }
		public TerminalNode SETTINGS() { return getToken(PLSQLParser.SETTINGS, 0); }
		public Alter_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterAlter_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitAlter_function(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitAlter_function(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_functionContext alter_function() throws RecognitionException {
		Alter_functionContext _localctx = new Alter_functionContext(_ctx, getState());
		enterRule(_localctx, 354, RULE_alter_function);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4017);
			match(ALTER);
			setState(4018);
			match(FUNCTION);
			setState(4019);
			function_name();
			setState(4020);
			match(COMPILE);
			setState(4022);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,561,_ctx) ) {
			case 1:
				{
				setState(4021);
				match(DEBUG);
				}
				break;
			}
			setState(4027);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,562,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4024);
					compiler_parameters_clause();
					}
					} 
				}
				setState(4029);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,562,_ctx);
			}
			setState(4032);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==REUSE) {
				{
				setState(4030);
				match(REUSE);
				setState(4031);
				match(SETTINGS);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_function_bodyContext extends ParserRuleContext {
		public TerminalNode FUNCTION() { return getToken(PLSQLParser.FUNCTION, 0); }
		public Function_nameContext function_name() {
			return getRuleContext(Function_nameContext.class,0);
		}
		public TerminalNode RETURN() { return getToken(PLSQLParser.RETURN, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode USING() { return getToken(PLSQLParser.USING, 0); }
		public Implementation_type_nameContext implementation_type_name() {
			return getRuleContext(Implementation_type_nameContext.class,0);
		}
		public TerminalNode CREATE() { return getToken(PLSQLParser.CREATE, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PLSQLParser.LEFT_PAREN, 0); }
		public List<ParameterContext> parameter() {
			return getRuleContexts(ParameterContext.class);
		}
		public ParameterContext parameter(int i) {
			return getRuleContext(ParameterContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PLSQLParser.RIGHT_PAREN, 0); }
		public List<Invoker_rights_clauseContext> invoker_rights_clause() {
			return getRuleContexts(Invoker_rights_clauseContext.class);
		}
		public Invoker_rights_clauseContext invoker_rights_clause(int i) {
			return getRuleContext(Invoker_rights_clauseContext.class,i);
		}
		public List<Parallel_enable_clauseContext> parallel_enable_clause() {
			return getRuleContexts(Parallel_enable_clauseContext.class);
		}
		public Parallel_enable_clauseContext parallel_enable_clause(int i) {
			return getRuleContext(Parallel_enable_clauseContext.class,i);
		}
		public List<Result_cache_clauseContext> result_cache_clause() {
			return getRuleContexts(Result_cache_clauseContext.class);
		}
		public Result_cache_clauseContext result_cache_clause(int i) {
			return getRuleContext(Result_cache_clauseContext.class,i);
		}
		public List<TerminalNode> DETERMINISTIC() { return getTokens(PLSQLParser.DETERMINISTIC); }
		public TerminalNode DETERMINISTIC(int i) {
			return getToken(PLSQLParser.DETERMINISTIC, i);
		}
		public TerminalNode PIPELINED() { return getToken(PLSQLParser.PIPELINED, 0); }
		public TerminalNode AGGREGATE() { return getToken(PLSQLParser.AGGREGATE, 0); }
		public TerminalNode IS() { return getToken(PLSQLParser.IS, 0); }
		public TerminalNode AS() { return getToken(PLSQLParser.AS, 0); }
		public TerminalNode OR() { return getToken(PLSQLParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(PLSQLParser.REPLACE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PLSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLSQLParser.COMMA, i);
		}
		public BodyContext body() {
			return getRuleContext(BodyContext.class,0);
		}
		public Call_specContext call_spec() {
			return getRuleContext(Call_specContext.class,0);
		}
		public TerminalNode DECLARE() { return getToken(PLSQLParser.DECLARE, 0); }
		public List<Declare_specContext> declare_spec() {
			return getRuleContexts(Declare_specContext.class);
		}
		public Declare_specContext declare_spec(int i) {
			return getRuleContext(Declare_specContext.class,i);
		}
		public Create_function_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_function_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterCreate_function_body(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitCreate_function_body(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitCreate_function_body(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_function_bodyContext create_function_body() throws RecognitionException {
		Create_function_bodyContext _localctx = new Create_function_bodyContext(_ctx, getState());
		enterRule(_localctx, 356, RULE_create_function_body);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4039);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CREATE) {
				{
				setState(4034);
				match(CREATE);
				setState(4037);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OR) {
					{
					setState(4035);
					match(OR);
					setState(4036);
					match(REPLACE);
					}
				}

				}
			}

			setState(4041);
			match(FUNCTION);
			setState(4042);
			function_name();
			setState(4054);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(4043);
				match(LEFT_PAREN);
				setState(4044);
				parameter();
				setState(4049);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4045);
					match(COMMA);
					setState(4046);
					parameter();
					}
					}
					setState(4051);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4052);
				match(RIGHT_PAREN);
				}
			}

			setState(4056);
			match(RETURN);
			setState(4057);
			type_spec();
			setState(4064);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==AUTHID || _la==DETERMINISTIC || _la==PARALLEL_ENABLE || _la==RESULT_CACHE) {
				{
				setState(4062);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case AUTHID:
					{
					setState(4058);
					invoker_rights_clause();
					}
					break;
				case PARALLEL_ENABLE:
					{
					setState(4059);
					parallel_enable_clause();
					}
					break;
				case RESULT_CACHE:
					{
					setState(4060);
					result_cache_clause();
					}
					break;
				case DETERMINISTIC:
					{
					setState(4061);
					match(DETERMINISTIC);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				setState(4066);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4087);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,574,_ctx) ) {
			case 1:
				{
				{
				setState(4068);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PIPELINED) {
					{
					setState(4067);
					match(PIPELINED);
					}
				}

				setState(4070);
				_la = _input.LA(1);
				if ( !(_la==AS || _la==IS) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4082);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,573,_ctx) ) {
				case 1:
					{
					setState(4072);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==DECLARE) {
						{
						setState(4071);
						match(DECLARE);
						}
					}

					setState(4077);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BUILD) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (CHR - 65)) | (1L << (CLOB - 65)) | (1L << (CLOSE - 65)) | (1L << (CLUSTER - 65)) | (1L << (COALESCE - 65)) | (1L << (COLLECT - 65)) | (1L << (COLUMNS - 65)) | (1L << (COMMENT - 65)) | (1L << (COMMIT - 65)) | (1L << (COMMITTED - 65)) | (1L << (COMPATIBILITY - 65)) | (1L << (COMPILE - 65)) | (1L << (COMPLETE - 65)) | (1L << (COMPOUND - 65)) | (1L << (CONCAT - 65)) | (1L << (CONSTANT - 65)) | (1L << (CONSTRAINT - 65)) | (1L << (CONSTRAINTS - 65)) | (1L << (CONSTRUCTOR - 65)) | (1L << (CONTENT - 65)) | (1L << (CONTEXT - 65)) | (1L << (CONTINUE - 65)) | (1L << (CONVERT - 65)) | (1L << (CORRUPT_XID - 65)) | (1L << (CORRUPT_XID_ALL - 65)) | (1L << (COST - 65)) | (1L << (COUNT - 65)) | (1L << (CREATE - 65)) | (1L << (CROSS - 65)) | (1L << (CUBE - 65)) | (1L << (CURRENT_USER - 65)) | (1L << (CURSOR - 65)) | (1L << (CUSTOMDATUM - 65)) | (1L << (CYCLE - 65)) | (1L << (DATA - 65)) | (1L << (DATABASE - 65)) | (1L << (DATE - 65)) | (1L << (DAY - 65)) | (1L << (DB_ROLE_CHANGE - 65)) | (1L << (DBTIMEZONE - 65)) | (1L << (DDL - 65)) | (1L << (DEBUG - 65)) | (1L << (DEC - 65)) | (1L << (DECIMAL - 65)) | (1L << (DECODE - 65)) | (1L << (DECOMPOSE - 65)) | (1L << (DECREMENT - 65)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DEMAND - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (EDITIONING - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENFORCED - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FAST - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)) | (1L << (FOLLOWING - 129)) | (1L << (FOLLOWS - 129)) | (1L << (FORALL - 129)) | (1L << (FORCE - 129)))) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & ((1L << (FULL - 197)) | (1L << (FUNCTION - 197)) | (1L << (GROUPING - 197)) | (1L << (HASH - 197)) | (1L << (HIDE - 197)) | (1L << (HOUR - 197)) | (1L << (IGNORE - 197)) | (1L << (IMMEDIATE - 197)) | (1L << (INCLUDE - 197)) | (1L << (INCLUDING - 197)) | (1L << (INCREMENT - 197)) | (1L << (INDENT - 197)) | (1L << (INDEXED - 197)) | (1L << (INDICATOR - 197)) | (1L << (INDICES - 197)) | (1L << (INFINITE - 197)) | (1L << (INLINE - 197)) | (1L << (INNER - 197)) | (1L << (INOUT - 197)) | (1L << (INSTANTIABLE - 197)) | (1L << (INSTEAD - 197)) | (1L << (INT - 197)) | (1L << (INTEGER - 197)) | (1L << (INTERVAL - 197)) | (1L << (INVALIDATE - 197)) | (1L << (ISOLATION - 197)) | (1L << (ITERATE - 197)) | (1L << (JAVA - 197)) | (1L << (JOIN - 197)) | (1L << (KEEP - 197)) | (1L << (LANGUAGE - 197)) | (1L << (LAST - 197)) | (1L << (LAST_VALUE - 197)) | (1L << (LEADING - 197)) | (1L << (LEFT - 197)) | (1L << (LEVEL - 197)))) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & ((1L << (LIBRARY - 261)) | (1L << (LIKE2 - 261)) | (1L << (LIKE4 - 261)) | (1L << (LIKEC - 261)) | (1L << (LIMIT - 261)) | (1L << (LIST - 261)) | (1L << (LOCAL - 261)) | (1L << (LOCKED - 261)) | (1L << (LOG - 261)) | (1L << (LOGOFF - 261)) | (1L << (LOGON - 261)) | (1L << (LONG - 261)) | (1L << (LOOP - 261)) | (1L << (MAIN - 261)) | (1L << (MAP - 261)) | (1L << (MASTER - 261)) | (1L << (MATCHED - 261)) | (1L << (MAXVALUE - 261)) | (1L << (MEASURES - 261)) | (1L << (MEMBER - 261)) | (1L << (MERGE - 261)) | (1L << (MINUTE - 261)) | (1L << (MINVALUE - 261)) | (1L << (MLSLABEL - 261)) | (1L << (MODEL - 261)) | (1L << (MODIFY - 261)) | (1L << (MONTH - 261)) | (1L << (MULTISET - 261)) | (1L << (NAME - 261)) | (1L << (NAN - 261)) | (1L << (NATURAL - 261)) | (1L << (NATURALN - 261)) | (1L << (NAV - 261)) | (1L << (NCHAR - 261)) | (1L << (NCHAR_CS - 261)) | (1L << (NCLOB - 261)) | (1L << (NESTED - 261)) | (1L << (NEVER - 261)) | (1L << (NEW - 261)) | (1L << (NO - 261)) | (1L << (NOAUDIT - 261)) | (1L << (NOCOPY - 261)) | (1L << (NOCYCLE - 261)) | (1L << (NOENTITYESCAPING - 261)))) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & ((1L << (NONE - 329)) | (1L << (NOSCHEMACHECK - 329)) | (1L << (NVL - 329)) | (1L << (NULLS - 329)) | (1L << (NUMBER - 329)) | (1L << (NUMERIC - 329)) | (1L << (NVARCHAR2 - 329)) | (1L << (MATERIALIZED - 329)) | (1L << (OBJECT - 329)) | (1L << (OFF - 329)) | (1L << (OID - 329)) | (1L << (OLD - 329)) | (1L << (ONLY - 329)) | (1L << (OPEN - 329)) | (1L << (ORADATA - 329)) | (1L << (ORDINALITY - 329)) | (1L << (OSERROR - 329)) | (1L << (OUT - 329)) | (1L << (OUTER - 329)) | (1L << (OVER - 329)) | (1L << (OVERRIDING - 329)) | (1L << (PACKAGE - 329)) | (1L << (PARALLEL_ENABLE - 329)) | (1L << (PARAMETERS - 329)) | (1L << (PARENT - 329)) | (1L << (PARTITION - 329)) | (1L << (PASSING - 329)) | (1L << (PATH - 329)) | (1L << (PIPELINED - 329)) | (1L << (PLAN - 329)) | (1L << (PLS_INTEGER - 329)) | (1L << (POSITIVE - 329)) | (1L << (POSITIVEN - 329)) | (1L << (PRAGMA - 329)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (PREBUILT - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)) | (1L << (PRESENT - 393)) | (1L << (PROCEDURE - 393)) | (1L << (PUBLIC - 393)) | (1L << (RAISE - 393)) | (1L << (RANGE - 393)) | (1L << (RAW - 393)) | (1L << (READ - 393)) | (1L << (REAL - 393)) | (1L << (RECORD - 393)) | (1L << (REDUCED - 393)) | (1L << (REF - 393)) | (1L << (REFERENCE - 393)) | (1L << (REFERENCING - 393)) | (1L << (REFRESH - 393)) | (1L << (REJECT - 393)) | (1L << (RELIES_ON - 393)) | (1L << (RENAME - 393)) | (1L << (REPLACE - 393)) | (1L << (RESPECT - 393)) | (1L << (RESTRICT_REFERENCES - 393)) | (1L << (RESULT - 393)) | (1L << (RESULT_CACHE - 393)) | (1L << (RETURN - 393)) | (1L << (RETURNING - 393)) | (1L << (REUSE - 393)) | (1L << (REVERSE - 393)) | (1L << (REWRITE - 393)) | (1L << (RIGHT - 393)) | (1L << (ROLE - 393)) | (1L << (ROLLBACK - 393)) | (1L << (ROLLUP - 393)) | (1L << (ROW - 393)) | (1L << (ROWID - 393)) | (1L << (ROWS - 393)) | (1L << (RULES - 393)) | (1L << (SAMPLE - 393)) | (1L << (SAVE - 393)) | (1L << (SAVEPOINT - 393)) | (1L << (SCHEMA - 393)) | (1L << (SCHEMACHECK - 393)) | (1L << (SCN - 393)) | (1L << (SECOND - 393)))) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & ((1L << (SEED - 458)) | (1L << (SEGMENT - 458)) | (1L << (SELF - 458)) | (1L << (SEQUENTIAL - 458)) | (1L << (SERIALIZABLE - 458)) | (1L << (SERIALLY_REUSABLE - 458)) | (1L << (SERVERERROR - 458)) | (1L << (SESSIONTIMEZONE - 458)) | (1L << (SET - 458)) | (1L << (SETS - 458)) | (1L << (SETTINGS - 458)) | (1L << (SHOW - 458)) | (1L << (SHUTDOWN - 458)) | (1L << (SIBLINGS - 458)) | (1L << (SIGNTYPE - 458)) | (1L << (SIMPLE_INTEGER - 458)) | (1L << (SINGLE - 458)) | (1L << (SIZE - 458)) | (1L << (SKIP_ - 458)) | (1L << (SMALLINT - 458)) | (1L << (SNAPSHOT - 458)) | (1L << (SOME - 458)) | (1L << (SPECIFICATION - 458)) | (1L << (SQLDATA - 458)) | (1L << (SQLERROR - 458)) | (1L << (STANDALONE - 458)) | (1L << (STARTUP - 458)) | (1L << (STATEMENT - 458)) | (1L << (STATEMENT_ID - 458)) | (1L << (STATIC - 458)) | (1L << (STATISTICS - 458)) | (1L << (STRING - 458)) | (1L << (SUBMULTISET - 458)) | (1L << (SUBPARTITION - 458)) | (1L << (SUBSTITUTABLE - 458)) | (1L << (SUBSTRING - 458)) | (1L << (SUBTYPE - 458)) | (1L << (SUCCESS - 458)) | (1L << (SUSPEND - 458)) | (1L << (TABLES - 458)) | (1L << (TIME - 458)) | (1L << (TIMESTAMP - 458)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 458)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 458)) | (1L << (TIMESTAMP_UNCONSTRAINED - 458)))) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & ((1L << (TIMEZONE_ABBR - 522)) | (1L << (TIMEZONE_HOUR - 522)) | (1L << (TIMEZONE_MINUTE - 522)) | (1L << (TIMEZONE_REGION - 522)) | (1L << (TO_CHAR - 522)) | (1L << (TO_DATE - 522)) | (1L << (TRAILING - 522)) | (1L << (TRANSACTION - 522)) | (1L << (TRANSLATE - 522)) | (1L << (TREAT - 522)) | (1L << (TRIGGER - 522)) | (1L << (TRIM - 522)) | (1L << (TRUNCATE - 522)) | (1L << (TRUSTED - 522)) | (1L << (TYPE - 522)) | (1L << (UNBOUNDED - 522)) | (1L << (UNDER - 522)) | (1L << (UNLIMITED - 522)) | (1L << (UNTIL - 522)) | (1L << (UPDATED - 522)) | (1L << (UPSERT - 522)) | (1L << (UROWID - 522)) | (1L << (USE - 522)) | (1L << (VALIDATE - 522)) | (1L << (VALUE - 522)) | (1L << (VARCHAR - 522)) | (1L << (VARCHAR2 - 522)) | (1L << (VARIABLE - 522)) | (1L << (VARRAY - 522)) | (1L << (VARYING - 522)) | (1L << (VERBOSE - 522)) | (1L << (VERSION - 522)) | (1L << (VERSIONS - 522)) | (1L << (VIEW - 522)) | (1L << (WAIT - 522)) | (1L << (WARNING - 522)) | (1L << (WELLFORMED - 522)) | (1L << (WHENEVER - 522)) | (1L << (WHILE - 522)) | (1L << (WITHOUT - 522)) | (1L << (WITHIN - 522)) | (1L << (WORK - 522)) | (1L << (WRITE - 522)) | (1L << (XML - 522)) | (1L << (XMLAGG - 522)) | (1L << (XMLATTRIBUTES - 522)))) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & ((1L << (XMLCAST - 586)) | (1L << (XMLCOLATTVAL - 586)) | (1L << (XMLELEMENT - 586)) | (1L << (XMLEXISTS - 586)) | (1L << (XMLFOREST - 586)) | (1L << (XMLNAMESPACES - 586)) | (1L << (XMLPARSE - 586)) | (1L << (XMLPI - 586)) | (1L << (XMLQUERY - 586)) | (1L << (XMLROOT - 586)) | (1L << (XMLSERIALIZE - 586)) | (1L << (XMLTABLE - 586)) | (1L << (YEAR - 586)) | (1L << (YES - 586)) | (1L << (YMINTERVAL_UNCONSTRAINED - 586)) | (1L << (ZONE - 586)) | (1L << (PREDICTION - 586)) | (1L << (PREDICTION_BOUNDS - 586)) | (1L << (PREDICTION_COST - 586)) | (1L << (PREDICTION_DETAILS - 586)) | (1L << (PREDICTION_PROBABILITY - 586)) | (1L << (PREDICTION_SET - 586)) | (1L << (CUME_DIST - 586)) | (1L << (DENSE_RANK - 586)) | (1L << (LISTAGG - 586)) | (1L << (PERCENT_RANK - 586)) | (1L << (PERCENTILE_CONT - 586)) | (1L << (PERCENTILE_DISC - 586)) | (1L << (RANK - 586)) | (1L << (AVG - 586)) | (1L << (CORR - 586)) | (1L << (LAG - 586)) | (1L << (LEAD - 586)) | (1L << (MAX - 586)) | (1L << (MEDIAN - 586)) | (1L << (MIN - 586)) | (1L << (NTILE - 586)) | (1L << (RATIO_TO_REPORT - 586)) | (1L << (ROW_NUMBER - 586)) | (1L << (SUM - 586)) | (1L << (VARIANCE - 586)) | (1L << (REGR_ - 586)) | (1L << (STDDEV - 586)) | (1L << (VAR_ - 586)) | (1L << (COVAR_ - 586)) | (1L << (DELIMITED_ID - 586)))) != 0) || ((((_la - 655)) & ~0x3f) == 0 && ((1L << (_la - 655)) & ((1L << (BINDVAR - 655)) | (1L << (COLON - 655)) | (1L << (REGULAR_ID - 655)))) != 0)) {
						{
						{
						setState(4074);
						declare_spec();
						}
						}
						setState(4079);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(4080);
					body();
					}
					break;
				case 2:
					{
					setState(4081);
					call_spec();
					}
					break;
				}
				}
				}
				break;
			case 2:
				{
				setState(4084);
				_la = _input.LA(1);
				if ( !(_la==AGGREGATE || _la==PIPELINED) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4085);
				match(USING);
				setState(4086);
				implementation_type_name();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Parallel_enable_clauseContext extends ParserRuleContext {
		public TerminalNode PARALLEL_ENABLE() { return getToken(PLSQLParser.PARALLEL_ENABLE, 0); }
		public Partition_by_clauseContext partition_by_clause() {
			return getRuleContext(Partition_by_clauseContext.class,0);
		}
		public Parallel_enable_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parallel_enable_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterParallel_enable_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitParallel_enable_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitParallel_enable_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Parallel_enable_clauseContext parallel_enable_clause() throws RecognitionException {
		Parallel_enable_clauseContext _localctx = new Parallel_enable_clauseContext(_ctx, getState());
		enterRule(_localctx, 358, RULE_parallel_enable_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4089);
			match(PARALLEL_ENABLE);
			setState(4091);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(4090);
				partition_by_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Partition_by_clauseContext extends ParserRuleContext {
		public List<TerminalNode> LEFT_PAREN() { return getTokens(PLSQLParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(PLSQLParser.LEFT_PAREN, i);
		}
		public TerminalNode PARTITION() { return getToken(PLSQLParser.PARTITION, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode BY() { return getToken(PLSQLParser.BY, 0); }
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(PLSQLParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(PLSQLParser.RIGHT_PAREN, i);
		}
		public TerminalNode ANY() { return getToken(PLSQLParser.ANY, 0); }
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public TerminalNode HASH() { return getToken(PLSQLParser.HASH, 0); }
		public TerminalNode RANGE() { return getToken(PLSQLParser.RANGE, 0); }
		public Streaming_clauseContext streaming_clause() {
			return getRuleContext(Streaming_clauseContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLSQLParser.COMMA, i);
		}
		public Partition_by_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partition_by_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterPartition_by_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitPartition_by_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitPartition_by_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Partition_by_clauseContext partition_by_clause() throws RecognitionException {
		Partition_by_clauseContext _localctx = new Partition_by_clauseContext(_ctx, getState());
		enterRule(_localctx, 360, RULE_partition_by_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4093);
			match(LEFT_PAREN);
			setState(4094);
			match(PARTITION);
			setState(4095);
			expression(0);
			setState(4096);
			match(BY);
			setState(4110);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ANY:
				{
				setState(4097);
				match(ANY);
				}
				break;
			case HASH:
			case RANGE:
				{
				setState(4098);
				_la = _input.LA(1);
				if ( !(_la==HASH || _la==RANGE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4099);
				match(LEFT_PAREN);
				setState(4100);
				column_name();
				setState(4105);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4101);
					match(COMMA);
					setState(4102);
					column_name();
					}
					}
					setState(4107);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4108);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(4113);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CLUSTER || _la==ORDER) {
				{
				setState(4112);
				streaming_clause();
				}
			}

			setState(4115);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Result_cache_clauseContext extends ParserRuleContext {
		public TerminalNode RESULT_CACHE() { return getToken(PLSQLParser.RESULT_CACHE, 0); }
		public Relies_on_partContext relies_on_part() {
			return getRuleContext(Relies_on_partContext.class,0);
		}
		public Result_cache_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_result_cache_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterResult_cache_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitResult_cache_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitResult_cache_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Result_cache_clauseContext result_cache_clause() throws RecognitionException {
		Result_cache_clauseContext _localctx = new Result_cache_clauseContext(_ctx, getState());
		enterRule(_localctx, 362, RULE_result_cache_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4117);
			match(RESULT_CACHE);
			setState(4119);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RELIES_ON) {
				{
				setState(4118);
				relies_on_part();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Relies_on_partContext extends ParserRuleContext {
		public TerminalNode RELIES_ON() { return getToken(PLSQLParser.RELIES_ON, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PLSQLParser.LEFT_PAREN, 0); }
		public List<Tableview_nameContext> tableview_name() {
			return getRuleContexts(Tableview_nameContext.class);
		}
		public Tableview_nameContext tableview_name(int i) {
			return getRuleContext(Tableview_nameContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PLSQLParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PLSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLSQLParser.COMMA, i);
		}
		public Relies_on_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_relies_on_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterRelies_on_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitRelies_on_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitRelies_on_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Relies_on_partContext relies_on_part() throws RecognitionException {
		Relies_on_partContext _localctx = new Relies_on_partContext(_ctx, getState());
		enterRule(_localctx, 364, RULE_relies_on_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4121);
			match(RELIES_ON);
			setState(4122);
			match(LEFT_PAREN);
			setState(4123);
			tableview_name();
			setState(4128);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4124);
				match(COMMA);
				setState(4125);
				tableview_name();
				}
				}
				setState(4130);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4131);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Streaming_clauseContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode BY() { return getToken(PLSQLParser.BY, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PLSQLParser.LEFT_PAREN, 0); }
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PLSQLParser.RIGHT_PAREN, 0); }
		public TerminalNode ORDER() { return getToken(PLSQLParser.ORDER, 0); }
		public TerminalNode CLUSTER() { return getToken(PLSQLParser.CLUSTER, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PLSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLSQLParser.COMMA, i);
		}
		public Streaming_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_streaming_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterStreaming_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitStreaming_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitStreaming_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Streaming_clauseContext streaming_clause() throws RecognitionException {
		Streaming_clauseContext _localctx = new Streaming_clauseContext(_ctx, getState());
		enterRule(_localctx, 366, RULE_streaming_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4133);
			_la = _input.LA(1);
			if ( !(_la==CLUSTER || _la==ORDER) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4134);
			expression(0);
			setState(4135);
			match(BY);
			setState(4136);
			match(LEFT_PAREN);
			setState(4137);
			column_name();
			setState(4142);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4138);
				match(COMMA);
				setState(4139);
				column_name();
				}
				}
				setState(4144);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4145);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_packageContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PLSQLParser.DROP, 0); }
		public TerminalNode PACKAGE() { return getToken(PLSQLParser.PACKAGE, 0); }
		public Package_nameContext package_name() {
			return getRuleContext(Package_nameContext.class,0);
		}
		public TerminalNode BODY() { return getToken(PLSQLParser.BODY, 0); }
		public Drop_packageContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_package; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterDrop_package(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitDrop_package(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitDrop_package(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_packageContext drop_package() throws RecognitionException {
		Drop_packageContext _localctx = new Drop_packageContext(_ctx, getState());
		enterRule(_localctx, 368, RULE_drop_package);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4147);
			match(DROP);
			setState(4148);
			match(PACKAGE);
			setState(4150);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,582,_ctx) ) {
			case 1:
				{
				setState(4149);
				match(BODY);
				}
				break;
			}
			setState(4152);
			package_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_packageContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PLSQLParser.ALTER, 0); }
		public List<TerminalNode> PACKAGE() { return getTokens(PLSQLParser.PACKAGE); }
		public TerminalNode PACKAGE(int i) {
			return getToken(PLSQLParser.PACKAGE, i);
		}
		public Package_nameContext package_name() {
			return getRuleContext(Package_nameContext.class,0);
		}
		public TerminalNode COMPILE() { return getToken(PLSQLParser.COMPILE, 0); }
		public TerminalNode DEBUG() { return getToken(PLSQLParser.DEBUG, 0); }
		public List<Compiler_parameters_clauseContext> compiler_parameters_clause() {
			return getRuleContexts(Compiler_parameters_clauseContext.class);
		}
		public Compiler_parameters_clauseContext compiler_parameters_clause(int i) {
			return getRuleContext(Compiler_parameters_clauseContext.class,i);
		}
		public TerminalNode REUSE() { return getToken(PLSQLParser.REUSE, 0); }
		public TerminalNode SETTINGS() { return getToken(PLSQLParser.SETTINGS, 0); }
		public TerminalNode BODY() { return getToken(PLSQLParser.BODY, 0); }
		public TerminalNode SPECIFICATION() { return getToken(PLSQLParser.SPECIFICATION, 0); }
		public Alter_packageContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_package; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterAlter_package(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitAlter_package(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitAlter_package(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_packageContext alter_package() throws RecognitionException {
		Alter_packageContext _localctx = new Alter_packageContext(_ctx, getState());
		enterRule(_localctx, 370, RULE_alter_package);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4154);
			match(ALTER);
			setState(4155);
			match(PACKAGE);
			setState(4156);
			package_name();
			setState(4157);
			match(COMPILE);
			setState(4159);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,583,_ctx) ) {
			case 1:
				{
				setState(4158);
				match(DEBUG);
				}
				break;
			}
			setState(4162);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,584,_ctx) ) {
			case 1:
				{
				setState(4161);
				_la = _input.LA(1);
				if ( !(_la==BODY || _la==PACKAGE || _la==SPECIFICATION) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(4167);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,585,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4164);
					compiler_parameters_clause();
					}
					} 
				}
				setState(4169);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,585,_ctx);
			}
			setState(4172);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==REUSE) {
				{
				setState(4170);
				match(REUSE);
				setState(4171);
				match(SETTINGS);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_packageContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PLSQLParser.CREATE, 0); }
		public TerminalNode PACKAGE() { return getToken(PLSQLParser.PACKAGE, 0); }
		public TerminalNode OR() { return getToken(PLSQLParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(PLSQLParser.REPLACE, 0); }
		public Package_specContext package_spec() {
			return getRuleContext(Package_specContext.class,0);
		}
		public Package_bodyContext package_body() {
			return getRuleContext(Package_bodyContext.class,0);
		}
		public Create_packageContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_package; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterCreate_package(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitCreate_package(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitCreate_package(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_packageContext create_package() throws RecognitionException {
		Create_packageContext _localctx = new Create_packageContext(_ctx, getState());
		enterRule(_localctx, 372, RULE_create_package);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4174);
			match(CREATE);
			setState(4177);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(4175);
				match(OR);
				setState(4176);
				match(REPLACE);
				}
			}

			setState(4179);
			match(PACKAGE);
			setState(4182);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,588,_ctx) ) {
			case 1:
				{
				setState(4180);
				package_spec();
				}
				break;
			case 2:
				{
				setState(4181);
				package_body();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Package_bodyContext extends ParserRuleContext {
		public TerminalNode BODY() { return getToken(PLSQLParser.BODY, 0); }
		public List<Package_nameContext> package_name() {
			return getRuleContexts(Package_nameContext.class);
		}
		public Package_nameContext package_name(int i) {
			return getRuleContext(Package_nameContext.class,i);
		}
		public TerminalNode IS() { return getToken(PLSQLParser.IS, 0); }
		public TerminalNode AS() { return getToken(PLSQLParser.AS, 0); }
		public TerminalNode BEGIN() { return getToken(PLSQLParser.BEGIN, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public TerminalNode END() { return getToken(PLSQLParser.END, 0); }
		public List<Package_obj_bodyContext> package_obj_body() {
			return getRuleContexts(Package_obj_bodyContext.class);
		}
		public Package_obj_bodyContext package_obj_body(int i) {
			return getRuleContext(Package_obj_bodyContext.class,i);
		}
		public Package_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_package_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterPackage_body(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitPackage_body(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitPackage_body(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Package_bodyContext package_body() throws RecognitionException {
		Package_bodyContext _localctx = new Package_bodyContext(_ctx, getState());
		enterRule(_localctx, 374, RULE_package_body);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4184);
			match(BODY);
			setState(4185);
			package_name();
			setState(4186);
			_la = _input.LA(1);
			if ( !(_la==AS || _la==IS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4190);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BUILD) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (CHR - 65)) | (1L << (CLOB - 65)) | (1L << (CLOSE - 65)) | (1L << (CLUSTER - 65)) | (1L << (COALESCE - 65)) | (1L << (COLLECT - 65)) | (1L << (COLUMNS - 65)) | (1L << (COMMENT - 65)) | (1L << (COMMIT - 65)) | (1L << (COMMITTED - 65)) | (1L << (COMPATIBILITY - 65)) | (1L << (COMPILE - 65)) | (1L << (COMPLETE - 65)) | (1L << (COMPOUND - 65)) | (1L << (CONCAT - 65)) | (1L << (CONSTANT - 65)) | (1L << (CONSTRAINT - 65)) | (1L << (CONSTRAINTS - 65)) | (1L << (CONSTRUCTOR - 65)) | (1L << (CONTENT - 65)) | (1L << (CONTEXT - 65)) | (1L << (CONTINUE - 65)) | (1L << (CONVERT - 65)) | (1L << (CORRUPT_XID - 65)) | (1L << (CORRUPT_XID_ALL - 65)) | (1L << (COST - 65)) | (1L << (COUNT - 65)) | (1L << (CREATE - 65)) | (1L << (CROSS - 65)) | (1L << (CUBE - 65)) | (1L << (CURRENT_USER - 65)) | (1L << (CURSOR - 65)) | (1L << (CUSTOMDATUM - 65)) | (1L << (CYCLE - 65)) | (1L << (DATA - 65)) | (1L << (DATABASE - 65)) | (1L << (DATE - 65)) | (1L << (DAY - 65)) | (1L << (DB_ROLE_CHANGE - 65)) | (1L << (DBTIMEZONE - 65)) | (1L << (DDL - 65)) | (1L << (DEBUG - 65)) | (1L << (DEC - 65)) | (1L << (DECIMAL - 65)) | (1L << (DECODE - 65)) | (1L << (DECOMPOSE - 65)) | (1L << (DECREMENT - 65)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DEMAND - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (EDITIONING - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENFORCED - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FAST - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)) | (1L << (FOLLOWING - 129)) | (1L << (FOLLOWS - 129)) | (1L << (FORALL - 129)) | (1L << (FORCE - 129)))) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & ((1L << (FULL - 197)) | (1L << (FUNCTION - 197)) | (1L << (GROUPING - 197)) | (1L << (HASH - 197)) | (1L << (HIDE - 197)) | (1L << (HOUR - 197)) | (1L << (IGNORE - 197)) | (1L << (IMMEDIATE - 197)) | (1L << (INCLUDE - 197)) | (1L << (INCLUDING - 197)) | (1L << (INCREMENT - 197)) | (1L << (INDENT - 197)) | (1L << (INDEXED - 197)) | (1L << (INDICATOR - 197)) | (1L << (INDICES - 197)) | (1L << (INFINITE - 197)) | (1L << (INLINE - 197)) | (1L << (INNER - 197)) | (1L << (INOUT - 197)) | (1L << (INSTANTIABLE - 197)) | (1L << (INSTEAD - 197)) | (1L << (INT - 197)) | (1L << (INTEGER - 197)) | (1L << (INTERVAL - 197)) | (1L << (INVALIDATE - 197)) | (1L << (ISOLATION - 197)) | (1L << (ITERATE - 197)) | (1L << (JAVA - 197)) | (1L << (JOIN - 197)) | (1L << (KEEP - 197)) | (1L << (LANGUAGE - 197)) | (1L << (LAST - 197)) | (1L << (LAST_VALUE - 197)) | (1L << (LEADING - 197)) | (1L << (LEFT - 197)) | (1L << (LEVEL - 197)))) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & ((1L << (LIBRARY - 261)) | (1L << (LIKE2 - 261)) | (1L << (LIKE4 - 261)) | (1L << (LIKEC - 261)) | (1L << (LIMIT - 261)) | (1L << (LIST - 261)) | (1L << (LOCAL - 261)) | (1L << (LOCKED - 261)) | (1L << (LOG - 261)) | (1L << (LOGOFF - 261)) | (1L << (LOGON - 261)) | (1L << (LONG - 261)) | (1L << (LOOP - 261)) | (1L << (MAIN - 261)) | (1L << (MAP - 261)) | (1L << (MASTER - 261)) | (1L << (MATCHED - 261)) | (1L << (MAXVALUE - 261)) | (1L << (MEASURES - 261)) | (1L << (MEMBER - 261)) | (1L << (MERGE - 261)) | (1L << (MINUTE - 261)) | (1L << (MINVALUE - 261)) | (1L << (MLSLABEL - 261)) | (1L << (MODEL - 261)) | (1L << (MODIFY - 261)) | (1L << (MONTH - 261)) | (1L << (MULTISET - 261)) | (1L << (NAME - 261)) | (1L << (NAN - 261)) | (1L << (NATURAL - 261)) | (1L << (NATURALN - 261)) | (1L << (NAV - 261)) | (1L << (NCHAR - 261)) | (1L << (NCHAR_CS - 261)) | (1L << (NCLOB - 261)) | (1L << (NESTED - 261)) | (1L << (NEVER - 261)) | (1L << (NEW - 261)) | (1L << (NO - 261)) | (1L << (NOAUDIT - 261)) | (1L << (NOCOPY - 261)) | (1L << (NOCYCLE - 261)) | (1L << (NOENTITYESCAPING - 261)))) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & ((1L << (NONE - 329)) | (1L << (NOSCHEMACHECK - 329)) | (1L << (NVL - 329)) | (1L << (NULLS - 329)) | (1L << (NUMBER - 329)) | (1L << (NUMERIC - 329)) | (1L << (NVARCHAR2 - 329)) | (1L << (MATERIALIZED - 329)) | (1L << (OBJECT - 329)) | (1L << (OFF - 329)) | (1L << (OID - 329)) | (1L << (OLD - 329)) | (1L << (ONLY - 329)) | (1L << (OPEN - 329)) | (1L << (ORADATA - 329)) | (1L << (ORDINALITY - 329)) | (1L << (OSERROR - 329)) | (1L << (OUT - 329)) | (1L << (OUTER - 329)) | (1L << (OVER - 329)) | (1L << (OVERRIDING - 329)) | (1L << (PACKAGE - 329)) | (1L << (PARALLEL_ENABLE - 329)) | (1L << (PARAMETERS - 329)) | (1L << (PARENT - 329)) | (1L << (PARTITION - 329)) | (1L << (PASSING - 329)) | (1L << (PATH - 329)) | (1L << (PIPELINED - 329)) | (1L << (PLAN - 329)) | (1L << (PLS_INTEGER - 329)) | (1L << (POSITIVE - 329)) | (1L << (POSITIVEN - 329)) | (1L << (PRAGMA - 329)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (PREBUILT - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)) | (1L << (PRESENT - 393)) | (1L << (PROCEDURE - 393)) | (1L << (PUBLIC - 393)) | (1L << (RAISE - 393)) | (1L << (RANGE - 393)) | (1L << (RAW - 393)) | (1L << (READ - 393)) | (1L << (REAL - 393)) | (1L << (RECORD - 393)) | (1L << (REDUCED - 393)) | (1L << (REF - 393)) | (1L << (REFERENCE - 393)) | (1L << (REFERENCING - 393)) | (1L << (REFRESH - 393)) | (1L << (REJECT - 393)) | (1L << (RELIES_ON - 393)) | (1L << (RENAME - 393)) | (1L << (REPLACE - 393)) | (1L << (RESPECT - 393)) | (1L << (RESTRICT_REFERENCES - 393)) | (1L << (RESULT - 393)) | (1L << (RESULT_CACHE - 393)) | (1L << (RETURN - 393)) | (1L << (RETURNING - 393)) | (1L << (REUSE - 393)) | (1L << (REVERSE - 393)) | (1L << (REWRITE - 393)) | (1L << (RIGHT - 393)) | (1L << (ROLE - 393)) | (1L << (ROLLBACK - 393)) | (1L << (ROLLUP - 393)) | (1L << (ROW - 393)) | (1L << (ROWID - 393)) | (1L << (ROWS - 393)) | (1L << (RULES - 393)) | (1L << (SAMPLE - 393)) | (1L << (SAVE - 393)) | (1L << (SAVEPOINT - 393)) | (1L << (SCHEMA - 393)) | (1L << (SCHEMACHECK - 393)) | (1L << (SCN - 393)) | (1L << (SECOND - 393)))) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & ((1L << (SEED - 458)) | (1L << (SEGMENT - 458)) | (1L << (SELF - 458)) | (1L << (SEQUENTIAL - 458)) | (1L << (SERIALIZABLE - 458)) | (1L << (SERIALLY_REUSABLE - 458)) | (1L << (SERVERERROR - 458)) | (1L << (SESSIONTIMEZONE - 458)) | (1L << (SET - 458)) | (1L << (SETS - 458)) | (1L << (SETTINGS - 458)) | (1L << (SHOW - 458)) | (1L << (SHUTDOWN - 458)) | (1L << (SIBLINGS - 458)) | (1L << (SIGNTYPE - 458)) | (1L << (SIMPLE_INTEGER - 458)) | (1L << (SINGLE - 458)) | (1L << (SIZE - 458)) | (1L << (SKIP_ - 458)) | (1L << (SMALLINT - 458)) | (1L << (SNAPSHOT - 458)) | (1L << (SOME - 458)) | (1L << (SPECIFICATION - 458)) | (1L << (SQLDATA - 458)) | (1L << (SQLERROR - 458)) | (1L << (STANDALONE - 458)) | (1L << (STARTUP - 458)) | (1L << (STATEMENT - 458)) | (1L << (STATEMENT_ID - 458)) | (1L << (STATIC - 458)) | (1L << (STATISTICS - 458)) | (1L << (STRING - 458)) | (1L << (SUBMULTISET - 458)) | (1L << (SUBPARTITION - 458)) | (1L << (SUBSTITUTABLE - 458)) | (1L << (SUBSTRING - 458)) | (1L << (SUBTYPE - 458)) | (1L << (SUCCESS - 458)) | (1L << (SUSPEND - 458)) | (1L << (TABLES - 458)) | (1L << (TIME - 458)) | (1L << (TIMESTAMP - 458)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 458)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 458)) | (1L << (TIMESTAMP_UNCONSTRAINED - 458)))) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & ((1L << (TIMEZONE_ABBR - 522)) | (1L << (TIMEZONE_HOUR - 522)) | (1L << (TIMEZONE_MINUTE - 522)) | (1L << (TIMEZONE_REGION - 522)) | (1L << (TO_CHAR - 522)) | (1L << (TO_DATE - 522)) | (1L << (TRAILING - 522)) | (1L << (TRANSACTION - 522)) | (1L << (TRANSLATE - 522)) | (1L << (TREAT - 522)) | (1L << (TRIGGER - 522)) | (1L << (TRIM - 522)) | (1L << (TRUNCATE - 522)) | (1L << (TRUSTED - 522)) | (1L << (TYPE - 522)) | (1L << (UNBOUNDED - 522)) | (1L << (UNDER - 522)) | (1L << (UNLIMITED - 522)) | (1L << (UNTIL - 522)) | (1L << (UPDATED - 522)) | (1L << (UPSERT - 522)) | (1L << (UROWID - 522)) | (1L << (USE - 522)) | (1L << (VALIDATE - 522)) | (1L << (VALUE - 522)) | (1L << (VARCHAR - 522)) | (1L << (VARCHAR2 - 522)) | (1L << (VARIABLE - 522)) | (1L << (VARRAY - 522)) | (1L << (VARYING - 522)) | (1L << (VERBOSE - 522)) | (1L << (VERSION - 522)) | (1L << (VERSIONS - 522)) | (1L << (VIEW - 522)) | (1L << (WAIT - 522)) | (1L << (WARNING - 522)) | (1L << (WELLFORMED - 522)) | (1L << (WHENEVER - 522)) | (1L << (WHILE - 522)) | (1L << (WITHOUT - 522)) | (1L << (WITHIN - 522)) | (1L << (WORK - 522)) | (1L << (WRITE - 522)) | (1L << (XML - 522)) | (1L << (XMLAGG - 522)) | (1L << (XMLATTRIBUTES - 522)))) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & ((1L << (XMLCAST - 586)) | (1L << (XMLCOLATTVAL - 586)) | (1L << (XMLELEMENT - 586)) | (1L << (XMLEXISTS - 586)) | (1L << (XMLFOREST - 586)) | (1L << (XMLNAMESPACES - 586)) | (1L << (XMLPARSE - 586)) | (1L << (XMLPI - 586)) | (1L << (XMLQUERY - 586)) | (1L << (XMLROOT - 586)) | (1L << (XMLSERIALIZE - 586)) | (1L << (XMLTABLE - 586)) | (1L << (YEAR - 586)) | (1L << (YES - 586)) | (1L << (YMINTERVAL_UNCONSTRAINED - 586)) | (1L << (ZONE - 586)) | (1L << (PREDICTION - 586)) | (1L << (PREDICTION_BOUNDS - 586)) | (1L << (PREDICTION_COST - 586)) | (1L << (PREDICTION_DETAILS - 586)) | (1L << (PREDICTION_PROBABILITY - 586)) | (1L << (PREDICTION_SET - 586)) | (1L << (CUME_DIST - 586)) | (1L << (DENSE_RANK - 586)) | (1L << (LISTAGG - 586)) | (1L << (PERCENT_RANK - 586)) | (1L << (PERCENTILE_CONT - 586)) | (1L << (PERCENTILE_DISC - 586)) | (1L << (RANK - 586)) | (1L << (AVG - 586)) | (1L << (CORR - 586)) | (1L << (LAG - 586)) | (1L << (LEAD - 586)) | (1L << (MAX - 586)) | (1L << (MEDIAN - 586)) | (1L << (MIN - 586)) | (1L << (NTILE - 586)) | (1L << (RATIO_TO_REPORT - 586)) | (1L << (ROW_NUMBER - 586)) | (1L << (SUM - 586)) | (1L << (VARIANCE - 586)) | (1L << (REGR_ - 586)) | (1L << (STDDEV - 586)) | (1L << (VAR_ - 586)) | (1L << (COVAR_ - 586)) | (1L << (DELIMITED_ID - 586)))) != 0) || ((((_la - 655)) & ~0x3f) == 0 && ((1L << (_la - 655)) & ((1L << (BINDVAR - 655)) | (1L << (COLON - 655)) | (1L << (REGULAR_ID - 655)))) != 0)) {
				{
				{
				setState(4187);
				package_obj_body();
				}
				}
				setState(4192);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4199);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BEGIN:
				{
				setState(4193);
				match(BEGIN);
				setState(4194);
				seq_of_statements();
				}
				break;
			case END:
				{
				setState(4195);
				match(END);
				setState(4197);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,590,_ctx) ) {
				case 1:
					{
					setState(4196);
					package_name();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Package_specContext extends ParserRuleContext {
		public List<Package_nameContext> package_name() {
			return getRuleContexts(Package_nameContext.class);
		}
		public Package_nameContext package_name(int i) {
			return getRuleContext(Package_nameContext.class,i);
		}
		public TerminalNode END() { return getToken(PLSQLParser.END, 0); }
		public TerminalNode IS() { return getToken(PLSQLParser.IS, 0); }
		public TerminalNode AS() { return getToken(PLSQLParser.AS, 0); }
		public Invoker_rights_clauseContext invoker_rights_clause() {
			return getRuleContext(Invoker_rights_clauseContext.class,0);
		}
		public List<Package_obj_specContext> package_obj_spec() {
			return getRuleContexts(Package_obj_specContext.class);
		}
		public Package_obj_specContext package_obj_spec(int i) {
			return getRuleContext(Package_obj_specContext.class,i);
		}
		public Package_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_package_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterPackage_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitPackage_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitPackage_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Package_specContext package_spec() throws RecognitionException {
		Package_specContext _localctx = new Package_specContext(_ctx, getState());
		enterRule(_localctx, 376, RULE_package_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4201);
			package_name();
			setState(4203);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTHID) {
				{
				setState(4202);
				invoker_rights_clause();
				}
			}

			setState(4205);
			_la = _input.LA(1);
			if ( !(_la==AS || _la==IS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4209);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BUILD) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (CHR - 65)) | (1L << (CLOB - 65)) | (1L << (CLOSE - 65)) | (1L << (CLUSTER - 65)) | (1L << (COALESCE - 65)) | (1L << (COLLECT - 65)) | (1L << (COLUMNS - 65)) | (1L << (COMMENT - 65)) | (1L << (COMMIT - 65)) | (1L << (COMMITTED - 65)) | (1L << (COMPATIBILITY - 65)) | (1L << (COMPILE - 65)) | (1L << (COMPLETE - 65)) | (1L << (COMPOUND - 65)) | (1L << (CONCAT - 65)) | (1L << (CONSTANT - 65)) | (1L << (CONSTRAINT - 65)) | (1L << (CONSTRAINTS - 65)) | (1L << (CONSTRUCTOR - 65)) | (1L << (CONTENT - 65)) | (1L << (CONTEXT - 65)) | (1L << (CONTINUE - 65)) | (1L << (CONVERT - 65)) | (1L << (CORRUPT_XID - 65)) | (1L << (CORRUPT_XID_ALL - 65)) | (1L << (COST - 65)) | (1L << (COUNT - 65)) | (1L << (CROSS - 65)) | (1L << (CUBE - 65)) | (1L << (CURRENT_USER - 65)) | (1L << (CURSOR - 65)) | (1L << (CUSTOMDATUM - 65)) | (1L << (CYCLE - 65)) | (1L << (DATA - 65)) | (1L << (DATABASE - 65)) | (1L << (DATE - 65)) | (1L << (DAY - 65)) | (1L << (DB_ROLE_CHANGE - 65)) | (1L << (DBTIMEZONE - 65)) | (1L << (DDL - 65)) | (1L << (DEBUG - 65)) | (1L << (DEC - 65)) | (1L << (DECIMAL - 65)) | (1L << (DECODE - 65)) | (1L << (DECOMPOSE - 65)) | (1L << (DECREMENT - 65)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DEMAND - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (EDITIONING - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENFORCED - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FAST - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)) | (1L << (FOLLOWING - 129)) | (1L << (FOLLOWS - 129)) | (1L << (FORALL - 129)) | (1L << (FORCE - 129)))) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & ((1L << (FULL - 197)) | (1L << (FUNCTION - 197)) | (1L << (GROUPING - 197)) | (1L << (HASH - 197)) | (1L << (HIDE - 197)) | (1L << (HOUR - 197)) | (1L << (IGNORE - 197)) | (1L << (IMMEDIATE - 197)) | (1L << (INCLUDE - 197)) | (1L << (INCLUDING - 197)) | (1L << (INCREMENT - 197)) | (1L << (INDENT - 197)) | (1L << (INDEXED - 197)) | (1L << (INDICATOR - 197)) | (1L << (INDICES - 197)) | (1L << (INFINITE - 197)) | (1L << (INLINE - 197)) | (1L << (INNER - 197)) | (1L << (INOUT - 197)) | (1L << (INSTANTIABLE - 197)) | (1L << (INSTEAD - 197)) | (1L << (INT - 197)) | (1L << (INTEGER - 197)) | (1L << (INTERVAL - 197)) | (1L << (INVALIDATE - 197)) | (1L << (ISOLATION - 197)) | (1L << (ITERATE - 197)) | (1L << (JAVA - 197)) | (1L << (JOIN - 197)) | (1L << (KEEP - 197)) | (1L << (LANGUAGE - 197)) | (1L << (LAST - 197)) | (1L << (LAST_VALUE - 197)) | (1L << (LEADING - 197)) | (1L << (LEFT - 197)) | (1L << (LEVEL - 197)))) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & ((1L << (LIBRARY - 261)) | (1L << (LIKE2 - 261)) | (1L << (LIKE4 - 261)) | (1L << (LIKEC - 261)) | (1L << (LIMIT - 261)) | (1L << (LIST - 261)) | (1L << (LOCAL - 261)) | (1L << (LOCKED - 261)) | (1L << (LOG - 261)) | (1L << (LOGOFF - 261)) | (1L << (LOGON - 261)) | (1L << (LONG - 261)) | (1L << (LOOP - 261)) | (1L << (MAIN - 261)) | (1L << (MAP - 261)) | (1L << (MASTER - 261)) | (1L << (MATCHED - 261)) | (1L << (MAXVALUE - 261)) | (1L << (MEASURES - 261)) | (1L << (MEMBER - 261)) | (1L << (MERGE - 261)) | (1L << (MINUTE - 261)) | (1L << (MINVALUE - 261)) | (1L << (MLSLABEL - 261)) | (1L << (MODEL - 261)) | (1L << (MODIFY - 261)) | (1L << (MONTH - 261)) | (1L << (MULTISET - 261)) | (1L << (NAME - 261)) | (1L << (NAN - 261)) | (1L << (NATURAL - 261)) | (1L << (NATURALN - 261)) | (1L << (NAV - 261)) | (1L << (NCHAR - 261)) | (1L << (NCHAR_CS - 261)) | (1L << (NCLOB - 261)) | (1L << (NESTED - 261)) | (1L << (NEVER - 261)) | (1L << (NEW - 261)) | (1L << (NO - 261)) | (1L << (NOAUDIT - 261)) | (1L << (NOCOPY - 261)) | (1L << (NOCYCLE - 261)) | (1L << (NOENTITYESCAPING - 261)))) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & ((1L << (NONE - 329)) | (1L << (NOSCHEMACHECK - 329)) | (1L << (NVL - 329)) | (1L << (NULLS - 329)) | (1L << (NUMBER - 329)) | (1L << (NUMERIC - 329)) | (1L << (NVARCHAR2 - 329)) | (1L << (MATERIALIZED - 329)) | (1L << (OBJECT - 329)) | (1L << (OFF - 329)) | (1L << (OID - 329)) | (1L << (OLD - 329)) | (1L << (ONLY - 329)) | (1L << (OPEN - 329)) | (1L << (ORADATA - 329)) | (1L << (ORDINALITY - 329)) | (1L << (OSERROR - 329)) | (1L << (OUT - 329)) | (1L << (OUTER - 329)) | (1L << (OVER - 329)) | (1L << (OVERRIDING - 329)) | (1L << (PACKAGE - 329)) | (1L << (PARALLEL_ENABLE - 329)) | (1L << (PARAMETERS - 329)) | (1L << (PARENT - 329)) | (1L << (PARTITION - 329)) | (1L << (PASSING - 329)) | (1L << (PATH - 329)) | (1L << (PIPELINED - 329)) | (1L << (PLAN - 329)) | (1L << (PLS_INTEGER - 329)) | (1L << (POSITIVE - 329)) | (1L << (POSITIVEN - 329)) | (1L << (PRAGMA - 329)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (PREBUILT - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)) | (1L << (PRESENT - 393)) | (1L << (PROCEDURE - 393)) | (1L << (PUBLIC - 393)) | (1L << (RAISE - 393)) | (1L << (RANGE - 393)) | (1L << (RAW - 393)) | (1L << (READ - 393)) | (1L << (REAL - 393)) | (1L << (RECORD - 393)) | (1L << (REDUCED - 393)) | (1L << (REF - 393)) | (1L << (REFERENCE - 393)) | (1L << (REFERENCING - 393)) | (1L << (REFRESH - 393)) | (1L << (REJECT - 393)) | (1L << (RELIES_ON - 393)) | (1L << (RENAME - 393)) | (1L << (REPLACE - 393)) | (1L << (RESPECT - 393)) | (1L << (RESTRICT_REFERENCES - 393)) | (1L << (RESULT - 393)) | (1L << (RESULT_CACHE - 393)) | (1L << (RETURN - 393)) | (1L << (RETURNING - 393)) | (1L << (REUSE - 393)) | (1L << (REVERSE - 393)) | (1L << (REWRITE - 393)) | (1L << (RIGHT - 393)) | (1L << (ROLE - 393)) | (1L << (ROLLBACK - 393)) | (1L << (ROLLUP - 393)) | (1L << (ROW - 393)) | (1L << (ROWID - 393)) | (1L << (ROWS - 393)) | (1L << (RULES - 393)) | (1L << (SAMPLE - 393)) | (1L << (SAVE - 393)) | (1L << (SAVEPOINT - 393)) | (1L << (SCHEMA - 393)) | (1L << (SCHEMACHECK - 393)) | (1L << (SCN - 393)) | (1L << (SECOND - 393)))) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & ((1L << (SEED - 458)) | (1L << (SEGMENT - 458)) | (1L << (SELF - 458)) | (1L << (SEQUENTIAL - 458)) | (1L << (SERIALIZABLE - 458)) | (1L << (SERIALLY_REUSABLE - 458)) | (1L << (SERVERERROR - 458)) | (1L << (SESSIONTIMEZONE - 458)) | (1L << (SET - 458)) | (1L << (SETS - 458)) | (1L << (SETTINGS - 458)) | (1L << (SHOW - 458)) | (1L << (SHUTDOWN - 458)) | (1L << (SIBLINGS - 458)) | (1L << (SIGNTYPE - 458)) | (1L << (SIMPLE_INTEGER - 458)) | (1L << (SINGLE - 458)) | (1L << (SIZE - 458)) | (1L << (SKIP_ - 458)) | (1L << (SMALLINT - 458)) | (1L << (SNAPSHOT - 458)) | (1L << (SOME - 458)) | (1L << (SPECIFICATION - 458)) | (1L << (SQLDATA - 458)) | (1L << (SQLERROR - 458)) | (1L << (STANDALONE - 458)) | (1L << (STARTUP - 458)) | (1L << (STATEMENT - 458)) | (1L << (STATEMENT_ID - 458)) | (1L << (STATIC - 458)) | (1L << (STATISTICS - 458)) | (1L << (STRING - 458)) | (1L << (SUBMULTISET - 458)) | (1L << (SUBPARTITION - 458)) | (1L << (SUBSTITUTABLE - 458)) | (1L << (SUBSTRING - 458)) | (1L << (SUBTYPE - 458)) | (1L << (SUCCESS - 458)) | (1L << (SUSPEND - 458)) | (1L << (TABLES - 458)) | (1L << (TIME - 458)) | (1L << (TIMESTAMP - 458)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 458)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 458)) | (1L << (TIMESTAMP_UNCONSTRAINED - 458)))) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & ((1L << (TIMEZONE_ABBR - 522)) | (1L << (TIMEZONE_HOUR - 522)) | (1L << (TIMEZONE_MINUTE - 522)) | (1L << (TIMEZONE_REGION - 522)) | (1L << (TO_CHAR - 522)) | (1L << (TO_DATE - 522)) | (1L << (TRAILING - 522)) | (1L << (TRANSACTION - 522)) | (1L << (TRANSLATE - 522)) | (1L << (TREAT - 522)) | (1L << (TRIGGER - 522)) | (1L << (TRIM - 522)) | (1L << (TRUNCATE - 522)) | (1L << (TRUSTED - 522)) | (1L << (TYPE - 522)) | (1L << (UNBOUNDED - 522)) | (1L << (UNDER - 522)) | (1L << (UNLIMITED - 522)) | (1L << (UNTIL - 522)) | (1L << (UPDATED - 522)) | (1L << (UPSERT - 522)) | (1L << (UROWID - 522)) | (1L << (USE - 522)) | (1L << (VALIDATE - 522)) | (1L << (VALUE - 522)) | (1L << (VARCHAR - 522)) | (1L << (VARCHAR2 - 522)) | (1L << (VARIABLE - 522)) | (1L << (VARRAY - 522)) | (1L << (VARYING - 522)) | (1L << (VERBOSE - 522)) | (1L << (VERSION - 522)) | (1L << (VERSIONS - 522)) | (1L << (VIEW - 522)) | (1L << (WAIT - 522)) | (1L << (WARNING - 522)) | (1L << (WELLFORMED - 522)) | (1L << (WHENEVER - 522)) | (1L << (WHILE - 522)) | (1L << (WITHOUT - 522)) | (1L << (WITHIN - 522)) | (1L << (WORK - 522)) | (1L << (WRITE - 522)) | (1L << (XML - 522)) | (1L << (XMLAGG - 522)) | (1L << (XMLATTRIBUTES - 522)))) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & ((1L << (XMLCAST - 586)) | (1L << (XMLCOLATTVAL - 586)) | (1L << (XMLELEMENT - 586)) | (1L << (XMLEXISTS - 586)) | (1L << (XMLFOREST - 586)) | (1L << (XMLNAMESPACES - 586)) | (1L << (XMLPARSE - 586)) | (1L << (XMLPI - 586)) | (1L << (XMLQUERY - 586)) | (1L << (XMLROOT - 586)) | (1L << (XMLSERIALIZE - 586)) | (1L << (XMLTABLE - 586)) | (1L << (YEAR - 586)) | (1L << (YES - 586)) | (1L << (YMINTERVAL_UNCONSTRAINED - 586)) | (1L << (ZONE - 586)) | (1L << (PREDICTION - 586)) | (1L << (PREDICTION_BOUNDS - 586)) | (1L << (PREDICTION_COST - 586)) | (1L << (PREDICTION_DETAILS - 586)) | (1L << (PREDICTION_PROBABILITY - 586)) | (1L << (PREDICTION_SET - 586)) | (1L << (CUME_DIST - 586)) | (1L << (DENSE_RANK - 586)) | (1L << (LISTAGG - 586)) | (1L << (PERCENT_RANK - 586)) | (1L << (PERCENTILE_CONT - 586)) | (1L << (PERCENTILE_DISC - 586)) | (1L << (RANK - 586)) | (1L << (AVG - 586)) | (1L << (CORR - 586)) | (1L << (LAG - 586)) | (1L << (LEAD - 586)) | (1L << (MAX - 586)) | (1L << (MEDIAN - 586)) | (1L << (MIN - 586)) | (1L << (NTILE - 586)) | (1L << (RATIO_TO_REPORT - 586)) | (1L << (ROW_NUMBER - 586)) | (1L << (SUM - 586)) | (1L << (VARIANCE - 586)) | (1L << (REGR_ - 586)) | (1L << (STDDEV - 586)) | (1L << (VAR_ - 586)) | (1L << (COVAR_ - 586)) | (1L << (DELIMITED_ID - 586)))) != 0) || ((((_la - 655)) & ~0x3f) == 0 && ((1L << (_la - 655)) & ((1L << (BINDVAR - 655)) | (1L << (COLON - 655)) | (1L << (REGULAR_ID - 655)))) != 0)) {
				{
				{
				setState(4206);
				package_obj_spec();
				}
				}
				setState(4211);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4212);
			match(END);
			setState(4214);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,594,_ctx) ) {
			case 1:
				{
				setState(4213);
				package_name();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Package_obj_specContext extends ParserRuleContext {
		public Variable_declarationContext variable_declaration() {
			return getRuleContext(Variable_declarationContext.class,0);
		}
		public Subtype_declarationContext subtype_declaration() {
			return getRuleContext(Subtype_declarationContext.class,0);
		}
		public Cursor_declarationContext cursor_declaration() {
			return getRuleContext(Cursor_declarationContext.class,0);
		}
		public Exception_declarationContext exception_declaration() {
			return getRuleContext(Exception_declarationContext.class,0);
		}
		public Pragma_declarationContext pragma_declaration() {
			return getRuleContext(Pragma_declarationContext.class,0);
		}
		public Record_declarationContext record_declaration() {
			return getRuleContext(Record_declarationContext.class,0);
		}
		public Table_declarationContext table_declaration() {
			return getRuleContext(Table_declarationContext.class,0);
		}
		public Procedure_specContext procedure_spec() {
			return getRuleContext(Procedure_specContext.class,0);
		}
		public Function_specContext function_spec() {
			return getRuleContext(Function_specContext.class,0);
		}
		public Package_obj_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_package_obj_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterPackage_obj_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitPackage_obj_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitPackage_obj_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Package_obj_specContext package_obj_spec() throws RecognitionException {
		Package_obj_specContext _localctx = new Package_obj_specContext(_ctx, getState());
		enterRule(_localctx, 378, RULE_package_obj_spec);
		try {
			setState(4225);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,595,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4216);
				variable_declaration();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4217);
				subtype_declaration();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4218);
				cursor_declaration();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4219);
				exception_declaration();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4220);
				pragma_declaration();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4221);
				record_declaration();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(4222);
				table_declaration();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(4223);
				procedure_spec();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(4224);
				function_spec();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Procedure_specContext extends ParserRuleContext {
		public TerminalNode PROCEDURE() { return getToken(PLSQLParser.PROCEDURE, 0); }
		public Procedure_nameContext procedure_name() {
			return getRuleContext(Procedure_nameContext.class,0);
		}
		public TerminalNode SEMICOLON() { return getToken(PLSQLParser.SEMICOLON, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PLSQLParser.LEFT_PAREN, 0); }
		public List<ParameterContext> parameter() {
			return getRuleContexts(ParameterContext.class);
		}
		public ParameterContext parameter(int i) {
			return getRuleContext(ParameterContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PLSQLParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PLSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLSQLParser.COMMA, i);
		}
		public Procedure_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_procedure_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterProcedure_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitProcedure_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitProcedure_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Procedure_specContext procedure_spec() throws RecognitionException {
		Procedure_specContext _localctx = new Procedure_specContext(_ctx, getState());
		enterRule(_localctx, 380, RULE_procedure_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4227);
			match(PROCEDURE);
			setState(4228);
			procedure_name();
			setState(4240);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(4229);
				match(LEFT_PAREN);
				setState(4230);
				parameter();
				setState(4235);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4231);
					match(COMMA);
					setState(4232);
					parameter();
					}
					}
					setState(4237);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4238);
				match(RIGHT_PAREN);
				}
			}

			setState(4242);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Function_specContext extends ParserRuleContext {
		public TerminalNode FUNCTION() { return getToken(PLSQLParser.FUNCTION, 0); }
		public Function_nameContext function_name() {
			return getRuleContext(Function_nameContext.class,0);
		}
		public TerminalNode RETURN() { return getToken(PLSQLParser.RETURN, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode SEMICOLON() { return getToken(PLSQLParser.SEMICOLON, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PLSQLParser.LEFT_PAREN, 0); }
		public List<ParameterContext> parameter() {
			return getRuleContexts(ParameterContext.class);
		}
		public ParameterContext parameter(int i) {
			return getRuleContext(ParameterContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PLSQLParser.RIGHT_PAREN, 0); }
		public TerminalNode DETERMINISTIC() { return getToken(PLSQLParser.DETERMINISTIC, 0); }
		public TerminalNode RESULT_CACHE() { return getToken(PLSQLParser.RESULT_CACHE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PLSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLSQLParser.COMMA, i);
		}
		public Function_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterFunction_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitFunction_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitFunction_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Function_specContext function_spec() throws RecognitionException {
		Function_specContext _localctx = new Function_specContext(_ctx, getState());
		enterRule(_localctx, 382, RULE_function_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4244);
			match(FUNCTION);
			setState(4245);
			function_name();
			setState(4257);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(4246);
				match(LEFT_PAREN);
				setState(4247);
				parameter();
				setState(4252);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4248);
					match(COMMA);
					setState(4249);
					parameter();
					}
					}
					setState(4254);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4255);
				match(RIGHT_PAREN);
				}
			}

			setState(4259);
			match(RETURN);
			setState(4260);
			type_spec();
			setState(4262);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DETERMINISTIC) {
				{
				setState(4261);
				match(DETERMINISTIC);
				}
			}

			setState(4265);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RESULT_CACHE) {
				{
				setState(4264);
				match(RESULT_CACHE);
				}
			}

			setState(4267);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Package_obj_bodyContext extends ParserRuleContext {
		public Variable_declarationContext variable_declaration() {
			return getRuleContext(Variable_declarationContext.class,0);
		}
		public Subtype_declarationContext subtype_declaration() {
			return getRuleContext(Subtype_declarationContext.class,0);
		}
		public Cursor_declarationContext cursor_declaration() {
			return getRuleContext(Cursor_declarationContext.class,0);
		}
		public Exception_declarationContext exception_declaration() {
			return getRuleContext(Exception_declarationContext.class,0);
		}
		public Record_declarationContext record_declaration() {
			return getRuleContext(Record_declarationContext.class,0);
		}
		public Table_declarationContext table_declaration() {
			return getRuleContext(Table_declarationContext.class,0);
		}
		public Create_procedure_bodyContext create_procedure_body() {
			return getRuleContext(Create_procedure_bodyContext.class,0);
		}
		public Create_function_bodyContext create_function_body() {
			return getRuleContext(Create_function_bodyContext.class,0);
		}
		public Procedure_specContext procedure_spec() {
			return getRuleContext(Procedure_specContext.class,0);
		}
		public Function_specContext function_spec() {
			return getRuleContext(Function_specContext.class,0);
		}
		public Package_obj_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_package_obj_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterPackage_obj_body(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitPackage_obj_body(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitPackage_obj_body(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Package_obj_bodyContext package_obj_body() throws RecognitionException {
		Package_obj_bodyContext _localctx = new Package_obj_bodyContext(_ctx, getState());
		enterRule(_localctx, 384, RULE_package_obj_body);
		try {
			setState(4279);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,602,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4269);
				variable_declaration();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4270);
				subtype_declaration();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4271);
				cursor_declaration();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4272);
				exception_declaration();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4273);
				record_declaration();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4274);
				table_declaration();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(4275);
				create_procedure_body();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(4276);
				create_function_body();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(4277);
				procedure_spec();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(4278);
				function_spec();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_procedureContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PLSQLParser.DROP, 0); }
		public TerminalNode PROCEDURE() { return getToken(PLSQLParser.PROCEDURE, 0); }
		public Procedure_nameContext procedure_name() {
			return getRuleContext(Procedure_nameContext.class,0);
		}
		public Drop_procedureContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_procedure; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterDrop_procedure(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitDrop_procedure(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitDrop_procedure(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_procedureContext drop_procedure() throws RecognitionException {
		Drop_procedureContext _localctx = new Drop_procedureContext(_ctx, getState());
		enterRule(_localctx, 386, RULE_drop_procedure);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4281);
			match(DROP);
			setState(4282);
			match(PROCEDURE);
			setState(4283);
			procedure_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_procedureContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PLSQLParser.ALTER, 0); }
		public TerminalNode PROCEDURE() { return getToken(PLSQLParser.PROCEDURE, 0); }
		public Procedure_nameContext procedure_name() {
			return getRuleContext(Procedure_nameContext.class,0);
		}
		public TerminalNode COMPILE() { return getToken(PLSQLParser.COMPILE, 0); }
		public TerminalNode DEBUG() { return getToken(PLSQLParser.DEBUG, 0); }
		public List<Compiler_parameters_clauseContext> compiler_parameters_clause() {
			return getRuleContexts(Compiler_parameters_clauseContext.class);
		}
		public Compiler_parameters_clauseContext compiler_parameters_clause(int i) {
			return getRuleContext(Compiler_parameters_clauseContext.class,i);
		}
		public TerminalNode REUSE() { return getToken(PLSQLParser.REUSE, 0); }
		public TerminalNode SETTINGS() { return getToken(PLSQLParser.SETTINGS, 0); }
		public Alter_procedureContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_procedure; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterAlter_procedure(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitAlter_procedure(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitAlter_procedure(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_procedureContext alter_procedure() throws RecognitionException {
		Alter_procedureContext _localctx = new Alter_procedureContext(_ctx, getState());
		enterRule(_localctx, 388, RULE_alter_procedure);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4285);
			match(ALTER);
			setState(4286);
			match(PROCEDURE);
			setState(4287);
			procedure_name();
			setState(4288);
			match(COMPILE);
			setState(4290);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,603,_ctx) ) {
			case 1:
				{
				setState(4289);
				match(DEBUG);
				}
				break;
			}
			setState(4295);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,604,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4292);
					compiler_parameters_clause();
					}
					} 
				}
				setState(4297);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,604,_ctx);
			}
			setState(4300);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==REUSE) {
				{
				setState(4298);
				match(REUSE);
				setState(4299);
				match(SETTINGS);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_procedure_bodyContext extends ParserRuleContext {
		public TerminalNode PROCEDURE() { return getToken(PLSQLParser.PROCEDURE, 0); }
		public Procedure_nameContext procedure_name() {
			return getRuleContext(Procedure_nameContext.class,0);
		}
		public TerminalNode IS() { return getToken(PLSQLParser.IS, 0); }
		public TerminalNode AS() { return getToken(PLSQLParser.AS, 0); }
		public BodyContext body() {
			return getRuleContext(BodyContext.class,0);
		}
		public Call_specContext call_spec() {
			return getRuleContext(Call_specContext.class,0);
		}
		public TerminalNode EXTERNAL() { return getToken(PLSQLParser.EXTERNAL, 0); }
		public TerminalNode CREATE() { return getToken(PLSQLParser.CREATE, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PLSQLParser.LEFT_PAREN, 0); }
		public List<ParameterContext> parameter() {
			return getRuleContexts(ParameterContext.class);
		}
		public ParameterContext parameter(int i) {
			return getRuleContext(ParameterContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PLSQLParser.RIGHT_PAREN, 0); }
		public Invoker_rights_clauseContext invoker_rights_clause() {
			return getRuleContext(Invoker_rights_clauseContext.class,0);
		}
		public TerminalNode DECLARE() { return getToken(PLSQLParser.DECLARE, 0); }
		public List<Declare_specContext> declare_spec() {
			return getRuleContexts(Declare_specContext.class);
		}
		public Declare_specContext declare_spec(int i) {
			return getRuleContext(Declare_specContext.class,i);
		}
		public TerminalNode OR() { return getToken(PLSQLParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(PLSQLParser.REPLACE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PLSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLSQLParser.COMMA, i);
		}
		public Create_procedure_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_procedure_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterCreate_procedure_body(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitCreate_procedure_body(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitCreate_procedure_body(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_procedure_bodyContext create_procedure_body() throws RecognitionException {
		Create_procedure_bodyContext _localctx = new Create_procedure_bodyContext(_ctx, getState());
		enterRule(_localctx, 390, RULE_create_procedure_body);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4307);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CREATE) {
				{
				setState(4302);
				match(CREATE);
				setState(4305);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OR) {
					{
					setState(4303);
					match(OR);
					setState(4304);
					match(REPLACE);
					}
				}

				}
			}

			setState(4309);
			match(PROCEDURE);
			setState(4310);
			procedure_name();
			setState(4322);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(4311);
				match(LEFT_PAREN);
				setState(4312);
				parameter();
				setState(4317);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4313);
					match(COMMA);
					setState(4314);
					parameter();
					}
					}
					setState(4319);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4320);
				match(RIGHT_PAREN);
				}
			}

			setState(4325);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTHID) {
				{
				setState(4324);
				invoker_rights_clause();
				}
			}

			setState(4327);
			_la = _input.LA(1);
			if ( !(_la==AS || _la==IS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4340);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,613,_ctx) ) {
			case 1:
				{
				setState(4329);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DECLARE) {
					{
					setState(4328);
					match(DECLARE);
					}
				}

				setState(4334);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BUILD) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (CHR - 65)) | (1L << (CLOB - 65)) | (1L << (CLOSE - 65)) | (1L << (CLUSTER - 65)) | (1L << (COALESCE - 65)) | (1L << (COLLECT - 65)) | (1L << (COLUMNS - 65)) | (1L << (COMMENT - 65)) | (1L << (COMMIT - 65)) | (1L << (COMMITTED - 65)) | (1L << (COMPATIBILITY - 65)) | (1L << (COMPILE - 65)) | (1L << (COMPLETE - 65)) | (1L << (COMPOUND - 65)) | (1L << (CONCAT - 65)) | (1L << (CONSTANT - 65)) | (1L << (CONSTRAINT - 65)) | (1L << (CONSTRAINTS - 65)) | (1L << (CONSTRUCTOR - 65)) | (1L << (CONTENT - 65)) | (1L << (CONTEXT - 65)) | (1L << (CONTINUE - 65)) | (1L << (CONVERT - 65)) | (1L << (CORRUPT_XID - 65)) | (1L << (CORRUPT_XID_ALL - 65)) | (1L << (COST - 65)) | (1L << (COUNT - 65)) | (1L << (CREATE - 65)) | (1L << (CROSS - 65)) | (1L << (CUBE - 65)) | (1L << (CURRENT_USER - 65)) | (1L << (CURSOR - 65)) | (1L << (CUSTOMDATUM - 65)) | (1L << (CYCLE - 65)) | (1L << (DATA - 65)) | (1L << (DATABASE - 65)) | (1L << (DATE - 65)) | (1L << (DAY - 65)) | (1L << (DB_ROLE_CHANGE - 65)) | (1L << (DBTIMEZONE - 65)) | (1L << (DDL - 65)) | (1L << (DEBUG - 65)) | (1L << (DEC - 65)) | (1L << (DECIMAL - 65)) | (1L << (DECODE - 65)) | (1L << (DECOMPOSE - 65)) | (1L << (DECREMENT - 65)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DEMAND - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (EDITIONING - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENFORCED - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FAST - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)) | (1L << (FOLLOWING - 129)) | (1L << (FOLLOWS - 129)) | (1L << (FORALL - 129)) | (1L << (FORCE - 129)))) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & ((1L << (FULL - 197)) | (1L << (FUNCTION - 197)) | (1L << (GROUPING - 197)) | (1L << (HASH - 197)) | (1L << (HIDE - 197)) | (1L << (HOUR - 197)) | (1L << (IGNORE - 197)) | (1L << (IMMEDIATE - 197)) | (1L << (INCLUDE - 197)) | (1L << (INCLUDING - 197)) | (1L << (INCREMENT - 197)) | (1L << (INDENT - 197)) | (1L << (INDEXED - 197)) | (1L << (INDICATOR - 197)) | (1L << (INDICES - 197)) | (1L << (INFINITE - 197)) | (1L << (INLINE - 197)) | (1L << (INNER - 197)) | (1L << (INOUT - 197)) | (1L << (INSTANTIABLE - 197)) | (1L << (INSTEAD - 197)) | (1L << (INT - 197)) | (1L << (INTEGER - 197)) | (1L << (INTERVAL - 197)) | (1L << (INVALIDATE - 197)) | (1L << (ISOLATION - 197)) | (1L << (ITERATE - 197)) | (1L << (JAVA - 197)) | (1L << (JOIN - 197)) | (1L << (KEEP - 197)) | (1L << (LANGUAGE - 197)) | (1L << (LAST - 197)) | (1L << (LAST_VALUE - 197)) | (1L << (LEADING - 197)) | (1L << (LEFT - 197)) | (1L << (LEVEL - 197)))) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & ((1L << (LIBRARY - 261)) | (1L << (LIKE2 - 261)) | (1L << (LIKE4 - 261)) | (1L << (LIKEC - 261)) | (1L << (LIMIT - 261)) | (1L << (LIST - 261)) | (1L << (LOCAL - 261)) | (1L << (LOCKED - 261)) | (1L << (LOG - 261)) | (1L << (LOGOFF - 261)) | (1L << (LOGON - 261)) | (1L << (LONG - 261)) | (1L << (LOOP - 261)) | (1L << (MAIN - 261)) | (1L << (MAP - 261)) | (1L << (MASTER - 261)) | (1L << (MATCHED - 261)) | (1L << (MAXVALUE - 261)) | (1L << (MEASURES - 261)) | (1L << (MEMBER - 261)) | (1L << (MERGE - 261)) | (1L << (MINUTE - 261)) | (1L << (MINVALUE - 261)) | (1L << (MLSLABEL - 261)) | (1L << (MODEL - 261)) | (1L << (MODIFY - 261)) | (1L << (MONTH - 261)) | (1L << (MULTISET - 261)) | (1L << (NAME - 261)) | (1L << (NAN - 261)) | (1L << (NATURAL - 261)) | (1L << (NATURALN - 261)) | (1L << (NAV - 261)) | (1L << (NCHAR - 261)) | (1L << (NCHAR_CS - 261)) | (1L << (NCLOB - 261)) | (1L << (NESTED - 261)) | (1L << (NEVER - 261)) | (1L << (NEW - 261)) | (1L << (NO - 261)) | (1L << (NOAUDIT - 261)) | (1L << (NOCOPY - 261)) | (1L << (NOCYCLE - 261)) | (1L << (NOENTITYESCAPING - 261)))) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & ((1L << (NONE - 329)) | (1L << (NOSCHEMACHECK - 329)) | (1L << (NVL - 329)) | (1L << (NULLS - 329)) | (1L << (NUMBER - 329)) | (1L << (NUMERIC - 329)) | (1L << (NVARCHAR2 - 329)) | (1L << (MATERIALIZED - 329)) | (1L << (OBJECT - 329)) | (1L << (OFF - 329)) | (1L << (OID - 329)) | (1L << (OLD - 329)) | (1L << (ONLY - 329)) | (1L << (OPEN - 329)) | (1L << (ORADATA - 329)) | (1L << (ORDINALITY - 329)) | (1L << (OSERROR - 329)) | (1L << (OUT - 329)) | (1L << (OUTER - 329)) | (1L << (OVER - 329)) | (1L << (OVERRIDING - 329)) | (1L << (PACKAGE - 329)) | (1L << (PARALLEL_ENABLE - 329)) | (1L << (PARAMETERS - 329)) | (1L << (PARENT - 329)) | (1L << (PARTITION - 329)) | (1L << (PASSING - 329)) | (1L << (PATH - 329)) | (1L << (PIPELINED - 329)) | (1L << (PLAN - 329)) | (1L << (PLS_INTEGER - 329)) | (1L << (POSITIVE - 329)) | (1L << (POSITIVEN - 329)) | (1L << (PRAGMA - 329)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (PREBUILT - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)) | (1L << (PRESENT - 393)) | (1L << (PROCEDURE - 393)) | (1L << (PUBLIC - 393)) | (1L << (RAISE - 393)) | (1L << (RANGE - 393)) | (1L << (RAW - 393)) | (1L << (READ - 393)) | (1L << (REAL - 393)) | (1L << (RECORD - 393)) | (1L << (REDUCED - 393)) | (1L << (REF - 393)) | (1L << (REFERENCE - 393)) | (1L << (REFERENCING - 393)) | (1L << (REFRESH - 393)) | (1L << (REJECT - 393)) | (1L << (RELIES_ON - 393)) | (1L << (RENAME - 393)) | (1L << (REPLACE - 393)) | (1L << (RESPECT - 393)) | (1L << (RESTRICT_REFERENCES - 393)) | (1L << (RESULT - 393)) | (1L << (RESULT_CACHE - 393)) | (1L << (RETURN - 393)) | (1L << (RETURNING - 393)) | (1L << (REUSE - 393)) | (1L << (REVERSE - 393)) | (1L << (REWRITE - 393)) | (1L << (RIGHT - 393)) | (1L << (ROLE - 393)) | (1L << (ROLLBACK - 393)) | (1L << (ROLLUP - 393)) | (1L << (ROW - 393)) | (1L << (ROWID - 393)) | (1L << (ROWS - 393)) | (1L << (RULES - 393)) | (1L << (SAMPLE - 393)) | (1L << (SAVE - 393)) | (1L << (SAVEPOINT - 393)) | (1L << (SCHEMA - 393)) | (1L << (SCHEMACHECK - 393)) | (1L << (SCN - 393)) | (1L << (SECOND - 393)))) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & ((1L << (SEED - 458)) | (1L << (SEGMENT - 458)) | (1L << (SELF - 458)) | (1L << (SEQUENTIAL - 458)) | (1L << (SERIALIZABLE - 458)) | (1L << (SERIALLY_REUSABLE - 458)) | (1L << (SERVERERROR - 458)) | (1L << (SESSIONTIMEZONE - 458)) | (1L << (SET - 458)) | (1L << (SETS - 458)) | (1L << (SETTINGS - 458)) | (1L << (SHOW - 458)) | (1L << (SHUTDOWN - 458)) | (1L << (SIBLINGS - 458)) | (1L << (SIGNTYPE - 458)) | (1L << (SIMPLE_INTEGER - 458)) | (1L << (SINGLE - 458)) | (1L << (SIZE - 458)) | (1L << (SKIP_ - 458)) | (1L << (SMALLINT - 458)) | (1L << (SNAPSHOT - 458)) | (1L << (SOME - 458)) | (1L << (SPECIFICATION - 458)) | (1L << (SQLDATA - 458)) | (1L << (SQLERROR - 458)) | (1L << (STANDALONE - 458)) | (1L << (STARTUP - 458)) | (1L << (STATEMENT - 458)) | (1L << (STATEMENT_ID - 458)) | (1L << (STATIC - 458)) | (1L << (STATISTICS - 458)) | (1L << (STRING - 458)) | (1L << (SUBMULTISET - 458)) | (1L << (SUBPARTITION - 458)) | (1L << (SUBSTITUTABLE - 458)) | (1L << (SUBSTRING - 458)) | (1L << (SUBTYPE - 458)) | (1L << (SUCCESS - 458)) | (1L << (SUSPEND - 458)) | (1L << (TABLES - 458)) | (1L << (TIME - 458)) | (1L << (TIMESTAMP - 458)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 458)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 458)) | (1L << (TIMESTAMP_UNCONSTRAINED - 458)))) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & ((1L << (TIMEZONE_ABBR - 522)) | (1L << (TIMEZONE_HOUR - 522)) | (1L << (TIMEZONE_MINUTE - 522)) | (1L << (TIMEZONE_REGION - 522)) | (1L << (TO_CHAR - 522)) | (1L << (TO_DATE - 522)) | (1L << (TRAILING - 522)) | (1L << (TRANSACTION - 522)) | (1L << (TRANSLATE - 522)) | (1L << (TREAT - 522)) | (1L << (TRIGGER - 522)) | (1L << (TRIM - 522)) | (1L << (TRUNCATE - 522)) | (1L << (TRUSTED - 522)) | (1L << (TYPE - 522)) | (1L << (UNBOUNDED - 522)) | (1L << (UNDER - 522)) | (1L << (UNLIMITED - 522)) | (1L << (UNTIL - 522)) | (1L << (UPDATED - 522)) | (1L << (UPSERT - 522)) | (1L << (UROWID - 522)) | (1L << (USE - 522)) | (1L << (VALIDATE - 522)) | (1L << (VALUE - 522)) | (1L << (VARCHAR - 522)) | (1L << (VARCHAR2 - 522)) | (1L << (VARIABLE - 522)) | (1L << (VARRAY - 522)) | (1L << (VARYING - 522)) | (1L << (VERBOSE - 522)) | (1L << (VERSION - 522)) | (1L << (VERSIONS - 522)) | (1L << (VIEW - 522)) | (1L << (WAIT - 522)) | (1L << (WARNING - 522)) | (1L << (WELLFORMED - 522)) | (1L << (WHENEVER - 522)) | (1L << (WHILE - 522)) | (1L << (WITHOUT - 522)) | (1L << (WITHIN - 522)) | (1L << (WORK - 522)) | (1L << (WRITE - 522)) | (1L << (XML - 522)) | (1L << (XMLAGG - 522)) | (1L << (XMLATTRIBUTES - 522)))) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & ((1L << (XMLCAST - 586)) | (1L << (XMLCOLATTVAL - 586)) | (1L << (XMLELEMENT - 586)) | (1L << (XMLEXISTS - 586)) | (1L << (XMLFOREST - 586)) | (1L << (XMLNAMESPACES - 586)) | (1L << (XMLPARSE - 586)) | (1L << (XMLPI - 586)) | (1L << (XMLQUERY - 586)) | (1L << (XMLROOT - 586)) | (1L << (XMLSERIALIZE - 586)) | (1L << (XMLTABLE - 586)) | (1L << (YEAR - 586)) | (1L << (YES - 586)) | (1L << (YMINTERVAL_UNCONSTRAINED - 586)) | (1L << (ZONE - 586)) | (1L << (PREDICTION - 586)) | (1L << (PREDICTION_BOUNDS - 586)) | (1L << (PREDICTION_COST - 586)) | (1L << (PREDICTION_DETAILS - 586)) | (1L << (PREDICTION_PROBABILITY - 586)) | (1L << (PREDICTION_SET - 586)) | (1L << (CUME_DIST - 586)) | (1L << (DENSE_RANK - 586)) | (1L << (LISTAGG - 586)) | (1L << (PERCENT_RANK - 586)) | (1L << (PERCENTILE_CONT - 586)) | (1L << (PERCENTILE_DISC - 586)) | (1L << (RANK - 586)) | (1L << (AVG - 586)) | (1L << (CORR - 586)) | (1L << (LAG - 586)) | (1L << (LEAD - 586)) | (1L << (MAX - 586)) | (1L << (MEDIAN - 586)) | (1L << (MIN - 586)) | (1L << (NTILE - 586)) | (1L << (RATIO_TO_REPORT - 586)) | (1L << (ROW_NUMBER - 586)) | (1L << (SUM - 586)) | (1L << (VARIANCE - 586)) | (1L << (REGR_ - 586)) | (1L << (STDDEV - 586)) | (1L << (VAR_ - 586)) | (1L << (COVAR_ - 586)) | (1L << (DELIMITED_ID - 586)))) != 0) || ((((_la - 655)) & ~0x3f) == 0 && ((1L << (_la - 655)) & ((1L << (BINDVAR - 655)) | (1L << (COLON - 655)) | (1L << (REGULAR_ID - 655)))) != 0)) {
					{
					{
					setState(4331);
					declare_spec();
					}
					}
					setState(4336);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4337);
				body();
				}
				break;
			case 2:
				{
				setState(4338);
				call_spec();
				}
				break;
			case 3:
				{
				setState(4339);
				match(EXTERNAL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_triggerContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PLSQLParser.DROP, 0); }
		public TerminalNode TRIGGER() { return getToken(PLSQLParser.TRIGGER, 0); }
		public Trigger_nameContext trigger_name() {
			return getRuleContext(Trigger_nameContext.class,0);
		}
		public Drop_triggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_trigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterDrop_trigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitDrop_trigger(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitDrop_trigger(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_triggerContext drop_trigger() throws RecognitionException {
		Drop_triggerContext _localctx = new Drop_triggerContext(_ctx, getState());
		enterRule(_localctx, 392, RULE_drop_trigger);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4342);
			match(DROP);
			setState(4343);
			match(TRIGGER);
			setState(4344);
			trigger_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_triggerContext extends ParserRuleContext {
		public Trigger_nameContext tn1;
		public Trigger_nameContext tn2;
		public TerminalNode ALTER() { return getToken(PLSQLParser.ALTER, 0); }
		public TerminalNode TRIGGER() { return getToken(PLSQLParser.TRIGGER, 0); }
		public List<Trigger_nameContext> trigger_name() {
			return getRuleContexts(Trigger_nameContext.class);
		}
		public Trigger_nameContext trigger_name(int i) {
			return getRuleContext(Trigger_nameContext.class,i);
		}
		public TerminalNode RENAME() { return getToken(PLSQLParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(PLSQLParser.TO, 0); }
		public TerminalNode COMPILE() { return getToken(PLSQLParser.COMPILE, 0); }
		public TerminalNode ENABLE() { return getToken(PLSQLParser.ENABLE, 0); }
		public TerminalNode DISABLE() { return getToken(PLSQLParser.DISABLE, 0); }
		public TerminalNode DEBUG() { return getToken(PLSQLParser.DEBUG, 0); }
		public List<Compiler_parameters_clauseContext> compiler_parameters_clause() {
			return getRuleContexts(Compiler_parameters_clauseContext.class);
		}
		public Compiler_parameters_clauseContext compiler_parameters_clause(int i) {
			return getRuleContext(Compiler_parameters_clauseContext.class,i);
		}
		public TerminalNode REUSE() { return getToken(PLSQLParser.REUSE, 0); }
		public TerminalNode SETTINGS() { return getToken(PLSQLParser.SETTINGS, 0); }
		public Alter_triggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_trigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterAlter_trigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitAlter_trigger(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitAlter_trigger(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_triggerContext alter_trigger() throws RecognitionException {
		Alter_triggerContext _localctx = new Alter_triggerContext(_ctx, getState());
		enterRule(_localctx, 394, RULE_alter_trigger);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4346);
			match(ALTER);
			setState(4347);
			match(TRIGGER);
			setState(4348);
			((Alter_triggerContext)_localctx).tn1 = trigger_name();
			setState(4367);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DISABLE:
			case ENABLE:
				{
				setState(4349);
				_la = _input.LA(1);
				if ( !(_la==DISABLE || _la==ENABLE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case RENAME:
				{
				setState(4350);
				match(RENAME);
				setState(4351);
				match(TO);
				setState(4352);
				((Alter_triggerContext)_localctx).tn2 = trigger_name();
				}
				break;
			case COMPILE:
				{
				setState(4353);
				match(COMPILE);
				setState(4355);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,614,_ctx) ) {
				case 1:
					{
					setState(4354);
					match(DEBUG);
					}
					break;
				}
				setState(4360);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,615,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(4357);
						compiler_parameters_clause();
						}
						} 
					}
					setState(4362);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,615,_ctx);
				}
				setState(4365);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==REUSE) {
					{
					setState(4363);
					match(REUSE);
					setState(4364);
					match(SETTINGS);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_triggerContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PLSQLParser.CREATE, 0); }
		public TerminalNode TRIGGER() { return getToken(PLSQLParser.TRIGGER, 0); }
		public Trigger_nameContext trigger_name() {
			return getRuleContext(Trigger_nameContext.class,0);
		}
		public Trigger_bodyContext trigger_body() {
			return getRuleContext(Trigger_bodyContext.class,0);
		}
		public Simple_dml_triggerContext simple_dml_trigger() {
			return getRuleContext(Simple_dml_triggerContext.class,0);
		}
		public Compound_dml_triggerContext compound_dml_trigger() {
			return getRuleContext(Compound_dml_triggerContext.class,0);
		}
		public Non_dml_triggerContext non_dml_trigger() {
			return getRuleContext(Non_dml_triggerContext.class,0);
		}
		public TerminalNode OR() { return getToken(PLSQLParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(PLSQLParser.REPLACE, 0); }
		public Trigger_follows_clauseContext trigger_follows_clause() {
			return getRuleContext(Trigger_follows_clauseContext.class,0);
		}
		public Trigger_when_clauseContext trigger_when_clause() {
			return getRuleContext(Trigger_when_clauseContext.class,0);
		}
		public TerminalNode ENABLE() { return getToken(PLSQLParser.ENABLE, 0); }
		public TerminalNode DISABLE() { return getToken(PLSQLParser.DISABLE, 0); }
		public Create_triggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_trigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterCreate_trigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitCreate_trigger(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitCreate_trigger(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_triggerContext create_trigger() throws RecognitionException {
		Create_triggerContext _localctx = new Create_triggerContext(_ctx, getState());
		enterRule(_localctx, 396, RULE_create_trigger);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4369);
			match(CREATE);
			setState(4372);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(4370);
				match(OR);
				setState(4371);
				match(REPLACE);
				}
			}

			setState(4374);
			match(TRIGGER);
			setState(4375);
			trigger_name();
			setState(4379);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,619,_ctx) ) {
			case 1:
				{
				setState(4376);
				simple_dml_trigger();
				}
				break;
			case 2:
				{
				setState(4377);
				compound_dml_trigger();
				}
				break;
			case 3:
				{
				setState(4378);
				non_dml_trigger();
				}
				break;
			}
			setState(4382);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,620,_ctx) ) {
			case 1:
				{
				setState(4381);
				trigger_follows_clause();
				}
				break;
			}
			setState(4385);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,621,_ctx) ) {
			case 1:
				{
				setState(4384);
				_la = _input.LA(1);
				if ( !(_la==DISABLE || _la==ENABLE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(4388);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHEN) {
				{
				setState(4387);
				trigger_when_clause();
				}
			}

			setState(4390);
			trigger_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Trigger_follows_clauseContext extends ParserRuleContext {
		public TerminalNode FOLLOWS() { return getToken(PLSQLParser.FOLLOWS, 0); }
		public List<Trigger_nameContext> trigger_name() {
			return getRuleContexts(Trigger_nameContext.class);
		}
		public Trigger_nameContext trigger_name(int i) {
			return getRuleContext(Trigger_nameContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLSQLParser.COMMA, i);
		}
		public Trigger_follows_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_trigger_follows_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterTrigger_follows_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitTrigger_follows_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitTrigger_follows_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Trigger_follows_clauseContext trigger_follows_clause() throws RecognitionException {
		Trigger_follows_clauseContext _localctx = new Trigger_follows_clauseContext(_ctx, getState());
		enterRule(_localctx, 398, RULE_trigger_follows_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4392);
			match(FOLLOWS);
			setState(4393);
			trigger_name();
			setState(4398);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4394);
				match(COMMA);
				setState(4395);
				trigger_name();
				}
				}
				setState(4400);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Trigger_when_clauseContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(PLSQLParser.WHEN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PLSQLParser.LEFT_PAREN, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PLSQLParser.RIGHT_PAREN, 0); }
		public Trigger_when_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_trigger_when_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterTrigger_when_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitTrigger_when_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitTrigger_when_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Trigger_when_clauseContext trigger_when_clause() throws RecognitionException {
		Trigger_when_clauseContext _localctx = new Trigger_when_clauseContext(_ctx, getState());
		enterRule(_localctx, 400, RULE_trigger_when_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4401);
			match(WHEN);
			setState(4402);
			match(LEFT_PAREN);
			setState(4403);
			condition();
			setState(4404);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Simple_dml_triggerContext extends ParserRuleContext {
		public Dml_event_clauseContext dml_event_clause() {
			return getRuleContext(Dml_event_clauseContext.class,0);
		}
		public TerminalNode BEFORE() { return getToken(PLSQLParser.BEFORE, 0); }
		public TerminalNode AFTER() { return getToken(PLSQLParser.AFTER, 0); }
		public TerminalNode INSTEAD() { return getToken(PLSQLParser.INSTEAD, 0); }
		public TerminalNode OF() { return getToken(PLSQLParser.OF, 0); }
		public Referencing_clauseContext referencing_clause() {
			return getRuleContext(Referencing_clauseContext.class,0);
		}
		public For_each_rowContext for_each_row() {
			return getRuleContext(For_each_rowContext.class,0);
		}
		public Simple_dml_triggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simple_dml_trigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterSimple_dml_trigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitSimple_dml_trigger(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitSimple_dml_trigger(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Simple_dml_triggerContext simple_dml_trigger() throws RecognitionException {
		Simple_dml_triggerContext _localctx = new Simple_dml_triggerContext(_ctx, getState());
		enterRule(_localctx, 402, RULE_simple_dml_trigger);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4410);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BEFORE:
				{
				setState(4406);
				match(BEFORE);
				}
				break;
			case AFTER:
				{
				setState(4407);
				match(AFTER);
				}
				break;
			case INSTEAD:
				{
				setState(4408);
				match(INSTEAD);
				setState(4409);
				match(OF);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(4412);
			dml_event_clause();
			setState(4414);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,625,_ctx) ) {
			case 1:
				{
				setState(4413);
				referencing_clause();
				}
				break;
			}
			setState(4417);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(4416);
				for_each_row();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class For_each_rowContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(PLSQLParser.FOR, 0); }
		public TerminalNode EACH() { return getToken(PLSQLParser.EACH, 0); }
		public TerminalNode ROW() { return getToken(PLSQLParser.ROW, 0); }
		public For_each_rowContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_for_each_row; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterFor_each_row(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitFor_each_row(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitFor_each_row(this);
			else return visitor.visitChildren(this);
		}
	}

	public final For_each_rowContext for_each_row() throws RecognitionException {
		For_each_rowContext _localctx = new For_each_rowContext(_ctx, getState());
		enterRule(_localctx, 404, RULE_for_each_row);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4419);
			match(FOR);
			setState(4420);
			match(EACH);
			setState(4421);
			match(ROW);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Compound_dml_triggerContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(PLSQLParser.FOR, 0); }
		public Dml_event_clauseContext dml_event_clause() {
			return getRuleContext(Dml_event_clauseContext.class,0);
		}
		public Referencing_clauseContext referencing_clause() {
			return getRuleContext(Referencing_clauseContext.class,0);
		}
		public Compound_dml_triggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compound_dml_trigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterCompound_dml_trigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitCompound_dml_trigger(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitCompound_dml_trigger(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Compound_dml_triggerContext compound_dml_trigger() throws RecognitionException {
		Compound_dml_triggerContext _localctx = new Compound_dml_triggerContext(_ctx, getState());
		enterRule(_localctx, 406, RULE_compound_dml_trigger);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4423);
			match(FOR);
			setState(4424);
			dml_event_clause();
			setState(4426);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,627,_ctx) ) {
			case 1:
				{
				setState(4425);
				referencing_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Non_dml_triggerContext extends ParserRuleContext {
		public List<Non_dml_eventContext> non_dml_event() {
			return getRuleContexts(Non_dml_eventContext.class);
		}
		public Non_dml_eventContext non_dml_event(int i) {
			return getRuleContext(Non_dml_eventContext.class,i);
		}
		public TerminalNode ON() { return getToken(PLSQLParser.ON, 0); }
		public TerminalNode BEFORE() { return getToken(PLSQLParser.BEFORE, 0); }
		public TerminalNode AFTER() { return getToken(PLSQLParser.AFTER, 0); }
		public TerminalNode DATABASE() { return getToken(PLSQLParser.DATABASE, 0); }
		public TerminalNode SCHEMA() { return getToken(PLSQLParser.SCHEMA, 0); }
		public List<TerminalNode> OR() { return getTokens(PLSQLParser.OR); }
		public TerminalNode OR(int i) {
			return getToken(PLSQLParser.OR, i);
		}
		public Schema_nameContext schema_name() {
			return getRuleContext(Schema_nameContext.class,0);
		}
		public TerminalNode PERIOD() { return getToken(PLSQLParser.PERIOD, 0); }
		public Non_dml_triggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_non_dml_trigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterNon_dml_trigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitNon_dml_trigger(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitNon_dml_trigger(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Non_dml_triggerContext non_dml_trigger() throws RecognitionException {
		Non_dml_triggerContext _localctx = new Non_dml_triggerContext(_ctx, getState());
		enterRule(_localctx, 408, RULE_non_dml_trigger);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4428);
			_la = _input.LA(1);
			if ( !(_la==AFTER || _la==BEFORE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4429);
			non_dml_event();
			setState(4434);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==OR) {
				{
				{
				setState(4430);
				match(OR);
				setState(4431);
				non_dml_event();
				}
				}
				setState(4436);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4437);
			match(ON);
			setState(4445);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,630,_ctx) ) {
			case 1:
				{
				setState(4438);
				match(DATABASE);
				}
				break;
			case 2:
				{
				setState(4442);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,629,_ctx) ) {
				case 1:
					{
					setState(4439);
					schema_name();
					setState(4440);
					match(PERIOD);
					}
					break;
				}
				setState(4444);
				match(SCHEMA);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Trigger_bodyContext extends ParserRuleContext {
		public TerminalNode COMPOUND() { return getToken(PLSQLParser.COMPOUND, 0); }
		public TerminalNode TRIGGER() { return getToken(PLSQLParser.TRIGGER, 0); }
		public TerminalNode CALL() { return getToken(PLSQLParser.CALL, 0); }
		public R_idContext r_id() {
			return getRuleContext(R_idContext.class,0);
		}
		public Trigger_blockContext trigger_block() {
			return getRuleContext(Trigger_blockContext.class,0);
		}
		public Trigger_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_trigger_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterTrigger_body(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitTrigger_body(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitTrigger_body(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Trigger_bodyContext trigger_body() throws RecognitionException {
		Trigger_bodyContext _localctx = new Trigger_bodyContext(_ctx, getState());
		enterRule(_localctx, 410, RULE_trigger_body);
		try {
			setState(4452);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,631,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4447);
				match(COMPOUND);
				setState(4448);
				match(TRIGGER);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4449);
				match(CALL);
				setState(4450);
				r_id();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4451);
				trigger_block();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Routine_clauseContext extends ParserRuleContext {
		public Routine_nameContext routine_name() {
			return getRuleContext(Routine_nameContext.class,0);
		}
		public Function_argumentContext function_argument() {
			return getRuleContext(Function_argumentContext.class,0);
		}
		public Routine_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_routine_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterRoutine_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitRoutine_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitRoutine_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Routine_clauseContext routine_clause() throws RecognitionException {
		Routine_clauseContext _localctx = new Routine_clauseContext(_ctx, getState());
		enterRule(_localctx, 412, RULE_routine_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4454);
			routine_name();
			setState(4456);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(4455);
				function_argument();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Compound_trigger_blockContext extends ParserRuleContext {
		public TerminalNode COMPOUND() { return getToken(PLSQLParser.COMPOUND, 0); }
		public TerminalNode TRIGGER() { return getToken(PLSQLParser.TRIGGER, 0); }
		public TerminalNode END() { return getToken(PLSQLParser.END, 0); }
		public Trigger_nameContext trigger_name() {
			return getRuleContext(Trigger_nameContext.class,0);
		}
		public List<Declare_specContext> declare_spec() {
			return getRuleContexts(Declare_specContext.class);
		}
		public Declare_specContext declare_spec(int i) {
			return getRuleContext(Declare_specContext.class,i);
		}
		public List<Timing_point_sectionContext> timing_point_section() {
			return getRuleContexts(Timing_point_sectionContext.class);
		}
		public Timing_point_sectionContext timing_point_section(int i) {
			return getRuleContext(Timing_point_sectionContext.class,i);
		}
		public Compound_trigger_blockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compound_trigger_block; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterCompound_trigger_block(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitCompound_trigger_block(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitCompound_trigger_block(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Compound_trigger_blockContext compound_trigger_block() throws RecognitionException {
		Compound_trigger_blockContext _localctx = new Compound_trigger_blockContext(_ctx, getState());
		enterRule(_localctx, 414, RULE_compound_trigger_block);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4458);
			match(COMPOUND);
			setState(4459);
			match(TRIGGER);
			setState(4463);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,633,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4460);
					declare_spec();
					}
					} 
				}
				setState(4465);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,633,_ctx);
			}
			setState(4467); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(4466);
				timing_point_section();
				}
				}
				setState(4469); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==AFTER || _la==BEFORE );
			setState(4471);
			match(END);
			setState(4472);
			trigger_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Timing_point_sectionContext extends ParserRuleContext {
		public Token bk;
		public Token ak;
		public List<TerminalNode> STATEMENT() { return getTokens(PLSQLParser.STATEMENT); }
		public TerminalNode STATEMENT(int i) {
			return getToken(PLSQLParser.STATEMENT, i);
		}
		public TerminalNode IS() { return getToken(PLSQLParser.IS, 0); }
		public Trigger_blockContext trigger_block() {
			return getRuleContext(Trigger_blockContext.class,0);
		}
		public List<TerminalNode> BEFORE() { return getTokens(PLSQLParser.BEFORE); }
		public TerminalNode BEFORE(int i) {
			return getToken(PLSQLParser.BEFORE, i);
		}
		public TerminalNode SEMICOLON() { return getToken(PLSQLParser.SEMICOLON, 0); }
		public List<TerminalNode> EACH() { return getTokens(PLSQLParser.EACH); }
		public TerminalNode EACH(int i) {
			return getToken(PLSQLParser.EACH, i);
		}
		public List<TerminalNode> ROW() { return getTokens(PLSQLParser.ROW); }
		public TerminalNode ROW(int i) {
			return getToken(PLSQLParser.ROW, i);
		}
		public List<TerminalNode> AFTER() { return getTokens(PLSQLParser.AFTER); }
		public TerminalNode AFTER(int i) {
			return getToken(PLSQLParser.AFTER, i);
		}
		public Timing_point_sectionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_timing_point_section; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterTiming_point_section(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitTiming_point_section(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitTiming_point_section(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Timing_point_sectionContext timing_point_section() throws RecognitionException {
		Timing_point_sectionContext _localctx = new Timing_point_sectionContext(_ctx, getState());
		enterRule(_localctx, 416, RULE_timing_point_section);
		try {
			setState(4510);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,635,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4474);
				((Timing_point_sectionContext)_localctx).bk = match(BEFORE);
				setState(4475);
				match(STATEMENT);
				setState(4476);
				match(IS);
				setState(4477);
				trigger_block();
				setState(4478);
				match(BEFORE);
				setState(4479);
				match(STATEMENT);
				setState(4480);
				match(SEMICOLON);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4482);
				((Timing_point_sectionContext)_localctx).bk = match(BEFORE);
				setState(4483);
				match(EACH);
				setState(4484);
				match(ROW);
				setState(4485);
				match(IS);
				setState(4486);
				trigger_block();
				setState(4487);
				match(BEFORE);
				setState(4488);
				match(EACH);
				setState(4489);
				match(ROW);
				setState(4490);
				match(SEMICOLON);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4492);
				((Timing_point_sectionContext)_localctx).ak = match(AFTER);
				setState(4493);
				match(STATEMENT);
				setState(4494);
				match(IS);
				setState(4495);
				trigger_block();
				setState(4496);
				match(AFTER);
				setState(4497);
				match(STATEMENT);
				setState(4498);
				match(SEMICOLON);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4500);
				((Timing_point_sectionContext)_localctx).ak = match(AFTER);
				setState(4501);
				match(EACH);
				setState(4502);
				match(ROW);
				setState(4503);
				match(IS);
				setState(4504);
				trigger_block();
				setState(4505);
				match(AFTER);
				setState(4506);
				match(EACH);
				setState(4507);
				match(ROW);
				setState(4508);
				match(SEMICOLON);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Non_dml_eventContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PLSQLParser.ALTER, 0); }
		public TerminalNode ANALYZE() { return getToken(PLSQLParser.ANALYZE, 0); }
		public TerminalNode ASSOCIATE() { return getToken(PLSQLParser.ASSOCIATE, 0); }
		public TerminalNode STATISTICS() { return getToken(PLSQLParser.STATISTICS, 0); }
		public TerminalNode AUDIT() { return getToken(PLSQLParser.AUDIT, 0); }
		public TerminalNode COMMENT() { return getToken(PLSQLParser.COMMENT, 0); }
		public TerminalNode CREATE() { return getToken(PLSQLParser.CREATE, 0); }
		public TerminalNode DISASSOCIATE() { return getToken(PLSQLParser.DISASSOCIATE, 0); }
		public TerminalNode DROP() { return getToken(PLSQLParser.DROP, 0); }
		public TerminalNode GRANT() { return getToken(PLSQLParser.GRANT, 0); }
		public TerminalNode NOAUDIT() { return getToken(PLSQLParser.NOAUDIT, 0); }
		public TerminalNode RENAME() { return getToken(PLSQLParser.RENAME, 0); }
		public TerminalNode REVOKE() { return getToken(PLSQLParser.REVOKE, 0); }
		public TerminalNode TRUNCATE() { return getToken(PLSQLParser.TRUNCATE, 0); }
		public TerminalNode DDL() { return getToken(PLSQLParser.DDL, 0); }
		public TerminalNode STARTUP() { return getToken(PLSQLParser.STARTUP, 0); }
		public TerminalNode SHUTDOWN() { return getToken(PLSQLParser.SHUTDOWN, 0); }
		public TerminalNode DB_ROLE_CHANGE() { return getToken(PLSQLParser.DB_ROLE_CHANGE, 0); }
		public TerminalNode LOGON() { return getToken(PLSQLParser.LOGON, 0); }
		public TerminalNode LOGOFF() { return getToken(PLSQLParser.LOGOFF, 0); }
		public TerminalNode SERVERERROR() { return getToken(PLSQLParser.SERVERERROR, 0); }
		public TerminalNode SUSPEND() { return getToken(PLSQLParser.SUSPEND, 0); }
		public TerminalNode DATABASE() { return getToken(PLSQLParser.DATABASE, 0); }
		public TerminalNode SCHEMA() { return getToken(PLSQLParser.SCHEMA, 0); }
		public TerminalNode FOLLOWS() { return getToken(PLSQLParser.FOLLOWS, 0); }
		public Non_dml_eventContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_non_dml_event; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterNon_dml_event(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitNon_dml_event(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitNon_dml_event(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Non_dml_eventContext non_dml_event() throws RecognitionException {
		Non_dml_eventContext _localctx = new Non_dml_eventContext(_ctx, getState());
		enterRule(_localctx, 418, RULE_non_dml_event);
		try {
			setState(4538);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALTER:
				enterOuterAlt(_localctx, 1);
				{
				setState(4512);
				match(ALTER);
				}
				break;
			case ANALYZE:
				enterOuterAlt(_localctx, 2);
				{
				setState(4513);
				match(ANALYZE);
				}
				break;
			case ASSOCIATE:
				enterOuterAlt(_localctx, 3);
				{
				setState(4514);
				match(ASSOCIATE);
				setState(4515);
				match(STATISTICS);
				}
				break;
			case AUDIT:
				enterOuterAlt(_localctx, 4);
				{
				setState(4516);
				match(AUDIT);
				}
				break;
			case COMMENT:
				enterOuterAlt(_localctx, 5);
				{
				setState(4517);
				match(COMMENT);
				}
				break;
			case CREATE:
				enterOuterAlt(_localctx, 6);
				{
				setState(4518);
				match(CREATE);
				}
				break;
			case DISASSOCIATE:
				enterOuterAlt(_localctx, 7);
				{
				setState(4519);
				match(DISASSOCIATE);
				setState(4520);
				match(STATISTICS);
				}
				break;
			case DROP:
				enterOuterAlt(_localctx, 8);
				{
				setState(4521);
				match(DROP);
				}
				break;
			case GRANT:
				enterOuterAlt(_localctx, 9);
				{
				setState(4522);
				match(GRANT);
				}
				break;
			case NOAUDIT:
				enterOuterAlt(_localctx, 10);
				{
				setState(4523);
				match(NOAUDIT);
				}
				break;
			case RENAME:
				enterOuterAlt(_localctx, 11);
				{
				setState(4524);
				match(RENAME);
				}
				break;
			case REVOKE:
				enterOuterAlt(_localctx, 12);
				{
				setState(4525);
				match(REVOKE);
				}
				break;
			case TRUNCATE:
				enterOuterAlt(_localctx, 13);
				{
				setState(4526);
				match(TRUNCATE);
				}
				break;
			case DDL:
				enterOuterAlt(_localctx, 14);
				{
				setState(4527);
				match(DDL);
				}
				break;
			case STARTUP:
				enterOuterAlt(_localctx, 15);
				{
				setState(4528);
				match(STARTUP);
				}
				break;
			case SHUTDOWN:
				enterOuterAlt(_localctx, 16);
				{
				setState(4529);
				match(SHUTDOWN);
				}
				break;
			case DB_ROLE_CHANGE:
				enterOuterAlt(_localctx, 17);
				{
				setState(4530);
				match(DB_ROLE_CHANGE);
				}
				break;
			case LOGON:
				enterOuterAlt(_localctx, 18);
				{
				setState(4531);
				match(LOGON);
				}
				break;
			case LOGOFF:
				enterOuterAlt(_localctx, 19);
				{
				setState(4532);
				match(LOGOFF);
				}
				break;
			case SERVERERROR:
				enterOuterAlt(_localctx, 20);
				{
				setState(4533);
				match(SERVERERROR);
				}
				break;
			case SUSPEND:
				enterOuterAlt(_localctx, 21);
				{
				setState(4534);
				match(SUSPEND);
				}
				break;
			case DATABASE:
				enterOuterAlt(_localctx, 22);
				{
				setState(4535);
				match(DATABASE);
				}
				break;
			case SCHEMA:
				enterOuterAlt(_localctx, 23);
				{
				setState(4536);
				match(SCHEMA);
				}
				break;
			case FOLLOWS:
				enterOuterAlt(_localctx, 24);
				{
				setState(4537);
				match(FOLLOWS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dml_event_clauseContext extends ParserRuleContext {
		public List<Dml_event_elementContext> dml_event_element() {
			return getRuleContexts(Dml_event_elementContext.class);
		}
		public Dml_event_elementContext dml_event_element(int i) {
			return getRuleContext(Dml_event_elementContext.class,i);
		}
		public TerminalNode ON() { return getToken(PLSQLParser.ON, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public List<TerminalNode> OR() { return getTokens(PLSQLParser.OR); }
		public TerminalNode OR(int i) {
			return getToken(PLSQLParser.OR, i);
		}
		public Dml_event_nested_clauseContext dml_event_nested_clause() {
			return getRuleContext(Dml_event_nested_clauseContext.class,0);
		}
		public Dml_event_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dml_event_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterDml_event_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitDml_event_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitDml_event_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Dml_event_clauseContext dml_event_clause() throws RecognitionException {
		Dml_event_clauseContext _localctx = new Dml_event_clauseContext(_ctx, getState());
		enterRule(_localctx, 420, RULE_dml_event_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4540);
			dml_event_element();
			setState(4545);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==OR) {
				{
				{
				setState(4541);
				match(OR);
				setState(4542);
				dml_event_element();
				}
				}
				setState(4547);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4548);
			match(ON);
			setState(4550);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,638,_ctx) ) {
			case 1:
				{
				setState(4549);
				dml_event_nested_clause();
				}
				break;
			}
			setState(4552);
			tableview_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dml_event_elementContext extends ParserRuleContext {
		public TerminalNode DELETE() { return getToken(PLSQLParser.DELETE, 0); }
		public TerminalNode INSERT() { return getToken(PLSQLParser.INSERT, 0); }
		public TerminalNode UPDATE() { return getToken(PLSQLParser.UPDATE, 0); }
		public TerminalNode OF() { return getToken(PLSQLParser.OF, 0); }
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLSQLParser.COMMA, i);
		}
		public Dml_event_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dml_event_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterDml_event_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitDml_event_element(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitDml_event_element(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Dml_event_elementContext dml_event_element() throws RecognitionException {
		Dml_event_elementContext _localctx = new Dml_event_elementContext(_ctx, getState());
		enterRule(_localctx, 422, RULE_dml_event_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4554);
			_la = _input.LA(1);
			if ( !(_la==DELETE || _la==INSERT || _la==UPDATE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4564);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OF) {
				{
				setState(4555);
				match(OF);
				setState(4556);
				column_name();
				setState(4561);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4557);
					match(COMMA);
					setState(4558);
					column_name();
					}
					}
					setState(4563);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dml_event_nested_clauseContext extends ParserRuleContext {
		public TerminalNode NESTED() { return getToken(PLSQLParser.NESTED, 0); }
		public TerminalNode TABLE() { return getToken(PLSQLParser.TABLE, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public TerminalNode OF() { return getToken(PLSQLParser.OF, 0); }
		public Dml_event_nested_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dml_event_nested_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterDml_event_nested_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitDml_event_nested_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitDml_event_nested_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Dml_event_nested_clauseContext dml_event_nested_clause() throws RecognitionException {
		Dml_event_nested_clauseContext _localctx = new Dml_event_nested_clauseContext(_ctx, getState());
		enterRule(_localctx, 424, RULE_dml_event_nested_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4566);
			match(NESTED);
			setState(4567);
			match(TABLE);
			setState(4568);
			tableview_name();
			setState(4569);
			match(OF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Referencing_clauseContext extends ParserRuleContext {
		public TerminalNode REFERENCING() { return getToken(PLSQLParser.REFERENCING, 0); }
		public List<Referencing_elementContext> referencing_element() {
			return getRuleContexts(Referencing_elementContext.class);
		}
		public Referencing_elementContext referencing_element(int i) {
			return getRuleContext(Referencing_elementContext.class,i);
		}
		public Referencing_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_referencing_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterReferencing_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitReferencing_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitReferencing_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Referencing_clauseContext referencing_clause() throws RecognitionException {
		Referencing_clauseContext _localctx = new Referencing_clauseContext(_ctx, getState());
		enterRule(_localctx, 426, RULE_referencing_clause);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4571);
			match(REFERENCING);
			setState(4573); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(4572);
					referencing_element();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(4575); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,641,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Referencing_elementContext extends ParserRuleContext {
		public Column_aliasContext column_alias() {
			return getRuleContext(Column_aliasContext.class,0);
		}
		public TerminalNode NEW() { return getToken(PLSQLParser.NEW, 0); }
		public TerminalNode OLD() { return getToken(PLSQLParser.OLD, 0); }
		public TerminalNode PARENT() { return getToken(PLSQLParser.PARENT, 0); }
		public Referencing_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_referencing_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterReferencing_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitReferencing_element(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitReferencing_element(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Referencing_elementContext referencing_element() throws RecognitionException {
		Referencing_elementContext _localctx = new Referencing_elementContext(_ctx, getState());
		enterRule(_localctx, 428, RULE_referencing_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4577);
			_la = _input.LA(1);
			if ( !(((((_la - 315)) & ~0x3f) == 0 && ((1L << (_la - 315)) & ((1L << (NEW - 315)) | (1L << (OLD - 315)) | (1L << (PARENT - 315)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4578);
			column_alias();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_typeContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PLSQLParser.DROP, 0); }
		public TerminalNode TYPE() { return getToken(PLSQLParser.TYPE, 0); }
		public Type_nameContext type_name() {
			return getRuleContext(Type_nameContext.class,0);
		}
		public TerminalNode BODY() { return getToken(PLSQLParser.BODY, 0); }
		public TerminalNode FORCE() { return getToken(PLSQLParser.FORCE, 0); }
		public TerminalNode VALIDATE() { return getToken(PLSQLParser.VALIDATE, 0); }
		public Drop_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterDrop_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitDrop_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitDrop_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_typeContext drop_type() throws RecognitionException {
		Drop_typeContext _localctx = new Drop_typeContext(_ctx, getState());
		enterRule(_localctx, 430, RULE_drop_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4580);
			match(DROP);
			setState(4581);
			match(TYPE);
			setState(4583);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,642,_ctx) ) {
			case 1:
				{
				setState(4582);
				match(BODY);
				}
				break;
			}
			setState(4585);
			type_name();
			setState(4587);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FORCE || _la==VALIDATE) {
				{
				setState(4586);
				_la = _input.LA(1);
				if ( !(_la==FORCE || _la==VALIDATE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_typeContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PLSQLParser.ALTER, 0); }
		public TerminalNode TYPE() { return getToken(PLSQLParser.TYPE, 0); }
		public Type_nameContext type_name() {
			return getRuleContext(Type_nameContext.class,0);
		}
		public Compile_type_clauseContext compile_type_clause() {
			return getRuleContext(Compile_type_clauseContext.class,0);
		}
		public Replace_type_clauseContext replace_type_clause() {
			return getRuleContext(Replace_type_clauseContext.class,0);
		}
		public Alter_method_specContext alter_method_spec() {
			return getRuleContext(Alter_method_specContext.class,0);
		}
		public Alter_collection_clausesContext alter_collection_clauses() {
			return getRuleContext(Alter_collection_clausesContext.class,0);
		}
		public Modifier_clauseContext modifier_clause() {
			return getRuleContext(Modifier_clauseContext.class,0);
		}
		public Dependent_handling_clauseContext dependent_handling_clause() {
			return getRuleContext(Dependent_handling_clauseContext.class,0);
		}
		public Alter_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterAlter_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitAlter_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitAlter_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_typeContext alter_type() throws RecognitionException {
		Alter_typeContext _localctx = new Alter_typeContext(_ctx, getState());
		enterRule(_localctx, 432, RULE_alter_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4589);
			match(ALTER);
			setState(4590);
			match(TYPE);
			setState(4591);
			type_name();
			setState(4597);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case COMPILE:
				{
				setState(4592);
				compile_type_clause();
				}
				break;
			case REPLACE:
				{
				setState(4593);
				replace_type_clause();
				}
				break;
			case ADD:
			case DROP:
				{
				setState(4594);
				alter_method_spec();
				}
				break;
			case MODIFY:
				{
				setState(4595);
				alter_collection_clauses();
				}
				break;
			case FINAL:
			case INSTANTIABLE:
			case NOT:
			case OVERRIDING:
				{
				setState(4596);
				modifier_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(4600);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==INVALIDATE) {
				{
				setState(4599);
				dependent_handling_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Compile_type_clauseContext extends ParserRuleContext {
		public TerminalNode COMPILE() { return getToken(PLSQLParser.COMPILE, 0); }
		public TerminalNode DEBUG() { return getToken(PLSQLParser.DEBUG, 0); }
		public List<Compiler_parameters_clauseContext> compiler_parameters_clause() {
			return getRuleContexts(Compiler_parameters_clauseContext.class);
		}
		public Compiler_parameters_clauseContext compiler_parameters_clause(int i) {
			return getRuleContext(Compiler_parameters_clauseContext.class,i);
		}
		public TerminalNode REUSE() { return getToken(PLSQLParser.REUSE, 0); }
		public TerminalNode SETTINGS() { return getToken(PLSQLParser.SETTINGS, 0); }
		public TerminalNode SPECIFICATION() { return getToken(PLSQLParser.SPECIFICATION, 0); }
		public TerminalNode BODY() { return getToken(PLSQLParser.BODY, 0); }
		public Compile_type_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compile_type_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterCompile_type_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitCompile_type_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitCompile_type_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Compile_type_clauseContext compile_type_clause() throws RecognitionException {
		Compile_type_clauseContext _localctx = new Compile_type_clauseContext(_ctx, getState());
		enterRule(_localctx, 434, RULE_compile_type_clause);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4602);
			match(COMPILE);
			setState(4604);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,646,_ctx) ) {
			case 1:
				{
				setState(4603);
				match(DEBUG);
				}
				break;
			}
			setState(4607);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,647,_ctx) ) {
			case 1:
				{
				setState(4606);
				_la = _input.LA(1);
				if ( !(_la==BODY || _la==SPECIFICATION) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(4612);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,648,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4609);
					compiler_parameters_clause();
					}
					} 
				}
				setState(4614);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,648,_ctx);
			}
			setState(4617);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==REUSE) {
				{
				setState(4615);
				match(REUSE);
				setState(4616);
				match(SETTINGS);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Replace_type_clauseContext extends ParserRuleContext {
		public TerminalNode REPLACE() { return getToken(PLSQLParser.REPLACE, 0); }
		public TerminalNode AS() { return getToken(PLSQLParser.AS, 0); }
		public TerminalNode OBJECT() { return getToken(PLSQLParser.OBJECT, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PLSQLParser.LEFT_PAREN, 0); }
		public List<Object_member_specContext> object_member_spec() {
			return getRuleContexts(Object_member_specContext.class);
		}
		public Object_member_specContext object_member_spec(int i) {
			return getRuleContext(Object_member_specContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PLSQLParser.RIGHT_PAREN, 0); }
		public Invoker_rights_clauseContext invoker_rights_clause() {
			return getRuleContext(Invoker_rights_clauseContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLSQLParser.COMMA, i);
		}
		public Replace_type_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_replace_type_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterReplace_type_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitReplace_type_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitReplace_type_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Replace_type_clauseContext replace_type_clause() throws RecognitionException {
		Replace_type_clauseContext _localctx = new Replace_type_clauseContext(_ctx, getState());
		enterRule(_localctx, 436, RULE_replace_type_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4619);
			match(REPLACE);
			setState(4621);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTHID) {
				{
				setState(4620);
				invoker_rights_clause();
				}
			}

			setState(4623);
			match(AS);
			setState(4624);
			match(OBJECT);
			setState(4625);
			match(LEFT_PAREN);
			setState(4626);
			object_member_spec();
			setState(4631);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4627);
				match(COMMA);
				setState(4628);
				object_member_spec();
				}
				}
				setState(4633);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4634);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_method_specContext extends ParserRuleContext {
		public List<Alter_method_elementContext> alter_method_element() {
			return getRuleContexts(Alter_method_elementContext.class);
		}
		public Alter_method_elementContext alter_method_element(int i) {
			return getRuleContext(Alter_method_elementContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLSQLParser.COMMA, i);
		}
		public Alter_method_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_method_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterAlter_method_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitAlter_method_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitAlter_method_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_method_specContext alter_method_spec() throws RecognitionException {
		Alter_method_specContext _localctx = new Alter_method_specContext(_ctx, getState());
		enterRule(_localctx, 438, RULE_alter_method_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4636);
			alter_method_element();
			setState(4641);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4637);
				match(COMMA);
				setState(4638);
				alter_method_element();
				}
				}
				setState(4643);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_method_elementContext extends ParserRuleContext {
		public TerminalNode ADD() { return getToken(PLSQLParser.ADD, 0); }
		public TerminalNode DROP() { return getToken(PLSQLParser.DROP, 0); }
		public Map_order_function_specContext map_order_function_spec() {
			return getRuleContext(Map_order_function_specContext.class,0);
		}
		public Subprogram_specContext subprogram_spec() {
			return getRuleContext(Subprogram_specContext.class,0);
		}
		public Alter_method_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_method_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterAlter_method_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitAlter_method_element(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitAlter_method_element(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_method_elementContext alter_method_element() throws RecognitionException {
		Alter_method_elementContext _localctx = new Alter_method_elementContext(_ctx, getState());
		enterRule(_localctx, 440, RULE_alter_method_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4644);
			_la = _input.LA(1);
			if ( !(_la==ADD || _la==DROP) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4647);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MAP:
			case ORDER:
				{
				setState(4645);
				map_order_function_spec();
				}
				break;
			case MEMBER:
			case STATIC:
				{
				setState(4646);
				subprogram_spec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_attribute_definitionContext extends ParserRuleContext {
		public TerminalNode ATTRIBUTE() { return getToken(PLSQLParser.ATTRIBUTE, 0); }
		public TerminalNode ADD() { return getToken(PLSQLParser.ADD, 0); }
		public TerminalNode MODIFY() { return getToken(PLSQLParser.MODIFY, 0); }
		public TerminalNode DROP() { return getToken(PLSQLParser.DROP, 0); }
		public List<Attribute_definitionContext> attribute_definition() {
			return getRuleContexts(Attribute_definitionContext.class);
		}
		public Attribute_definitionContext attribute_definition(int i) {
			return getRuleContext(Attribute_definitionContext.class,i);
		}
		public TerminalNode LEFT_PAREN() { return getToken(PLSQLParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PLSQLParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PLSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLSQLParser.COMMA, i);
		}
		public Alter_attribute_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_attribute_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterAlter_attribute_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitAlter_attribute_definition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitAlter_attribute_definition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_attribute_definitionContext alter_attribute_definition() throws RecognitionException {
		Alter_attribute_definitionContext _localctx = new Alter_attribute_definitionContext(_ctx, getState());
		enterRule(_localctx, 442, RULE_alter_attribute_definition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4649);
			_la = _input.LA(1);
			if ( !(_la==ADD || _la==DROP || _la==MODIFY) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4650);
			match(ATTRIBUTE);
			setState(4663);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BUILD:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPLETE:
			case COMPOUND:
			case CONCAT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECODE:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DEMAND:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case EDITIONING:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENFORCED:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FAST:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LIST:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MASTER:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEVER:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NVL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case MATERIALIZED:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PREBUILT:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PUBLIC:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REDUCED:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REFRESH:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case REWRITE:
			case RIGHT:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SIZE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBSTRING:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TABLES:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TO_CHAR:
			case TO_DATE:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TRUSTED:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERBOSE:
			case VERSION:
			case VERSIONS:
			case VIEW:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHOUT:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case REGULAR_ID:
				{
				setState(4651);
				attribute_definition();
				}
				break;
			case LEFT_PAREN:
				{
				setState(4652);
				match(LEFT_PAREN);
				setState(4653);
				attribute_definition();
				setState(4658);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4654);
					match(COMMA);
					setState(4655);
					attribute_definition();
					}
					}
					setState(4660);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4661);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Attribute_definitionContext extends ParserRuleContext {
		public Attribute_nameContext attribute_name() {
			return getRuleContext(Attribute_nameContext.class,0);
		}
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public Attribute_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_attribute_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterAttribute_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitAttribute_definition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitAttribute_definition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Attribute_definitionContext attribute_definition() throws RecognitionException {
		Attribute_definitionContext _localctx = new Attribute_definitionContext(_ctx, getState());
		enterRule(_localctx, 444, RULE_attribute_definition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4665);
			attribute_name();
			setState(4667);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BUILD) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (CHR - 65)) | (1L << (CLOB - 65)) | (1L << (CLOSE - 65)) | (1L << (CLUSTER - 65)) | (1L << (COALESCE - 65)) | (1L << (COLLECT - 65)) | (1L << (COLUMNS - 65)) | (1L << (COMMENT - 65)) | (1L << (COMMIT - 65)) | (1L << (COMMITTED - 65)) | (1L << (COMPATIBILITY - 65)) | (1L << (COMPILE - 65)) | (1L << (COMPLETE - 65)) | (1L << (COMPOUND - 65)) | (1L << (CONCAT - 65)) | (1L << (CONSTANT - 65)) | (1L << (CONSTRAINT - 65)) | (1L << (CONSTRAINTS - 65)) | (1L << (CONSTRUCTOR - 65)) | (1L << (CONTENT - 65)) | (1L << (CONTEXT - 65)) | (1L << (CONTINUE - 65)) | (1L << (CONVERT - 65)) | (1L << (CORRUPT_XID - 65)) | (1L << (CORRUPT_XID_ALL - 65)) | (1L << (COST - 65)) | (1L << (COUNT - 65)) | (1L << (CROSS - 65)) | (1L << (CUBE - 65)) | (1L << (CURRENT_USER - 65)) | (1L << (CURSOR - 65)) | (1L << (CUSTOMDATUM - 65)) | (1L << (CYCLE - 65)) | (1L << (DATA - 65)) | (1L << (DATABASE - 65)) | (1L << (DATE - 65)) | (1L << (DAY - 65)) | (1L << (DB_ROLE_CHANGE - 65)) | (1L << (DBTIMEZONE - 65)) | (1L << (DDL - 65)) | (1L << (DEBUG - 65)) | (1L << (DEC - 65)) | (1L << (DECIMAL - 65)) | (1L << (DECODE - 65)) | (1L << (DECOMPOSE - 65)) | (1L << (DECREMENT - 65)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DEMAND - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (EDITIONING - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENFORCED - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FAST - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)) | (1L << (FOLLOWING - 129)) | (1L << (FOLLOWS - 129)) | (1L << (FORALL - 129)) | (1L << (FORCE - 129)))) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & ((1L << (FULL - 197)) | (1L << (FUNCTION - 197)) | (1L << (GROUPING - 197)) | (1L << (HASH - 197)) | (1L << (HIDE - 197)) | (1L << (HOUR - 197)) | (1L << (IGNORE - 197)) | (1L << (IMMEDIATE - 197)) | (1L << (INCLUDE - 197)) | (1L << (INCLUDING - 197)) | (1L << (INCREMENT - 197)) | (1L << (INDENT - 197)) | (1L << (INDEXED - 197)) | (1L << (INDICATOR - 197)) | (1L << (INDICES - 197)) | (1L << (INFINITE - 197)) | (1L << (INLINE - 197)) | (1L << (INNER - 197)) | (1L << (INOUT - 197)) | (1L << (INSTANTIABLE - 197)) | (1L << (INSTEAD - 197)) | (1L << (INT - 197)) | (1L << (INTEGER - 197)) | (1L << (INTERVAL - 197)) | (1L << (INVALIDATE - 197)) | (1L << (ISOLATION - 197)) | (1L << (ITERATE - 197)) | (1L << (JAVA - 197)) | (1L << (JOIN - 197)) | (1L << (KEEP - 197)) | (1L << (LANGUAGE - 197)) | (1L << (LAST - 197)) | (1L << (LAST_VALUE - 197)) | (1L << (LEADING - 197)) | (1L << (LEFT - 197)) | (1L << (LEVEL - 197)))) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & ((1L << (LIBRARY - 261)) | (1L << (LIKE2 - 261)) | (1L << (LIKE4 - 261)) | (1L << (LIKEC - 261)) | (1L << (LIMIT - 261)) | (1L << (LIST - 261)) | (1L << (LOCAL - 261)) | (1L << (LOCKED - 261)) | (1L << (LOG - 261)) | (1L << (LOGOFF - 261)) | (1L << (LOGON - 261)) | (1L << (LONG - 261)) | (1L << (LOOP - 261)) | (1L << (MAIN - 261)) | (1L << (MAP - 261)) | (1L << (MASTER - 261)) | (1L << (MATCHED - 261)) | (1L << (MAXVALUE - 261)) | (1L << (MEASURES - 261)) | (1L << (MEMBER - 261)) | (1L << (MERGE - 261)) | (1L << (MINUTE - 261)) | (1L << (MINVALUE - 261)) | (1L << (MLSLABEL - 261)) | (1L << (MODEL - 261)) | (1L << (MODIFY - 261)) | (1L << (MONTH - 261)) | (1L << (MULTISET - 261)) | (1L << (NAME - 261)) | (1L << (NAN - 261)) | (1L << (NATURAL - 261)) | (1L << (NATURALN - 261)) | (1L << (NAV - 261)) | (1L << (NCHAR - 261)) | (1L << (NCHAR_CS - 261)) | (1L << (NCLOB - 261)) | (1L << (NESTED - 261)) | (1L << (NEVER - 261)) | (1L << (NEW - 261)) | (1L << (NO - 261)) | (1L << (NOAUDIT - 261)) | (1L << (NOCOPY - 261)) | (1L << (NOCYCLE - 261)) | (1L << (NOENTITYESCAPING - 261)))) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & ((1L << (NONE - 329)) | (1L << (NOSCHEMACHECK - 329)) | (1L << (NVL - 329)) | (1L << (NULLS - 329)) | (1L << (NUMBER - 329)) | (1L << (NUMERIC - 329)) | (1L << (NVARCHAR2 - 329)) | (1L << (MATERIALIZED - 329)) | (1L << (OBJECT - 329)) | (1L << (OFF - 329)) | (1L << (OID - 329)) | (1L << (OLD - 329)) | (1L << (ONLY - 329)) | (1L << (OPEN - 329)) | (1L << (ORADATA - 329)) | (1L << (ORDINALITY - 329)) | (1L << (OSERROR - 329)) | (1L << (OUT - 329)) | (1L << (OUTER - 329)) | (1L << (OVER - 329)) | (1L << (OVERRIDING - 329)) | (1L << (PACKAGE - 329)) | (1L << (PARALLEL_ENABLE - 329)) | (1L << (PARAMETERS - 329)) | (1L << (PARENT - 329)) | (1L << (PARTITION - 329)) | (1L << (PASSING - 329)) | (1L << (PATH - 329)) | (1L << (PIPELINED - 329)) | (1L << (PLAN - 329)) | (1L << (PLS_INTEGER - 329)) | (1L << (POSITIVE - 329)) | (1L << (POSITIVEN - 329)) | (1L << (PRAGMA - 329)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (PREBUILT - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)) | (1L << (PRESENT - 393)) | (1L << (PUBLIC - 393)) | (1L << (RAISE - 393)) | (1L << (RANGE - 393)) | (1L << (RAW - 393)) | (1L << (READ - 393)) | (1L << (REAL - 393)) | (1L << (RECORD - 393)) | (1L << (REDUCED - 393)) | (1L << (REF - 393)) | (1L << (REFERENCE - 393)) | (1L << (REFERENCING - 393)) | (1L << (REFRESH - 393)) | (1L << (REJECT - 393)) | (1L << (RELIES_ON - 393)) | (1L << (RENAME - 393)) | (1L << (REPLACE - 393)) | (1L << (RESPECT - 393)) | (1L << (RESTRICT_REFERENCES - 393)) | (1L << (RESULT - 393)) | (1L << (RESULT_CACHE - 393)) | (1L << (RETURN - 393)) | (1L << (RETURNING - 393)) | (1L << (REUSE - 393)) | (1L << (REVERSE - 393)) | (1L << (REWRITE - 393)) | (1L << (RIGHT - 393)) | (1L << (ROLE - 393)) | (1L << (ROLLBACK - 393)) | (1L << (ROLLUP - 393)) | (1L << (ROW - 393)) | (1L << (ROWID - 393)) | (1L << (ROWS - 393)) | (1L << (RULES - 393)) | (1L << (SAMPLE - 393)) | (1L << (SAVE - 393)) | (1L << (SAVEPOINT - 393)) | (1L << (SCHEMA - 393)) | (1L << (SCHEMACHECK - 393)) | (1L << (SCN - 393)) | (1L << (SECOND - 393)))) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & ((1L << (SEED - 458)) | (1L << (SEGMENT - 458)) | (1L << (SELF - 458)) | (1L << (SEQUENTIAL - 458)) | (1L << (SERIALIZABLE - 458)) | (1L << (SERIALLY_REUSABLE - 458)) | (1L << (SERVERERROR - 458)) | (1L << (SESSIONTIMEZONE - 458)) | (1L << (SET - 458)) | (1L << (SETS - 458)) | (1L << (SETTINGS - 458)) | (1L << (SHOW - 458)) | (1L << (SHUTDOWN - 458)) | (1L << (SIBLINGS - 458)) | (1L << (SIGNTYPE - 458)) | (1L << (SIMPLE_INTEGER - 458)) | (1L << (SINGLE - 458)) | (1L << (SIZE - 458)) | (1L << (SKIP_ - 458)) | (1L << (SMALLINT - 458)) | (1L << (SNAPSHOT - 458)) | (1L << (SOME - 458)) | (1L << (SPECIFICATION - 458)) | (1L << (SQLDATA - 458)) | (1L << (SQLERROR - 458)) | (1L << (STANDALONE - 458)) | (1L << (STARTUP - 458)) | (1L << (STATEMENT - 458)) | (1L << (STATEMENT_ID - 458)) | (1L << (STATIC - 458)) | (1L << (STATISTICS - 458)) | (1L << (STRING - 458)) | (1L << (SUBMULTISET - 458)) | (1L << (SUBPARTITION - 458)) | (1L << (SUBSTITUTABLE - 458)) | (1L << (SUBSTRING - 458)) | (1L << (SUBTYPE - 458)) | (1L << (SUCCESS - 458)) | (1L << (SUSPEND - 458)) | (1L << (TABLES - 458)) | (1L << (TIME - 458)) | (1L << (TIMESTAMP - 458)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 458)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 458)) | (1L << (TIMESTAMP_UNCONSTRAINED - 458)))) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & ((1L << (TIMEZONE_ABBR - 522)) | (1L << (TIMEZONE_HOUR - 522)) | (1L << (TIMEZONE_MINUTE - 522)) | (1L << (TIMEZONE_REGION - 522)) | (1L << (TO_CHAR - 522)) | (1L << (TO_DATE - 522)) | (1L << (TRAILING - 522)) | (1L << (TRANSACTION - 522)) | (1L << (TRANSLATE - 522)) | (1L << (TREAT - 522)) | (1L << (TRIGGER - 522)) | (1L << (TRIM - 522)) | (1L << (TRUNCATE - 522)) | (1L << (TRUSTED - 522)) | (1L << (TYPE - 522)) | (1L << (UNBOUNDED - 522)) | (1L << (UNDER - 522)) | (1L << (UNLIMITED - 522)) | (1L << (UNTIL - 522)) | (1L << (UPDATED - 522)) | (1L << (UPSERT - 522)) | (1L << (UROWID - 522)) | (1L << (USE - 522)) | (1L << (VALIDATE - 522)) | (1L << (VALUE - 522)) | (1L << (VARCHAR - 522)) | (1L << (VARCHAR2 - 522)) | (1L << (VARIABLE - 522)) | (1L << (VARRAY - 522)) | (1L << (VARYING - 522)) | (1L << (VERBOSE - 522)) | (1L << (VERSION - 522)) | (1L << (VERSIONS - 522)) | (1L << (VIEW - 522)) | (1L << (WAIT - 522)) | (1L << (WARNING - 522)) | (1L << (WELLFORMED - 522)) | (1L << (WHENEVER - 522)) | (1L << (WHILE - 522)) | (1L << (WITHOUT - 522)) | (1L << (WITHIN - 522)) | (1L << (WORK - 522)) | (1L << (WRITE - 522)) | (1L << (XML - 522)) | (1L << (XMLAGG - 522)) | (1L << (XMLATTRIBUTES - 522)))) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & ((1L << (XMLCAST - 586)) | (1L << (XMLCOLATTVAL - 586)) | (1L << (XMLELEMENT - 586)) | (1L << (XMLEXISTS - 586)) | (1L << (XMLFOREST - 586)) | (1L << (XMLNAMESPACES - 586)) | (1L << (XMLPARSE - 586)) | (1L << (XMLPI - 586)) | (1L << (XMLQUERY - 586)) | (1L << (XMLROOT - 586)) | (1L << (XMLSERIALIZE - 586)) | (1L << (XMLTABLE - 586)) | (1L << (YEAR - 586)) | (1L << (YES - 586)) | (1L << (YMINTERVAL_UNCONSTRAINED - 586)) | (1L << (ZONE - 586)) | (1L << (PREDICTION - 586)) | (1L << (PREDICTION_BOUNDS - 586)) | (1L << (PREDICTION_COST - 586)) | (1L << (PREDICTION_DETAILS - 586)) | (1L << (PREDICTION_PROBABILITY - 586)) | (1L << (PREDICTION_SET - 586)) | (1L << (CUME_DIST - 586)) | (1L << (DENSE_RANK - 586)) | (1L << (LISTAGG - 586)) | (1L << (PERCENT_RANK - 586)) | (1L << (PERCENTILE_CONT - 586)) | (1L << (PERCENTILE_DISC - 586)) | (1L << (RANK - 586)) | (1L << (AVG - 586)) | (1L << (CORR - 586)) | (1L << (LAG - 586)) | (1L << (LEAD - 586)) | (1L << (MAX - 586)) | (1L << (MEDIAN - 586)) | (1L << (MIN - 586)) | (1L << (NTILE - 586)) | (1L << (RATIO_TO_REPORT - 586)) | (1L << (ROW_NUMBER - 586)) | (1L << (SUM - 586)) | (1L << (VARIANCE - 586)) | (1L << (REGR_ - 586)) | (1L << (STDDEV - 586)) | (1L << (VAR_ - 586)) | (1L << (COVAR_ - 586)) | (1L << (DELIMITED_ID - 586)))) != 0) || _la==REGULAR_ID) {
				{
				setState(4666);
				type_spec();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_collection_clausesContext extends ParserRuleContext {
		public TerminalNode MODIFY() { return getToken(PLSQLParser.MODIFY, 0); }
		public TerminalNode LIMIT() { return getToken(PLSQLParser.LIMIT, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode ELEMENT() { return getToken(PLSQLParser.ELEMENT, 0); }
		public TerminalNode TYPE() { return getToken(PLSQLParser.TYPE, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public Alter_collection_clausesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_collection_clauses; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterAlter_collection_clauses(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitAlter_collection_clauses(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitAlter_collection_clauses(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_collection_clausesContext alter_collection_clauses() throws RecognitionException {
		Alter_collection_clausesContext _localctx = new Alter_collection_clausesContext(_ctx, getState());
		enterRule(_localctx, 446, RULE_alter_collection_clauses);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4669);
			match(MODIFY);
			setState(4675);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LIMIT:
				{
				setState(4670);
				match(LIMIT);
				setState(4671);
				expression(0);
				}
				break;
			case ELEMENT:
				{
				setState(4672);
				match(ELEMENT);
				setState(4673);
				match(TYPE);
				setState(4674);
				type_spec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dependent_handling_clauseContext extends ParserRuleContext {
		public TerminalNode INVALIDATE() { return getToken(PLSQLParser.INVALIDATE, 0); }
		public TerminalNode CASCADE() { return getToken(PLSQLParser.CASCADE, 0); }
		public TerminalNode CONVERT() { return getToken(PLSQLParser.CONVERT, 0); }
		public TerminalNode TO() { return getToken(PLSQLParser.TO, 0); }
		public TerminalNode SUBSTITUTABLE() { return getToken(PLSQLParser.SUBSTITUTABLE, 0); }
		public TerminalNode INCLUDING() { return getToken(PLSQLParser.INCLUDING, 0); }
		public TerminalNode TABLE() { return getToken(PLSQLParser.TABLE, 0); }
		public TerminalNode DATA() { return getToken(PLSQLParser.DATA, 0); }
		public Dependent_exceptions_partContext dependent_exceptions_part() {
			return getRuleContext(Dependent_exceptions_partContext.class,0);
		}
		public TerminalNode NOT() { return getToken(PLSQLParser.NOT, 0); }
		public Dependent_handling_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dependent_handling_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterDependent_handling_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitDependent_handling_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitDependent_handling_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Dependent_handling_clauseContext dependent_handling_clause() throws RecognitionException {
		Dependent_handling_clauseContext _localctx = new Dependent_handling_clauseContext(_ctx, getState());
		enterRule(_localctx, 448, RULE_dependent_handling_clause);
		int _la;
		try {
			setState(4693);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INVALIDATE:
				enterOuterAlt(_localctx, 1);
				{
				setState(4677);
				match(INVALIDATE);
				}
				break;
			case CASCADE:
				enterOuterAlt(_localctx, 2);
				{
				setState(4678);
				match(CASCADE);
				setState(4688);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CONVERT:
					{
					setState(4679);
					match(CONVERT);
					setState(4680);
					match(TO);
					setState(4681);
					match(SUBSTITUTABLE);
					}
					break;
				case INCLUDING:
				case NOT:
					{
					setState(4683);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==NOT) {
						{
						setState(4682);
						match(NOT);
						}
					}

					setState(4685);
					match(INCLUDING);
					setState(4686);
					match(TABLE);
					setState(4687);
					match(DATA);
					}
					break;
				case EOF:
				case ALTER:
				case CREATE:
				case DELETE:
				case DROP:
				case EXCEPTIONS:
				case EXPLAIN:
				case FORCE:
				case FUNCTION:
				case GRANT:
				case INSERT:
				case LOCK:
				case MERGE:
				case PROCEDURE:
				case REFRESH:
				case REVOKE:
				case SELECT:
				case UPDATE:
				case WITH:
				case LEFT_PAREN:
				case SEMICOLON:
					break;
				default:
					break;
				}
				setState(4691);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EXCEPTIONS || _la==FORCE) {
					{
					setState(4690);
					dependent_exceptions_part();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dependent_exceptions_partContext extends ParserRuleContext {
		public TerminalNode EXCEPTIONS() { return getToken(PLSQLParser.EXCEPTIONS, 0); }
		public TerminalNode INTO() { return getToken(PLSQLParser.INTO, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public TerminalNode FORCE() { return getToken(PLSQLParser.FORCE, 0); }
		public Dependent_exceptions_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dependent_exceptions_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterDependent_exceptions_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitDependent_exceptions_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitDependent_exceptions_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Dependent_exceptions_partContext dependent_exceptions_part() throws RecognitionException {
		Dependent_exceptions_partContext _localctx = new Dependent_exceptions_partContext(_ctx, getState());
		enterRule(_localctx, 450, RULE_dependent_exceptions_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4696);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FORCE) {
				{
				setState(4695);
				match(FORCE);
				}
			}

			setState(4698);
			match(EXCEPTIONS);
			setState(4699);
			match(INTO);
			setState(4700);
			tableview_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_typeContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PLSQLParser.CREATE, 0); }
		public TerminalNode TYPE() { return getToken(PLSQLParser.TYPE, 0); }
		public Type_definitionContext type_definition() {
			return getRuleContext(Type_definitionContext.class,0);
		}
		public Type_bodyContext type_body() {
			return getRuleContext(Type_bodyContext.class,0);
		}
		public TerminalNode OR() { return getToken(PLSQLParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(PLSQLParser.REPLACE, 0); }
		public Create_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterCreate_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitCreate_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitCreate_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_typeContext create_type() throws RecognitionException {
		Create_typeContext _localctx = new Create_typeContext(_ctx, getState());
		enterRule(_localctx, 452, RULE_create_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4702);
			match(CREATE);
			setState(4705);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(4703);
				match(OR);
				setState(4704);
				match(REPLACE);
				}
			}

			setState(4707);
			match(TYPE);
			setState(4710);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,664,_ctx) ) {
			case 1:
				{
				setState(4708);
				type_definition();
				}
				break;
			case 2:
				{
				setState(4709);
				type_body();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_definitionContext extends ParserRuleContext {
		public Type_nameContext type_name() {
			return getRuleContext(Type_nameContext.class,0);
		}
		public TerminalNode OID() { return getToken(PLSQLParser.OID, 0); }
		public TerminalNode CHAR_STRING() { return getToken(PLSQLParser.CHAR_STRING, 0); }
		public Object_type_defContext object_type_def() {
			return getRuleContext(Object_type_defContext.class,0);
		}
		public Type_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterType_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitType_definition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitType_definition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Type_definitionContext type_definition() throws RecognitionException {
		Type_definitionContext _localctx = new Type_definitionContext(_ctx, getState());
		enterRule(_localctx, 454, RULE_type_definition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4712);
			type_name();
			setState(4715);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OID) {
				{
				setState(4713);
				match(OID);
				setState(4714);
				match(CHAR_STRING);
				}
			}

			setState(4718);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS || _la==AUTHID || _la==IS || _la==UNDER) {
				{
				setState(4717);
				object_type_def();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Object_type_defContext extends ParserRuleContext {
		public Object_as_partContext object_as_part() {
			return getRuleContext(Object_as_partContext.class,0);
		}
		public Object_under_partContext object_under_part() {
			return getRuleContext(Object_under_partContext.class,0);
		}
		public Invoker_rights_clauseContext invoker_rights_clause() {
			return getRuleContext(Invoker_rights_clauseContext.class,0);
		}
		public Sqlj_object_typeContext sqlj_object_type() {
			return getRuleContext(Sqlj_object_typeContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(PLSQLParser.LEFT_PAREN, 0); }
		public List<Object_member_specContext> object_member_spec() {
			return getRuleContexts(Object_member_specContext.class);
		}
		public Object_member_specContext object_member_spec(int i) {
			return getRuleContext(Object_member_specContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PLSQLParser.RIGHT_PAREN, 0); }
		public List<Modifier_clauseContext> modifier_clause() {
			return getRuleContexts(Modifier_clauseContext.class);
		}
		public Modifier_clauseContext modifier_clause(int i) {
			return getRuleContext(Modifier_clauseContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLSQLParser.COMMA, i);
		}
		public Object_type_defContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_object_type_def; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterObject_type_def(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitObject_type_def(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitObject_type_def(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Object_type_defContext object_type_def() throws RecognitionException {
		Object_type_defContext _localctx = new Object_type_defContext(_ctx, getState());
		enterRule(_localctx, 456, RULE_object_type_def);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4721);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTHID) {
				{
				setState(4720);
				invoker_rights_clause();
				}
			}

			setState(4725);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AS:
			case IS:
				{
				setState(4723);
				object_as_part();
				}
				break;
			case UNDER:
				{
				setState(4724);
				object_under_part();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(4728);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EXTERNAL) {
				{
				setState(4727);
				sqlj_object_type();
				}
			}

			setState(4741);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,671,_ctx) ) {
			case 1:
				{
				setState(4730);
				match(LEFT_PAREN);
				setState(4731);
				object_member_spec();
				setState(4736);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4732);
					match(COMMA);
					setState(4733);
					object_member_spec();
					}
					}
					setState(4738);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4739);
				match(RIGHT_PAREN);
				}
				break;
			}
			setState(4746);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==FINAL || _la==INSTANTIABLE || _la==NOT || _la==OVERRIDING) {
				{
				{
				setState(4743);
				modifier_clause();
				}
				}
				setState(4748);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Object_as_partContext extends ParserRuleContext {
		public TerminalNode IS() { return getToken(PLSQLParser.IS, 0); }
		public TerminalNode AS() { return getToken(PLSQLParser.AS, 0); }
		public TerminalNode OBJECT() { return getToken(PLSQLParser.OBJECT, 0); }
		public Varray_type_defContext varray_type_def() {
			return getRuleContext(Varray_type_defContext.class,0);
		}
		public Nested_table_type_defContext nested_table_type_def() {
			return getRuleContext(Nested_table_type_defContext.class,0);
		}
		public Object_as_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_object_as_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterObject_as_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitObject_as_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitObject_as_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Object_as_partContext object_as_part() throws RecognitionException {
		Object_as_partContext _localctx = new Object_as_partContext(_ctx, getState());
		enterRule(_localctx, 458, RULE_object_as_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4749);
			_la = _input.LA(1);
			if ( !(_la==AS || _la==IS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4753);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OBJECT:
				{
				setState(4750);
				match(OBJECT);
				}
				break;
			case VARRAY:
			case VARYING:
				{
				setState(4751);
				varray_type_def();
				}
				break;
			case TABLE:
				{
				setState(4752);
				nested_table_type_def();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Object_under_partContext extends ParserRuleContext {
		public TerminalNode UNDER() { return getToken(PLSQLParser.UNDER, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public Object_under_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_object_under_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterObject_under_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitObject_under_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitObject_under_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Object_under_partContext object_under_part() throws RecognitionException {
		Object_under_partContext _localctx = new Object_under_partContext(_ctx, getState());
		enterRule(_localctx, 460, RULE_object_under_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4755);
			match(UNDER);
			setState(4756);
			type_spec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Nested_table_type_defContext extends ParserRuleContext {
		public TerminalNode TABLE() { return getToken(PLSQLParser.TABLE, 0); }
		public TerminalNode OF() { return getToken(PLSQLParser.OF, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode NOT() { return getToken(PLSQLParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(PLSQLParser.NULL, 0); }
		public Nested_table_type_defContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nested_table_type_def; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterNested_table_type_def(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitNested_table_type_def(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitNested_table_type_def(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Nested_table_type_defContext nested_table_type_def() throws RecognitionException {
		Nested_table_type_defContext _localctx = new Nested_table_type_defContext(_ctx, getState());
		enterRule(_localctx, 462, RULE_nested_table_type_def);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4758);
			match(TABLE);
			setState(4759);
			match(OF);
			setState(4760);
			type_spec();
			setState(4763);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,674,_ctx) ) {
			case 1:
				{
				setState(4761);
				match(NOT);
				setState(4762);
				match(NULL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sqlj_object_typeContext extends ParserRuleContext {
		public TerminalNode EXTERNAL() { return getToken(PLSQLParser.EXTERNAL, 0); }
		public TerminalNode NAME() { return getToken(PLSQLParser.NAME, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode LANGUAGE() { return getToken(PLSQLParser.LANGUAGE, 0); }
		public TerminalNode JAVA() { return getToken(PLSQLParser.JAVA, 0); }
		public TerminalNode USING() { return getToken(PLSQLParser.USING, 0); }
		public TerminalNode SQLDATA() { return getToken(PLSQLParser.SQLDATA, 0); }
		public TerminalNode CUSTOMDATUM() { return getToken(PLSQLParser.CUSTOMDATUM, 0); }
		public TerminalNode ORADATA() { return getToken(PLSQLParser.ORADATA, 0); }
		public Sqlj_object_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sqlj_object_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterSqlj_object_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitSqlj_object_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitSqlj_object_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sqlj_object_typeContext sqlj_object_type() throws RecognitionException {
		Sqlj_object_typeContext _localctx = new Sqlj_object_typeContext(_ctx, getState());
		enterRule(_localctx, 464, RULE_sqlj_object_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4765);
			match(EXTERNAL);
			setState(4766);
			match(NAME);
			setState(4767);
			expression(0);
			setState(4768);
			match(LANGUAGE);
			setState(4769);
			match(JAVA);
			setState(4770);
			match(USING);
			setState(4771);
			_la = _input.LA(1);
			if ( !(_la==CUSTOMDATUM || _la==ORADATA || _la==SQLDATA) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_bodyContext extends ParserRuleContext {
		public TerminalNode BODY() { return getToken(PLSQLParser.BODY, 0); }
		public Type_nameContext type_name() {
			return getRuleContext(Type_nameContext.class,0);
		}
		public TerminalNode END() { return getToken(PLSQLParser.END, 0); }
		public TerminalNode IS() { return getToken(PLSQLParser.IS, 0); }
		public TerminalNode AS() { return getToken(PLSQLParser.AS, 0); }
		public List<Type_body_elementsContext> type_body_elements() {
			return getRuleContexts(Type_body_elementsContext.class);
		}
		public Type_body_elementsContext type_body_elements(int i) {
			return getRuleContext(Type_body_elementsContext.class,i);
		}
		public Type_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterType_body(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitType_body(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitType_body(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Type_bodyContext type_body() throws RecognitionException {
		Type_bodyContext _localctx = new Type_bodyContext(_ctx, getState());
		enterRule(_localctx, 466, RULE_type_body);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4773);
			match(BODY);
			setState(4774);
			type_name();
			setState(4775);
			_la = _input.LA(1);
			if ( !(_la==AS || _la==IS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4777); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(4776);
				type_body_elements();
				}
				}
				setState(4779); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==MAP || _la==MEMBER || _la==ORDER || _la==STATIC );
			setState(4781);
			match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_body_elementsContext extends ParserRuleContext {
		public Map_order_func_declarationContext map_order_func_declaration() {
			return getRuleContext(Map_order_func_declarationContext.class,0);
		}
		public Subprog_decl_in_typeContext subprog_decl_in_type() {
			return getRuleContext(Subprog_decl_in_typeContext.class,0);
		}
		public Type_body_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_body_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterType_body_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitType_body_elements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitType_body_elements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Type_body_elementsContext type_body_elements() throws RecognitionException {
		Type_body_elementsContext _localctx = new Type_body_elementsContext(_ctx, getState());
		enterRule(_localctx, 468, RULE_type_body_elements);
		try {
			setState(4785);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MAP:
			case ORDER:
				enterOuterAlt(_localctx, 1);
				{
				setState(4783);
				map_order_func_declaration();
				}
				break;
			case MEMBER:
			case STATIC:
				enterOuterAlt(_localctx, 2);
				{
				setState(4784);
				subprog_decl_in_type();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Map_order_func_declarationContext extends ParserRuleContext {
		public TerminalNode MEMBER() { return getToken(PLSQLParser.MEMBER, 0); }
		public Func_decl_in_typeContext func_decl_in_type() {
			return getRuleContext(Func_decl_in_typeContext.class,0);
		}
		public TerminalNode MAP() { return getToken(PLSQLParser.MAP, 0); }
		public TerminalNode ORDER() { return getToken(PLSQLParser.ORDER, 0); }
		public Map_order_func_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_map_order_func_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterMap_order_func_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitMap_order_func_declaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitMap_order_func_declaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Map_order_func_declarationContext map_order_func_declaration() throws RecognitionException {
		Map_order_func_declarationContext _localctx = new Map_order_func_declarationContext(_ctx, getState());
		enterRule(_localctx, 470, RULE_map_order_func_declaration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4787);
			_la = _input.LA(1);
			if ( !(_la==MAP || _la==ORDER) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4788);
			match(MEMBER);
			setState(4789);
			func_decl_in_type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Subprog_decl_in_typeContext extends ParserRuleContext {
		public TerminalNode MEMBER() { return getToken(PLSQLParser.MEMBER, 0); }
		public TerminalNode STATIC() { return getToken(PLSQLParser.STATIC, 0); }
		public Proc_decl_in_typeContext proc_decl_in_type() {
			return getRuleContext(Proc_decl_in_typeContext.class,0);
		}
		public Func_decl_in_typeContext func_decl_in_type() {
			return getRuleContext(Func_decl_in_typeContext.class,0);
		}
		public Constructor_declarationContext constructor_declaration() {
			return getRuleContext(Constructor_declarationContext.class,0);
		}
		public Subprog_decl_in_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subprog_decl_in_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterSubprog_decl_in_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitSubprog_decl_in_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitSubprog_decl_in_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Subprog_decl_in_typeContext subprog_decl_in_type() throws RecognitionException {
		Subprog_decl_in_typeContext _localctx = new Subprog_decl_in_typeContext(_ctx, getState());
		enterRule(_localctx, 472, RULE_subprog_decl_in_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4791);
			_la = _input.LA(1);
			if ( !(_la==MEMBER || _la==STATIC) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4795);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PROCEDURE:
				{
				setState(4792);
				proc_decl_in_type();
				}
				break;
			case FUNCTION:
				{
				setState(4793);
				func_decl_in_type();
				}
				break;
			case CONSTRUCTOR:
			case FINAL:
			case INSTANTIABLE:
				{
				setState(4794);
				constructor_declaration();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Proc_decl_in_typeContext extends ParserRuleContext {
		public TerminalNode PROCEDURE() { return getToken(PLSQLParser.PROCEDURE, 0); }
		public Procedure_nameContext procedure_name() {
			return getRuleContext(Procedure_nameContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(PLSQLParser.LEFT_PAREN, 0); }
		public List<Type_elements_parameterContext> type_elements_parameter() {
			return getRuleContexts(Type_elements_parameterContext.class);
		}
		public Type_elements_parameterContext type_elements_parameter(int i) {
			return getRuleContext(Type_elements_parameterContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PLSQLParser.RIGHT_PAREN, 0); }
		public TerminalNode IS() { return getToken(PLSQLParser.IS, 0); }
		public TerminalNode AS() { return getToken(PLSQLParser.AS, 0); }
		public Call_specContext call_spec() {
			return getRuleContext(Call_specContext.class,0);
		}
		public BodyContext body() {
			return getRuleContext(BodyContext.class,0);
		}
		public TerminalNode SEMICOLON() { return getToken(PLSQLParser.SEMICOLON, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PLSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLSQLParser.COMMA, i);
		}
		public TerminalNode DECLARE() { return getToken(PLSQLParser.DECLARE, 0); }
		public List<Declare_specContext> declare_spec() {
			return getRuleContexts(Declare_specContext.class);
		}
		public Declare_specContext declare_spec(int i) {
			return getRuleContext(Declare_specContext.class,i);
		}
		public Proc_decl_in_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_proc_decl_in_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterProc_decl_in_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitProc_decl_in_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitProc_decl_in_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Proc_decl_in_typeContext proc_decl_in_type() throws RecognitionException {
		Proc_decl_in_typeContext _localctx = new Proc_decl_in_typeContext(_ctx, getState());
		enterRule(_localctx, 474, RULE_proc_decl_in_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4797);
			match(PROCEDURE);
			setState(4798);
			procedure_name();
			setState(4799);
			match(LEFT_PAREN);
			setState(4800);
			type_elements_parameter();
			setState(4805);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4801);
				match(COMMA);
				setState(4802);
				type_elements_parameter();
				}
				}
				setState(4807);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4808);
			match(RIGHT_PAREN);
			setState(4809);
			_la = _input.LA(1);
			if ( !(_la==AS || _la==IS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4823);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,681,_ctx) ) {
			case 1:
				{
				setState(4810);
				call_spec();
				}
				break;
			case 2:
				{
				setState(4812);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DECLARE) {
					{
					setState(4811);
					match(DECLARE);
					}
				}

				setState(4817);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BUILD) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (CHR - 65)) | (1L << (CLOB - 65)) | (1L << (CLOSE - 65)) | (1L << (CLUSTER - 65)) | (1L << (COALESCE - 65)) | (1L << (COLLECT - 65)) | (1L << (COLUMNS - 65)) | (1L << (COMMENT - 65)) | (1L << (COMMIT - 65)) | (1L << (COMMITTED - 65)) | (1L << (COMPATIBILITY - 65)) | (1L << (COMPILE - 65)) | (1L << (COMPLETE - 65)) | (1L << (COMPOUND - 65)) | (1L << (CONCAT - 65)) | (1L << (CONSTANT - 65)) | (1L << (CONSTRAINT - 65)) | (1L << (CONSTRAINTS - 65)) | (1L << (CONSTRUCTOR - 65)) | (1L << (CONTENT - 65)) | (1L << (CONTEXT - 65)) | (1L << (CONTINUE - 65)) | (1L << (CONVERT - 65)) | (1L << (CORRUPT_XID - 65)) | (1L << (CORRUPT_XID_ALL - 65)) | (1L << (COST - 65)) | (1L << (COUNT - 65)) | (1L << (CREATE - 65)) | (1L << (CROSS - 65)) | (1L << (CUBE - 65)) | (1L << (CURRENT_USER - 65)) | (1L << (CURSOR - 65)) | (1L << (CUSTOMDATUM - 65)) | (1L << (CYCLE - 65)) | (1L << (DATA - 65)) | (1L << (DATABASE - 65)) | (1L << (DATE - 65)) | (1L << (DAY - 65)) | (1L << (DB_ROLE_CHANGE - 65)) | (1L << (DBTIMEZONE - 65)) | (1L << (DDL - 65)) | (1L << (DEBUG - 65)) | (1L << (DEC - 65)) | (1L << (DECIMAL - 65)) | (1L << (DECODE - 65)) | (1L << (DECOMPOSE - 65)) | (1L << (DECREMENT - 65)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DEMAND - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (EDITIONING - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENFORCED - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FAST - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)) | (1L << (FOLLOWING - 129)) | (1L << (FOLLOWS - 129)) | (1L << (FORALL - 129)) | (1L << (FORCE - 129)))) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & ((1L << (FULL - 197)) | (1L << (FUNCTION - 197)) | (1L << (GROUPING - 197)) | (1L << (HASH - 197)) | (1L << (HIDE - 197)) | (1L << (HOUR - 197)) | (1L << (IGNORE - 197)) | (1L << (IMMEDIATE - 197)) | (1L << (INCLUDE - 197)) | (1L << (INCLUDING - 197)) | (1L << (INCREMENT - 197)) | (1L << (INDENT - 197)) | (1L << (INDEXED - 197)) | (1L << (INDICATOR - 197)) | (1L << (INDICES - 197)) | (1L << (INFINITE - 197)) | (1L << (INLINE - 197)) | (1L << (INNER - 197)) | (1L << (INOUT - 197)) | (1L << (INSTANTIABLE - 197)) | (1L << (INSTEAD - 197)) | (1L << (INT - 197)) | (1L << (INTEGER - 197)) | (1L << (INTERVAL - 197)) | (1L << (INVALIDATE - 197)) | (1L << (ISOLATION - 197)) | (1L << (ITERATE - 197)) | (1L << (JAVA - 197)) | (1L << (JOIN - 197)) | (1L << (KEEP - 197)) | (1L << (LANGUAGE - 197)) | (1L << (LAST - 197)) | (1L << (LAST_VALUE - 197)) | (1L << (LEADING - 197)) | (1L << (LEFT - 197)) | (1L << (LEVEL - 197)))) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & ((1L << (LIBRARY - 261)) | (1L << (LIKE2 - 261)) | (1L << (LIKE4 - 261)) | (1L << (LIKEC - 261)) | (1L << (LIMIT - 261)) | (1L << (LIST - 261)) | (1L << (LOCAL - 261)) | (1L << (LOCKED - 261)) | (1L << (LOG - 261)) | (1L << (LOGOFF - 261)) | (1L << (LOGON - 261)) | (1L << (LONG - 261)) | (1L << (LOOP - 261)) | (1L << (MAIN - 261)) | (1L << (MAP - 261)) | (1L << (MASTER - 261)) | (1L << (MATCHED - 261)) | (1L << (MAXVALUE - 261)) | (1L << (MEASURES - 261)) | (1L << (MEMBER - 261)) | (1L << (MERGE - 261)) | (1L << (MINUTE - 261)) | (1L << (MINVALUE - 261)) | (1L << (MLSLABEL - 261)) | (1L << (MODEL - 261)) | (1L << (MODIFY - 261)) | (1L << (MONTH - 261)) | (1L << (MULTISET - 261)) | (1L << (NAME - 261)) | (1L << (NAN - 261)) | (1L << (NATURAL - 261)) | (1L << (NATURALN - 261)) | (1L << (NAV - 261)) | (1L << (NCHAR - 261)) | (1L << (NCHAR_CS - 261)) | (1L << (NCLOB - 261)) | (1L << (NESTED - 261)) | (1L << (NEVER - 261)) | (1L << (NEW - 261)) | (1L << (NO - 261)) | (1L << (NOAUDIT - 261)) | (1L << (NOCOPY - 261)) | (1L << (NOCYCLE - 261)) | (1L << (NOENTITYESCAPING - 261)))) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & ((1L << (NONE - 329)) | (1L << (NOSCHEMACHECK - 329)) | (1L << (NVL - 329)) | (1L << (NULLS - 329)) | (1L << (NUMBER - 329)) | (1L << (NUMERIC - 329)) | (1L << (NVARCHAR2 - 329)) | (1L << (MATERIALIZED - 329)) | (1L << (OBJECT - 329)) | (1L << (OFF - 329)) | (1L << (OID - 329)) | (1L << (OLD - 329)) | (1L << (ONLY - 329)) | (1L << (OPEN - 329)) | (1L << (ORADATA - 329)) | (1L << (ORDINALITY - 329)) | (1L << (OSERROR - 329)) | (1L << (OUT - 329)) | (1L << (OUTER - 329)) | (1L << (OVER - 329)) | (1L << (OVERRIDING - 329)) | (1L << (PACKAGE - 329)) | (1L << (PARALLEL_ENABLE - 329)) | (1L << (PARAMETERS - 329)) | (1L << (PARENT - 329)) | (1L << (PARTITION - 329)) | (1L << (PASSING - 329)) | (1L << (PATH - 329)) | (1L << (PIPELINED - 329)) | (1L << (PLAN - 329)) | (1L << (PLS_INTEGER - 329)) | (1L << (POSITIVE - 329)) | (1L << (POSITIVEN - 329)) | (1L << (PRAGMA - 329)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (PREBUILT - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)) | (1L << (PRESENT - 393)) | (1L << (PROCEDURE - 393)) | (1L << (PUBLIC - 393)) | (1L << (RAISE - 393)) | (1L << (RANGE - 393)) | (1L << (RAW - 393)) | (1L << (READ - 393)) | (1L << (REAL - 393)) | (1L << (RECORD - 393)) | (1L << (REDUCED - 393)) | (1L << (REF - 393)) | (1L << (REFERENCE - 393)) | (1L << (REFERENCING - 393)) | (1L << (REFRESH - 393)) | (1L << (REJECT - 393)) | (1L << (RELIES_ON - 393)) | (1L << (RENAME - 393)) | (1L << (REPLACE - 393)) | (1L << (RESPECT - 393)) | (1L << (RESTRICT_REFERENCES - 393)) | (1L << (RESULT - 393)) | (1L << (RESULT_CACHE - 393)) | (1L << (RETURN - 393)) | (1L << (RETURNING - 393)) | (1L << (REUSE - 393)) | (1L << (REVERSE - 393)) | (1L << (REWRITE - 393)) | (1L << (RIGHT - 393)) | (1L << (ROLE - 393)) | (1L << (ROLLBACK - 393)) | (1L << (ROLLUP - 393)) | (1L << (ROW - 393)) | (1L << (ROWID - 393)) | (1L << (ROWS - 393)) | (1L << (RULES - 393)) | (1L << (SAMPLE - 393)) | (1L << (SAVE - 393)) | (1L << (SAVEPOINT - 393)) | (1L << (SCHEMA - 393)) | (1L << (SCHEMACHECK - 393)) | (1L << (SCN - 393)) | (1L << (SECOND - 393)))) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & ((1L << (SEED - 458)) | (1L << (SEGMENT - 458)) | (1L << (SELF - 458)) | (1L << (SEQUENTIAL - 458)) | (1L << (SERIALIZABLE - 458)) | (1L << (SERIALLY_REUSABLE - 458)) | (1L << (SERVERERROR - 458)) | (1L << (SESSIONTIMEZONE - 458)) | (1L << (SET - 458)) | (1L << (SETS - 458)) | (1L << (SETTINGS - 458)) | (1L << (SHOW - 458)) | (1L << (SHUTDOWN - 458)) | (1L << (SIBLINGS - 458)) | (1L << (SIGNTYPE - 458)) | (1L << (SIMPLE_INTEGER - 458)) | (1L << (SINGLE - 458)) | (1L << (SIZE - 458)) | (1L << (SKIP_ - 458)) | (1L << (SMALLINT - 458)) | (1L << (SNAPSHOT - 458)) | (1L << (SOME - 458)) | (1L << (SPECIFICATION - 458)) | (1L << (SQLDATA - 458)) | (1L << (SQLERROR - 458)) | (1L << (STANDALONE - 458)) | (1L << (STARTUP - 458)) | (1L << (STATEMENT - 458)) | (1L << (STATEMENT_ID - 458)) | (1L << (STATIC - 458)) | (1L << (STATISTICS - 458)) | (1L << (STRING - 458)) | (1L << (SUBMULTISET - 458)) | (1L << (SUBPARTITION - 458)) | (1L << (SUBSTITUTABLE - 458)) | (1L << (SUBSTRING - 458)) | (1L << (SUBTYPE - 458)) | (1L << (SUCCESS - 458)) | (1L << (SUSPEND - 458)) | (1L << (TABLES - 458)) | (1L << (TIME - 458)) | (1L << (TIMESTAMP - 458)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 458)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 458)) | (1L << (TIMESTAMP_UNCONSTRAINED - 458)))) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & ((1L << (TIMEZONE_ABBR - 522)) | (1L << (TIMEZONE_HOUR - 522)) | (1L << (TIMEZONE_MINUTE - 522)) | (1L << (TIMEZONE_REGION - 522)) | (1L << (TO_CHAR - 522)) | (1L << (TO_DATE - 522)) | (1L << (TRAILING - 522)) | (1L << (TRANSACTION - 522)) | (1L << (TRANSLATE - 522)) | (1L << (TREAT - 522)) | (1L << (TRIGGER - 522)) | (1L << (TRIM - 522)) | (1L << (TRUNCATE - 522)) | (1L << (TRUSTED - 522)) | (1L << (TYPE - 522)) | (1L << (UNBOUNDED - 522)) | (1L << (UNDER - 522)) | (1L << (UNLIMITED - 522)) | (1L << (UNTIL - 522)) | (1L << (UPDATED - 522)) | (1L << (UPSERT - 522)) | (1L << (UROWID - 522)) | (1L << (USE - 522)) | (1L << (VALIDATE - 522)) | (1L << (VALUE - 522)) | (1L << (VARCHAR - 522)) | (1L << (VARCHAR2 - 522)) | (1L << (VARIABLE - 522)) | (1L << (VARRAY - 522)) | (1L << (VARYING - 522)) | (1L << (VERBOSE - 522)) | (1L << (VERSION - 522)) | (1L << (VERSIONS - 522)) | (1L << (VIEW - 522)) | (1L << (WAIT - 522)) | (1L << (WARNING - 522)) | (1L << (WELLFORMED - 522)) | (1L << (WHENEVER - 522)) | (1L << (WHILE - 522)) | (1L << (WITHOUT - 522)) | (1L << (WITHIN - 522)) | (1L << (WORK - 522)) | (1L << (WRITE - 522)) | (1L << (XML - 522)) | (1L << (XMLAGG - 522)) | (1L << (XMLATTRIBUTES - 522)))) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & ((1L << (XMLCAST - 586)) | (1L << (XMLCOLATTVAL - 586)) | (1L << (XMLELEMENT - 586)) | (1L << (XMLEXISTS - 586)) | (1L << (XMLFOREST - 586)) | (1L << (XMLNAMESPACES - 586)) | (1L << (XMLPARSE - 586)) | (1L << (XMLPI - 586)) | (1L << (XMLQUERY - 586)) | (1L << (XMLROOT - 586)) | (1L << (XMLSERIALIZE - 586)) | (1L << (XMLTABLE - 586)) | (1L << (YEAR - 586)) | (1L << (YES - 586)) | (1L << (YMINTERVAL_UNCONSTRAINED - 586)) | (1L << (ZONE - 586)) | (1L << (PREDICTION - 586)) | (1L << (PREDICTION_BOUNDS - 586)) | (1L << (PREDICTION_COST - 586)) | (1L << (PREDICTION_DETAILS - 586)) | (1L << (PREDICTION_PROBABILITY - 586)) | (1L << (PREDICTION_SET - 586)) | (1L << (CUME_DIST - 586)) | (1L << (DENSE_RANK - 586)) | (1L << (LISTAGG - 586)) | (1L << (PERCENT_RANK - 586)) | (1L << (PERCENTILE_CONT - 586)) | (1L << (PERCENTILE_DISC - 586)) | (1L << (RANK - 586)) | (1L << (AVG - 586)) | (1L << (CORR - 586)) | (1L << (LAG - 586)) | (1L << (LEAD - 586)) | (1L << (MAX - 586)) | (1L << (MEDIAN - 586)) | (1L << (MIN - 586)) | (1L << (NTILE - 586)) | (1L << (RATIO_TO_REPORT - 586)) | (1L << (ROW_NUMBER - 586)) | (1L << (SUM - 586)) | (1L << (VARIANCE - 586)) | (1L << (REGR_ - 586)) | (1L << (STDDEV - 586)) | (1L << (VAR_ - 586)) | (1L << (COVAR_ - 586)) | (1L << (DELIMITED_ID - 586)))) != 0) || ((((_la - 655)) & ~0x3f) == 0 && ((1L << (_la - 655)) & ((1L << (BINDVAR - 655)) | (1L << (COLON - 655)) | (1L << (REGULAR_ID - 655)))) != 0)) {
					{
					{
					setState(4814);
					declare_spec();
					}
					}
					setState(4819);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4820);
				body();
				setState(4821);
				match(SEMICOLON);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Func_decl_in_typeContext extends ParserRuleContext {
		public TerminalNode FUNCTION() { return getToken(PLSQLParser.FUNCTION, 0); }
		public Function_nameContext function_name() {
			return getRuleContext(Function_nameContext.class,0);
		}
		public TerminalNode RETURN() { return getToken(PLSQLParser.RETURN, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode IS() { return getToken(PLSQLParser.IS, 0); }
		public TerminalNode AS() { return getToken(PLSQLParser.AS, 0); }
		public Call_specContext call_spec() {
			return getRuleContext(Call_specContext.class,0);
		}
		public BodyContext body() {
			return getRuleContext(BodyContext.class,0);
		}
		public TerminalNode SEMICOLON() { return getToken(PLSQLParser.SEMICOLON, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PLSQLParser.LEFT_PAREN, 0); }
		public List<Type_elements_parameterContext> type_elements_parameter() {
			return getRuleContexts(Type_elements_parameterContext.class);
		}
		public Type_elements_parameterContext type_elements_parameter(int i) {
			return getRuleContext(Type_elements_parameterContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PLSQLParser.RIGHT_PAREN, 0); }
		public TerminalNode DECLARE() { return getToken(PLSQLParser.DECLARE, 0); }
		public List<Declare_specContext> declare_spec() {
			return getRuleContexts(Declare_specContext.class);
		}
		public Declare_specContext declare_spec(int i) {
			return getRuleContext(Declare_specContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLSQLParser.COMMA, i);
		}
		public Func_decl_in_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_decl_in_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterFunc_decl_in_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitFunc_decl_in_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitFunc_decl_in_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_decl_in_typeContext func_decl_in_type() throws RecognitionException {
		Func_decl_in_typeContext _localctx = new Func_decl_in_typeContext(_ctx, getState());
		enterRule(_localctx, 476, RULE_func_decl_in_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4825);
			match(FUNCTION);
			setState(4826);
			function_name();
			setState(4838);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(4827);
				match(LEFT_PAREN);
				setState(4828);
				type_elements_parameter();
				setState(4833);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4829);
					match(COMMA);
					setState(4830);
					type_elements_parameter();
					}
					}
					setState(4835);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4836);
				match(RIGHT_PAREN);
				}
			}

			setState(4840);
			match(RETURN);
			setState(4841);
			type_spec();
			setState(4842);
			_la = _input.LA(1);
			if ( !(_la==AS || _la==IS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4856);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,686,_ctx) ) {
			case 1:
				{
				setState(4843);
				call_spec();
				}
				break;
			case 2:
				{
				setState(4845);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DECLARE) {
					{
					setState(4844);
					match(DECLARE);
					}
				}

				setState(4850);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BUILD) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (CHR - 65)) | (1L << (CLOB - 65)) | (1L << (CLOSE - 65)) | (1L << (CLUSTER - 65)) | (1L << (COALESCE - 65)) | (1L << (COLLECT - 65)) | (1L << (COLUMNS - 65)) | (1L << (COMMENT - 65)) | (1L << (COMMIT - 65)) | (1L << (COMMITTED - 65)) | (1L << (COMPATIBILITY - 65)) | (1L << (COMPILE - 65)) | (1L << (COMPLETE - 65)) | (1L << (COMPOUND - 65)) | (1L << (CONCAT - 65)) | (1L << (CONSTANT - 65)) | (1L << (CONSTRAINT - 65)) | (1L << (CONSTRAINTS - 65)) | (1L << (CONSTRUCTOR - 65)) | (1L << (CONTENT - 65)) | (1L << (CONTEXT - 65)) | (1L << (CONTINUE - 65)) | (1L << (CONVERT - 65)) | (1L << (CORRUPT_XID - 65)) | (1L << (CORRUPT_XID_ALL - 65)) | (1L << (COST - 65)) | (1L << (COUNT - 65)) | (1L << (CREATE - 65)) | (1L << (CROSS - 65)) | (1L << (CUBE - 65)) | (1L << (CURRENT_USER - 65)) | (1L << (CURSOR - 65)) | (1L << (CUSTOMDATUM - 65)) | (1L << (CYCLE - 65)) | (1L << (DATA - 65)) | (1L << (DATABASE - 65)) | (1L << (DATE - 65)) | (1L << (DAY - 65)) | (1L << (DB_ROLE_CHANGE - 65)) | (1L << (DBTIMEZONE - 65)) | (1L << (DDL - 65)) | (1L << (DEBUG - 65)) | (1L << (DEC - 65)) | (1L << (DECIMAL - 65)) | (1L << (DECODE - 65)) | (1L << (DECOMPOSE - 65)) | (1L << (DECREMENT - 65)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DEMAND - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (EDITIONING - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENFORCED - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FAST - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)) | (1L << (FOLLOWING - 129)) | (1L << (FOLLOWS - 129)) | (1L << (FORALL - 129)) | (1L << (FORCE - 129)))) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & ((1L << (FULL - 197)) | (1L << (FUNCTION - 197)) | (1L << (GROUPING - 197)) | (1L << (HASH - 197)) | (1L << (HIDE - 197)) | (1L << (HOUR - 197)) | (1L << (IGNORE - 197)) | (1L << (IMMEDIATE - 197)) | (1L << (INCLUDE - 197)) | (1L << (INCLUDING - 197)) | (1L << (INCREMENT - 197)) | (1L << (INDENT - 197)) | (1L << (INDEXED - 197)) | (1L << (INDICATOR - 197)) | (1L << (INDICES - 197)) | (1L << (INFINITE - 197)) | (1L << (INLINE - 197)) | (1L << (INNER - 197)) | (1L << (INOUT - 197)) | (1L << (INSTANTIABLE - 197)) | (1L << (INSTEAD - 197)) | (1L << (INT - 197)) | (1L << (INTEGER - 197)) | (1L << (INTERVAL - 197)) | (1L << (INVALIDATE - 197)) | (1L << (ISOLATION - 197)) | (1L << (ITERATE - 197)) | (1L << (JAVA - 197)) | (1L << (JOIN - 197)) | (1L << (KEEP - 197)) | (1L << (LANGUAGE - 197)) | (1L << (LAST - 197)) | (1L << (LAST_VALUE - 197)) | (1L << (LEADING - 197)) | (1L << (LEFT - 197)) | (1L << (LEVEL - 197)))) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & ((1L << (LIBRARY - 261)) | (1L << (LIKE2 - 261)) | (1L << (LIKE4 - 261)) | (1L << (LIKEC - 261)) | (1L << (LIMIT - 261)) | (1L << (LIST - 261)) | (1L << (LOCAL - 261)) | (1L << (LOCKED - 261)) | (1L << (LOG - 261)) | (1L << (LOGOFF - 261)) | (1L << (LOGON - 261)) | (1L << (LONG - 261)) | (1L << (LOOP - 261)) | (1L << (MAIN - 261)) | (1L << (MAP - 261)) | (1L << (MASTER - 261)) | (1L << (MATCHED - 261)) | (1L << (MAXVALUE - 261)) | (1L << (MEASURES - 261)) | (1L << (MEMBER - 261)) | (1L << (MERGE - 261)) | (1L << (MINUTE - 261)) | (1L << (MINVALUE - 261)) | (1L << (MLSLABEL - 261)) | (1L << (MODEL - 261)) | (1L << (MODIFY - 261)) | (1L << (MONTH - 261)) | (1L << (MULTISET - 261)) | (1L << (NAME - 261)) | (1L << (NAN - 261)) | (1L << (NATURAL - 261)) | (1L << (NATURALN - 261)) | (1L << (NAV - 261)) | (1L << (NCHAR - 261)) | (1L << (NCHAR_CS - 261)) | (1L << (NCLOB - 261)) | (1L << (NESTED - 261)) | (1L << (NEVER - 261)) | (1L << (NEW - 261)) | (1L << (NO - 261)) | (1L << (NOAUDIT - 261)) | (1L << (NOCOPY - 261)) | (1L << (NOCYCLE - 261)) | (1L << (NOENTITYESCAPING - 261)))) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & ((1L << (NONE - 329)) | (1L << (NOSCHEMACHECK - 329)) | (1L << (NVL - 329)) | (1L << (NULLS - 329)) | (1L << (NUMBER - 329)) | (1L << (NUMERIC - 329)) | (1L << (NVARCHAR2 - 329)) | (1L << (MATERIALIZED - 329)) | (1L << (OBJECT - 329)) | (1L << (OFF - 329)) | (1L << (OID - 329)) | (1L << (OLD - 329)) | (1L << (ONLY - 329)) | (1L << (OPEN - 329)) | (1L << (ORADATA - 329)) | (1L << (ORDINALITY - 329)) | (1L << (OSERROR - 329)) | (1L << (OUT - 329)) | (1L << (OUTER - 329)) | (1L << (OVER - 329)) | (1L << (OVERRIDING - 329)) | (1L << (PACKAGE - 329)) | (1L << (PARALLEL_ENABLE - 329)) | (1L << (PARAMETERS - 329)) | (1L << (PARENT - 329)) | (1L << (PARTITION - 329)) | (1L << (PASSING - 329)) | (1L << (PATH - 329)) | (1L << (PIPELINED - 329)) | (1L << (PLAN - 329)) | (1L << (PLS_INTEGER - 329)) | (1L << (POSITIVE - 329)) | (1L << (POSITIVEN - 329)) | (1L << (PRAGMA - 329)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (PREBUILT - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)) | (1L << (PRESENT - 393)) | (1L << (PROCEDURE - 393)) | (1L << (PUBLIC - 393)) | (1L << (RAISE - 393)) | (1L << (RANGE - 393)) | (1L << (RAW - 393)) | (1L << (READ - 393)) | (1L << (REAL - 393)) | (1L << (RECORD - 393)) | (1L << (REDUCED - 393)) | (1L << (REF - 393)) | (1L << (REFERENCE - 393)) | (1L << (REFERENCING - 393)) | (1L << (REFRESH - 393)) | (1L << (REJECT - 393)) | (1L << (RELIES_ON - 393)) | (1L << (RENAME - 393)) | (1L << (REPLACE - 393)) | (1L << (RESPECT - 393)) | (1L << (RESTRICT_REFERENCES - 393)) | (1L << (RESULT - 393)) | (1L << (RESULT_CACHE - 393)) | (1L << (RETURN - 393)) | (1L << (RETURNING - 393)) | (1L << (REUSE - 393)) | (1L << (REVERSE - 393)) | (1L << (REWRITE - 393)) | (1L << (RIGHT - 393)) | (1L << (ROLE - 393)) | (1L << (ROLLBACK - 393)) | (1L << (ROLLUP - 393)) | (1L << (ROW - 393)) | (1L << (ROWID - 393)) | (1L << (ROWS - 393)) | (1L << (RULES - 393)) | (1L << (SAMPLE - 393)) | (1L << (SAVE - 393)) | (1L << (SAVEPOINT - 393)) | (1L << (SCHEMA - 393)) | (1L << (SCHEMACHECK - 393)) | (1L << (SCN - 393)) | (1L << (SECOND - 393)))) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & ((1L << (SEED - 458)) | (1L << (SEGMENT - 458)) | (1L << (SELF - 458)) | (1L << (SEQUENTIAL - 458)) | (1L << (SERIALIZABLE - 458)) | (1L << (SERIALLY_REUSABLE - 458)) | (1L << (SERVERERROR - 458)) | (1L << (SESSIONTIMEZONE - 458)) | (1L << (SET - 458)) | (1L << (SETS - 458)) | (1L << (SETTINGS - 458)) | (1L << (SHOW - 458)) | (1L << (SHUTDOWN - 458)) | (1L << (SIBLINGS - 458)) | (1L << (SIGNTYPE - 458)) | (1L << (SIMPLE_INTEGER - 458)) | (1L << (SINGLE - 458)) | (1L << (SIZE - 458)) | (1L << (SKIP_ - 458)) | (1L << (SMALLINT - 458)) | (1L << (SNAPSHOT - 458)) | (1L << (SOME - 458)) | (1L << (SPECIFICATION - 458)) | (1L << (SQLDATA - 458)) | (1L << (SQLERROR - 458)) | (1L << (STANDALONE - 458)) | (1L << (STARTUP - 458)) | (1L << (STATEMENT - 458)) | (1L << (STATEMENT_ID - 458)) | (1L << (STATIC - 458)) | (1L << (STATISTICS - 458)) | (1L << (STRING - 458)) | (1L << (SUBMULTISET - 458)) | (1L << (SUBPARTITION - 458)) | (1L << (SUBSTITUTABLE - 458)) | (1L << (SUBSTRING - 458)) | (1L << (SUBTYPE - 458)) | (1L << (SUCCESS - 458)) | (1L << (SUSPEND - 458)) | (1L << (TABLES - 458)) | (1L << (TIME - 458)) | (1L << (TIMESTAMP - 458)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 458)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 458)) | (1L << (TIMESTAMP_UNCONSTRAINED - 458)))) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & ((1L << (TIMEZONE_ABBR - 522)) | (1L << (TIMEZONE_HOUR - 522)) | (1L << (TIMEZONE_MINUTE - 522)) | (1L << (TIMEZONE_REGION - 522)) | (1L << (TO_CHAR - 522)) | (1L << (TO_DATE - 522)) | (1L << (TRAILING - 522)) | (1L << (TRANSACTION - 522)) | (1L << (TRANSLATE - 522)) | (1L << (TREAT - 522)) | (1L << (TRIGGER - 522)) | (1L << (TRIM - 522)) | (1L << (TRUNCATE - 522)) | (1L << (TRUSTED - 522)) | (1L << (TYPE - 522)) | (1L << (UNBOUNDED - 522)) | (1L << (UNDER - 522)) | (1L << (UNLIMITED - 522)) | (1L << (UNTIL - 522)) | (1L << (UPDATED - 522)) | (1L << (UPSERT - 522)) | (1L << (UROWID - 522)) | (1L << (USE - 522)) | (1L << (VALIDATE - 522)) | (1L << (VALUE - 522)) | (1L << (VARCHAR - 522)) | (1L << (VARCHAR2 - 522)) | (1L << (VARIABLE - 522)) | (1L << (VARRAY - 522)) | (1L << (VARYING - 522)) | (1L << (VERBOSE - 522)) | (1L << (VERSION - 522)) | (1L << (VERSIONS - 522)) | (1L << (VIEW - 522)) | (1L << (WAIT - 522)) | (1L << (WARNING - 522)) | (1L << (WELLFORMED - 522)) | (1L << (WHENEVER - 522)) | (1L << (WHILE - 522)) | (1L << (WITHOUT - 522)) | (1L << (WITHIN - 522)) | (1L << (WORK - 522)) | (1L << (WRITE - 522)) | (1L << (XML - 522)) | (1L << (XMLAGG - 522)) | (1L << (XMLATTRIBUTES - 522)))) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & ((1L << (XMLCAST - 586)) | (1L << (XMLCOLATTVAL - 586)) | (1L << (XMLELEMENT - 586)) | (1L << (XMLEXISTS - 586)) | (1L << (XMLFOREST - 586)) | (1L << (XMLNAMESPACES - 586)) | (1L << (XMLPARSE - 586)) | (1L << (XMLPI - 586)) | (1L << (XMLQUERY - 586)) | (1L << (XMLROOT - 586)) | (1L << (XMLSERIALIZE - 586)) | (1L << (XMLTABLE - 586)) | (1L << (YEAR - 586)) | (1L << (YES - 586)) | (1L << (YMINTERVAL_UNCONSTRAINED - 586)) | (1L << (ZONE - 586)) | (1L << (PREDICTION - 586)) | (1L << (PREDICTION_BOUNDS - 586)) | (1L << (PREDICTION_COST - 586)) | (1L << (PREDICTION_DETAILS - 586)) | (1L << (PREDICTION_PROBABILITY - 586)) | (1L << (PREDICTION_SET - 586)) | (1L << (CUME_DIST - 586)) | (1L << (DENSE_RANK - 586)) | (1L << (LISTAGG - 586)) | (1L << (PERCENT_RANK - 586)) | (1L << (PERCENTILE_CONT - 586)) | (1L << (PERCENTILE_DISC - 586)) | (1L << (RANK - 586)) | (1L << (AVG - 586)) | (1L << (CORR - 586)) | (1L << (LAG - 586)) | (1L << (LEAD - 586)) | (1L << (MAX - 586)) | (1L << (MEDIAN - 586)) | (1L << (MIN - 586)) | (1L << (NTILE - 586)) | (1L << (RATIO_TO_REPORT - 586)) | (1L << (ROW_NUMBER - 586)) | (1L << (SUM - 586)) | (1L << (VARIANCE - 586)) | (1L << (REGR_ - 586)) | (1L << (STDDEV - 586)) | (1L << (VAR_ - 586)) | (1L << (COVAR_ - 586)) | (1L << (DELIMITED_ID - 586)))) != 0) || ((((_la - 655)) & ~0x3f) == 0 && ((1L << (_la - 655)) & ((1L << (BINDVAR - 655)) | (1L << (COLON - 655)) | (1L << (REGULAR_ID - 655)))) != 0)) {
					{
					{
					setState(4847);
					declare_spec();
					}
					}
					setState(4852);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4853);
				body();
				setState(4854);
				match(SEMICOLON);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Constructor_declarationContext extends ParserRuleContext {
		public TerminalNode CONSTRUCTOR() { return getToken(PLSQLParser.CONSTRUCTOR, 0); }
		public TerminalNode FUNCTION() { return getToken(PLSQLParser.FUNCTION, 0); }
		public List<Type_specContext> type_spec() {
			return getRuleContexts(Type_specContext.class);
		}
		public Type_specContext type_spec(int i) {
			return getRuleContext(Type_specContext.class,i);
		}
		public TerminalNode RETURN() { return getToken(PLSQLParser.RETURN, 0); }
		public List<TerminalNode> SELF() { return getTokens(PLSQLParser.SELF); }
		public TerminalNode SELF(int i) {
			return getToken(PLSQLParser.SELF, i);
		}
		public List<TerminalNode> AS() { return getTokens(PLSQLParser.AS); }
		public TerminalNode AS(int i) {
			return getToken(PLSQLParser.AS, i);
		}
		public TerminalNode RESULT() { return getToken(PLSQLParser.RESULT, 0); }
		public TerminalNode IS() { return getToken(PLSQLParser.IS, 0); }
		public Call_specContext call_spec() {
			return getRuleContext(Call_specContext.class,0);
		}
		public BodyContext body() {
			return getRuleContext(BodyContext.class,0);
		}
		public TerminalNode SEMICOLON() { return getToken(PLSQLParser.SEMICOLON, 0); }
		public TerminalNode FINAL() { return getToken(PLSQLParser.FINAL, 0); }
		public TerminalNode INSTANTIABLE() { return getToken(PLSQLParser.INSTANTIABLE, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PLSQLParser.LEFT_PAREN, 0); }
		public List<Type_elements_parameterContext> type_elements_parameter() {
			return getRuleContexts(Type_elements_parameterContext.class);
		}
		public Type_elements_parameterContext type_elements_parameter(int i) {
			return getRuleContext(Type_elements_parameterContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PLSQLParser.RIGHT_PAREN, 0); }
		public TerminalNode IN() { return getToken(PLSQLParser.IN, 0); }
		public TerminalNode OUT() { return getToken(PLSQLParser.OUT, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PLSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLSQLParser.COMMA, i);
		}
		public TerminalNode DECLARE() { return getToken(PLSQLParser.DECLARE, 0); }
		public List<Declare_specContext> declare_spec() {
			return getRuleContexts(Declare_specContext.class);
		}
		public Declare_specContext declare_spec(int i) {
			return getRuleContext(Declare_specContext.class,i);
		}
		public Constructor_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constructor_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterConstructor_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitConstructor_declaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitConstructor_declaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Constructor_declarationContext constructor_declaration() throws RecognitionException {
		Constructor_declarationContext _localctx = new Constructor_declarationContext(_ctx, getState());
		enterRule(_localctx, 478, RULE_constructor_declaration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4859);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FINAL) {
				{
				setState(4858);
				match(FINAL);
				}
			}

			setState(4862);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INSTANTIABLE) {
				{
				setState(4861);
				match(INSTANTIABLE);
				}
			}

			setState(4864);
			match(CONSTRUCTOR);
			setState(4865);
			match(FUNCTION);
			setState(4866);
			type_spec();
			setState(4884);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(4867);
				match(LEFT_PAREN);
				{
				setState(4868);
				match(SELF);
				setState(4869);
				match(IN);
				setState(4870);
				match(OUT);
				setState(4871);
				type_spec();
				setState(4872);
				match(COMMA);
				}
				setState(4874);
				type_elements_parameter();
				setState(4879);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4875);
					match(COMMA);
					setState(4876);
					type_elements_parameter();
					}
					}
					setState(4881);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4882);
				match(RIGHT_PAREN);
				}
			}

			setState(4886);
			match(RETURN);
			setState(4887);
			match(SELF);
			setState(4888);
			match(AS);
			setState(4889);
			match(RESULT);
			setState(4890);
			_la = _input.LA(1);
			if ( !(_la==AS || _la==IS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4904);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,693,_ctx) ) {
			case 1:
				{
				setState(4891);
				call_spec();
				}
				break;
			case 2:
				{
				setState(4893);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DECLARE) {
					{
					setState(4892);
					match(DECLARE);
					}
				}

				setState(4898);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BUILD) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (CHR - 65)) | (1L << (CLOB - 65)) | (1L << (CLOSE - 65)) | (1L << (CLUSTER - 65)) | (1L << (COALESCE - 65)) | (1L << (COLLECT - 65)) | (1L << (COLUMNS - 65)) | (1L << (COMMENT - 65)) | (1L << (COMMIT - 65)) | (1L << (COMMITTED - 65)) | (1L << (COMPATIBILITY - 65)) | (1L << (COMPILE - 65)) | (1L << (COMPLETE - 65)) | (1L << (COMPOUND - 65)) | (1L << (CONCAT - 65)) | (1L << (CONSTANT - 65)) | (1L << (CONSTRAINT - 65)) | (1L << (CONSTRAINTS - 65)) | (1L << (CONSTRUCTOR - 65)) | (1L << (CONTENT - 65)) | (1L << (CONTEXT - 65)) | (1L << (CONTINUE - 65)) | (1L << (CONVERT - 65)) | (1L << (CORRUPT_XID - 65)) | (1L << (CORRUPT_XID_ALL - 65)) | (1L << (COST - 65)) | (1L << (COUNT - 65)) | (1L << (CREATE - 65)) | (1L << (CROSS - 65)) | (1L << (CUBE - 65)) | (1L << (CURRENT_USER - 65)) | (1L << (CURSOR - 65)) | (1L << (CUSTOMDATUM - 65)) | (1L << (CYCLE - 65)) | (1L << (DATA - 65)) | (1L << (DATABASE - 65)) | (1L << (DATE - 65)) | (1L << (DAY - 65)) | (1L << (DB_ROLE_CHANGE - 65)) | (1L << (DBTIMEZONE - 65)) | (1L << (DDL - 65)) | (1L << (DEBUG - 65)) | (1L << (DEC - 65)) | (1L << (DECIMAL - 65)) | (1L << (DECODE - 65)) | (1L << (DECOMPOSE - 65)) | (1L << (DECREMENT - 65)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DEMAND - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (EDITIONING - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENFORCED - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FAST - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)) | (1L << (FOLLOWING - 129)) | (1L << (FOLLOWS - 129)) | (1L << (FORALL - 129)) | (1L << (FORCE - 129)))) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & ((1L << (FULL - 197)) | (1L << (FUNCTION - 197)) | (1L << (GROUPING - 197)) | (1L << (HASH - 197)) | (1L << (HIDE - 197)) | (1L << (HOUR - 197)) | (1L << (IGNORE - 197)) | (1L << (IMMEDIATE - 197)) | (1L << (INCLUDE - 197)) | (1L << (INCLUDING - 197)) | (1L << (INCREMENT - 197)) | (1L << (INDENT - 197)) | (1L << (INDEXED - 197)) | (1L << (INDICATOR - 197)) | (1L << (INDICES - 197)) | (1L << (INFINITE - 197)) | (1L << (INLINE - 197)) | (1L << (INNER - 197)) | (1L << (INOUT - 197)) | (1L << (INSTANTIABLE - 197)) | (1L << (INSTEAD - 197)) | (1L << (INT - 197)) | (1L << (INTEGER - 197)) | (1L << (INTERVAL - 197)) | (1L << (INVALIDATE - 197)) | (1L << (ISOLATION - 197)) | (1L << (ITERATE - 197)) | (1L << (JAVA - 197)) | (1L << (JOIN - 197)) | (1L << (KEEP - 197)) | (1L << (LANGUAGE - 197)) | (1L << (LAST - 197)) | (1L << (LAST_VALUE - 197)) | (1L << (LEADING - 197)) | (1L << (LEFT - 197)) | (1L << (LEVEL - 197)))) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & ((1L << (LIBRARY - 261)) | (1L << (LIKE2 - 261)) | (1L << (LIKE4 - 261)) | (1L << (LIKEC - 261)) | (1L << (LIMIT - 261)) | (1L << (LIST - 261)) | (1L << (LOCAL - 261)) | (1L << (LOCKED - 261)) | (1L << (LOG - 261)) | (1L << (LOGOFF - 261)) | (1L << (LOGON - 261)) | (1L << (LONG - 261)) | (1L << (LOOP - 261)) | (1L << (MAIN - 261)) | (1L << (MAP - 261)) | (1L << (MASTER - 261)) | (1L << (MATCHED - 261)) | (1L << (MAXVALUE - 261)) | (1L << (MEASURES - 261)) | (1L << (MEMBER - 261)) | (1L << (MERGE - 261)) | (1L << (MINUTE - 261)) | (1L << (MINVALUE - 261)) | (1L << (MLSLABEL - 261)) | (1L << (MODEL - 261)) | (1L << (MODIFY - 261)) | (1L << (MONTH - 261)) | (1L << (MULTISET - 261)) | (1L << (NAME - 261)) | (1L << (NAN - 261)) | (1L << (NATURAL - 261)) | (1L << (NATURALN - 261)) | (1L << (NAV - 261)) | (1L << (NCHAR - 261)) | (1L << (NCHAR_CS - 261)) | (1L << (NCLOB - 261)) | (1L << (NESTED - 261)) | (1L << (NEVER - 261)) | (1L << (NEW - 261)) | (1L << (NO - 261)) | (1L << (NOAUDIT - 261)) | (1L << (NOCOPY - 261)) | (1L << (NOCYCLE - 261)) | (1L << (NOENTITYESCAPING - 261)))) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & ((1L << (NONE - 329)) | (1L << (NOSCHEMACHECK - 329)) | (1L << (NVL - 329)) | (1L << (NULLS - 329)) | (1L << (NUMBER - 329)) | (1L << (NUMERIC - 329)) | (1L << (NVARCHAR2 - 329)) | (1L << (MATERIALIZED - 329)) | (1L << (OBJECT - 329)) | (1L << (OFF - 329)) | (1L << (OID - 329)) | (1L << (OLD - 329)) | (1L << (ONLY - 329)) | (1L << (OPEN - 329)) | (1L << (ORADATA - 329)) | (1L << (ORDINALITY - 329)) | (1L << (OSERROR - 329)) | (1L << (OUT - 329)) | (1L << (OUTER - 329)) | (1L << (OVER - 329)) | (1L << (OVERRIDING - 329)) | (1L << (PACKAGE - 329)) | (1L << (PARALLEL_ENABLE - 329)) | (1L << (PARAMETERS - 329)) | (1L << (PARENT - 329)) | (1L << (PARTITION - 329)) | (1L << (PASSING - 329)) | (1L << (PATH - 329)) | (1L << (PIPELINED - 329)) | (1L << (PLAN - 329)) | (1L << (PLS_INTEGER - 329)) | (1L << (POSITIVE - 329)) | (1L << (POSITIVEN - 329)) | (1L << (PRAGMA - 329)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (PREBUILT - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)) | (1L << (PRESENT - 393)) | (1L << (PROCEDURE - 393)) | (1L << (PUBLIC - 393)) | (1L << (RAISE - 393)) | (1L << (RANGE - 393)) | (1L << (RAW - 393)) | (1L << (READ - 393)) | (1L << (REAL - 393)) | (1L << (RECORD - 393)) | (1L << (REDUCED - 393)) | (1L << (REF - 393)) | (1L << (REFERENCE - 393)) | (1L << (REFERENCING - 393)) | (1L << (REFRESH - 393)) | (1L << (REJECT - 393)) | (1L << (RELIES_ON - 393)) | (1L << (RENAME - 393)) | (1L << (REPLACE - 393)) | (1L << (RESPECT - 393)) | (1L << (RESTRICT_REFERENCES - 393)) | (1L << (RESULT - 393)) | (1L << (RESULT_CACHE - 393)) | (1L << (RETURN - 393)) | (1L << (RETURNING - 393)) | (1L << (REUSE - 393)) | (1L << (REVERSE - 393)) | (1L << (REWRITE - 393)) | (1L << (RIGHT - 393)) | (1L << (ROLE - 393)) | (1L << (ROLLBACK - 393)) | (1L << (ROLLUP - 393)) | (1L << (ROW - 393)) | (1L << (ROWID - 393)) | (1L << (ROWS - 393)) | (1L << (RULES - 393)) | (1L << (SAMPLE - 393)) | (1L << (SAVE - 393)) | (1L << (SAVEPOINT - 393)) | (1L << (SCHEMA - 393)) | (1L << (SCHEMACHECK - 393)) | (1L << (SCN - 393)) | (1L << (SECOND - 393)))) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & ((1L << (SEED - 458)) | (1L << (SEGMENT - 458)) | (1L << (SELF - 458)) | (1L << (SEQUENTIAL - 458)) | (1L << (SERIALIZABLE - 458)) | (1L << (SERIALLY_REUSABLE - 458)) | (1L << (SERVERERROR - 458)) | (1L << (SESSIONTIMEZONE - 458)) | (1L << (SET - 458)) | (1L << (SETS - 458)) | (1L << (SETTINGS - 458)) | (1L << (SHOW - 458)) | (1L << (SHUTDOWN - 458)) | (1L << (SIBLINGS - 458)) | (1L << (SIGNTYPE - 458)) | (1L << (SIMPLE_INTEGER - 458)) | (1L << (SINGLE - 458)) | (1L << (SIZE - 458)) | (1L << (SKIP_ - 458)) | (1L << (SMALLINT - 458)) | (1L << (SNAPSHOT - 458)) | (1L << (SOME - 458)) | (1L << (SPECIFICATION - 458)) | (1L << (SQLDATA - 458)) | (1L << (SQLERROR - 458)) | (1L << (STANDALONE - 458)) | (1L << (STARTUP - 458)) | (1L << (STATEMENT - 458)) | (1L << (STATEMENT_ID - 458)) | (1L << (STATIC - 458)) | (1L << (STATISTICS - 458)) | (1L << (STRING - 458)) | (1L << (SUBMULTISET - 458)) | (1L << (SUBPARTITION - 458)) | (1L << (SUBSTITUTABLE - 458)) | (1L << (SUBSTRING - 458)) | (1L << (SUBTYPE - 458)) | (1L << (SUCCESS - 458)) | (1L << (SUSPEND - 458)) | (1L << (TABLES - 458)) | (1L << (TIME - 458)) | (1L << (TIMESTAMP - 458)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 458)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 458)) | (1L << (TIMESTAMP_UNCONSTRAINED - 458)))) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & ((1L << (TIMEZONE_ABBR - 522)) | (1L << (TIMEZONE_HOUR - 522)) | (1L << (TIMEZONE_MINUTE - 522)) | (1L << (TIMEZONE_REGION - 522)) | (1L << (TO_CHAR - 522)) | (1L << (TO_DATE - 522)) | (1L << (TRAILING - 522)) | (1L << (TRANSACTION - 522)) | (1L << (TRANSLATE - 522)) | (1L << (TREAT - 522)) | (1L << (TRIGGER - 522)) | (1L << (TRIM - 522)) | (1L << (TRUNCATE - 522)) | (1L << (TRUSTED - 522)) | (1L << (TYPE - 522)) | (1L << (UNBOUNDED - 522)) | (1L << (UNDER - 522)) | (1L << (UNLIMITED - 522)) | (1L << (UNTIL - 522)) | (1L << (UPDATED - 522)) | (1L << (UPSERT - 522)) | (1L << (UROWID - 522)) | (1L << (USE - 522)) | (1L << (VALIDATE - 522)) | (1L << (VALUE - 522)) | (1L << (VARCHAR - 522)) | (1L << (VARCHAR2 - 522)) | (1L << (VARIABLE - 522)) | (1L << (VARRAY - 522)) | (1L << (VARYING - 522)) | (1L << (VERBOSE - 522)) | (1L << (VERSION - 522)) | (1L << (VERSIONS - 522)) | (1L << (VIEW - 522)) | (1L << (WAIT - 522)) | (1L << (WARNING - 522)) | (1L << (WELLFORMED - 522)) | (1L << (WHENEVER - 522)) | (1L << (WHILE - 522)) | (1L << (WITHOUT - 522)) | (1L << (WITHIN - 522)) | (1L << (WORK - 522)) | (1L << (WRITE - 522)) | (1L << (XML - 522)) | (1L << (XMLAGG - 522)) | (1L << (XMLATTRIBUTES - 522)))) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & ((1L << (XMLCAST - 586)) | (1L << (XMLCOLATTVAL - 586)) | (1L << (XMLELEMENT - 586)) | (1L << (XMLEXISTS - 586)) | (1L << (XMLFOREST - 586)) | (1L << (XMLNAMESPACES - 586)) | (1L << (XMLPARSE - 586)) | (1L << (XMLPI - 586)) | (1L << (XMLQUERY - 586)) | (1L << (XMLROOT - 586)) | (1L << (XMLSERIALIZE - 586)) | (1L << (XMLTABLE - 586)) | (1L << (YEAR - 586)) | (1L << (YES - 586)) | (1L << (YMINTERVAL_UNCONSTRAINED - 586)) | (1L << (ZONE - 586)) | (1L << (PREDICTION - 586)) | (1L << (PREDICTION_BOUNDS - 586)) | (1L << (PREDICTION_COST - 586)) | (1L << (PREDICTION_DETAILS - 586)) | (1L << (PREDICTION_PROBABILITY - 586)) | (1L << (PREDICTION_SET - 586)) | (1L << (CUME_DIST - 586)) | (1L << (DENSE_RANK - 586)) | (1L << (LISTAGG - 586)) | (1L << (PERCENT_RANK - 586)) | (1L << (PERCENTILE_CONT - 586)) | (1L << (PERCENTILE_DISC - 586)) | (1L << (RANK - 586)) | (1L << (AVG - 586)) | (1L << (CORR - 586)) | (1L << (LAG - 586)) | (1L << (LEAD - 586)) | (1L << (MAX - 586)) | (1L << (MEDIAN - 586)) | (1L << (MIN - 586)) | (1L << (NTILE - 586)) | (1L << (RATIO_TO_REPORT - 586)) | (1L << (ROW_NUMBER - 586)) | (1L << (SUM - 586)) | (1L << (VARIANCE - 586)) | (1L << (REGR_ - 586)) | (1L << (STDDEV - 586)) | (1L << (VAR_ - 586)) | (1L << (COVAR_ - 586)) | (1L << (DELIMITED_ID - 586)))) != 0) || ((((_la - 655)) & ~0x3f) == 0 && ((1L << (_la - 655)) & ((1L << (BINDVAR - 655)) | (1L << (COLON - 655)) | (1L << (REGULAR_ID - 655)))) != 0)) {
					{
					{
					setState(4895);
					declare_spec();
					}
					}
					setState(4900);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4901);
				body();
				setState(4902);
				match(SEMICOLON);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Modifier_clauseContext extends ParserRuleContext {
		public TerminalNode INSTANTIABLE() { return getToken(PLSQLParser.INSTANTIABLE, 0); }
		public TerminalNode FINAL() { return getToken(PLSQLParser.FINAL, 0); }
		public TerminalNode OVERRIDING() { return getToken(PLSQLParser.OVERRIDING, 0); }
		public TerminalNode NOT() { return getToken(PLSQLParser.NOT, 0); }
		public Modifier_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_modifier_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterModifier_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitModifier_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitModifier_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Modifier_clauseContext modifier_clause() throws RecognitionException {
		Modifier_clauseContext _localctx = new Modifier_clauseContext(_ctx, getState());
		enterRule(_localctx, 480, RULE_modifier_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4907);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(4906);
				match(NOT);
				}
			}

			setState(4909);
			_la = _input.LA(1);
			if ( !(_la==FINAL || _la==INSTANTIABLE || _la==OVERRIDING) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Object_member_specContext extends ParserRuleContext {
		public R_idContext r_id() {
			return getRuleContext(R_idContext.class,0);
		}
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public Sqlj_object_type_attrContext sqlj_object_type_attr() {
			return getRuleContext(Sqlj_object_type_attrContext.class,0);
		}
		public Element_specContext element_spec() {
			return getRuleContext(Element_specContext.class,0);
		}
		public Object_member_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_object_member_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterObject_member_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitObject_member_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitObject_member_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Object_member_specContext object_member_spec() throws RecognitionException {
		Object_member_specContext _localctx = new Object_member_specContext(_ctx, getState());
		enterRule(_localctx, 482, RULE_object_member_spec);
		int _la;
		try {
			setState(4917);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,696,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4911);
				r_id();
				setState(4912);
				type_spec();
				setState(4914);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EXTERNAL) {
					{
					setState(4913);
					sqlj_object_type_attr();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4916);
				element_spec();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sqlj_object_type_attrContext extends ParserRuleContext {
		public TerminalNode EXTERNAL() { return getToken(PLSQLParser.EXTERNAL, 0); }
		public TerminalNode NAME() { return getToken(PLSQLParser.NAME, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Sqlj_object_type_attrContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sqlj_object_type_attr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterSqlj_object_type_attr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitSqlj_object_type_attr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitSqlj_object_type_attr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sqlj_object_type_attrContext sqlj_object_type_attr() throws RecognitionException {
		Sqlj_object_type_attrContext _localctx = new Sqlj_object_type_attrContext(_ctx, getState());
		enterRule(_localctx, 484, RULE_sqlj_object_type_attr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4919);
			match(EXTERNAL);
			setState(4920);
			match(NAME);
			setState(4921);
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Element_specContext extends ParserRuleContext {
		public Modifier_clauseContext modifier_clause() {
			return getRuleContext(Modifier_clauseContext.class,0);
		}
		public List<Element_spec_optionsContext> element_spec_options() {
			return getRuleContexts(Element_spec_optionsContext.class);
		}
		public Element_spec_optionsContext element_spec_options(int i) {
			return getRuleContext(Element_spec_optionsContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(PLSQLParser.COMMA, 0); }
		public Pragma_clauseContext pragma_clause() {
			return getRuleContext(Pragma_clauseContext.class,0);
		}
		public Element_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_element_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterElement_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitElement_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitElement_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Element_specContext element_spec() throws RecognitionException {
		Element_specContext _localctx = new Element_specContext(_ctx, getState());
		enterRule(_localctx, 486, RULE_element_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4924);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,697,_ctx) ) {
			case 1:
				{
				setState(4923);
				modifier_clause();
				}
				break;
			}
			setState(4927); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(4926);
				element_spec_options();
				}
				}
				setState(4929); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==CONSTRUCTOR || _la==FINAL || _la==INSTANTIABLE || _la==MAP || _la==MEMBER || _la==ORDER || _la==STATIC );
			setState(4933);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,699,_ctx) ) {
			case 1:
				{
				setState(4931);
				match(COMMA);
				setState(4932);
				pragma_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Element_spec_optionsContext extends ParserRuleContext {
		public Subprogram_specContext subprogram_spec() {
			return getRuleContext(Subprogram_specContext.class,0);
		}
		public Constructor_specContext constructor_spec() {
			return getRuleContext(Constructor_specContext.class,0);
		}
		public Map_order_function_specContext map_order_function_spec() {
			return getRuleContext(Map_order_function_specContext.class,0);
		}
		public Element_spec_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_element_spec_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterElement_spec_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitElement_spec_options(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitElement_spec_options(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Element_spec_optionsContext element_spec_options() throws RecognitionException {
		Element_spec_optionsContext _localctx = new Element_spec_optionsContext(_ctx, getState());
		enterRule(_localctx, 488, RULE_element_spec_options);
		try {
			setState(4938);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MEMBER:
			case STATIC:
				enterOuterAlt(_localctx, 1);
				{
				setState(4935);
				subprogram_spec();
				}
				break;
			case CONSTRUCTOR:
			case FINAL:
			case INSTANTIABLE:
				enterOuterAlt(_localctx, 2);
				{
				setState(4936);
				constructor_spec();
				}
				break;
			case MAP:
			case ORDER:
				enterOuterAlt(_localctx, 3);
				{
				setState(4937);
				map_order_function_spec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Subprogram_specContext extends ParserRuleContext {
		public TerminalNode MEMBER() { return getToken(PLSQLParser.MEMBER, 0); }
		public TerminalNode STATIC() { return getToken(PLSQLParser.STATIC, 0); }
		public Type_procedure_specContext type_procedure_spec() {
			return getRuleContext(Type_procedure_specContext.class,0);
		}
		public Type_function_specContext type_function_spec() {
			return getRuleContext(Type_function_specContext.class,0);
		}
		public Subprogram_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subprogram_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterSubprogram_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitSubprogram_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitSubprogram_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Subprogram_specContext subprogram_spec() throws RecognitionException {
		Subprogram_specContext _localctx = new Subprogram_specContext(_ctx, getState());
		enterRule(_localctx, 490, RULE_subprogram_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4940);
			_la = _input.LA(1);
			if ( !(_la==MEMBER || _la==STATIC) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4943);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PROCEDURE:
				{
				setState(4941);
				type_procedure_spec();
				}
				break;
			case FUNCTION:
				{
				setState(4942);
				type_function_spec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_procedure_specContext extends ParserRuleContext {
		public TerminalNode PROCEDURE() { return getToken(PLSQLParser.PROCEDURE, 0); }
		public Procedure_nameContext procedure_name() {
			return getRuleContext(Procedure_nameContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(PLSQLParser.LEFT_PAREN, 0); }
		public List<Type_elements_parameterContext> type_elements_parameter() {
			return getRuleContexts(Type_elements_parameterContext.class);
		}
		public Type_elements_parameterContext type_elements_parameter(int i) {
			return getRuleContext(Type_elements_parameterContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PLSQLParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PLSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLSQLParser.COMMA, i);
		}
		public Call_specContext call_spec() {
			return getRuleContext(Call_specContext.class,0);
		}
		public TerminalNode IS() { return getToken(PLSQLParser.IS, 0); }
		public TerminalNode AS() { return getToken(PLSQLParser.AS, 0); }
		public Type_procedure_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_procedure_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterType_procedure_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitType_procedure_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitType_procedure_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Type_procedure_specContext type_procedure_spec() throws RecognitionException {
		Type_procedure_specContext _localctx = new Type_procedure_specContext(_ctx, getState());
		enterRule(_localctx, 492, RULE_type_procedure_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4945);
			match(PROCEDURE);
			setState(4946);
			procedure_name();
			setState(4947);
			match(LEFT_PAREN);
			setState(4948);
			type_elements_parameter();
			setState(4953);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4949);
				match(COMMA);
				setState(4950);
				type_elements_parameter();
				}
				}
				setState(4955);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4956);
			match(RIGHT_PAREN);
			setState(4959);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS || _la==IS) {
				{
				setState(4957);
				_la = _input.LA(1);
				if ( !(_la==AS || _la==IS) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4958);
				call_spec();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_function_specContext extends ParserRuleContext {
		public TerminalNode FUNCTION() { return getToken(PLSQLParser.FUNCTION, 0); }
		public Function_nameContext function_name() {
			return getRuleContext(Function_nameContext.class,0);
		}
		public TerminalNode RETURN() { return getToken(PLSQLParser.RETURN, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode SELF() { return getToken(PLSQLParser.SELF, 0); }
		public List<TerminalNode> AS() { return getTokens(PLSQLParser.AS); }
		public TerminalNode AS(int i) {
			return getToken(PLSQLParser.AS, i);
		}
		public TerminalNode RESULT() { return getToken(PLSQLParser.RESULT, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PLSQLParser.LEFT_PAREN, 0); }
		public List<Type_elements_parameterContext> type_elements_parameter() {
			return getRuleContexts(Type_elements_parameterContext.class);
		}
		public Type_elements_parameterContext type_elements_parameter(int i) {
			return getRuleContext(Type_elements_parameterContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PLSQLParser.RIGHT_PAREN, 0); }
		public Call_specContext call_spec() {
			return getRuleContext(Call_specContext.class,0);
		}
		public TerminalNode EXTERNAL() { return getToken(PLSQLParser.EXTERNAL, 0); }
		public TerminalNode NAME() { return getToken(PLSQLParser.NAME, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode IS() { return getToken(PLSQLParser.IS, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PLSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLSQLParser.COMMA, i);
		}
		public TerminalNode VARIABLE() { return getToken(PLSQLParser.VARIABLE, 0); }
		public Type_function_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_function_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterType_function_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitType_function_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitType_function_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Type_function_specContext type_function_spec() throws RecognitionException {
		Type_function_specContext _localctx = new Type_function_specContext(_ctx, getState());
		enterRule(_localctx, 494, RULE_type_function_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4961);
			match(FUNCTION);
			setState(4962);
			function_name();
			setState(4974);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(4963);
				match(LEFT_PAREN);
				setState(4964);
				type_elements_parameter();
				setState(4969);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4965);
					match(COMMA);
					setState(4966);
					type_elements_parameter();
					}
					}
					setState(4971);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4972);
				match(RIGHT_PAREN);
				}
			}

			setState(4976);
			match(RETURN);
			setState(4981);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,706,_ctx) ) {
			case 1:
				{
				setState(4977);
				type_spec();
				}
				break;
			case 2:
				{
				setState(4978);
				match(SELF);
				setState(4979);
				match(AS);
				setState(4980);
				match(RESULT);
				}
				break;
			}
			setState(4991);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AS:
			case IS:
				{
				setState(4983);
				_la = _input.LA(1);
				if ( !(_la==AS || _la==IS) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4984);
				call_spec();
				}
				break;
			case EXTERNAL:
				{
				setState(4985);
				match(EXTERNAL);
				setState(4987);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==VARIABLE) {
					{
					setState(4986);
					match(VARIABLE);
					}
				}

				setState(4989);
				match(NAME);
				setState(4990);
				expression(0);
				}
				break;
			case EOF:
			case ALTER:
			case CASCADE:
			case CONSTRUCTOR:
			case CREATE:
			case DELETE:
			case DROP:
			case EXPLAIN:
			case FINAL:
			case FUNCTION:
			case GRANT:
			case INSERT:
			case INSTANTIABLE:
			case INVALIDATE:
			case LOCK:
			case MAP:
			case MEMBER:
			case MERGE:
			case ORDER:
			case PROCEDURE:
			case REFRESH:
			case REVOKE:
			case SELECT:
			case STATIC:
			case UPDATE:
			case WITH:
			case LEFT_PAREN:
			case RIGHT_PAREN:
			case COMMA:
			case SEMICOLON:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Constructor_specContext extends ParserRuleContext {
		public TerminalNode CONSTRUCTOR() { return getToken(PLSQLParser.CONSTRUCTOR, 0); }
		public TerminalNode FUNCTION() { return getToken(PLSQLParser.FUNCTION, 0); }
		public List<Type_specContext> type_spec() {
			return getRuleContexts(Type_specContext.class);
		}
		public Type_specContext type_spec(int i) {
			return getRuleContext(Type_specContext.class,i);
		}
		public TerminalNode RETURN() { return getToken(PLSQLParser.RETURN, 0); }
		public List<TerminalNode> SELF() { return getTokens(PLSQLParser.SELF); }
		public TerminalNode SELF(int i) {
			return getToken(PLSQLParser.SELF, i);
		}
		public List<TerminalNode> AS() { return getTokens(PLSQLParser.AS); }
		public TerminalNode AS(int i) {
			return getToken(PLSQLParser.AS, i);
		}
		public TerminalNode RESULT() { return getToken(PLSQLParser.RESULT, 0); }
		public TerminalNode FINAL() { return getToken(PLSQLParser.FINAL, 0); }
		public TerminalNode INSTANTIABLE() { return getToken(PLSQLParser.INSTANTIABLE, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PLSQLParser.LEFT_PAREN, 0); }
		public List<Type_elements_parameterContext> type_elements_parameter() {
			return getRuleContexts(Type_elements_parameterContext.class);
		}
		public Type_elements_parameterContext type_elements_parameter(int i) {
			return getRuleContext(Type_elements_parameterContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PLSQLParser.RIGHT_PAREN, 0); }
		public Call_specContext call_spec() {
			return getRuleContext(Call_specContext.class,0);
		}
		public TerminalNode IS() { return getToken(PLSQLParser.IS, 0); }
		public TerminalNode IN() { return getToken(PLSQLParser.IN, 0); }
		public TerminalNode OUT() { return getToken(PLSQLParser.OUT, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PLSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLSQLParser.COMMA, i);
		}
		public Constructor_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constructor_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterConstructor_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitConstructor_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitConstructor_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Constructor_specContext constructor_spec() throws RecognitionException {
		Constructor_specContext _localctx = new Constructor_specContext(_ctx, getState());
		enterRule(_localctx, 496, RULE_constructor_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4994);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FINAL) {
				{
				setState(4993);
				match(FINAL);
				}
			}

			setState(4997);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INSTANTIABLE) {
				{
				setState(4996);
				match(INSTANTIABLE);
				}
			}

			setState(4999);
			match(CONSTRUCTOR);
			setState(5000);
			match(FUNCTION);
			setState(5001);
			type_spec();
			setState(5019);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(5002);
				match(LEFT_PAREN);
				{
				setState(5003);
				match(SELF);
				setState(5004);
				match(IN);
				setState(5005);
				match(OUT);
				setState(5006);
				type_spec();
				setState(5007);
				match(COMMA);
				}
				setState(5009);
				type_elements_parameter();
				setState(5014);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5010);
					match(COMMA);
					setState(5011);
					type_elements_parameter();
					}
					}
					setState(5016);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(5017);
				match(RIGHT_PAREN);
				}
			}

			setState(5021);
			match(RETURN);
			setState(5022);
			match(SELF);
			setState(5023);
			match(AS);
			setState(5024);
			match(RESULT);
			setState(5027);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS || _la==IS) {
				{
				setState(5025);
				_la = _input.LA(1);
				if ( !(_la==AS || _la==IS) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5026);
				call_spec();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Map_order_function_specContext extends ParserRuleContext {
		public TerminalNode MEMBER() { return getToken(PLSQLParser.MEMBER, 0); }
		public Type_function_specContext type_function_spec() {
			return getRuleContext(Type_function_specContext.class,0);
		}
		public TerminalNode MAP() { return getToken(PLSQLParser.MAP, 0); }
		public TerminalNode ORDER() { return getToken(PLSQLParser.ORDER, 0); }
		public Map_order_function_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_map_order_function_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterMap_order_function_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitMap_order_function_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitMap_order_function_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Map_order_function_specContext map_order_function_spec() throws RecognitionException {
		Map_order_function_specContext _localctx = new Map_order_function_specContext(_ctx, getState());
		enterRule(_localctx, 498, RULE_map_order_function_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5029);
			_la = _input.LA(1);
			if ( !(_la==MAP || _la==ORDER) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5030);
			match(MEMBER);
			setState(5031);
			type_function_spec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pragma_clauseContext extends ParserRuleContext {
		public TerminalNode PRAGMA() { return getToken(PLSQLParser.PRAGMA, 0); }
		public TerminalNode RESTRICT_REFERENCES() { return getToken(PLSQLParser.RESTRICT_REFERENCES, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PLSQLParser.LEFT_PAREN, 0); }
		public List<Pragma_elementsContext> pragma_elements() {
			return getRuleContexts(Pragma_elementsContext.class);
		}
		public Pragma_elementsContext pragma_elements(int i) {
			return getRuleContext(Pragma_elementsContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PLSQLParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PLSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLSQLParser.COMMA, i);
		}
		public Pragma_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pragma_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterPragma_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitPragma_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitPragma_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Pragma_clauseContext pragma_clause() throws RecognitionException {
		Pragma_clauseContext _localctx = new Pragma_clauseContext(_ctx, getState());
		enterRule(_localctx, 500, RULE_pragma_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5033);
			match(PRAGMA);
			setState(5034);
			match(RESTRICT_REFERENCES);
			setState(5035);
			match(LEFT_PAREN);
			setState(5036);
			pragma_elements();
			setState(5041);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5037);
				match(COMMA);
				setState(5038);
				pragma_elements();
				}
				}
				setState(5043);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(5044);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pragma_elementsContext extends ParserRuleContext {
		public R_idContext r_id() {
			return getRuleContext(R_idContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(PLSQLParser.DEFAULT, 0); }
		public Pragma_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pragma_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterPragma_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitPragma_elements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitPragma_elements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Pragma_elementsContext pragma_elements() throws RecognitionException {
		Pragma_elementsContext _localctx = new Pragma_elementsContext(_ctx, getState());
		enterRule(_localctx, 502, RULE_pragma_elements);
		try {
			setState(5048);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BUILD:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPLETE:
			case COMPOUND:
			case CONCAT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECODE:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DEMAND:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case EDITIONING:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENFORCED:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FAST:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LIST:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MASTER:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEVER:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NVL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case MATERIALIZED:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PREBUILT:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PUBLIC:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REDUCED:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REFRESH:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case REWRITE:
			case RIGHT:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SIZE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBSTRING:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TABLES:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TO_CHAR:
			case TO_DATE:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TRUSTED:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERBOSE:
			case VERSION:
			case VERSIONS:
			case VIEW:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHOUT:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(5046);
				r_id();
				}
				break;
			case DEFAULT:
				enterOuterAlt(_localctx, 2);
				{
				setState(5047);
				match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_elements_parameterContext extends ParserRuleContext {
		public Parameter_nameContext parameter_name() {
			return getRuleContext(Parameter_nameContext.class,0);
		}
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public Type_elements_parameterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_elements_parameter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterType_elements_parameter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitType_elements_parameter(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitType_elements_parameter(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Type_elements_parameterContext type_elements_parameter() throws RecognitionException {
		Type_elements_parameterContext _localctx = new Type_elements_parameterContext(_ctx, getState());
		enterRule(_localctx, 504, RULE_type_elements_parameter);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5050);
			parameter_name();
			setState(5051);
			type_spec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_sequenceContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PLSQLParser.DROP, 0); }
		public TerminalNode SEQUENCE() { return getToken(PLSQLParser.SEQUENCE, 0); }
		public Sequence_nameContext sequence_name() {
			return getRuleContext(Sequence_nameContext.class,0);
		}
		public Drop_sequenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_sequence; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterDrop_sequence(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitDrop_sequence(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitDrop_sequence(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_sequenceContext drop_sequence() throws RecognitionException {
		Drop_sequenceContext _localctx = new Drop_sequenceContext(_ctx, getState());
		enterRule(_localctx, 506, RULE_drop_sequence);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5053);
			match(DROP);
			setState(5054);
			match(SEQUENCE);
			setState(5055);
			sequence_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_sequenceContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PLSQLParser.ALTER, 0); }
		public TerminalNode SEQUENCE() { return getToken(PLSQLParser.SEQUENCE, 0); }
		public Sequence_nameContext sequence_name() {
			return getRuleContext(Sequence_nameContext.class,0);
		}
		public List<Sequence_specContext> sequence_spec() {
			return getRuleContexts(Sequence_specContext.class);
		}
		public Sequence_specContext sequence_spec(int i) {
			return getRuleContext(Sequence_specContext.class,i);
		}
		public Alter_sequenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_sequence; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterAlter_sequence(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitAlter_sequence(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitAlter_sequence(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_sequenceContext alter_sequence() throws RecognitionException {
		Alter_sequenceContext _localctx = new Alter_sequenceContext(_ctx, getState());
		enterRule(_localctx, 508, RULE_alter_sequence);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5057);
			match(ALTER);
			setState(5058);
			match(SEQUENCE);
			setState(5059);
			sequence_name();
			setState(5061); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(5060);
				sequence_spec();
				}
				}
				setState(5063); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==CACHE || _la==CYCLE || _la==INCREMENT || ((((_la - 288)) & ~0x3f) == 0 && ((1L << (_la - 288)) & ((1L << (MAXVALUE - 288)) | (1L << (MINVALUE - 288)) | (1L << (NOCACHE - 288)) | (1L << (NOCYCLE - 288)) | (1L << (NOMAXVALUE - 288)) | (1L << (NOMINVALUE - 288)) | (1L << (NOORDER - 288)))) != 0) || _la==ORDER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_sequenceContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PLSQLParser.CREATE, 0); }
		public TerminalNode SEQUENCE() { return getToken(PLSQLParser.SEQUENCE, 0); }
		public Sequence_nameContext sequence_name() {
			return getRuleContext(Sequence_nameContext.class,0);
		}
		public List<Sequence_start_clauseContext> sequence_start_clause() {
			return getRuleContexts(Sequence_start_clauseContext.class);
		}
		public Sequence_start_clauseContext sequence_start_clause(int i) {
			return getRuleContext(Sequence_start_clauseContext.class,i);
		}
		public List<Sequence_specContext> sequence_spec() {
			return getRuleContexts(Sequence_specContext.class);
		}
		public Sequence_specContext sequence_spec(int i) {
			return getRuleContext(Sequence_specContext.class,i);
		}
		public Create_sequenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_sequence; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterCreate_sequence(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitCreate_sequence(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitCreate_sequence(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_sequenceContext create_sequence() throws RecognitionException {
		Create_sequenceContext _localctx = new Create_sequenceContext(_ctx, getState());
		enterRule(_localctx, 510, RULE_create_sequence);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5065);
			match(CREATE);
			setState(5066);
			match(SEQUENCE);
			setState(5067);
			sequence_name();
			setState(5072);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==CACHE || _la==CYCLE || _la==INCREMENT || ((((_la - 288)) & ~0x3f) == 0 && ((1L << (_la - 288)) & ((1L << (MAXVALUE - 288)) | (1L << (MINVALUE - 288)) | (1L << (NOCACHE - 288)) | (1L << (NOCYCLE - 288)) | (1L << (NOMAXVALUE - 288)) | (1L << (NOMINVALUE - 288)) | (1L << (NOORDER - 288)))) != 0) || _la==ORDER || _la==START) {
				{
				setState(5070);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case START:
					{
					setState(5068);
					sequence_start_clause();
					}
					break;
				case CACHE:
				case CYCLE:
				case INCREMENT:
				case MAXVALUE:
				case MINVALUE:
				case NOCACHE:
				case NOCYCLE:
				case NOMAXVALUE:
				case NOMINVALUE:
				case NOORDER:
				case ORDER:
					{
					setState(5069);
					sequence_spec();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				setState(5074);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sequence_specContext extends ParserRuleContext {
		public TerminalNode INCREMENT() { return getToken(PLSQLParser.INCREMENT, 0); }
		public TerminalNode BY() { return getToken(PLSQLParser.BY, 0); }
		public TerminalNode UNSIGNED_INTEGER() { return getToken(PLSQLParser.UNSIGNED_INTEGER, 0); }
		public TerminalNode MAXVALUE() { return getToken(PLSQLParser.MAXVALUE, 0); }
		public TerminalNode NOMAXVALUE() { return getToken(PLSQLParser.NOMAXVALUE, 0); }
		public TerminalNode MINVALUE() { return getToken(PLSQLParser.MINVALUE, 0); }
		public TerminalNode NOMINVALUE() { return getToken(PLSQLParser.NOMINVALUE, 0); }
		public TerminalNode CYCLE() { return getToken(PLSQLParser.CYCLE, 0); }
		public TerminalNode NOCYCLE() { return getToken(PLSQLParser.NOCYCLE, 0); }
		public TerminalNode CACHE() { return getToken(PLSQLParser.CACHE, 0); }
		public TerminalNode NOCACHE() { return getToken(PLSQLParser.NOCACHE, 0); }
		public TerminalNode ORDER() { return getToken(PLSQLParser.ORDER, 0); }
		public TerminalNode NOORDER() { return getToken(PLSQLParser.NOORDER, 0); }
		public Sequence_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sequence_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterSequence_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitSequence_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitSequence_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sequence_specContext sequence_spec() throws RecognitionException {
		Sequence_specContext _localctx = new Sequence_specContext(_ctx, getState());
		enterRule(_localctx, 512, RULE_sequence_spec);
		try {
			setState(5091);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INCREMENT:
				enterOuterAlt(_localctx, 1);
				{
				setState(5075);
				match(INCREMENT);
				setState(5076);
				match(BY);
				setState(5077);
				match(UNSIGNED_INTEGER);
				}
				break;
			case MAXVALUE:
				enterOuterAlt(_localctx, 2);
				{
				setState(5078);
				match(MAXVALUE);
				setState(5079);
				match(UNSIGNED_INTEGER);
				}
				break;
			case NOMAXVALUE:
				enterOuterAlt(_localctx, 3);
				{
				setState(5080);
				match(NOMAXVALUE);
				}
				break;
			case MINVALUE:
				enterOuterAlt(_localctx, 4);
				{
				setState(5081);
				match(MINVALUE);
				setState(5082);
				match(UNSIGNED_INTEGER);
				}
				break;
			case NOMINVALUE:
				enterOuterAlt(_localctx, 5);
				{
				setState(5083);
				match(NOMINVALUE);
				}
				break;
			case CYCLE:
				enterOuterAlt(_localctx, 6);
				{
				setState(5084);
				match(CYCLE);
				}
				break;
			case NOCYCLE:
				enterOuterAlt(_localctx, 7);
				{
				setState(5085);
				match(NOCYCLE);
				}
				break;
			case CACHE:
				enterOuterAlt(_localctx, 8);
				{
				setState(5086);
				match(CACHE);
				setState(5087);
				match(UNSIGNED_INTEGER);
				}
				break;
			case NOCACHE:
				enterOuterAlt(_localctx, 9);
				{
				setState(5088);
				match(NOCACHE);
				}
				break;
			case ORDER:
				enterOuterAlt(_localctx, 10);
				{
				setState(5089);
				match(ORDER);
				}
				break;
			case NOORDER:
				enterOuterAlt(_localctx, 11);
				{
				setState(5090);
				match(NOORDER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sequence_start_clauseContext extends ParserRuleContext {
		public TerminalNode START() { return getToken(PLSQLParser.START, 0); }
		public TerminalNode WITH() { return getToken(PLSQLParser.WITH, 0); }
		public TerminalNode UNSIGNED_INTEGER() { return getToken(PLSQLParser.UNSIGNED_INTEGER, 0); }
		public Sequence_start_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sequence_start_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterSequence_start_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitSequence_start_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitSequence_start_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sequence_start_clauseContext sequence_start_clause() throws RecognitionException {
		Sequence_start_clauseContext _localctx = new Sequence_start_clauseContext(_ctx, getState());
		enterRule(_localctx, 514, RULE_sequence_start_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5093);
			match(START);
			setState(5094);
			match(WITH);
			setState(5095);
			match(UNSIGNED_INTEGER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Invoker_rights_clauseContext extends ParserRuleContext {
		public TerminalNode AUTHID() { return getToken(PLSQLParser.AUTHID, 0); }
		public TerminalNode CURRENT_USER() { return getToken(PLSQLParser.CURRENT_USER, 0); }
		public TerminalNode DEFINER() { return getToken(PLSQLParser.DEFINER, 0); }
		public Invoker_rights_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_invoker_rights_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterInvoker_rights_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitInvoker_rights_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitInvoker_rights_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Invoker_rights_clauseContext invoker_rights_clause() throws RecognitionException {
		Invoker_rights_clauseContext _localctx = new Invoker_rights_clauseContext(_ctx, getState());
		enterRule(_localctx, 516, RULE_invoker_rights_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5097);
			match(AUTHID);
			setState(5098);
			_la = _input.LA(1);
			if ( !(_la==CURRENT_USER || _la==DEFINER) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Compiler_parameters_clauseContext extends ParserRuleContext {
		public R_idContext r_id() {
			return getRuleContext(R_idContext.class,0);
		}
		public TerminalNode EQUALS_OP() { return getToken(PLSQLParser.EQUALS_OP, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Compiler_parameters_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compiler_parameters_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterCompiler_parameters_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitCompiler_parameters_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitCompiler_parameters_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Compiler_parameters_clauseContext compiler_parameters_clause() throws RecognitionException {
		Compiler_parameters_clauseContext _localctx = new Compiler_parameters_clauseContext(_ctx, getState());
		enterRule(_localctx, 518, RULE_compiler_parameters_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5100);
			r_id();
			setState(5101);
			match(EQUALS_OP);
			setState(5102);
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Call_specContext extends ParserRuleContext {
		public TerminalNode LANGUAGE() { return getToken(PLSQLParser.LANGUAGE, 0); }
		public Java_specContext java_spec() {
			return getRuleContext(Java_specContext.class,0);
		}
		public C_specContext c_spec() {
			return getRuleContext(C_specContext.class,0);
		}
		public Call_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_call_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterCall_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitCall_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitCall_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Call_specContext call_spec() throws RecognitionException {
		Call_specContext _localctx = new Call_specContext(_ctx, getState());
		enterRule(_localctx, 520, RULE_call_spec);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5104);
			match(LANGUAGE);
			setState(5107);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case JAVA:
				{
				setState(5105);
				java_spec();
				}
				break;
			case C_LETTER:
				{
				setState(5106);
				c_spec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Java_specContext extends ParserRuleContext {
		public TerminalNode JAVA() { return getToken(PLSQLParser.JAVA, 0); }
		public TerminalNode NAME() { return getToken(PLSQLParser.NAME, 0); }
		public TerminalNode CHAR_STRING() { return getToken(PLSQLParser.CHAR_STRING, 0); }
		public Java_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_java_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterJava_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitJava_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitJava_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Java_specContext java_spec() throws RecognitionException {
		Java_specContext _localctx = new Java_specContext(_ctx, getState());
		enterRule(_localctx, 522, RULE_java_spec);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5109);
			match(JAVA);
			setState(5110);
			match(NAME);
			setState(5111);
			match(CHAR_STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class C_specContext extends ParserRuleContext {
		public TerminalNode C_LETTER() { return getToken(PLSQLParser.C_LETTER, 0); }
		public TerminalNode LIBRARY() { return getToken(PLSQLParser.LIBRARY, 0); }
		public R_idContext r_id() {
			return getRuleContext(R_idContext.class,0);
		}
		public TerminalNode NAME() { return getToken(PLSQLParser.NAME, 0); }
		public TerminalNode CHAR_STRING() { return getToken(PLSQLParser.CHAR_STRING, 0); }
		public C_agent_in_clauseContext c_agent_in_clause() {
			return getRuleContext(C_agent_in_clauseContext.class,0);
		}
		public TerminalNode WITH() { return getToken(PLSQLParser.WITH, 0); }
		public TerminalNode CONTEXT() { return getToken(PLSQLParser.CONTEXT, 0); }
		public C_parameters_clauseContext c_parameters_clause() {
			return getRuleContext(C_parameters_clauseContext.class,0);
		}
		public C_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_c_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterC_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitC_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitC_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final C_specContext c_spec() throws RecognitionException {
		C_specContext _localctx = new C_specContext(_ctx, getState());
		enterRule(_localctx, 524, RULE_c_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5113);
			match(C_LETTER);
			setState(5116);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NAME) {
				{
				setState(5114);
				match(NAME);
				setState(5115);
				match(CHAR_STRING);
				}
			}

			setState(5118);
			match(LIBRARY);
			setState(5119);
			r_id();
			setState(5121);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,722,_ctx) ) {
			case 1:
				{
				setState(5120);
				c_agent_in_clause();
				}
				break;
			}
			setState(5125);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,723,_ctx) ) {
			case 1:
				{
				setState(5123);
				match(WITH);
				setState(5124);
				match(CONTEXT);
				}
				break;
			}
			setState(5128);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,724,_ctx) ) {
			case 1:
				{
				setState(5127);
				c_parameters_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class C_agent_in_clauseContext extends ParserRuleContext {
		public TerminalNode AGENT() { return getToken(PLSQLParser.AGENT, 0); }
		public TerminalNode IN() { return getToken(PLSQLParser.IN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PLSQLParser.LEFT_PAREN, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PLSQLParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PLSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLSQLParser.COMMA, i);
		}
		public C_agent_in_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_c_agent_in_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterC_agent_in_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitC_agent_in_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitC_agent_in_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final C_agent_in_clauseContext c_agent_in_clause() throws RecognitionException {
		C_agent_in_clauseContext _localctx = new C_agent_in_clauseContext(_ctx, getState());
		enterRule(_localctx, 526, RULE_c_agent_in_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5130);
			match(AGENT);
			setState(5131);
			match(IN);
			setState(5132);
			match(LEFT_PAREN);
			setState(5133);
			expression(0);
			setState(5138);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5134);
				match(COMMA);
				setState(5135);
				expression(0);
				}
				}
				setState(5140);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(5141);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class C_parameters_clauseContext extends ParserRuleContext {
		public TerminalNode PARAMETERS() { return getToken(PLSQLParser.PARAMETERS, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PLSQLParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PLSQLParser.RIGHT_PAREN, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> PERIOD() { return getTokens(PLSQLParser.PERIOD); }
		public TerminalNode PERIOD(int i) {
			return getToken(PLSQLParser.PERIOD, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLSQLParser.COMMA, i);
		}
		public C_parameters_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_c_parameters_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterC_parameters_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitC_parameters_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitC_parameters_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final C_parameters_clauseContext c_parameters_clause() throws RecognitionException {
		C_parameters_clauseContext _localctx = new C_parameters_clauseContext(_ctx, getState());
		enterRule(_localctx, 528, RULE_c_parameters_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5143);
			match(PARAMETERS);
			setState(5144);
			match(LEFT_PAREN);
			setState(5156);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ALL:
			case ANALYZE:
			case ANY:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BUILD:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CASE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPLETE:
			case COMPOUND:
			case CONCAT:
			case CONNECT_BY_ROOT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECODE:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DEMAND:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DISTINCT:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case EDITIONING:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENFORCED:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FALSE:
			case FAST:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LIST:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MASTER:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEVER:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NOT:
			case NVL:
			case NULL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case MATERIALIZED:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITION:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PREBUILT:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIOR:
			case PUBLIC:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REDUCED:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REFRESH:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case REWRITE:
			case RIGHT:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELECT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SIZE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBSTRING:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TABLES:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TO_CHAR:
			case TO_DATE:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUE:
			case TRUNCATE:
			case TRUSTED:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERBOSE:
			case VERSION:
			case VERSIONS:
			case VIEW:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHOUT:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case NATIONAL_CHAR_STRING_LIT:
			case UNSIGNED_INTEGER:
			case APPROXIMATE_NUM_LIT:
			case CHAR_STRING:
			case DELIMITED_ID:
			case LEFT_PAREN:
			case PLUS_SIGN:
			case MINUS_SIGN:
			case BINDVAR:
			case COLON:
			case REGULAR_ID:
				{
				setState(5145);
				expression(0);
				setState(5150);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5146);
					match(COMMA);
					setState(5147);
					expression(0);
					}
					}
					setState(5152);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case PERIOD:
				{
				setState(5153);
				match(PERIOD);
				setState(5154);
				match(PERIOD);
				setState(5155);
				match(PERIOD);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(5158);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ParameterContext extends ParserRuleContext {
		public Parameter_nameContext parameter_name() {
			return getRuleContext(Parameter_nameContext.class,0);
		}
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public Default_value_partContext default_value_part() {
			return getRuleContext(Default_value_partContext.class,0);
		}
		public List<TerminalNode> IN() { return getTokens(PLSQLParser.IN); }
		public TerminalNode IN(int i) {
			return getToken(PLSQLParser.IN, i);
		}
		public List<TerminalNode> OUT() { return getTokens(PLSQLParser.OUT); }
		public TerminalNode OUT(int i) {
			return getToken(PLSQLParser.OUT, i);
		}
		public List<TerminalNode> INOUT() { return getTokens(PLSQLParser.INOUT); }
		public TerminalNode INOUT(int i) {
			return getToken(PLSQLParser.INOUT, i);
		}
		public List<TerminalNode> NOCOPY() { return getTokens(PLSQLParser.NOCOPY); }
		public TerminalNode NOCOPY(int i) {
			return getToken(PLSQLParser.NOCOPY, i);
		}
		public ParameterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parameter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterParameter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitParameter(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitParameter(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ParameterContext parameter() throws RecognitionException {
		ParameterContext _localctx = new ParameterContext(_ctx, getState());
		enterRule(_localctx, 530, RULE_parameter);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(5160);
			parameter_name();
			setState(5164);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,728,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(5161);
					_la = _input.LA(1);
					if ( !(_la==IN || _la==INOUT || _la==NOCOPY || _la==OUT) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					} 
				}
				setState(5166);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,728,_ctx);
			}
			setState(5168);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BUILD) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (CHR - 65)) | (1L << (CLOB - 65)) | (1L << (CLOSE - 65)) | (1L << (CLUSTER - 65)) | (1L << (COALESCE - 65)) | (1L << (COLLECT - 65)) | (1L << (COLUMNS - 65)) | (1L << (COMMENT - 65)) | (1L << (COMMIT - 65)) | (1L << (COMMITTED - 65)) | (1L << (COMPATIBILITY - 65)) | (1L << (COMPILE - 65)) | (1L << (COMPLETE - 65)) | (1L << (COMPOUND - 65)) | (1L << (CONCAT - 65)) | (1L << (CONSTANT - 65)) | (1L << (CONSTRAINT - 65)) | (1L << (CONSTRAINTS - 65)) | (1L << (CONSTRUCTOR - 65)) | (1L << (CONTENT - 65)) | (1L << (CONTEXT - 65)) | (1L << (CONTINUE - 65)) | (1L << (CONVERT - 65)) | (1L << (CORRUPT_XID - 65)) | (1L << (CORRUPT_XID_ALL - 65)) | (1L << (COST - 65)) | (1L << (COUNT - 65)) | (1L << (CROSS - 65)) | (1L << (CUBE - 65)) | (1L << (CURRENT_USER - 65)) | (1L << (CURSOR - 65)) | (1L << (CUSTOMDATUM - 65)) | (1L << (CYCLE - 65)) | (1L << (DATA - 65)) | (1L << (DATABASE - 65)) | (1L << (DATE - 65)) | (1L << (DAY - 65)) | (1L << (DB_ROLE_CHANGE - 65)) | (1L << (DBTIMEZONE - 65)) | (1L << (DDL - 65)) | (1L << (DEBUG - 65)) | (1L << (DEC - 65)) | (1L << (DECIMAL - 65)) | (1L << (DECODE - 65)) | (1L << (DECOMPOSE - 65)) | (1L << (DECREMENT - 65)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DEMAND - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (EDITIONING - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENFORCED - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FAST - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)) | (1L << (FOLLOWING - 129)) | (1L << (FOLLOWS - 129)) | (1L << (FORALL - 129)) | (1L << (FORCE - 129)))) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & ((1L << (FULL - 197)) | (1L << (FUNCTION - 197)) | (1L << (GROUPING - 197)) | (1L << (HASH - 197)) | (1L << (HIDE - 197)) | (1L << (HOUR - 197)) | (1L << (IGNORE - 197)) | (1L << (IMMEDIATE - 197)) | (1L << (INCLUDE - 197)) | (1L << (INCLUDING - 197)) | (1L << (INCREMENT - 197)) | (1L << (INDENT - 197)) | (1L << (INDEXED - 197)) | (1L << (INDICATOR - 197)) | (1L << (INDICES - 197)) | (1L << (INFINITE - 197)) | (1L << (INLINE - 197)) | (1L << (INNER - 197)) | (1L << (INOUT - 197)) | (1L << (INSTANTIABLE - 197)) | (1L << (INSTEAD - 197)) | (1L << (INT - 197)) | (1L << (INTEGER - 197)) | (1L << (INTERVAL - 197)) | (1L << (INVALIDATE - 197)) | (1L << (ISOLATION - 197)) | (1L << (ITERATE - 197)) | (1L << (JAVA - 197)) | (1L << (JOIN - 197)) | (1L << (KEEP - 197)) | (1L << (LANGUAGE - 197)) | (1L << (LAST - 197)) | (1L << (LAST_VALUE - 197)) | (1L << (LEADING - 197)) | (1L << (LEFT - 197)) | (1L << (LEVEL - 197)))) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & ((1L << (LIBRARY - 261)) | (1L << (LIKE2 - 261)) | (1L << (LIKE4 - 261)) | (1L << (LIKEC - 261)) | (1L << (LIMIT - 261)) | (1L << (LIST - 261)) | (1L << (LOCAL - 261)) | (1L << (LOCKED - 261)) | (1L << (LOG - 261)) | (1L << (LOGOFF - 261)) | (1L << (LOGON - 261)) | (1L << (LONG - 261)) | (1L << (LOOP - 261)) | (1L << (MAIN - 261)) | (1L << (MAP - 261)) | (1L << (MASTER - 261)) | (1L << (MATCHED - 261)) | (1L << (MAXVALUE - 261)) | (1L << (MEASURES - 261)) | (1L << (MEMBER - 261)) | (1L << (MERGE - 261)) | (1L << (MINUTE - 261)) | (1L << (MINVALUE - 261)) | (1L << (MLSLABEL - 261)) | (1L << (MODEL - 261)) | (1L << (MODIFY - 261)) | (1L << (MONTH - 261)) | (1L << (MULTISET - 261)) | (1L << (NAME - 261)) | (1L << (NAN - 261)) | (1L << (NATURAL - 261)) | (1L << (NATURALN - 261)) | (1L << (NAV - 261)) | (1L << (NCHAR - 261)) | (1L << (NCHAR_CS - 261)) | (1L << (NCLOB - 261)) | (1L << (NESTED - 261)) | (1L << (NEVER - 261)) | (1L << (NEW - 261)) | (1L << (NO - 261)) | (1L << (NOAUDIT - 261)) | (1L << (NOCOPY - 261)) | (1L << (NOCYCLE - 261)) | (1L << (NOENTITYESCAPING - 261)))) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & ((1L << (NONE - 329)) | (1L << (NOSCHEMACHECK - 329)) | (1L << (NVL - 329)) | (1L << (NULLS - 329)) | (1L << (NUMBER - 329)) | (1L << (NUMERIC - 329)) | (1L << (NVARCHAR2 - 329)) | (1L << (MATERIALIZED - 329)) | (1L << (OBJECT - 329)) | (1L << (OFF - 329)) | (1L << (OID - 329)) | (1L << (OLD - 329)) | (1L << (ONLY - 329)) | (1L << (OPEN - 329)) | (1L << (ORADATA - 329)) | (1L << (ORDINALITY - 329)) | (1L << (OSERROR - 329)) | (1L << (OUT - 329)) | (1L << (OUTER - 329)) | (1L << (OVER - 329)) | (1L << (OVERRIDING - 329)) | (1L << (PACKAGE - 329)) | (1L << (PARALLEL_ENABLE - 329)) | (1L << (PARAMETERS - 329)) | (1L << (PARENT - 329)) | (1L << (PARTITION - 329)) | (1L << (PASSING - 329)) | (1L << (PATH - 329)) | (1L << (PIPELINED - 329)) | (1L << (PLAN - 329)) | (1L << (PLS_INTEGER - 329)) | (1L << (POSITIVE - 329)) | (1L << (POSITIVEN - 329)) | (1L << (PRAGMA - 329)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (PREBUILT - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)) | (1L << (PRESENT - 393)) | (1L << (PUBLIC - 393)) | (1L << (RAISE - 393)) | (1L << (RANGE - 393)) | (1L << (RAW - 393)) | (1L << (READ - 393)) | (1L << (REAL - 393)) | (1L << (RECORD - 393)) | (1L << (REDUCED - 393)) | (1L << (REF - 393)) | (1L << (REFERENCE - 393)) | (1L << (REFERENCING - 393)) | (1L << (REFRESH - 393)) | (1L << (REJECT - 393)) | (1L << (RELIES_ON - 393)) | (1L << (RENAME - 393)) | (1L << (REPLACE - 393)) | (1L << (RESPECT - 393)) | (1L << (RESTRICT_REFERENCES - 393)) | (1L << (RESULT - 393)) | (1L << (RESULT_CACHE - 393)) | (1L << (RETURN - 393)) | (1L << (RETURNING - 393)) | (1L << (REUSE - 393)) | (1L << (REVERSE - 393)) | (1L << (REWRITE - 393)) | (1L << (RIGHT - 393)) | (1L << (ROLE - 393)) | (1L << (ROLLBACK - 393)) | (1L << (ROLLUP - 393)) | (1L << (ROW - 393)) | (1L << (ROWID - 393)) | (1L << (ROWS - 393)) | (1L << (RULES - 393)) | (1L << (SAMPLE - 393)) | (1L << (SAVE - 393)) | (1L << (SAVEPOINT - 393)) | (1L << (SCHEMA - 393)) | (1L << (SCHEMACHECK - 393)) | (1L << (SCN - 393)) | (1L << (SECOND - 393)))) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & ((1L << (SEED - 458)) | (1L << (SEGMENT - 458)) | (1L << (SELF - 458)) | (1L << (SEQUENTIAL - 458)) | (1L << (SERIALIZABLE - 458)) | (1L << (SERIALLY_REUSABLE - 458)) | (1L << (SERVERERROR - 458)) | (1L << (SESSIONTIMEZONE - 458)) | (1L << (SET - 458)) | (1L << (SETS - 458)) | (1L << (SETTINGS - 458)) | (1L << (SHOW - 458)) | (1L << (SHUTDOWN - 458)) | (1L << (SIBLINGS - 458)) | (1L << (SIGNTYPE - 458)) | (1L << (SIMPLE_INTEGER - 458)) | (1L << (SINGLE - 458)) | (1L << (SIZE - 458)) | (1L << (SKIP_ - 458)) | (1L << (SMALLINT - 458)) | (1L << (SNAPSHOT - 458)) | (1L << (SOME - 458)) | (1L << (SPECIFICATION - 458)) | (1L << (SQLDATA - 458)) | (1L << (SQLERROR - 458)) | (1L << (STANDALONE - 458)) | (1L << (STARTUP - 458)) | (1L << (STATEMENT - 458)) | (1L << (STATEMENT_ID - 458)) | (1L << (STATIC - 458)) | (1L << (STATISTICS - 458)) | (1L << (STRING - 458)) | (1L << (SUBMULTISET - 458)) | (1L << (SUBPARTITION - 458)) | (1L << (SUBSTITUTABLE - 458)) | (1L << (SUBSTRING - 458)) | (1L << (SUBTYPE - 458)) | (1L << (SUCCESS - 458)) | (1L << (SUSPEND - 458)) | (1L << (TABLES - 458)) | (1L << (TIME - 458)) | (1L << (TIMESTAMP - 458)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 458)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 458)) | (1L << (TIMESTAMP_UNCONSTRAINED - 458)))) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & ((1L << (TIMEZONE_ABBR - 522)) | (1L << (TIMEZONE_HOUR - 522)) | (1L << (TIMEZONE_MINUTE - 522)) | (1L << (TIMEZONE_REGION - 522)) | (1L << (TO_CHAR - 522)) | (1L << (TO_DATE - 522)) | (1L << (TRAILING - 522)) | (1L << (TRANSACTION - 522)) | (1L << (TRANSLATE - 522)) | (1L << (TREAT - 522)) | (1L << (TRIGGER - 522)) | (1L << (TRIM - 522)) | (1L << (TRUNCATE - 522)) | (1L << (TRUSTED - 522)) | (1L << (TYPE - 522)) | (1L << (UNBOUNDED - 522)) | (1L << (UNDER - 522)) | (1L << (UNLIMITED - 522)) | (1L << (UNTIL - 522)) | (1L << (UPDATED - 522)) | (1L << (UPSERT - 522)) | (1L << (UROWID - 522)) | (1L << (USE - 522)) | (1L << (VALIDATE - 522)) | (1L << (VALUE - 522)) | (1L << (VARCHAR - 522)) | (1L << (VARCHAR2 - 522)) | (1L << (VARIABLE - 522)) | (1L << (VARRAY - 522)) | (1L << (VARYING - 522)) | (1L << (VERBOSE - 522)) | (1L << (VERSION - 522)) | (1L << (VERSIONS - 522)) | (1L << (VIEW - 522)) | (1L << (WAIT - 522)) | (1L << (WARNING - 522)) | (1L << (WELLFORMED - 522)) | (1L << (WHENEVER - 522)) | (1L << (WHILE - 522)) | (1L << (WITHOUT - 522)) | (1L << (WITHIN - 522)) | (1L << (WORK - 522)) | (1L << (WRITE - 522)) | (1L << (XML - 522)) | (1L << (XMLAGG - 522)) | (1L << (XMLATTRIBUTES - 522)))) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & ((1L << (XMLCAST - 586)) | (1L << (XMLCOLATTVAL - 586)) | (1L << (XMLELEMENT - 586)) | (1L << (XMLEXISTS - 586)) | (1L << (XMLFOREST - 586)) | (1L << (XMLNAMESPACES - 586)) | (1L << (XMLPARSE - 586)) | (1L << (XMLPI - 586)) | (1L << (XMLQUERY - 586)) | (1L << (XMLROOT - 586)) | (1L << (XMLSERIALIZE - 586)) | (1L << (XMLTABLE - 586)) | (1L << (YEAR - 586)) | (1L << (YES - 586)) | (1L << (YMINTERVAL_UNCONSTRAINED - 586)) | (1L << (ZONE - 586)) | (1L << (PREDICTION - 586)) | (1L << (PREDICTION_BOUNDS - 586)) | (1L << (PREDICTION_COST - 586)) | (1L << (PREDICTION_DETAILS - 586)) | (1L << (PREDICTION_PROBABILITY - 586)) | (1L << (PREDICTION_SET - 586)) | (1L << (CUME_DIST - 586)) | (1L << (DENSE_RANK - 586)) | (1L << (LISTAGG - 586)) | (1L << (PERCENT_RANK - 586)) | (1L << (PERCENTILE_CONT - 586)) | (1L << (PERCENTILE_DISC - 586)) | (1L << (RANK - 586)) | (1L << (AVG - 586)) | (1L << (CORR - 586)) | (1L << (LAG - 586)) | (1L << (LEAD - 586)) | (1L << (MAX - 586)) | (1L << (MEDIAN - 586)) | (1L << (MIN - 586)) | (1L << (NTILE - 586)) | (1L << (RATIO_TO_REPORT - 586)) | (1L << (ROW_NUMBER - 586)) | (1L << (SUM - 586)) | (1L << (VARIANCE - 586)) | (1L << (REGR_ - 586)) | (1L << (STDDEV - 586)) | (1L << (VAR_ - 586)) | (1L << (COVAR_ - 586)) | (1L << (DELIMITED_ID - 586)))) != 0) || _la==REGULAR_ID) {
				{
				setState(5167);
				type_spec();
				}
			}

			setState(5171);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFAULT || _la==ASSIGN_OP) {
				{
				setState(5170);
				default_value_part();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Default_value_partContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode ASSIGN_OP() { return getToken(PLSQLParser.ASSIGN_OP, 0); }
		public TerminalNode DEFAULT() { return getToken(PLSQLParser.DEFAULT, 0); }
		public Default_value_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_default_value_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterDefault_value_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitDefault_value_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitDefault_value_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Default_value_partContext default_value_part() throws RecognitionException {
		Default_value_partContext _localctx = new Default_value_partContext(_ctx, getState());
		enterRule(_localctx, 532, RULE_default_value_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5173);
			_la = _input.LA(1);
			if ( !(_la==DEFAULT || _la==ASSIGN_OP) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5174);
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Declare_specContext extends ParserRuleContext {
		public Variable_declarationContext variable_declaration() {
			return getRuleContext(Variable_declarationContext.class,0);
		}
		public Subtype_declarationContext subtype_declaration() {
			return getRuleContext(Subtype_declarationContext.class,0);
		}
		public Cursor_declarationContext cursor_declaration() {
			return getRuleContext(Cursor_declarationContext.class,0);
		}
		public Exception_declarationContext exception_declaration() {
			return getRuleContext(Exception_declarationContext.class,0);
		}
		public Pragma_declarationContext pragma_declaration() {
			return getRuleContext(Pragma_declarationContext.class,0);
		}
		public Record_declarationContext record_declaration() {
			return getRuleContext(Record_declarationContext.class,0);
		}
		public Table_declarationContext table_declaration() {
			return getRuleContext(Table_declarationContext.class,0);
		}
		public Create_procedure_bodyContext create_procedure_body() {
			return getRuleContext(Create_procedure_bodyContext.class,0);
		}
		public Create_function_bodyContext create_function_body() {
			return getRuleContext(Create_function_bodyContext.class,0);
		}
		public Declare_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declare_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterDeclare_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitDeclare_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitDeclare_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Declare_specContext declare_spec() throws RecognitionException {
		Declare_specContext _localctx = new Declare_specContext(_ctx, getState());
		enterRule(_localctx, 534, RULE_declare_spec);
		try {
			setState(5185);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,731,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5176);
				variable_declaration();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5177);
				subtype_declaration();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5178);
				cursor_declaration();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5179);
				exception_declaration();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5180);
				pragma_declaration();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(5181);
				record_declaration();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(5182);
				table_declaration();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(5183);
				create_procedure_body();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(5184);
				create_function_body();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Variable_declarationContext extends ParserRuleContext {
		public Variable_nameContext variable_name() {
			return getRuleContext(Variable_nameContext.class,0);
		}
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode SEMICOLON() { return getToken(PLSQLParser.SEMICOLON, 0); }
		public TerminalNode CONSTANT() { return getToken(PLSQLParser.CONSTANT, 0); }
		public TerminalNode NOT() { return getToken(PLSQLParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(PLSQLParser.NULL, 0); }
		public Default_value_partContext default_value_part() {
			return getRuleContext(Default_value_partContext.class,0);
		}
		public Variable_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_variable_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterVariable_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitVariable_declaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitVariable_declaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Variable_declarationContext variable_declaration() throws RecognitionException {
		Variable_declarationContext _localctx = new Variable_declarationContext(_ctx, getState());
		enterRule(_localctx, 536, RULE_variable_declaration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5187);
			variable_name();
			setState(5189);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,732,_ctx) ) {
			case 1:
				{
				setState(5188);
				match(CONSTANT);
				}
				break;
			}
			setState(5191);
			type_spec();
			setState(5194);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(5192);
				match(NOT);
				setState(5193);
				match(NULL);
				}
			}

			setState(5197);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFAULT || _la==ASSIGN_OP) {
				{
				setState(5196);
				default_value_part();
				}
			}

			setState(5199);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Subtype_declarationContext extends ParserRuleContext {
		public TerminalNode SUBTYPE() { return getToken(PLSQLParser.SUBTYPE, 0); }
		public Type_nameContext type_name() {
			return getRuleContext(Type_nameContext.class,0);
		}
		public TerminalNode IS() { return getToken(PLSQLParser.IS, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode SEMICOLON() { return getToken(PLSQLParser.SEMICOLON, 0); }
		public TerminalNode RANGE() { return getToken(PLSQLParser.RANGE, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode NOT() { return getToken(PLSQLParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(PLSQLParser.NULL, 0); }
		public Subtype_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subtype_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterSubtype_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitSubtype_declaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitSubtype_declaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Subtype_declarationContext subtype_declaration() throws RecognitionException {
		Subtype_declarationContext _localctx = new Subtype_declarationContext(_ctx, getState());
		enterRule(_localctx, 538, RULE_subtype_declaration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5201);
			match(SUBTYPE);
			setState(5202);
			type_name();
			setState(5203);
			match(IS);
			setState(5204);
			type_spec();
			setState(5210);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RANGE) {
				{
				setState(5205);
				match(RANGE);
				setState(5206);
				expression(0);
				setState(5207);
				match(T__0);
				setState(5208);
				expression(0);
				}
			}

			setState(5214);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(5212);
				match(NOT);
				setState(5213);
				match(NULL);
				}
			}

			setState(5216);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cursor_declarationContext extends ParserRuleContext {
		public TerminalNode CURSOR() { return getToken(PLSQLParser.CURSOR, 0); }
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public TerminalNode SEMICOLON() { return getToken(PLSQLParser.SEMICOLON, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PLSQLParser.LEFT_PAREN, 0); }
		public List<Parameter_specContext> parameter_spec() {
			return getRuleContexts(Parameter_specContext.class);
		}
		public Parameter_specContext parameter_spec(int i) {
			return getRuleContext(Parameter_specContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PLSQLParser.RIGHT_PAREN, 0); }
		public TerminalNode RETURN() { return getToken(PLSQLParser.RETURN, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode IS() { return getToken(PLSQLParser.IS, 0); }
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLSQLParser.COMMA, i);
		}
		public Cursor_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursor_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterCursor_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitCursor_declaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitCursor_declaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cursor_declarationContext cursor_declaration() throws RecognitionException {
		Cursor_declarationContext _localctx = new Cursor_declarationContext(_ctx, getState());
		enterRule(_localctx, 540, RULE_cursor_declaration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5218);
			match(CURSOR);
			setState(5219);
			cursor_name();
			setState(5231);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(5220);
				match(LEFT_PAREN);
				setState(5221);
				parameter_spec();
				setState(5226);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5222);
					match(COMMA);
					setState(5223);
					parameter_spec();
					}
					}
					setState(5228);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(5229);
				match(RIGHT_PAREN);
				}
			}

			setState(5235);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RETURN) {
				{
				setState(5233);
				match(RETURN);
				setState(5234);
				type_spec();
				}
			}

			setState(5239);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IS) {
				{
				setState(5237);
				match(IS);
				setState(5238);
				select_statement();
				}
			}

			setState(5241);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Parameter_specContext extends ParserRuleContext {
		public Parameter_nameContext parameter_name() {
			return getRuleContext(Parameter_nameContext.class,0);
		}
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public Default_value_partContext default_value_part() {
			return getRuleContext(Default_value_partContext.class,0);
		}
		public TerminalNode IN() { return getToken(PLSQLParser.IN, 0); }
		public Parameter_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parameter_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterParameter_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitParameter_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitParameter_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Parameter_specContext parameter_spec() throws RecognitionException {
		Parameter_specContext _localctx = new Parameter_specContext(_ctx, getState());
		enterRule(_localctx, 542, RULE_parameter_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5243);
			parameter_name();
			setState(5248);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BUILD) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (CHR - 65)) | (1L << (CLOB - 65)) | (1L << (CLOSE - 65)) | (1L << (CLUSTER - 65)) | (1L << (COALESCE - 65)) | (1L << (COLLECT - 65)) | (1L << (COLUMNS - 65)) | (1L << (COMMENT - 65)) | (1L << (COMMIT - 65)) | (1L << (COMMITTED - 65)) | (1L << (COMPATIBILITY - 65)) | (1L << (COMPILE - 65)) | (1L << (COMPLETE - 65)) | (1L << (COMPOUND - 65)) | (1L << (CONCAT - 65)) | (1L << (CONSTANT - 65)) | (1L << (CONSTRAINT - 65)) | (1L << (CONSTRAINTS - 65)) | (1L << (CONSTRUCTOR - 65)) | (1L << (CONTENT - 65)) | (1L << (CONTEXT - 65)) | (1L << (CONTINUE - 65)) | (1L << (CONVERT - 65)) | (1L << (CORRUPT_XID - 65)) | (1L << (CORRUPT_XID_ALL - 65)) | (1L << (COST - 65)) | (1L << (COUNT - 65)) | (1L << (CROSS - 65)) | (1L << (CUBE - 65)) | (1L << (CURRENT_USER - 65)) | (1L << (CURSOR - 65)) | (1L << (CUSTOMDATUM - 65)) | (1L << (CYCLE - 65)) | (1L << (DATA - 65)) | (1L << (DATABASE - 65)) | (1L << (DATE - 65)) | (1L << (DAY - 65)) | (1L << (DB_ROLE_CHANGE - 65)) | (1L << (DBTIMEZONE - 65)) | (1L << (DDL - 65)) | (1L << (DEBUG - 65)) | (1L << (DEC - 65)) | (1L << (DECIMAL - 65)) | (1L << (DECODE - 65)) | (1L << (DECOMPOSE - 65)) | (1L << (DECREMENT - 65)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DEMAND - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (EDITIONING - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENFORCED - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FAST - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)) | (1L << (FOLLOWING - 129)) | (1L << (FOLLOWS - 129)) | (1L << (FORALL - 129)) | (1L << (FORCE - 129)))) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & ((1L << (FULL - 197)) | (1L << (FUNCTION - 197)) | (1L << (GROUPING - 197)) | (1L << (HASH - 197)) | (1L << (HIDE - 197)) | (1L << (HOUR - 197)) | (1L << (IGNORE - 197)) | (1L << (IMMEDIATE - 197)) | (1L << (IN - 197)) | (1L << (INCLUDE - 197)) | (1L << (INCLUDING - 197)) | (1L << (INCREMENT - 197)) | (1L << (INDENT - 197)) | (1L << (INDEXED - 197)) | (1L << (INDICATOR - 197)) | (1L << (INDICES - 197)) | (1L << (INFINITE - 197)) | (1L << (INLINE - 197)) | (1L << (INNER - 197)) | (1L << (INOUT - 197)) | (1L << (INSTANTIABLE - 197)) | (1L << (INSTEAD - 197)) | (1L << (INT - 197)) | (1L << (INTEGER - 197)) | (1L << (INTERVAL - 197)) | (1L << (INVALIDATE - 197)) | (1L << (ISOLATION - 197)) | (1L << (ITERATE - 197)) | (1L << (JAVA - 197)) | (1L << (JOIN - 197)) | (1L << (KEEP - 197)) | (1L << (LANGUAGE - 197)) | (1L << (LAST - 197)) | (1L << (LAST_VALUE - 197)) | (1L << (LEADING - 197)) | (1L << (LEFT - 197)) | (1L << (LEVEL - 197)))) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & ((1L << (LIBRARY - 261)) | (1L << (LIKE2 - 261)) | (1L << (LIKE4 - 261)) | (1L << (LIKEC - 261)) | (1L << (LIMIT - 261)) | (1L << (LIST - 261)) | (1L << (LOCAL - 261)) | (1L << (LOCKED - 261)) | (1L << (LOG - 261)) | (1L << (LOGOFF - 261)) | (1L << (LOGON - 261)) | (1L << (LONG - 261)) | (1L << (LOOP - 261)) | (1L << (MAIN - 261)) | (1L << (MAP - 261)) | (1L << (MASTER - 261)) | (1L << (MATCHED - 261)) | (1L << (MAXVALUE - 261)) | (1L << (MEASURES - 261)) | (1L << (MEMBER - 261)) | (1L << (MERGE - 261)) | (1L << (MINUTE - 261)) | (1L << (MINVALUE - 261)) | (1L << (MLSLABEL - 261)) | (1L << (MODEL - 261)) | (1L << (MODIFY - 261)) | (1L << (MONTH - 261)) | (1L << (MULTISET - 261)) | (1L << (NAME - 261)) | (1L << (NAN - 261)) | (1L << (NATURAL - 261)) | (1L << (NATURALN - 261)) | (1L << (NAV - 261)) | (1L << (NCHAR - 261)) | (1L << (NCHAR_CS - 261)) | (1L << (NCLOB - 261)) | (1L << (NESTED - 261)) | (1L << (NEVER - 261)) | (1L << (NEW - 261)) | (1L << (NO - 261)) | (1L << (NOAUDIT - 261)) | (1L << (NOCOPY - 261)) | (1L << (NOCYCLE - 261)) | (1L << (NOENTITYESCAPING - 261)))) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & ((1L << (NONE - 329)) | (1L << (NOSCHEMACHECK - 329)) | (1L << (NVL - 329)) | (1L << (NULLS - 329)) | (1L << (NUMBER - 329)) | (1L << (NUMERIC - 329)) | (1L << (NVARCHAR2 - 329)) | (1L << (MATERIALIZED - 329)) | (1L << (OBJECT - 329)) | (1L << (OFF - 329)) | (1L << (OID - 329)) | (1L << (OLD - 329)) | (1L << (ONLY - 329)) | (1L << (OPEN - 329)) | (1L << (ORADATA - 329)) | (1L << (ORDINALITY - 329)) | (1L << (OSERROR - 329)) | (1L << (OUT - 329)) | (1L << (OUTER - 329)) | (1L << (OVER - 329)) | (1L << (OVERRIDING - 329)) | (1L << (PACKAGE - 329)) | (1L << (PARALLEL_ENABLE - 329)) | (1L << (PARAMETERS - 329)) | (1L << (PARENT - 329)) | (1L << (PARTITION - 329)) | (1L << (PASSING - 329)) | (1L << (PATH - 329)) | (1L << (PIPELINED - 329)) | (1L << (PLAN - 329)) | (1L << (PLS_INTEGER - 329)) | (1L << (POSITIVE - 329)) | (1L << (POSITIVEN - 329)) | (1L << (PRAGMA - 329)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (PREBUILT - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)) | (1L << (PRESENT - 393)) | (1L << (PUBLIC - 393)) | (1L << (RAISE - 393)) | (1L << (RANGE - 393)) | (1L << (RAW - 393)) | (1L << (READ - 393)) | (1L << (REAL - 393)) | (1L << (RECORD - 393)) | (1L << (REDUCED - 393)) | (1L << (REF - 393)) | (1L << (REFERENCE - 393)) | (1L << (REFERENCING - 393)) | (1L << (REFRESH - 393)) | (1L << (REJECT - 393)) | (1L << (RELIES_ON - 393)) | (1L << (RENAME - 393)) | (1L << (REPLACE - 393)) | (1L << (RESPECT - 393)) | (1L << (RESTRICT_REFERENCES - 393)) | (1L << (RESULT - 393)) | (1L << (RESULT_CACHE - 393)) | (1L << (RETURN - 393)) | (1L << (RETURNING - 393)) | (1L << (REUSE - 393)) | (1L << (REVERSE - 393)) | (1L << (REWRITE - 393)) | (1L << (RIGHT - 393)) | (1L << (ROLE - 393)) | (1L << (ROLLBACK - 393)) | (1L << (ROLLUP - 393)) | (1L << (ROW - 393)) | (1L << (ROWID - 393)) | (1L << (ROWS - 393)) | (1L << (RULES - 393)) | (1L << (SAMPLE - 393)) | (1L << (SAVE - 393)) | (1L << (SAVEPOINT - 393)) | (1L << (SCHEMA - 393)) | (1L << (SCHEMACHECK - 393)) | (1L << (SCN - 393)) | (1L << (SECOND - 393)))) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & ((1L << (SEED - 458)) | (1L << (SEGMENT - 458)) | (1L << (SELF - 458)) | (1L << (SEQUENTIAL - 458)) | (1L << (SERIALIZABLE - 458)) | (1L << (SERIALLY_REUSABLE - 458)) | (1L << (SERVERERROR - 458)) | (1L << (SESSIONTIMEZONE - 458)) | (1L << (SET - 458)) | (1L << (SETS - 458)) | (1L << (SETTINGS - 458)) | (1L << (SHOW - 458)) | (1L << (SHUTDOWN - 458)) | (1L << (SIBLINGS - 458)) | (1L << (SIGNTYPE - 458)) | (1L << (SIMPLE_INTEGER - 458)) | (1L << (SINGLE - 458)) | (1L << (SIZE - 458)) | (1L << (SKIP_ - 458)) | (1L << (SMALLINT - 458)) | (1L << (SNAPSHOT - 458)) | (1L << (SOME - 458)) | (1L << (SPECIFICATION - 458)) | (1L << (SQLDATA - 458)) | (1L << (SQLERROR - 458)) | (1L << (STANDALONE - 458)) | (1L << (STARTUP - 458)) | (1L << (STATEMENT - 458)) | (1L << (STATEMENT_ID - 458)) | (1L << (STATIC - 458)) | (1L << (STATISTICS - 458)) | (1L << (STRING - 458)) | (1L << (SUBMULTISET - 458)) | (1L << (SUBPARTITION - 458)) | (1L << (SUBSTITUTABLE - 458)) | (1L << (SUBSTRING - 458)) | (1L << (SUBTYPE - 458)) | (1L << (SUCCESS - 458)) | (1L << (SUSPEND - 458)) | (1L << (TABLES - 458)) | (1L << (TIME - 458)) | (1L << (TIMESTAMP - 458)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 458)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 458)) | (1L << (TIMESTAMP_UNCONSTRAINED - 458)))) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & ((1L << (TIMEZONE_ABBR - 522)) | (1L << (TIMEZONE_HOUR - 522)) | (1L << (TIMEZONE_MINUTE - 522)) | (1L << (TIMEZONE_REGION - 522)) | (1L << (TO_CHAR - 522)) | (1L << (TO_DATE - 522)) | (1L << (TRAILING - 522)) | (1L << (TRANSACTION - 522)) | (1L << (TRANSLATE - 522)) | (1L << (TREAT - 522)) | (1L << (TRIGGER - 522)) | (1L << (TRIM - 522)) | (1L << (TRUNCATE - 522)) | (1L << (TRUSTED - 522)) | (1L << (TYPE - 522)) | (1L << (UNBOUNDED - 522)) | (1L << (UNDER - 522)) | (1L << (UNLIMITED - 522)) | (1L << (UNTIL - 522)) | (1L << (UPDATED - 522)) | (1L << (UPSERT - 522)) | (1L << (UROWID - 522)) | (1L << (USE - 522)) | (1L << (VALIDATE - 522)) | (1L << (VALUE - 522)) | (1L << (VARCHAR - 522)) | (1L << (VARCHAR2 - 522)) | (1L << (VARIABLE - 522)) | (1L << (VARRAY - 522)) | (1L << (VARYING - 522)) | (1L << (VERBOSE - 522)) | (1L << (VERSION - 522)) | (1L << (VERSIONS - 522)) | (1L << (VIEW - 522)) | (1L << (WAIT - 522)) | (1L << (WARNING - 522)) | (1L << (WELLFORMED - 522)) | (1L << (WHENEVER - 522)) | (1L << (WHILE - 522)) | (1L << (WITHOUT - 522)) | (1L << (WITHIN - 522)) | (1L << (WORK - 522)) | (1L << (WRITE - 522)) | (1L << (XML - 522)) | (1L << (XMLAGG - 522)) | (1L << (XMLATTRIBUTES - 522)))) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & ((1L << (XMLCAST - 586)) | (1L << (XMLCOLATTVAL - 586)) | (1L << (XMLELEMENT - 586)) | (1L << (XMLEXISTS - 586)) | (1L << (XMLFOREST - 586)) | (1L << (XMLNAMESPACES - 586)) | (1L << (XMLPARSE - 586)) | (1L << (XMLPI - 586)) | (1L << (XMLQUERY - 586)) | (1L << (XMLROOT - 586)) | (1L << (XMLSERIALIZE - 586)) | (1L << (XMLTABLE - 586)) | (1L << (YEAR - 586)) | (1L << (YES - 586)) | (1L << (YMINTERVAL_UNCONSTRAINED - 586)) | (1L << (ZONE - 586)) | (1L << (PREDICTION - 586)) | (1L << (PREDICTION_BOUNDS - 586)) | (1L << (PREDICTION_COST - 586)) | (1L << (PREDICTION_DETAILS - 586)) | (1L << (PREDICTION_PROBABILITY - 586)) | (1L << (PREDICTION_SET - 586)) | (1L << (CUME_DIST - 586)) | (1L << (DENSE_RANK - 586)) | (1L << (LISTAGG - 586)) | (1L << (PERCENT_RANK - 586)) | (1L << (PERCENTILE_CONT - 586)) | (1L << (PERCENTILE_DISC - 586)) | (1L << (RANK - 586)) | (1L << (AVG - 586)) | (1L << (CORR - 586)) | (1L << (LAG - 586)) | (1L << (LEAD - 586)) | (1L << (MAX - 586)) | (1L << (MEDIAN - 586)) | (1L << (MIN - 586)) | (1L << (NTILE - 586)) | (1L << (RATIO_TO_REPORT - 586)) | (1L << (ROW_NUMBER - 586)) | (1L << (SUM - 586)) | (1L << (VARIANCE - 586)) | (1L << (REGR_ - 586)) | (1L << (STDDEV - 586)) | (1L << (VAR_ - 586)) | (1L << (COVAR_ - 586)) | (1L << (DELIMITED_ID - 586)))) != 0) || _la==REGULAR_ID) {
				{
				setState(5245);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IN) {
					{
					setState(5244);
					match(IN);
					}
				}

				setState(5247);
				type_spec();
				}
			}

			setState(5251);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFAULT || _la==ASSIGN_OP) {
				{
				setState(5250);
				default_value_part();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Exception_declarationContext extends ParserRuleContext {
		public Exception_nameContext exception_name() {
			return getRuleContext(Exception_nameContext.class,0);
		}
		public TerminalNode EXCEPTION() { return getToken(PLSQLParser.EXCEPTION, 0); }
		public TerminalNode SEMICOLON() { return getToken(PLSQLParser.SEMICOLON, 0); }
		public Exception_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exception_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterException_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitException_declaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitException_declaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Exception_declarationContext exception_declaration() throws RecognitionException {
		Exception_declarationContext _localctx = new Exception_declarationContext(_ctx, getState());
		enterRule(_localctx, 544, RULE_exception_declaration);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5253);
			exception_name();
			setState(5254);
			match(EXCEPTION);
			setState(5255);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pragma_declarationContext extends ParserRuleContext {
		public R_idContext id1;
		public TerminalNode PRAGMA() { return getToken(PLSQLParser.PRAGMA, 0); }
		public TerminalNode SEMICOLON() { return getToken(PLSQLParser.SEMICOLON, 0); }
		public TerminalNode SERIALLY_REUSABLE() { return getToken(PLSQLParser.SERIALLY_REUSABLE, 0); }
		public TerminalNode AUTONOMOUS_TRANSACTION() { return getToken(PLSQLParser.AUTONOMOUS_TRANSACTION, 0); }
		public TerminalNode EXCEPTION_INIT() { return getToken(PLSQLParser.EXCEPTION_INIT, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PLSQLParser.LEFT_PAREN, 0); }
		public Exception_nameContext exception_name() {
			return getRuleContext(Exception_nameContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLSQLParser.COMMA, i);
		}
		public Numeric_negativeContext numeric_negative() {
			return getRuleContext(Numeric_negativeContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PLSQLParser.RIGHT_PAREN, 0); }
		public TerminalNode INLINE() { return getToken(PLSQLParser.INLINE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RESTRICT_REFERENCES() { return getToken(PLSQLParser.RESTRICT_REFERENCES, 0); }
		public List<R_idContext> r_id() {
			return getRuleContexts(R_idContext.class);
		}
		public R_idContext r_id(int i) {
			return getRuleContext(R_idContext.class,i);
		}
		public TerminalNode DEFAULT() { return getToken(PLSQLParser.DEFAULT, 0); }
		public Pragma_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pragma_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterPragma_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitPragma_declaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitPragma_declaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Pragma_declarationContext pragma_declaration() throws RecognitionException {
		Pragma_declarationContext _localctx = new Pragma_declarationContext(_ctx, getState());
		enterRule(_localctx, 546, RULE_pragma_declaration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5257);
			match(PRAGMA);
			setState(5288);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SERIALLY_REUSABLE:
				{
				setState(5258);
				match(SERIALLY_REUSABLE);
				}
				break;
			case AUTONOMOUS_TRANSACTION:
				{
				setState(5259);
				match(AUTONOMOUS_TRANSACTION);
				}
				break;
			case EXCEPTION_INIT:
				{
				setState(5260);
				match(EXCEPTION_INIT);
				setState(5261);
				match(LEFT_PAREN);
				setState(5262);
				exception_name();
				setState(5263);
				match(COMMA);
				setState(5264);
				numeric_negative();
				setState(5265);
				match(RIGHT_PAREN);
				}
				break;
			case INLINE:
				{
				setState(5267);
				match(INLINE);
				setState(5268);
				match(LEFT_PAREN);
				setState(5269);
				((Pragma_declarationContext)_localctx).id1 = r_id();
				setState(5270);
				match(COMMA);
				setState(5271);
				expression(0);
				setState(5272);
				match(RIGHT_PAREN);
				}
				break;
			case RESTRICT_REFERENCES:
				{
				setState(5274);
				match(RESTRICT_REFERENCES);
				setState(5275);
				match(LEFT_PAREN);
				setState(5278);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case A_LETTER:
				case ADD:
				case AFTER:
				case AGENT:
				case AGGREGATE:
				case ANALYZE:
				case ARRAY:
				case ASSOCIATE:
				case AT:
				case ATTRIBUTE:
				case AUDIT:
				case AUTHID:
				case AUTO:
				case AUTOMATIC:
				case AUTONOMOUS_TRANSACTION:
				case BATCH:
				case BEFORE:
				case BFILE:
				case BINARY_DOUBLE:
				case BINARY_FLOAT:
				case BINARY_INTEGER:
				case BUILD:
				case BLOB:
				case BLOCK:
				case BODY:
				case BOOLEAN:
				case BOTH:
				case BULK:
				case BYTE:
				case C_LETTER:
				case CALL:
				case CANONICAL:
				case CASCADE:
				case CAST:
				case CHAR:
				case CHAR_CS:
				case CHARACTER:
				case CHR:
				case CLOB:
				case CLOSE:
				case CLUSTER:
				case COALESCE:
				case COLLECT:
				case COLUMNS:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case COMPATIBILITY:
				case COMPILE:
				case COMPLETE:
				case COMPOUND:
				case CONCAT:
				case CONSTANT:
				case CONSTRAINT:
				case CONSTRAINTS:
				case CONSTRUCTOR:
				case CONTENT:
				case CONTEXT:
				case CONTINUE:
				case CONVERT:
				case CORRUPT_XID:
				case CORRUPT_XID_ALL:
				case COST:
				case COUNT:
				case CROSS:
				case CUBE:
				case CURRENT_USER:
				case CURSOR:
				case CUSTOMDATUM:
				case CYCLE:
				case DATA:
				case DATABASE:
				case DATE:
				case DAY:
				case DB_ROLE_CHANGE:
				case DBTIMEZONE:
				case DDL:
				case DEBUG:
				case DEC:
				case DECIMAL:
				case DECODE:
				case DECOMPOSE:
				case DECREMENT:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DEMAND:
				case DETERMINISTIC:
				case DIMENSION:
				case DISABLE:
				case DISASSOCIATE:
				case DOCUMENT:
				case DOUBLE:
				case DSINTERVAL_UNCONSTRAINED:
				case EACH:
				case EDITIONING:
				case ELEMENT:
				case EMPTY:
				case ENABLE:
				case ENCODING:
				case ENFORCED:
				case ENTITYESCAPING:
				case ERR:
				case ERRORS:
				case ESCAPE:
				case EVALNAME:
				case EXCEPTION:
				case EXCEPTION_INIT:
				case EXCEPTIONS:
				case EXCLUDE:
				case EXECUTE:
				case EXIT:
				case EXPLAIN:
				case EXTERNAL:
				case EXTRACT:
				case FAILURE:
				case FAST:
				case FINAL:
				case FIRST:
				case FIRST_VALUE:
				case FLOAT:
				case FOLLOWING:
				case FOLLOWS:
				case FORALL:
				case FORCE:
				case FULL:
				case FUNCTION:
				case GROUPING:
				case HASH:
				case HIDE:
				case HOUR:
				case IGNORE:
				case IMMEDIATE:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDENT:
				case INDEXED:
				case INDICATOR:
				case INDICES:
				case INFINITE:
				case INLINE:
				case INNER:
				case INOUT:
				case INSTANTIABLE:
				case INSTEAD:
				case INT:
				case INTEGER:
				case INTERVAL:
				case INVALIDATE:
				case ISOLATION:
				case ITERATE:
				case JAVA:
				case JOIN:
				case KEEP:
				case LANGUAGE:
				case LAST:
				case LAST_VALUE:
				case LEADING:
				case LEFT:
				case LEVEL:
				case LIBRARY:
				case LIKE2:
				case LIKE4:
				case LIKEC:
				case LIMIT:
				case LIST:
				case LOCAL:
				case LOCKED:
				case LOG:
				case LOGOFF:
				case LOGON:
				case LONG:
				case LOOP:
				case MAIN:
				case MAP:
				case MASTER:
				case MATCHED:
				case MAXVALUE:
				case MEASURES:
				case MEMBER:
				case MERGE:
				case MINUTE:
				case MINVALUE:
				case MLSLABEL:
				case MODEL:
				case MODIFY:
				case MONTH:
				case MULTISET:
				case NAME:
				case NAN:
				case NATURAL:
				case NATURALN:
				case NAV:
				case NCHAR:
				case NCHAR_CS:
				case NCLOB:
				case NESTED:
				case NEVER:
				case NEW:
				case NO:
				case NOAUDIT:
				case NOCOPY:
				case NOCYCLE:
				case NOENTITYESCAPING:
				case NONE:
				case NOSCHEMACHECK:
				case NVL:
				case NULLS:
				case NUMBER:
				case NUMERIC:
				case NVARCHAR2:
				case MATERIALIZED:
				case OBJECT:
				case OFF:
				case OID:
				case OLD:
				case ONLY:
				case OPEN:
				case ORADATA:
				case ORDINALITY:
				case OSERROR:
				case OUT:
				case OUTER:
				case OVER:
				case OVERRIDING:
				case PACKAGE:
				case PARALLEL_ENABLE:
				case PARAMETERS:
				case PARENT:
				case PARTITION:
				case PASSING:
				case PATH:
				case PIPELINED:
				case PLAN:
				case PLS_INTEGER:
				case POSITIVE:
				case POSITIVEN:
				case PRAGMA:
				case PREBUILT:
				case PRECEDING:
				case PRECISION:
				case PRESENT:
				case PUBLIC:
				case RAISE:
				case RANGE:
				case RAW:
				case READ:
				case REAL:
				case RECORD:
				case REDUCED:
				case REF:
				case REFERENCE:
				case REFERENCING:
				case REFRESH:
				case REJECT:
				case RELIES_ON:
				case RENAME:
				case REPLACE:
				case RESPECT:
				case RESTRICT_REFERENCES:
				case RESULT:
				case RESULT_CACHE:
				case RETURN:
				case RETURNING:
				case REUSE:
				case REVERSE:
				case REWRITE:
				case RIGHT:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROW:
				case ROWID:
				case ROWS:
				case RULES:
				case SAMPLE:
				case SAVE:
				case SAVEPOINT:
				case SCHEMA:
				case SCHEMACHECK:
				case SCN:
				case SECOND:
				case SEED:
				case SEGMENT:
				case SELF:
				case SEQUENTIAL:
				case SERIALIZABLE:
				case SERIALLY_REUSABLE:
				case SERVERERROR:
				case SESSIONTIMEZONE:
				case SET:
				case SETS:
				case SETTINGS:
				case SHOW:
				case SHUTDOWN:
				case SIBLINGS:
				case SIGNTYPE:
				case SIMPLE_INTEGER:
				case SINGLE:
				case SIZE:
				case SKIP_:
				case SMALLINT:
				case SNAPSHOT:
				case SOME:
				case SPECIFICATION:
				case SQLDATA:
				case SQLERROR:
				case STANDALONE:
				case STARTUP:
				case STATEMENT:
				case STATEMENT_ID:
				case STATIC:
				case STATISTICS:
				case STRING:
				case SUBMULTISET:
				case SUBPARTITION:
				case SUBSTITUTABLE:
				case SUBSTRING:
				case SUBTYPE:
				case SUCCESS:
				case SUSPEND:
				case TABLES:
				case TIME:
				case TIMESTAMP:
				case TIMESTAMP_LTZ_UNCONSTRAINED:
				case TIMESTAMP_TZ_UNCONSTRAINED:
				case TIMESTAMP_UNCONSTRAINED:
				case TIMEZONE_ABBR:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TIMEZONE_REGION:
				case TO_CHAR:
				case TO_DATE:
				case TRAILING:
				case TRANSACTION:
				case TRANSLATE:
				case TREAT:
				case TRIGGER:
				case TRIM:
				case TRUNCATE:
				case TRUSTED:
				case TYPE:
				case UNBOUNDED:
				case UNDER:
				case UNLIMITED:
				case UNTIL:
				case UPDATED:
				case UPSERT:
				case UROWID:
				case USE:
				case VALIDATE:
				case VALUE:
				case VARCHAR:
				case VARCHAR2:
				case VARIABLE:
				case VARRAY:
				case VARYING:
				case VERBOSE:
				case VERSION:
				case VERSIONS:
				case VIEW:
				case WAIT:
				case WARNING:
				case WELLFORMED:
				case WHENEVER:
				case WHILE:
				case WITHOUT:
				case WITHIN:
				case WORK:
				case WRITE:
				case XML:
				case XMLAGG:
				case XMLATTRIBUTES:
				case XMLCAST:
				case XMLCOLATTVAL:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLQUERY:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case YEAR:
				case YES:
				case YMINTERVAL_UNCONSTRAINED:
				case ZONE:
				case PREDICTION:
				case PREDICTION_BOUNDS:
				case PREDICTION_COST:
				case PREDICTION_DETAILS:
				case PREDICTION_PROBABILITY:
				case PREDICTION_SET:
				case CUME_DIST:
				case DENSE_RANK:
				case LISTAGG:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case RANK:
				case AVG:
				case CORR:
				case LAG:
				case LEAD:
				case MAX:
				case MEDIAN:
				case MIN:
				case NTILE:
				case RATIO_TO_REPORT:
				case ROW_NUMBER:
				case SUM:
				case VARIANCE:
				case REGR_:
				case STDDEV:
				case VAR_:
				case COVAR_:
				case DELIMITED_ID:
				case REGULAR_ID:
					{
					setState(5276);
					r_id();
					}
					break;
				case DEFAULT:
					{
					setState(5277);
					match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5282); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(5280);
					match(COMMA);
					setState(5281);
					r_id();
					}
					}
					setState(5284); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==COMMA );
				setState(5286);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(5290);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Record_declarationContext extends ParserRuleContext {
		public Record_type_decContext record_type_dec() {
			return getRuleContext(Record_type_decContext.class,0);
		}
		public Record_var_decContext record_var_dec() {
			return getRuleContext(Record_var_decContext.class,0);
		}
		public Record_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_record_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterRecord_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitRecord_declaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitRecord_declaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Record_declarationContext record_declaration() throws RecognitionException {
		Record_declarationContext _localctx = new Record_declarationContext(_ctx, getState());
		enterRule(_localctx, 548, RULE_record_declaration);
		try {
			setState(5294);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,747,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5292);
				record_type_dec();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5293);
				record_var_dec();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Record_type_decContext extends ParserRuleContext {
		public TerminalNode TYPE() { return getToken(PLSQLParser.TYPE, 0); }
		public Type_nameContext type_name() {
			return getRuleContext(Type_nameContext.class,0);
		}
		public TerminalNode IS() { return getToken(PLSQLParser.IS, 0); }
		public TerminalNode SEMICOLON() { return getToken(PLSQLParser.SEMICOLON, 0); }
		public TerminalNode RECORD() { return getToken(PLSQLParser.RECORD, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PLSQLParser.LEFT_PAREN, 0); }
		public List<Field_specContext> field_spec() {
			return getRuleContexts(Field_specContext.class);
		}
		public Field_specContext field_spec(int i) {
			return getRuleContext(Field_specContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PLSQLParser.RIGHT_PAREN, 0); }
		public TerminalNode REF() { return getToken(PLSQLParser.REF, 0); }
		public TerminalNode CURSOR() { return getToken(PLSQLParser.CURSOR, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PLSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLSQLParser.COMMA, i);
		}
		public TerminalNode RETURN() { return getToken(PLSQLParser.RETURN, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public Record_type_decContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_record_type_dec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterRecord_type_dec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitRecord_type_dec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitRecord_type_dec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Record_type_decContext record_type_dec() throws RecognitionException {
		Record_type_decContext _localctx = new Record_type_decContext(_ctx, getState());
		enterRule(_localctx, 550, RULE_record_type_dec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5296);
			match(TYPE);
			setState(5297);
			type_name();
			setState(5298);
			match(IS);
			setState(5317);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case RECORD:
				{
				setState(5299);
				match(RECORD);
				setState(5300);
				match(LEFT_PAREN);
				setState(5301);
				field_spec();
				setState(5306);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5302);
					match(COMMA);
					setState(5303);
					field_spec();
					}
					}
					setState(5308);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(5309);
				match(RIGHT_PAREN);
				}
				break;
			case REF:
				{
				setState(5311);
				match(REF);
				setState(5312);
				match(CURSOR);
				setState(5315);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==RETURN) {
					{
					setState(5313);
					match(RETURN);
					setState(5314);
					type_spec();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(5319);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Field_specContext extends ParserRuleContext {
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode NOT() { return getToken(PLSQLParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(PLSQLParser.NULL, 0); }
		public Default_value_partContext default_value_part() {
			return getRuleContext(Default_value_partContext.class,0);
		}
		public Field_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_field_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterField_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitField_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitField_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Field_specContext field_spec() throws RecognitionException {
		Field_specContext _localctx = new Field_specContext(_ctx, getState());
		enterRule(_localctx, 552, RULE_field_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5321);
			column_name();
			setState(5323);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BUILD) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (CHR - 65)) | (1L << (CLOB - 65)) | (1L << (CLOSE - 65)) | (1L << (CLUSTER - 65)) | (1L << (COALESCE - 65)) | (1L << (COLLECT - 65)) | (1L << (COLUMNS - 65)) | (1L << (COMMENT - 65)) | (1L << (COMMIT - 65)) | (1L << (COMMITTED - 65)) | (1L << (COMPATIBILITY - 65)) | (1L << (COMPILE - 65)) | (1L << (COMPLETE - 65)) | (1L << (COMPOUND - 65)) | (1L << (CONCAT - 65)) | (1L << (CONSTANT - 65)) | (1L << (CONSTRAINT - 65)) | (1L << (CONSTRAINTS - 65)) | (1L << (CONSTRUCTOR - 65)) | (1L << (CONTENT - 65)) | (1L << (CONTEXT - 65)) | (1L << (CONTINUE - 65)) | (1L << (CONVERT - 65)) | (1L << (CORRUPT_XID - 65)) | (1L << (CORRUPT_XID_ALL - 65)) | (1L << (COST - 65)) | (1L << (COUNT - 65)) | (1L << (CROSS - 65)) | (1L << (CUBE - 65)) | (1L << (CURRENT_USER - 65)) | (1L << (CURSOR - 65)) | (1L << (CUSTOMDATUM - 65)) | (1L << (CYCLE - 65)) | (1L << (DATA - 65)) | (1L << (DATABASE - 65)) | (1L << (DATE - 65)) | (1L << (DAY - 65)) | (1L << (DB_ROLE_CHANGE - 65)) | (1L << (DBTIMEZONE - 65)) | (1L << (DDL - 65)) | (1L << (DEBUG - 65)) | (1L << (DEC - 65)) | (1L << (DECIMAL - 65)) | (1L << (DECODE - 65)) | (1L << (DECOMPOSE - 65)) | (1L << (DECREMENT - 65)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DEMAND - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (EDITIONING - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENFORCED - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FAST - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)) | (1L << (FOLLOWING - 129)) | (1L << (FOLLOWS - 129)) | (1L << (FORALL - 129)) | (1L << (FORCE - 129)))) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & ((1L << (FULL - 197)) | (1L << (FUNCTION - 197)) | (1L << (GROUPING - 197)) | (1L << (HASH - 197)) | (1L << (HIDE - 197)) | (1L << (HOUR - 197)) | (1L << (IGNORE - 197)) | (1L << (IMMEDIATE - 197)) | (1L << (INCLUDE - 197)) | (1L << (INCLUDING - 197)) | (1L << (INCREMENT - 197)) | (1L << (INDENT - 197)) | (1L << (INDEXED - 197)) | (1L << (INDICATOR - 197)) | (1L << (INDICES - 197)) | (1L << (INFINITE - 197)) | (1L << (INLINE - 197)) | (1L << (INNER - 197)) | (1L << (INOUT - 197)) | (1L << (INSTANTIABLE - 197)) | (1L << (INSTEAD - 197)) | (1L << (INT - 197)) | (1L << (INTEGER - 197)) | (1L << (INTERVAL - 197)) | (1L << (INVALIDATE - 197)) | (1L << (ISOLATION - 197)) | (1L << (ITERATE - 197)) | (1L << (JAVA - 197)) | (1L << (JOIN - 197)) | (1L << (KEEP - 197)) | (1L << (LANGUAGE - 197)) | (1L << (LAST - 197)) | (1L << (LAST_VALUE - 197)) | (1L << (LEADING - 197)) | (1L << (LEFT - 197)) | (1L << (LEVEL - 197)))) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & ((1L << (LIBRARY - 261)) | (1L << (LIKE2 - 261)) | (1L << (LIKE4 - 261)) | (1L << (LIKEC - 261)) | (1L << (LIMIT - 261)) | (1L << (LIST - 261)) | (1L << (LOCAL - 261)) | (1L << (LOCKED - 261)) | (1L << (LOG - 261)) | (1L << (LOGOFF - 261)) | (1L << (LOGON - 261)) | (1L << (LONG - 261)) | (1L << (LOOP - 261)) | (1L << (MAIN - 261)) | (1L << (MAP - 261)) | (1L << (MASTER - 261)) | (1L << (MATCHED - 261)) | (1L << (MAXVALUE - 261)) | (1L << (MEASURES - 261)) | (1L << (MEMBER - 261)) | (1L << (MERGE - 261)) | (1L << (MINUTE - 261)) | (1L << (MINVALUE - 261)) | (1L << (MLSLABEL - 261)) | (1L << (MODEL - 261)) | (1L << (MODIFY - 261)) | (1L << (MONTH - 261)) | (1L << (MULTISET - 261)) | (1L << (NAME - 261)) | (1L << (NAN - 261)) | (1L << (NATURAL - 261)) | (1L << (NATURALN - 261)) | (1L << (NAV - 261)) | (1L << (NCHAR - 261)) | (1L << (NCHAR_CS - 261)) | (1L << (NCLOB - 261)) | (1L << (NESTED - 261)) | (1L << (NEVER - 261)) | (1L << (NEW - 261)) | (1L << (NO - 261)) | (1L << (NOAUDIT - 261)) | (1L << (NOCOPY - 261)) | (1L << (NOCYCLE - 261)) | (1L << (NOENTITYESCAPING - 261)))) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & ((1L << (NONE - 329)) | (1L << (NOSCHEMACHECK - 329)) | (1L << (NVL - 329)) | (1L << (NULLS - 329)) | (1L << (NUMBER - 329)) | (1L << (NUMERIC - 329)) | (1L << (NVARCHAR2 - 329)) | (1L << (MATERIALIZED - 329)) | (1L << (OBJECT - 329)) | (1L << (OFF - 329)) | (1L << (OID - 329)) | (1L << (OLD - 329)) | (1L << (ONLY - 329)) | (1L << (OPEN - 329)) | (1L << (ORADATA - 329)) | (1L << (ORDINALITY - 329)) | (1L << (OSERROR - 329)) | (1L << (OUT - 329)) | (1L << (OUTER - 329)) | (1L << (OVER - 329)) | (1L << (OVERRIDING - 329)) | (1L << (PACKAGE - 329)) | (1L << (PARALLEL_ENABLE - 329)) | (1L << (PARAMETERS - 329)) | (1L << (PARENT - 329)) | (1L << (PARTITION - 329)) | (1L << (PASSING - 329)) | (1L << (PATH - 329)) | (1L << (PIPELINED - 329)) | (1L << (PLAN - 329)) | (1L << (PLS_INTEGER - 329)) | (1L << (POSITIVE - 329)) | (1L << (POSITIVEN - 329)) | (1L << (PRAGMA - 329)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (PREBUILT - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)) | (1L << (PRESENT - 393)) | (1L << (PUBLIC - 393)) | (1L << (RAISE - 393)) | (1L << (RANGE - 393)) | (1L << (RAW - 393)) | (1L << (READ - 393)) | (1L << (REAL - 393)) | (1L << (RECORD - 393)) | (1L << (REDUCED - 393)) | (1L << (REF - 393)) | (1L << (REFERENCE - 393)) | (1L << (REFERENCING - 393)) | (1L << (REFRESH - 393)) | (1L << (REJECT - 393)) | (1L << (RELIES_ON - 393)) | (1L << (RENAME - 393)) | (1L << (REPLACE - 393)) | (1L << (RESPECT - 393)) | (1L << (RESTRICT_REFERENCES - 393)) | (1L << (RESULT - 393)) | (1L << (RESULT_CACHE - 393)) | (1L << (RETURN - 393)) | (1L << (RETURNING - 393)) | (1L << (REUSE - 393)) | (1L << (REVERSE - 393)) | (1L << (REWRITE - 393)) | (1L << (RIGHT - 393)) | (1L << (ROLE - 393)) | (1L << (ROLLBACK - 393)) | (1L << (ROLLUP - 393)) | (1L << (ROW - 393)) | (1L << (ROWID - 393)) | (1L << (ROWS - 393)) | (1L << (RULES - 393)) | (1L << (SAMPLE - 393)) | (1L << (SAVE - 393)) | (1L << (SAVEPOINT - 393)) | (1L << (SCHEMA - 393)) | (1L << (SCHEMACHECK - 393)) | (1L << (SCN - 393)) | (1L << (SECOND - 393)))) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & ((1L << (SEED - 458)) | (1L << (SEGMENT - 458)) | (1L << (SELF - 458)) | (1L << (SEQUENTIAL - 458)) | (1L << (SERIALIZABLE - 458)) | (1L << (SERIALLY_REUSABLE - 458)) | (1L << (SERVERERROR - 458)) | (1L << (SESSIONTIMEZONE - 458)) | (1L << (SET - 458)) | (1L << (SETS - 458)) | (1L << (SETTINGS - 458)) | (1L << (SHOW - 458)) | (1L << (SHUTDOWN - 458)) | (1L << (SIBLINGS - 458)) | (1L << (SIGNTYPE - 458)) | (1L << (SIMPLE_INTEGER - 458)) | (1L << (SINGLE - 458)) | (1L << (SIZE - 458)) | (1L << (SKIP_ - 458)) | (1L << (SMALLINT - 458)) | (1L << (SNAPSHOT - 458)) | (1L << (SOME - 458)) | (1L << (SPECIFICATION - 458)) | (1L << (SQLDATA - 458)) | (1L << (SQLERROR - 458)) | (1L << (STANDALONE - 458)) | (1L << (STARTUP - 458)) | (1L << (STATEMENT - 458)) | (1L << (STATEMENT_ID - 458)) | (1L << (STATIC - 458)) | (1L << (STATISTICS - 458)) | (1L << (STRING - 458)) | (1L << (SUBMULTISET - 458)) | (1L << (SUBPARTITION - 458)) | (1L << (SUBSTITUTABLE - 458)) | (1L << (SUBSTRING - 458)) | (1L << (SUBTYPE - 458)) | (1L << (SUCCESS - 458)) | (1L << (SUSPEND - 458)) | (1L << (TABLES - 458)) | (1L << (TIME - 458)) | (1L << (TIMESTAMP - 458)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 458)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 458)) | (1L << (TIMESTAMP_UNCONSTRAINED - 458)))) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & ((1L << (TIMEZONE_ABBR - 522)) | (1L << (TIMEZONE_HOUR - 522)) | (1L << (TIMEZONE_MINUTE - 522)) | (1L << (TIMEZONE_REGION - 522)) | (1L << (TO_CHAR - 522)) | (1L << (TO_DATE - 522)) | (1L << (TRAILING - 522)) | (1L << (TRANSACTION - 522)) | (1L << (TRANSLATE - 522)) | (1L << (TREAT - 522)) | (1L << (TRIGGER - 522)) | (1L << (TRIM - 522)) | (1L << (TRUNCATE - 522)) | (1L << (TRUSTED - 522)) | (1L << (TYPE - 522)) | (1L << (UNBOUNDED - 522)) | (1L << (UNDER - 522)) | (1L << (UNLIMITED - 522)) | (1L << (UNTIL - 522)) | (1L << (UPDATED - 522)) | (1L << (UPSERT - 522)) | (1L << (UROWID - 522)) | (1L << (USE - 522)) | (1L << (VALIDATE - 522)) | (1L << (VALUE - 522)) | (1L << (VARCHAR - 522)) | (1L << (VARCHAR2 - 522)) | (1L << (VARIABLE - 522)) | (1L << (VARRAY - 522)) | (1L << (VARYING - 522)) | (1L << (VERBOSE - 522)) | (1L << (VERSION - 522)) | (1L << (VERSIONS - 522)) | (1L << (VIEW - 522)) | (1L << (WAIT - 522)) | (1L << (WARNING - 522)) | (1L << (WELLFORMED - 522)) | (1L << (WHENEVER - 522)) | (1L << (WHILE - 522)) | (1L << (WITHOUT - 522)) | (1L << (WITHIN - 522)) | (1L << (WORK - 522)) | (1L << (WRITE - 522)) | (1L << (XML - 522)) | (1L << (XMLAGG - 522)) | (1L << (XMLATTRIBUTES - 522)))) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & ((1L << (XMLCAST - 586)) | (1L << (XMLCOLATTVAL - 586)) | (1L << (XMLELEMENT - 586)) | (1L << (XMLEXISTS - 586)) | (1L << (XMLFOREST - 586)) | (1L << (XMLNAMESPACES - 586)) | (1L << (XMLPARSE - 586)) | (1L << (XMLPI - 586)) | (1L << (XMLQUERY - 586)) | (1L << (XMLROOT - 586)) | (1L << (XMLSERIALIZE - 586)) | (1L << (XMLTABLE - 586)) | (1L << (YEAR - 586)) | (1L << (YES - 586)) | (1L << (YMINTERVAL_UNCONSTRAINED - 586)) | (1L << (ZONE - 586)) | (1L << (PREDICTION - 586)) | (1L << (PREDICTION_BOUNDS - 586)) | (1L << (PREDICTION_COST - 586)) | (1L << (PREDICTION_DETAILS - 586)) | (1L << (PREDICTION_PROBABILITY - 586)) | (1L << (PREDICTION_SET - 586)) | (1L << (CUME_DIST - 586)) | (1L << (DENSE_RANK - 586)) | (1L << (LISTAGG - 586)) | (1L << (PERCENT_RANK - 586)) | (1L << (PERCENTILE_CONT - 586)) | (1L << (PERCENTILE_DISC - 586)) | (1L << (RANK - 586)) | (1L << (AVG - 586)) | (1L << (CORR - 586)) | (1L << (LAG - 586)) | (1L << (LEAD - 586)) | (1L << (MAX - 586)) | (1L << (MEDIAN - 586)) | (1L << (MIN - 586)) | (1L << (NTILE - 586)) | (1L << (RATIO_TO_REPORT - 586)) | (1L << (ROW_NUMBER - 586)) | (1L << (SUM - 586)) | (1L << (VARIANCE - 586)) | (1L << (REGR_ - 586)) | (1L << (STDDEV - 586)) | (1L << (VAR_ - 586)) | (1L << (COVAR_ - 586)) | (1L << (DELIMITED_ID - 586)))) != 0) || _la==REGULAR_ID) {
				{
				setState(5322);
				type_spec();
				}
			}

			setState(5327);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(5325);
				match(NOT);
				setState(5326);
				match(NULL);
				}
			}

			setState(5330);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFAULT || _la==ASSIGN_OP) {
				{
				setState(5329);
				default_value_part();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Record_var_decContext extends ParserRuleContext {
		public Record_nameContext record_name() {
			return getRuleContext(Record_nameContext.class,0);
		}
		public Type_nameContext type_name() {
			return getRuleContext(Type_nameContext.class,0);
		}
		public TerminalNode SEMICOLON() { return getToken(PLSQLParser.SEMICOLON, 0); }
		public TerminalNode PERCENT_ROWTYPE() { return getToken(PLSQLParser.PERCENT_ROWTYPE, 0); }
		public TerminalNode PERCENT_TYPE() { return getToken(PLSQLParser.PERCENT_TYPE, 0); }
		public Record_var_decContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_record_var_dec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterRecord_var_dec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitRecord_var_dec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitRecord_var_dec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Record_var_decContext record_var_dec() throws RecognitionException {
		Record_var_decContext _localctx = new Record_var_decContext(_ctx, getState());
		enterRule(_localctx, 554, RULE_record_var_dec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5332);
			record_name();
			setState(5333);
			type_name();
			setState(5334);
			_la = _input.LA(1);
			if ( !(_la==PERCENT_ROWTYPE || _la==PERCENT_TYPE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5335);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_declarationContext extends ParserRuleContext {
		public TerminalNode SEMICOLON() { return getToken(PLSQLParser.SEMICOLON, 0); }
		public Table_type_decContext table_type_dec() {
			return getRuleContext(Table_type_decContext.class,0);
		}
		public Table_var_decContext table_var_dec() {
			return getRuleContext(Table_var_decContext.class,0);
		}
		public Table_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterTable_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitTable_declaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitTable_declaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_declarationContext table_declaration() throws RecognitionException {
		Table_declarationContext _localctx = new Table_declarationContext(_ctx, getState());
		enterRule(_localctx, 556, RULE_table_declaration);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5339);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,754,_ctx) ) {
			case 1:
				{
				setState(5337);
				table_type_dec();
				}
				break;
			case 2:
				{
				setState(5338);
				table_var_dec();
				}
				break;
			}
			setState(5341);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_type_decContext extends ParserRuleContext {
		public TerminalNode TYPE() { return getToken(PLSQLParser.TYPE, 0); }
		public Type_nameContext type_name() {
			return getRuleContext(Type_nameContext.class,0);
		}
		public TerminalNode IS() { return getToken(PLSQLParser.IS, 0); }
		public TerminalNode TABLE() { return getToken(PLSQLParser.TABLE, 0); }
		public TerminalNode OF() { return getToken(PLSQLParser.OF, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public Varray_type_defContext varray_type_def() {
			return getRuleContext(Varray_type_defContext.class,0);
		}
		public Table_indexed_by_partContext table_indexed_by_part() {
			return getRuleContext(Table_indexed_by_partContext.class,0);
		}
		public TerminalNode NOT() { return getToken(PLSQLParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(PLSQLParser.NULL, 0); }
		public Table_type_decContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_type_dec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterTable_type_dec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitTable_type_dec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitTable_type_dec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_type_decContext table_type_dec() throws RecognitionException {
		Table_type_decContext _localctx = new Table_type_decContext(_ctx, getState());
		enterRule(_localctx, 558, RULE_table_type_dec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5343);
			match(TYPE);
			setState(5344);
			type_name();
			setState(5345);
			match(IS);
			setState(5357);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TABLE:
				{
				setState(5346);
				match(TABLE);
				setState(5347);
				match(OF);
				setState(5348);
				type_spec();
				setState(5350);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INDEX || _la==INDEXED) {
					{
					setState(5349);
					table_indexed_by_part();
					}
				}

				setState(5354);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(5352);
					match(NOT);
					setState(5353);
					match(NULL);
					}
				}

				}
				break;
			case VARRAY:
			case VARYING:
				{
				setState(5356);
				varray_type_def();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_indexed_by_partContext extends ParserRuleContext {
		public Token idx1;
		public Token idx2;
		public TerminalNode BY() { return getToken(PLSQLParser.BY, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode INDEXED() { return getToken(PLSQLParser.INDEXED, 0); }
		public TerminalNode INDEX() { return getToken(PLSQLParser.INDEX, 0); }
		public Table_indexed_by_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_indexed_by_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterTable_indexed_by_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitTable_indexed_by_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitTable_indexed_by_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_indexed_by_partContext table_indexed_by_part() throws RecognitionException {
		Table_indexed_by_partContext _localctx = new Table_indexed_by_partContext(_ctx, getState());
		enterRule(_localctx, 560, RULE_table_indexed_by_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5361);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INDEXED:
				{
				setState(5359);
				((Table_indexed_by_partContext)_localctx).idx1 = match(INDEXED);
				}
				break;
			case INDEX:
				{
				setState(5360);
				((Table_indexed_by_partContext)_localctx).idx2 = match(INDEX);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(5363);
			match(BY);
			setState(5364);
			type_spec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Varray_type_defContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(PLSQLParser.LEFT_PAREN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PLSQLParser.RIGHT_PAREN, 0); }
		public TerminalNode OF() { return getToken(PLSQLParser.OF, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode VARRAY() { return getToken(PLSQLParser.VARRAY, 0); }
		public TerminalNode VARYING() { return getToken(PLSQLParser.VARYING, 0); }
		public TerminalNode ARRAY() { return getToken(PLSQLParser.ARRAY, 0); }
		public TerminalNode NOT() { return getToken(PLSQLParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(PLSQLParser.NULL, 0); }
		public Varray_type_defContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_varray_type_def; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterVarray_type_def(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitVarray_type_def(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitVarray_type_def(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Varray_type_defContext varray_type_def() throws RecognitionException {
		Varray_type_defContext _localctx = new Varray_type_defContext(_ctx, getState());
		enterRule(_localctx, 562, RULE_varray_type_def);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5369);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case VARRAY:
				{
				setState(5366);
				match(VARRAY);
				}
				break;
			case VARYING:
				{
				setState(5367);
				match(VARYING);
				setState(5368);
				match(ARRAY);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(5371);
			match(LEFT_PAREN);
			setState(5372);
			expression(0);
			setState(5373);
			match(RIGHT_PAREN);
			setState(5374);
			match(OF);
			setState(5375);
			type_spec();
			setState(5378);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,760,_ctx) ) {
			case 1:
				{
				setState(5376);
				match(NOT);
				setState(5377);
				match(NULL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_var_decContext extends ParserRuleContext {
		public Table_var_nameContext table_var_name() {
			return getRuleContext(Table_var_nameContext.class,0);
		}
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public Table_var_decContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_var_dec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterTable_var_dec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitTable_var_dec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitTable_var_dec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_var_decContext table_var_dec() throws RecognitionException {
		Table_var_decContext _localctx = new Table_var_decContext(_ctx, getState());
		enterRule(_localctx, 564, RULE_table_var_dec);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5380);
			table_var_name();
			setState(5381);
			type_spec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Seq_of_statementsContext extends ParserRuleContext {
		public List<StatementContext> statement() {
			return getRuleContexts(StatementContext.class);
		}
		public StatementContext statement(int i) {
			return getRuleContext(StatementContext.class,i);
		}
		public List<Label_declarationContext> label_declaration() {
			return getRuleContexts(Label_declarationContext.class);
		}
		public Label_declarationContext label_declaration(int i) {
			return getRuleContext(Label_declarationContext.class,i);
		}
		public List<TerminalNode> SEMICOLON() { return getTokens(PLSQLParser.SEMICOLON); }
		public TerminalNode SEMICOLON(int i) {
			return getToken(PLSQLParser.SEMICOLON, i);
		}
		public List<TerminalNode> EOF() { return getTokens(PLSQLParser.EOF); }
		public TerminalNode EOF(int i) {
			return getToken(PLSQLParser.EOF, i);
		}
		public Seq_of_statementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_seq_of_statements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterSeq_of_statements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitSeq_of_statements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitSeq_of_statements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Seq_of_statementsContext seq_of_statements() throws RecognitionException {
		Seq_of_statementsContext _localctx = new Seq_of_statementsContext(_ctx, getState());
		enterRule(_localctx, 566, RULE_seq_of_statements);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(5387); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					setState(5387);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case A_LETTER:
					case ADD:
					case AFTER:
					case AGENT:
					case AGGREGATE:
					case ALTER:
					case ANALYZE:
					case ARRAY:
					case ASSOCIATE:
					case AT:
					case ATTRIBUTE:
					case AUDIT:
					case AUTHID:
					case AUTO:
					case AUTOMATIC:
					case AUTONOMOUS_TRANSACTION:
					case BATCH:
					case BEFORE:
					case BEGIN:
					case BFILE:
					case BINARY_DOUBLE:
					case BINARY_FLOAT:
					case BINARY_INTEGER:
					case BUILD:
					case BLOB:
					case BLOCK:
					case BODY:
					case BOOLEAN:
					case BOTH:
					case BULK:
					case BYTE:
					case C_LETTER:
					case CALL:
					case CANONICAL:
					case CASCADE:
					case CASE:
					case CAST:
					case CHAR:
					case CHAR_CS:
					case CHARACTER:
					case CHR:
					case CLOB:
					case CLOSE:
					case CLUSTER:
					case COALESCE:
					case COLLECT:
					case COLUMNS:
					case COMMENT:
					case COMMIT:
					case COMMITTED:
					case COMPATIBILITY:
					case COMPILE:
					case COMPLETE:
					case COMPOUND:
					case CONCAT:
					case CONSTANT:
					case CONSTRAINT:
					case CONSTRAINTS:
					case CONSTRUCTOR:
					case CONTENT:
					case CONTEXT:
					case CONTINUE:
					case CONVERT:
					case CORRUPT_XID:
					case CORRUPT_XID_ALL:
					case COST:
					case COUNT:
					case CREATE:
					case CROSS:
					case CUBE:
					case CURRENT_USER:
					case CURSOR:
					case CUSTOMDATUM:
					case CYCLE:
					case DATA:
					case DATABASE:
					case DATE:
					case DAY:
					case DB_ROLE_CHANGE:
					case DBTIMEZONE:
					case DDL:
					case DEBUG:
					case DEC:
					case DECIMAL:
					case DECLARE:
					case DECODE:
					case DECOMPOSE:
					case DECREMENT:
					case DEFAULTS:
					case DEFERRED:
					case DEFINER:
					case DELETE:
					case DEMAND:
					case DETERMINISTIC:
					case DIMENSION:
					case DISABLE:
					case DISASSOCIATE:
					case DOCUMENT:
					case DOUBLE:
					case DSINTERVAL_UNCONSTRAINED:
					case EACH:
					case EDITIONING:
					case ELEMENT:
					case EMPTY:
					case ENABLE:
					case ENCODING:
					case ENFORCED:
					case ENTITYESCAPING:
					case ERR:
					case ERRORS:
					case ESCAPE:
					case EVALNAME:
					case EXCEPTION:
					case EXCEPTION_INIT:
					case EXCEPTIONS:
					case EXCLUDE:
					case EXECUTE:
					case EXIT:
					case EXPLAIN:
					case EXTERNAL:
					case EXTRACT:
					case FAILURE:
					case FAST:
					case FETCH:
					case FINAL:
					case FIRST:
					case FIRST_VALUE:
					case FLOAT:
					case FOLLOWING:
					case FOLLOWS:
					case FOR:
					case FORALL:
					case FORCE:
					case FULL:
					case FUNCTION:
					case GOTO:
					case GRANT:
					case GROUPING:
					case HASH:
					case HIDE:
					case HOUR:
					case IF:
					case IGNORE:
					case IMMEDIATE:
					case INCLUDE:
					case INCLUDING:
					case INCREMENT:
					case INDENT:
					case INDEXED:
					case INDICATOR:
					case INDICES:
					case INFINITE:
					case INLINE:
					case INNER:
					case INOUT:
					case INSERT:
					case INSTANTIABLE:
					case INSTEAD:
					case INT:
					case INTEGER:
					case INTERVAL:
					case INVALIDATE:
					case ISOLATION:
					case ITERATE:
					case JAVA:
					case JOIN:
					case KEEP:
					case LANGUAGE:
					case LAST:
					case LAST_VALUE:
					case LEADING:
					case LEFT:
					case LEVEL:
					case LIBRARY:
					case LIKE2:
					case LIKE4:
					case LIKEC:
					case LIMIT:
					case LIST:
					case LOCAL:
					case LOCK:
					case LOCKED:
					case LOG:
					case LOGOFF:
					case LOGON:
					case LONG:
					case LOOP:
					case MAIN:
					case MAP:
					case MASTER:
					case MATCHED:
					case MAXVALUE:
					case MEASURES:
					case MEMBER:
					case MERGE:
					case MINUTE:
					case MINVALUE:
					case MLSLABEL:
					case MODEL:
					case MODIFY:
					case MONTH:
					case MULTISET:
					case NAME:
					case NAN:
					case NATURAL:
					case NATURALN:
					case NAV:
					case NCHAR:
					case NCHAR_CS:
					case NCLOB:
					case NESTED:
					case NEVER:
					case NEW:
					case NO:
					case NOAUDIT:
					case NOCOPY:
					case NOCYCLE:
					case NOENTITYESCAPING:
					case NONE:
					case NOSCHEMACHECK:
					case NVL:
					case NULL:
					case NULLS:
					case NUMBER:
					case NUMERIC:
					case NVARCHAR2:
					case MATERIALIZED:
					case OBJECT:
					case OFF:
					case OID:
					case OLD:
					case ONLY:
					case OPEN:
					case ORADATA:
					case ORDINALITY:
					case OSERROR:
					case OUT:
					case OUTER:
					case OVER:
					case OVERRIDING:
					case PACKAGE:
					case PARALLEL_ENABLE:
					case PARAMETERS:
					case PARENT:
					case PARTITION:
					case PASSING:
					case PATH:
					case PIPELINED:
					case PLAN:
					case PLS_INTEGER:
					case POSITIVE:
					case POSITIVEN:
					case PRAGMA:
					case PREBUILT:
					case PRECEDING:
					case PRECISION:
					case PRESENT:
					case PROCEDURE:
					case PUBLIC:
					case RAISE:
					case RANGE:
					case RAW:
					case READ:
					case REAL:
					case RECORD:
					case REDUCED:
					case REF:
					case REFERENCE:
					case REFERENCING:
					case REFRESH:
					case REJECT:
					case RELIES_ON:
					case RENAME:
					case REPLACE:
					case RESPECT:
					case RESTRICT_REFERENCES:
					case RESULT:
					case RESULT_CACHE:
					case RETURN:
					case RETURNING:
					case REUSE:
					case REVERSE:
					case REWRITE:
					case RIGHT:
					case ROLE:
					case ROLLBACK:
					case ROLLUP:
					case ROW:
					case ROWID:
					case ROWS:
					case RULES:
					case SAMPLE:
					case SAVE:
					case SAVEPOINT:
					case SCHEMA:
					case SCHEMACHECK:
					case SCN:
					case SECOND:
					case SEED:
					case SEGMENT:
					case SELECT:
					case SELF:
					case SEQUENTIAL:
					case SERIALIZABLE:
					case SERIALLY_REUSABLE:
					case SERVERERROR:
					case SESSIONTIMEZONE:
					case SET:
					case SETS:
					case SETTINGS:
					case SHOW:
					case SHUTDOWN:
					case SIBLINGS:
					case SIGNTYPE:
					case SIMPLE_INTEGER:
					case SINGLE:
					case SIZE:
					case SKIP_:
					case SMALLINT:
					case SNAPSHOT:
					case SOME:
					case SPECIFICATION:
					case SQLDATA:
					case SQLERROR:
					case STANDALONE:
					case STARTUP:
					case STATEMENT:
					case STATEMENT_ID:
					case STATIC:
					case STATISTICS:
					case STRING:
					case SUBMULTISET:
					case SUBPARTITION:
					case SUBSTITUTABLE:
					case SUBSTRING:
					case SUBTYPE:
					case SUCCESS:
					case SUSPEND:
					case TABLES:
					case TIME:
					case TIMESTAMP:
					case TIMESTAMP_LTZ_UNCONSTRAINED:
					case TIMESTAMP_TZ_UNCONSTRAINED:
					case TIMESTAMP_UNCONSTRAINED:
					case TIMEZONE_ABBR:
					case TIMEZONE_HOUR:
					case TIMEZONE_MINUTE:
					case TIMEZONE_REGION:
					case TO_CHAR:
					case TO_DATE:
					case TRAILING:
					case TRANSACTION:
					case TRANSLATE:
					case TREAT:
					case TRIGGER:
					case TRIM:
					case TRUNCATE:
					case TRUSTED:
					case TYPE:
					case UNBOUNDED:
					case UNDER:
					case UNLIMITED:
					case UNTIL:
					case UPDATE:
					case UPDATED:
					case UPSERT:
					case UROWID:
					case USE:
					case VALIDATE:
					case VALUE:
					case VARCHAR:
					case VARCHAR2:
					case VARIABLE:
					case VARRAY:
					case VARYING:
					case VERBOSE:
					case VERSION:
					case VERSIONS:
					case VIEW:
					case WAIT:
					case WARNING:
					case WELLFORMED:
					case WHENEVER:
					case WHILE:
					case WITH:
					case WITHOUT:
					case WITHIN:
					case WORK:
					case WRITE:
					case XML:
					case XMLAGG:
					case XMLATTRIBUTES:
					case XMLCAST:
					case XMLCOLATTVAL:
					case XMLELEMENT:
					case XMLEXISTS:
					case XMLFOREST:
					case XMLNAMESPACES:
					case XMLPARSE:
					case XMLPI:
					case XMLQUERY:
					case XMLROOT:
					case XMLSERIALIZE:
					case XMLTABLE:
					case YEAR:
					case YES:
					case YMINTERVAL_UNCONSTRAINED:
					case ZONE:
					case PREDICTION:
					case PREDICTION_BOUNDS:
					case PREDICTION_COST:
					case PREDICTION_DETAILS:
					case PREDICTION_PROBABILITY:
					case PREDICTION_SET:
					case CUME_DIST:
					case DENSE_RANK:
					case LISTAGG:
					case PERCENT_RANK:
					case PERCENTILE_CONT:
					case PERCENTILE_DISC:
					case RANK:
					case AVG:
					case CORR:
					case LAG:
					case LEAD:
					case MAX:
					case MEDIAN:
					case MIN:
					case NTILE:
					case RATIO_TO_REPORT:
					case ROW_NUMBER:
					case SUM:
					case VARIANCE:
					case REGR_:
					case STDDEV:
					case VAR_:
					case COVAR_:
					case DELIMITED_ID:
					case LEFT_PAREN:
					case BINDVAR:
					case COLON:
					case REGULAR_ID:
						{
						setState(5383);
						statement();
						setState(5384);
						_la = _input.LA(1);
						if ( !(_la==EOF || _la==SEMICOLON) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					case LESS_THAN_OP:
						{
						setState(5386);
						label_declaration();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5389); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,762,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Label_declarationContext extends ParserRuleContext {
		public Token ltp1;
		public List<TerminalNode> LESS_THAN_OP() { return getTokens(PLSQLParser.LESS_THAN_OP); }
		public TerminalNode LESS_THAN_OP(int i) {
			return getToken(PLSQLParser.LESS_THAN_OP, i);
		}
		public Label_nameContext label_name() {
			return getRuleContext(Label_nameContext.class,0);
		}
		public List<TerminalNode> GREATER_THAN_OP() { return getTokens(PLSQLParser.GREATER_THAN_OP); }
		public TerminalNode GREATER_THAN_OP(int i) {
			return getToken(PLSQLParser.GREATER_THAN_OP, i);
		}
		public Label_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_label_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterLabel_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitLabel_declaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitLabel_declaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Label_declarationContext label_declaration() throws RecognitionException {
		Label_declarationContext _localctx = new Label_declarationContext(_ctx, getState());
		enterRule(_localctx, 568, RULE_label_declaration);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5391);
			((Label_declarationContext)_localctx).ltp1 = match(LESS_THAN_OP);
			setState(5392);
			match(LESS_THAN_OP);
			setState(5393);
			label_name();
			setState(5394);
			match(GREATER_THAN_OP);
			setState(5395);
			match(GREATER_THAN_OP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StatementContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PLSQLParser.CREATE, 0); }
		public Swallow_to_semiContext swallow_to_semi() {
			return getRuleContext(Swallow_to_semiContext.class,0);
		}
		public TerminalNode ALTER() { return getToken(PLSQLParser.ALTER, 0); }
		public TerminalNode GRANT() { return getToken(PLSQLParser.GRANT, 0); }
		public TerminalNode ALL() { return getToken(PLSQLParser.ALL, 0); }
		public TerminalNode TRUNCATE() { return getToken(PLSQLParser.TRUNCATE, 0); }
		public BodyContext body() {
			return getRuleContext(BodyContext.class,0);
		}
		public BlockContext block() {
			return getRuleContext(BlockContext.class,0);
		}
		public Assignment_statementContext assignment_statement() {
			return getRuleContext(Assignment_statementContext.class,0);
		}
		public Continue_statementContext continue_statement() {
			return getRuleContext(Continue_statementContext.class,0);
		}
		public Exit_statementContext exit_statement() {
			return getRuleContext(Exit_statementContext.class,0);
		}
		public Goto_statementContext goto_statement() {
			return getRuleContext(Goto_statementContext.class,0);
		}
		public If_statementContext if_statement() {
			return getRuleContext(If_statementContext.class,0);
		}
		public Loop_statementContext loop_statement() {
			return getRuleContext(Loop_statementContext.class,0);
		}
		public Forall_statementContext forall_statement() {
			return getRuleContext(Forall_statementContext.class,0);
		}
		public Null_statementContext null_statement() {
			return getRuleContext(Null_statementContext.class,0);
		}
		public Raise_statementContext raise_statement() {
			return getRuleContext(Raise_statementContext.class,0);
		}
		public Return_statementContext return_statement() {
			return getRuleContext(Return_statementContext.class,0);
		}
		public Case_statementContext case_statement() {
			return getRuleContext(Case_statementContext.class,0);
		}
		public Sql_statementContext sql_statement() {
			return getRuleContext(Sql_statementContext.class,0);
		}
		public Function_callContext function_call() {
			return getRuleContext(Function_callContext.class,0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StatementContext statement() throws RecognitionException {
		StatementContext _localctx = new StatementContext(_ctx, getState());
		enterRule(_localctx, 570, RULE_statement);
		try {
			setState(5423);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,764,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5397);
				match(CREATE);
				setState(5398);
				swallow_to_semi();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5399);
				match(ALTER);
				setState(5400);
				swallow_to_semi();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5401);
				match(GRANT);
				setState(5403);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,763,_ctx) ) {
				case 1:
					{
					setState(5402);
					match(ALL);
					}
					break;
				}
				setState(5405);
				swallow_to_semi();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5406);
				match(TRUNCATE);
				setState(5407);
				swallow_to_semi();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5408);
				body();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(5409);
				block();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(5410);
				assignment_statement();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(5411);
				continue_statement();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(5412);
				exit_statement();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(5413);
				goto_statement();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(5414);
				if_statement();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(5415);
				loop_statement();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(5416);
				forall_statement();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(5417);
				null_statement();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(5418);
				raise_statement();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(5419);
				return_statement();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(5420);
				case_statement();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(5421);
				sql_statement();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(5422);
				function_call();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Assignment_statementContext extends ParserRuleContext {
		public TerminalNode ASSIGN_OP() { return getToken(PLSQLParser.ASSIGN_OP, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public General_elementContext general_element() {
			return getRuleContext(General_elementContext.class,0);
		}
		public Bind_variableContext bind_variable() {
			return getRuleContext(Bind_variableContext.class,0);
		}
		public Assignment_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_assignment_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterAssignment_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitAssignment_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitAssignment_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Assignment_statementContext assignment_statement() throws RecognitionException {
		Assignment_statementContext _localctx = new Assignment_statementContext(_ctx, getState());
		enterRule(_localctx, 572, RULE_assignment_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5427);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BUILD:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPLETE:
			case COMPOUND:
			case CONCAT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECODE:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DEMAND:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case EDITIONING:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENFORCED:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FAST:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LIST:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MASTER:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEVER:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NVL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case MATERIALIZED:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PREBUILT:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PUBLIC:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REDUCED:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REFRESH:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case REWRITE:
			case RIGHT:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SIZE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBSTRING:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TABLES:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TO_CHAR:
			case TO_DATE:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TRUSTED:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERBOSE:
			case VERSION:
			case VERSIONS:
			case VIEW:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHOUT:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case REGULAR_ID:
				{
				setState(5425);
				general_element();
				}
				break;
			case BINDVAR:
			case COLON:
				{
				setState(5426);
				bind_variable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(5429);
			match(ASSIGN_OP);
			setState(5430);
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Continue_statementContext extends ParserRuleContext {
		public TerminalNode CONTINUE() { return getToken(PLSQLParser.CONTINUE, 0); }
		public Label_nameContext label_name() {
			return getRuleContext(Label_nameContext.class,0);
		}
		public TerminalNode WHEN() { return getToken(PLSQLParser.WHEN, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public Continue_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_continue_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterContinue_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitContinue_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitContinue_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Continue_statementContext continue_statement() throws RecognitionException {
		Continue_statementContext _localctx = new Continue_statementContext(_ctx, getState());
		enterRule(_localctx, 574, RULE_continue_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5432);
			match(CONTINUE);
			setState(5434);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BUILD) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (CHR - 65)) | (1L << (CLOB - 65)) | (1L << (CLOSE - 65)) | (1L << (CLUSTER - 65)) | (1L << (COALESCE - 65)) | (1L << (COLLECT - 65)) | (1L << (COLUMNS - 65)) | (1L << (COMMENT - 65)) | (1L << (COMMIT - 65)) | (1L << (COMMITTED - 65)) | (1L << (COMPATIBILITY - 65)) | (1L << (COMPILE - 65)) | (1L << (COMPLETE - 65)) | (1L << (COMPOUND - 65)) | (1L << (CONCAT - 65)) | (1L << (CONSTANT - 65)) | (1L << (CONSTRAINT - 65)) | (1L << (CONSTRAINTS - 65)) | (1L << (CONSTRUCTOR - 65)) | (1L << (CONTENT - 65)) | (1L << (CONTEXT - 65)) | (1L << (CONTINUE - 65)) | (1L << (CONVERT - 65)) | (1L << (CORRUPT_XID - 65)) | (1L << (CORRUPT_XID_ALL - 65)) | (1L << (COST - 65)) | (1L << (COUNT - 65)) | (1L << (CROSS - 65)) | (1L << (CUBE - 65)) | (1L << (CURRENT_USER - 65)) | (1L << (CURSOR - 65)) | (1L << (CUSTOMDATUM - 65)) | (1L << (CYCLE - 65)) | (1L << (DATA - 65)) | (1L << (DATABASE - 65)) | (1L << (DATE - 65)) | (1L << (DAY - 65)) | (1L << (DB_ROLE_CHANGE - 65)) | (1L << (DBTIMEZONE - 65)) | (1L << (DDL - 65)) | (1L << (DEBUG - 65)) | (1L << (DEC - 65)) | (1L << (DECIMAL - 65)) | (1L << (DECODE - 65)) | (1L << (DECOMPOSE - 65)) | (1L << (DECREMENT - 65)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DEMAND - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (EDITIONING - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENFORCED - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FAST - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)) | (1L << (FOLLOWING - 129)) | (1L << (FOLLOWS - 129)) | (1L << (FORALL - 129)) | (1L << (FORCE - 129)))) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & ((1L << (FULL - 197)) | (1L << (FUNCTION - 197)) | (1L << (GROUPING - 197)) | (1L << (HASH - 197)) | (1L << (HIDE - 197)) | (1L << (HOUR - 197)) | (1L << (IGNORE - 197)) | (1L << (IMMEDIATE - 197)) | (1L << (INCLUDE - 197)) | (1L << (INCLUDING - 197)) | (1L << (INCREMENT - 197)) | (1L << (INDENT - 197)) | (1L << (INDEXED - 197)) | (1L << (INDICATOR - 197)) | (1L << (INDICES - 197)) | (1L << (INFINITE - 197)) | (1L << (INLINE - 197)) | (1L << (INNER - 197)) | (1L << (INOUT - 197)) | (1L << (INSTANTIABLE - 197)) | (1L << (INSTEAD - 197)) | (1L << (INT - 197)) | (1L << (INTEGER - 197)) | (1L << (INTERVAL - 197)) | (1L << (INVALIDATE - 197)) | (1L << (ISOLATION - 197)) | (1L << (ITERATE - 197)) | (1L << (JAVA - 197)) | (1L << (JOIN - 197)) | (1L << (KEEP - 197)) | (1L << (LANGUAGE - 197)) | (1L << (LAST - 197)) | (1L << (LAST_VALUE - 197)) | (1L << (LEADING - 197)) | (1L << (LEFT - 197)) | (1L << (LEVEL - 197)))) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & ((1L << (LIBRARY - 261)) | (1L << (LIKE2 - 261)) | (1L << (LIKE4 - 261)) | (1L << (LIKEC - 261)) | (1L << (LIMIT - 261)) | (1L << (LIST - 261)) | (1L << (LOCAL - 261)) | (1L << (LOCKED - 261)) | (1L << (LOG - 261)) | (1L << (LOGOFF - 261)) | (1L << (LOGON - 261)) | (1L << (LONG - 261)) | (1L << (LOOP - 261)) | (1L << (MAIN - 261)) | (1L << (MAP - 261)) | (1L << (MASTER - 261)) | (1L << (MATCHED - 261)) | (1L << (MAXVALUE - 261)) | (1L << (MEASURES - 261)) | (1L << (MEMBER - 261)) | (1L << (MERGE - 261)) | (1L << (MINUTE - 261)) | (1L << (MINVALUE - 261)) | (1L << (MLSLABEL - 261)) | (1L << (MODEL - 261)) | (1L << (MODIFY - 261)) | (1L << (MONTH - 261)) | (1L << (MULTISET - 261)) | (1L << (NAME - 261)) | (1L << (NAN - 261)) | (1L << (NATURAL - 261)) | (1L << (NATURALN - 261)) | (1L << (NAV - 261)) | (1L << (NCHAR - 261)) | (1L << (NCHAR_CS - 261)) | (1L << (NCLOB - 261)) | (1L << (NESTED - 261)) | (1L << (NEVER - 261)) | (1L << (NEW - 261)) | (1L << (NO - 261)) | (1L << (NOAUDIT - 261)) | (1L << (NOCOPY - 261)) | (1L << (NOCYCLE - 261)) | (1L << (NOENTITYESCAPING - 261)))) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & ((1L << (NONE - 329)) | (1L << (NOSCHEMACHECK - 329)) | (1L << (NVL - 329)) | (1L << (NULLS - 329)) | (1L << (NUMBER - 329)) | (1L << (NUMERIC - 329)) | (1L << (NVARCHAR2 - 329)) | (1L << (MATERIALIZED - 329)) | (1L << (OBJECT - 329)) | (1L << (OFF - 329)) | (1L << (OID - 329)) | (1L << (OLD - 329)) | (1L << (ONLY - 329)) | (1L << (OPEN - 329)) | (1L << (ORADATA - 329)) | (1L << (ORDINALITY - 329)) | (1L << (OSERROR - 329)) | (1L << (OUT - 329)) | (1L << (OUTER - 329)) | (1L << (OVER - 329)) | (1L << (OVERRIDING - 329)) | (1L << (PACKAGE - 329)) | (1L << (PARALLEL_ENABLE - 329)) | (1L << (PARAMETERS - 329)) | (1L << (PARENT - 329)) | (1L << (PARTITION - 329)) | (1L << (PASSING - 329)) | (1L << (PATH - 329)) | (1L << (PIPELINED - 329)) | (1L << (PLAN - 329)) | (1L << (PLS_INTEGER - 329)) | (1L << (POSITIVE - 329)) | (1L << (POSITIVEN - 329)) | (1L << (PRAGMA - 329)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (PREBUILT - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)) | (1L << (PRESENT - 393)) | (1L << (PUBLIC - 393)) | (1L << (RAISE - 393)) | (1L << (RANGE - 393)) | (1L << (RAW - 393)) | (1L << (READ - 393)) | (1L << (REAL - 393)) | (1L << (RECORD - 393)) | (1L << (REDUCED - 393)) | (1L << (REF - 393)) | (1L << (REFERENCE - 393)) | (1L << (REFERENCING - 393)) | (1L << (REFRESH - 393)) | (1L << (REJECT - 393)) | (1L << (RELIES_ON - 393)) | (1L << (RENAME - 393)) | (1L << (REPLACE - 393)) | (1L << (RESPECT - 393)) | (1L << (RESTRICT_REFERENCES - 393)) | (1L << (RESULT - 393)) | (1L << (RESULT_CACHE - 393)) | (1L << (RETURN - 393)) | (1L << (RETURNING - 393)) | (1L << (REUSE - 393)) | (1L << (REVERSE - 393)) | (1L << (REWRITE - 393)) | (1L << (RIGHT - 393)) | (1L << (ROLE - 393)) | (1L << (ROLLBACK - 393)) | (1L << (ROLLUP - 393)) | (1L << (ROW - 393)) | (1L << (ROWID - 393)) | (1L << (ROWS - 393)) | (1L << (RULES - 393)) | (1L << (SAMPLE - 393)) | (1L << (SAVE - 393)) | (1L << (SAVEPOINT - 393)) | (1L << (SCHEMA - 393)) | (1L << (SCHEMACHECK - 393)) | (1L << (SCN - 393)) | (1L << (SECOND - 393)))) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & ((1L << (SEED - 458)) | (1L << (SEGMENT - 458)) | (1L << (SELF - 458)) | (1L << (SEQUENTIAL - 458)) | (1L << (SERIALIZABLE - 458)) | (1L << (SERIALLY_REUSABLE - 458)) | (1L << (SERVERERROR - 458)) | (1L << (SESSIONTIMEZONE - 458)) | (1L << (SET - 458)) | (1L << (SETS - 458)) | (1L << (SETTINGS - 458)) | (1L << (SHOW - 458)) | (1L << (SHUTDOWN - 458)) | (1L << (SIBLINGS - 458)) | (1L << (SIGNTYPE - 458)) | (1L << (SIMPLE_INTEGER - 458)) | (1L << (SINGLE - 458)) | (1L << (SIZE - 458)) | (1L << (SKIP_ - 458)) | (1L << (SMALLINT - 458)) | (1L << (SNAPSHOT - 458)) | (1L << (SOME - 458)) | (1L << (SPECIFICATION - 458)) | (1L << (SQLDATA - 458)) | (1L << (SQLERROR - 458)) | (1L << (STANDALONE - 458)) | (1L << (STARTUP - 458)) | (1L << (STATEMENT - 458)) | (1L << (STATEMENT_ID - 458)) | (1L << (STATIC - 458)) | (1L << (STATISTICS - 458)) | (1L << (STRING - 458)) | (1L << (SUBMULTISET - 458)) | (1L << (SUBPARTITION - 458)) | (1L << (SUBSTITUTABLE - 458)) | (1L << (SUBSTRING - 458)) | (1L << (SUBTYPE - 458)) | (1L << (SUCCESS - 458)) | (1L << (SUSPEND - 458)) | (1L << (TABLES - 458)) | (1L << (TIME - 458)) | (1L << (TIMESTAMP - 458)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 458)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 458)) | (1L << (TIMESTAMP_UNCONSTRAINED - 458)))) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & ((1L << (TIMEZONE_ABBR - 522)) | (1L << (TIMEZONE_HOUR - 522)) | (1L << (TIMEZONE_MINUTE - 522)) | (1L << (TIMEZONE_REGION - 522)) | (1L << (TO_CHAR - 522)) | (1L << (TO_DATE - 522)) | (1L << (TRAILING - 522)) | (1L << (TRANSACTION - 522)) | (1L << (TRANSLATE - 522)) | (1L << (TREAT - 522)) | (1L << (TRIGGER - 522)) | (1L << (TRIM - 522)) | (1L << (TRUNCATE - 522)) | (1L << (TRUSTED - 522)) | (1L << (TYPE - 522)) | (1L << (UNBOUNDED - 522)) | (1L << (UNDER - 522)) | (1L << (UNLIMITED - 522)) | (1L << (UNTIL - 522)) | (1L << (UPDATED - 522)) | (1L << (UPSERT - 522)) | (1L << (UROWID - 522)) | (1L << (USE - 522)) | (1L << (VALIDATE - 522)) | (1L << (VALUE - 522)) | (1L << (VARCHAR - 522)) | (1L << (VARCHAR2 - 522)) | (1L << (VARIABLE - 522)) | (1L << (VARRAY - 522)) | (1L << (VARYING - 522)) | (1L << (VERBOSE - 522)) | (1L << (VERSION - 522)) | (1L << (VERSIONS - 522)) | (1L << (VIEW - 522)) | (1L << (WAIT - 522)) | (1L << (WARNING - 522)) | (1L << (WELLFORMED - 522)) | (1L << (WHENEVER - 522)) | (1L << (WHILE - 522)) | (1L << (WITHOUT - 522)) | (1L << (WITHIN - 522)) | (1L << (WORK - 522)) | (1L << (WRITE - 522)) | (1L << (XML - 522)) | (1L << (XMLAGG - 522)) | (1L << (XMLATTRIBUTES - 522)))) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & ((1L << (XMLCAST - 586)) | (1L << (XMLCOLATTVAL - 586)) | (1L << (XMLELEMENT - 586)) | (1L << (XMLEXISTS - 586)) | (1L << (XMLFOREST - 586)) | (1L << (XMLNAMESPACES - 586)) | (1L << (XMLPARSE - 586)) | (1L << (XMLPI - 586)) | (1L << (XMLQUERY - 586)) | (1L << (XMLROOT - 586)) | (1L << (XMLSERIALIZE - 586)) | (1L << (XMLTABLE - 586)) | (1L << (YEAR - 586)) | (1L << (YES - 586)) | (1L << (YMINTERVAL_UNCONSTRAINED - 586)) | (1L << (ZONE - 586)) | (1L << (PREDICTION - 586)) | (1L << (PREDICTION_BOUNDS - 586)) | (1L << (PREDICTION_COST - 586)) | (1L << (PREDICTION_DETAILS - 586)) | (1L << (PREDICTION_PROBABILITY - 586)) | (1L << (PREDICTION_SET - 586)) | (1L << (CUME_DIST - 586)) | (1L << (DENSE_RANK - 586)) | (1L << (LISTAGG - 586)) | (1L << (PERCENT_RANK - 586)) | (1L << (PERCENTILE_CONT - 586)) | (1L << (PERCENTILE_DISC - 586)) | (1L << (RANK - 586)) | (1L << (AVG - 586)) | (1L << (CORR - 586)) | (1L << (LAG - 586)) | (1L << (LEAD - 586)) | (1L << (MAX - 586)) | (1L << (MEDIAN - 586)) | (1L << (MIN - 586)) | (1L << (NTILE - 586)) | (1L << (RATIO_TO_REPORT - 586)) | (1L << (ROW_NUMBER - 586)) | (1L << (SUM - 586)) | (1L << (VARIANCE - 586)) | (1L << (REGR_ - 586)) | (1L << (STDDEV - 586)) | (1L << (VAR_ - 586)) | (1L << (COVAR_ - 586)) | (1L << (DELIMITED_ID - 586)))) != 0) || _la==REGULAR_ID) {
				{
				setState(5433);
				label_name();
				}
			}

			setState(5438);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHEN) {
				{
				setState(5436);
				match(WHEN);
				setState(5437);
				condition();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Exit_statementContext extends ParserRuleContext {
		public TerminalNode EXIT() { return getToken(PLSQLParser.EXIT, 0); }
		public Label_nameContext label_name() {
			return getRuleContext(Label_nameContext.class,0);
		}
		public TerminalNode WHEN() { return getToken(PLSQLParser.WHEN, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public Exit_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exit_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterExit_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitExit_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitExit_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Exit_statementContext exit_statement() throws RecognitionException {
		Exit_statementContext _localctx = new Exit_statementContext(_ctx, getState());
		enterRule(_localctx, 576, RULE_exit_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5440);
			match(EXIT);
			setState(5442);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BUILD) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (CHR - 65)) | (1L << (CLOB - 65)) | (1L << (CLOSE - 65)) | (1L << (CLUSTER - 65)) | (1L << (COALESCE - 65)) | (1L << (COLLECT - 65)) | (1L << (COLUMNS - 65)) | (1L << (COMMENT - 65)) | (1L << (COMMIT - 65)) | (1L << (COMMITTED - 65)) | (1L << (COMPATIBILITY - 65)) | (1L << (COMPILE - 65)) | (1L << (COMPLETE - 65)) | (1L << (COMPOUND - 65)) | (1L << (CONCAT - 65)) | (1L << (CONSTANT - 65)) | (1L << (CONSTRAINT - 65)) | (1L << (CONSTRAINTS - 65)) | (1L << (CONSTRUCTOR - 65)) | (1L << (CONTENT - 65)) | (1L << (CONTEXT - 65)) | (1L << (CONTINUE - 65)) | (1L << (CONVERT - 65)) | (1L << (CORRUPT_XID - 65)) | (1L << (CORRUPT_XID_ALL - 65)) | (1L << (COST - 65)) | (1L << (COUNT - 65)) | (1L << (CROSS - 65)) | (1L << (CUBE - 65)) | (1L << (CURRENT_USER - 65)) | (1L << (CURSOR - 65)) | (1L << (CUSTOMDATUM - 65)) | (1L << (CYCLE - 65)) | (1L << (DATA - 65)) | (1L << (DATABASE - 65)) | (1L << (DATE - 65)) | (1L << (DAY - 65)) | (1L << (DB_ROLE_CHANGE - 65)) | (1L << (DBTIMEZONE - 65)) | (1L << (DDL - 65)) | (1L << (DEBUG - 65)) | (1L << (DEC - 65)) | (1L << (DECIMAL - 65)) | (1L << (DECODE - 65)) | (1L << (DECOMPOSE - 65)) | (1L << (DECREMENT - 65)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DEMAND - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (EDITIONING - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENFORCED - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FAST - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)) | (1L << (FOLLOWING - 129)) | (1L << (FOLLOWS - 129)) | (1L << (FORALL - 129)) | (1L << (FORCE - 129)))) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & ((1L << (FULL - 197)) | (1L << (FUNCTION - 197)) | (1L << (GROUPING - 197)) | (1L << (HASH - 197)) | (1L << (HIDE - 197)) | (1L << (HOUR - 197)) | (1L << (IGNORE - 197)) | (1L << (IMMEDIATE - 197)) | (1L << (INCLUDE - 197)) | (1L << (INCLUDING - 197)) | (1L << (INCREMENT - 197)) | (1L << (INDENT - 197)) | (1L << (INDEXED - 197)) | (1L << (INDICATOR - 197)) | (1L << (INDICES - 197)) | (1L << (INFINITE - 197)) | (1L << (INLINE - 197)) | (1L << (INNER - 197)) | (1L << (INOUT - 197)) | (1L << (INSTANTIABLE - 197)) | (1L << (INSTEAD - 197)) | (1L << (INT - 197)) | (1L << (INTEGER - 197)) | (1L << (INTERVAL - 197)) | (1L << (INVALIDATE - 197)) | (1L << (ISOLATION - 197)) | (1L << (ITERATE - 197)) | (1L << (JAVA - 197)) | (1L << (JOIN - 197)) | (1L << (KEEP - 197)) | (1L << (LANGUAGE - 197)) | (1L << (LAST - 197)) | (1L << (LAST_VALUE - 197)) | (1L << (LEADING - 197)) | (1L << (LEFT - 197)) | (1L << (LEVEL - 197)))) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & ((1L << (LIBRARY - 261)) | (1L << (LIKE2 - 261)) | (1L << (LIKE4 - 261)) | (1L << (LIKEC - 261)) | (1L << (LIMIT - 261)) | (1L << (LIST - 261)) | (1L << (LOCAL - 261)) | (1L << (LOCKED - 261)) | (1L << (LOG - 261)) | (1L << (LOGOFF - 261)) | (1L << (LOGON - 261)) | (1L << (LONG - 261)) | (1L << (LOOP - 261)) | (1L << (MAIN - 261)) | (1L << (MAP - 261)) | (1L << (MASTER - 261)) | (1L << (MATCHED - 261)) | (1L << (MAXVALUE - 261)) | (1L << (MEASURES - 261)) | (1L << (MEMBER - 261)) | (1L << (MERGE - 261)) | (1L << (MINUTE - 261)) | (1L << (MINVALUE - 261)) | (1L << (MLSLABEL - 261)) | (1L << (MODEL - 261)) | (1L << (MODIFY - 261)) | (1L << (MONTH - 261)) | (1L << (MULTISET - 261)) | (1L << (NAME - 261)) | (1L << (NAN - 261)) | (1L << (NATURAL - 261)) | (1L << (NATURALN - 261)) | (1L << (NAV - 261)) | (1L << (NCHAR - 261)) | (1L << (NCHAR_CS - 261)) | (1L << (NCLOB - 261)) | (1L << (NESTED - 261)) | (1L << (NEVER - 261)) | (1L << (NEW - 261)) | (1L << (NO - 261)) | (1L << (NOAUDIT - 261)) | (1L << (NOCOPY - 261)) | (1L << (NOCYCLE - 261)) | (1L << (NOENTITYESCAPING - 261)))) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & ((1L << (NONE - 329)) | (1L << (NOSCHEMACHECK - 329)) | (1L << (NVL - 329)) | (1L << (NULLS - 329)) | (1L << (NUMBER - 329)) | (1L << (NUMERIC - 329)) | (1L << (NVARCHAR2 - 329)) | (1L << (MATERIALIZED - 329)) | (1L << (OBJECT - 329)) | (1L << (OFF - 329)) | (1L << (OID - 329)) | (1L << (OLD - 329)) | (1L << (ONLY - 329)) | (1L << (OPEN - 329)) | (1L << (ORADATA - 329)) | (1L << (ORDINALITY - 329)) | (1L << (OSERROR - 329)) | (1L << (OUT - 329)) | (1L << (OUTER - 329)) | (1L << (OVER - 329)) | (1L << (OVERRIDING - 329)) | (1L << (PACKAGE - 329)) | (1L << (PARALLEL_ENABLE - 329)) | (1L << (PARAMETERS - 329)) | (1L << (PARENT - 329)) | (1L << (PARTITION - 329)) | (1L << (PASSING - 329)) | (1L << (PATH - 329)) | (1L << (PIPELINED - 329)) | (1L << (PLAN - 329)) | (1L << (PLS_INTEGER - 329)) | (1L << (POSITIVE - 329)) | (1L << (POSITIVEN - 329)) | (1L << (PRAGMA - 329)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (PREBUILT - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)) | (1L << (PRESENT - 393)) | (1L << (PUBLIC - 393)) | (1L << (RAISE - 393)) | (1L << (RANGE - 393)) | (1L << (RAW - 393)) | (1L << (READ - 393)) | (1L << (REAL - 393)) | (1L << (RECORD - 393)) | (1L << (REDUCED - 393)) | (1L << (REF - 393)) | (1L << (REFERENCE - 393)) | (1L << (REFERENCING - 393)) | (1L << (REFRESH - 393)) | (1L << (REJECT - 393)) | (1L << (RELIES_ON - 393)) | (1L << (RENAME - 393)) | (1L << (REPLACE - 393)) | (1L << (RESPECT - 393)) | (1L << (RESTRICT_REFERENCES - 393)) | (1L << (RESULT - 393)) | (1L << (RESULT_CACHE - 393)) | (1L << (RETURN - 393)) | (1L << (RETURNING - 393)) | (1L << (REUSE - 393)) | (1L << (REVERSE - 393)) | (1L << (REWRITE - 393)) | (1L << (RIGHT - 393)) | (1L << (ROLE - 393)) | (1L << (ROLLBACK - 393)) | (1L << (ROLLUP - 393)) | (1L << (ROW - 393)) | (1L << (ROWID - 393)) | (1L << (ROWS - 393)) | (1L << (RULES - 393)) | (1L << (SAMPLE - 393)) | (1L << (SAVE - 393)) | (1L << (SAVEPOINT - 393)) | (1L << (SCHEMA - 393)) | (1L << (SCHEMACHECK - 393)) | (1L << (SCN - 393)) | (1L << (SECOND - 393)))) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & ((1L << (SEED - 458)) | (1L << (SEGMENT - 458)) | (1L << (SELF - 458)) | (1L << (SEQUENTIAL - 458)) | (1L << (SERIALIZABLE - 458)) | (1L << (SERIALLY_REUSABLE - 458)) | (1L << (SERVERERROR - 458)) | (1L << (SESSIONTIMEZONE - 458)) | (1L << (SET - 458)) | (1L << (SETS - 458)) | (1L << (SETTINGS - 458)) | (1L << (SHOW - 458)) | (1L << (SHUTDOWN - 458)) | (1L << (SIBLINGS - 458)) | (1L << (SIGNTYPE - 458)) | (1L << (SIMPLE_INTEGER - 458)) | (1L << (SINGLE - 458)) | (1L << (SIZE - 458)) | (1L << (SKIP_ - 458)) | (1L << (SMALLINT - 458)) | (1L << (SNAPSHOT - 458)) | (1L << (SOME - 458)) | (1L << (SPECIFICATION - 458)) | (1L << (SQLDATA - 458)) | (1L << (SQLERROR - 458)) | (1L << (STANDALONE - 458)) | (1L << (STARTUP - 458)) | (1L << (STATEMENT - 458)) | (1L << (STATEMENT_ID - 458)) | (1L << (STATIC - 458)) | (1L << (STATISTICS - 458)) | (1L << (STRING - 458)) | (1L << (SUBMULTISET - 458)) | (1L << (SUBPARTITION - 458)) | (1L << (SUBSTITUTABLE - 458)) | (1L << (SUBSTRING - 458)) | (1L << (SUBTYPE - 458)) | (1L << (SUCCESS - 458)) | (1L << (SUSPEND - 458)) | (1L << (TABLES - 458)) | (1L << (TIME - 458)) | (1L << (TIMESTAMP - 458)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 458)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 458)) | (1L << (TIMESTAMP_UNCONSTRAINED - 458)))) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & ((1L << (TIMEZONE_ABBR - 522)) | (1L << (TIMEZONE_HOUR - 522)) | (1L << (TIMEZONE_MINUTE - 522)) | (1L << (TIMEZONE_REGION - 522)) | (1L << (TO_CHAR - 522)) | (1L << (TO_DATE - 522)) | (1L << (TRAILING - 522)) | (1L << (TRANSACTION - 522)) | (1L << (TRANSLATE - 522)) | (1L << (TREAT - 522)) | (1L << (TRIGGER - 522)) | (1L << (TRIM - 522)) | (1L << (TRUNCATE - 522)) | (1L << (TRUSTED - 522)) | (1L << (TYPE - 522)) | (1L << (UNBOUNDED - 522)) | (1L << (UNDER - 522)) | (1L << (UNLIMITED - 522)) | (1L << (UNTIL - 522)) | (1L << (UPDATED - 522)) | (1L << (UPSERT - 522)) | (1L << (UROWID - 522)) | (1L << (USE - 522)) | (1L << (VALIDATE - 522)) | (1L << (VALUE - 522)) | (1L << (VARCHAR - 522)) | (1L << (VARCHAR2 - 522)) | (1L << (VARIABLE - 522)) | (1L << (VARRAY - 522)) | (1L << (VARYING - 522)) | (1L << (VERBOSE - 522)) | (1L << (VERSION - 522)) | (1L << (VERSIONS - 522)) | (1L << (VIEW - 522)) | (1L << (WAIT - 522)) | (1L << (WARNING - 522)) | (1L << (WELLFORMED - 522)) | (1L << (WHENEVER - 522)) | (1L << (WHILE - 522)) | (1L << (WITHOUT - 522)) | (1L << (WITHIN - 522)) | (1L << (WORK - 522)) | (1L << (WRITE - 522)) | (1L << (XML - 522)) | (1L << (XMLAGG - 522)) | (1L << (XMLATTRIBUTES - 522)))) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & ((1L << (XMLCAST - 586)) | (1L << (XMLCOLATTVAL - 586)) | (1L << (XMLELEMENT - 586)) | (1L << (XMLEXISTS - 586)) | (1L << (XMLFOREST - 586)) | (1L << (XMLNAMESPACES - 586)) | (1L << (XMLPARSE - 586)) | (1L << (XMLPI - 586)) | (1L << (XMLQUERY - 586)) | (1L << (XMLROOT - 586)) | (1L << (XMLSERIALIZE - 586)) | (1L << (XMLTABLE - 586)) | (1L << (YEAR - 586)) | (1L << (YES - 586)) | (1L << (YMINTERVAL_UNCONSTRAINED - 586)) | (1L << (ZONE - 586)) | (1L << (PREDICTION - 586)) | (1L << (PREDICTION_BOUNDS - 586)) | (1L << (PREDICTION_COST - 586)) | (1L << (PREDICTION_DETAILS - 586)) | (1L << (PREDICTION_PROBABILITY - 586)) | (1L << (PREDICTION_SET - 586)) | (1L << (CUME_DIST - 586)) | (1L << (DENSE_RANK - 586)) | (1L << (LISTAGG - 586)) | (1L << (PERCENT_RANK - 586)) | (1L << (PERCENTILE_CONT - 586)) | (1L << (PERCENTILE_DISC - 586)) | (1L << (RANK - 586)) | (1L << (AVG - 586)) | (1L << (CORR - 586)) | (1L << (LAG - 586)) | (1L << (LEAD - 586)) | (1L << (MAX - 586)) | (1L << (MEDIAN - 586)) | (1L << (MIN - 586)) | (1L << (NTILE - 586)) | (1L << (RATIO_TO_REPORT - 586)) | (1L << (ROW_NUMBER - 586)) | (1L << (SUM - 586)) | (1L << (VARIANCE - 586)) | (1L << (REGR_ - 586)) | (1L << (STDDEV - 586)) | (1L << (VAR_ - 586)) | (1L << (COVAR_ - 586)) | (1L << (DELIMITED_ID - 586)))) != 0) || _la==REGULAR_ID) {
				{
				setState(5441);
				label_name();
				}
			}

			setState(5446);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHEN) {
				{
				setState(5444);
				match(WHEN);
				setState(5445);
				condition();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Goto_statementContext extends ParserRuleContext {
		public TerminalNode GOTO() { return getToken(PLSQLParser.GOTO, 0); }
		public Label_nameContext label_name() {
			return getRuleContext(Label_nameContext.class,0);
		}
		public Goto_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_goto_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterGoto_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitGoto_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitGoto_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Goto_statementContext goto_statement() throws RecognitionException {
		Goto_statementContext _localctx = new Goto_statementContext(_ctx, getState());
		enterRule(_localctx, 578, RULE_goto_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5448);
			match(GOTO);
			setState(5449);
			label_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class If_statementContext extends ParserRuleContext {
		public List<TerminalNode> IF() { return getTokens(PLSQLParser.IF); }
		public TerminalNode IF(int i) {
			return getToken(PLSQLParser.IF, i);
		}
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public TerminalNode THEN() { return getToken(PLSQLParser.THEN, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public TerminalNode END() { return getToken(PLSQLParser.END, 0); }
		public List<Elsif_partContext> elsif_part() {
			return getRuleContexts(Elsif_partContext.class);
		}
		public Elsif_partContext elsif_part(int i) {
			return getRuleContext(Elsif_partContext.class,i);
		}
		public Else_partContext else_part() {
			return getRuleContext(Else_partContext.class,0);
		}
		public If_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_if_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterIf_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitIf_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitIf_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final If_statementContext if_statement() throws RecognitionException {
		If_statementContext _localctx = new If_statementContext(_ctx, getState());
		enterRule(_localctx, 580, RULE_if_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5451);
			match(IF);
			setState(5452);
			condition();
			setState(5453);
			match(THEN);
			setState(5454);
			seq_of_statements();
			setState(5458);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==ELSIF) {
				{
				{
				setState(5455);
				elsif_part();
				}
				}
				setState(5460);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(5462);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ELSE) {
				{
				setState(5461);
				else_part();
				}
			}

			setState(5464);
			match(END);
			setState(5465);
			match(IF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Elsif_partContext extends ParserRuleContext {
		public TerminalNode ELSIF() { return getToken(PLSQLParser.ELSIF, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public TerminalNode THEN() { return getToken(PLSQLParser.THEN, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public Elsif_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_elsif_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterElsif_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitElsif_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitElsif_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Elsif_partContext elsif_part() throws RecognitionException {
		Elsif_partContext _localctx = new Elsif_partContext(_ctx, getState());
		enterRule(_localctx, 582, RULE_elsif_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5467);
			match(ELSIF);
			setState(5468);
			condition();
			setState(5469);
			match(THEN);
			setState(5470);
			seq_of_statements();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Else_partContext extends ParserRuleContext {
		public TerminalNode ELSE() { return getToken(PLSQLParser.ELSE, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public Else_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_else_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterElse_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitElse_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitElse_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Else_partContext else_part() throws RecognitionException {
		Else_partContext _localctx = new Else_partContext(_ctx, getState());
		enterRule(_localctx, 584, RULE_else_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5472);
			match(ELSE);
			setState(5473);
			seq_of_statements();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Loop_statementContext extends ParserRuleContext {
		public List<TerminalNode> LOOP() { return getTokens(PLSQLParser.LOOP); }
		public TerminalNode LOOP(int i) {
			return getToken(PLSQLParser.LOOP, i);
		}
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public TerminalNode END() { return getToken(PLSQLParser.END, 0); }
		public List<Label_nameContext> label_name() {
			return getRuleContexts(Label_nameContext.class);
		}
		public Label_nameContext label_name(int i) {
			return getRuleContext(Label_nameContext.class,i);
		}
		public TerminalNode WHILE() { return getToken(PLSQLParser.WHILE, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public TerminalNode FOR() { return getToken(PLSQLParser.FOR, 0); }
		public Cursor_loop_paramContext cursor_loop_param() {
			return getRuleContext(Cursor_loop_paramContext.class,0);
		}
		public Loop_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_loop_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterLoop_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitLoop_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitLoop_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Loop_statementContext loop_statement() throws RecognitionException {
		Loop_statementContext _localctx = new Loop_statementContext(_ctx, getState());
		enterRule(_localctx, 586, RULE_loop_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5476);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,772,_ctx) ) {
			case 1:
				{
				setState(5475);
				label_name();
				}
				break;
			}
			setState(5482);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WHILE:
				{
				setState(5478);
				match(WHILE);
				setState(5479);
				condition();
				}
				break;
			case FOR:
				{
				setState(5480);
				match(FOR);
				setState(5481);
				cursor_loop_param();
				}
				break;
			case LOOP:
				break;
			default:
				break;
			}
			setState(5484);
			match(LOOP);
			setState(5485);
			seq_of_statements();
			setState(5486);
			match(END);
			setState(5487);
			match(LOOP);
			setState(5489);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BUILD) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (CHR - 65)) | (1L << (CLOB - 65)) | (1L << (CLOSE - 65)) | (1L << (CLUSTER - 65)) | (1L << (COALESCE - 65)) | (1L << (COLLECT - 65)) | (1L << (COLUMNS - 65)) | (1L << (COMMENT - 65)) | (1L << (COMMIT - 65)) | (1L << (COMMITTED - 65)) | (1L << (COMPATIBILITY - 65)) | (1L << (COMPILE - 65)) | (1L << (COMPLETE - 65)) | (1L << (COMPOUND - 65)) | (1L << (CONCAT - 65)) | (1L << (CONSTANT - 65)) | (1L << (CONSTRAINT - 65)) | (1L << (CONSTRAINTS - 65)) | (1L << (CONSTRUCTOR - 65)) | (1L << (CONTENT - 65)) | (1L << (CONTEXT - 65)) | (1L << (CONTINUE - 65)) | (1L << (CONVERT - 65)) | (1L << (CORRUPT_XID - 65)) | (1L << (CORRUPT_XID_ALL - 65)) | (1L << (COST - 65)) | (1L << (COUNT - 65)) | (1L << (CROSS - 65)) | (1L << (CUBE - 65)) | (1L << (CURRENT_USER - 65)) | (1L << (CURSOR - 65)) | (1L << (CUSTOMDATUM - 65)) | (1L << (CYCLE - 65)) | (1L << (DATA - 65)) | (1L << (DATABASE - 65)) | (1L << (DATE - 65)) | (1L << (DAY - 65)) | (1L << (DB_ROLE_CHANGE - 65)) | (1L << (DBTIMEZONE - 65)) | (1L << (DDL - 65)) | (1L << (DEBUG - 65)) | (1L << (DEC - 65)) | (1L << (DECIMAL - 65)) | (1L << (DECODE - 65)) | (1L << (DECOMPOSE - 65)) | (1L << (DECREMENT - 65)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DEMAND - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (EDITIONING - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENFORCED - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FAST - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)) | (1L << (FOLLOWING - 129)) | (1L << (FOLLOWS - 129)) | (1L << (FORALL - 129)) | (1L << (FORCE - 129)))) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & ((1L << (FULL - 197)) | (1L << (FUNCTION - 197)) | (1L << (GROUPING - 197)) | (1L << (HASH - 197)) | (1L << (HIDE - 197)) | (1L << (HOUR - 197)) | (1L << (IGNORE - 197)) | (1L << (IMMEDIATE - 197)) | (1L << (INCLUDE - 197)) | (1L << (INCLUDING - 197)) | (1L << (INCREMENT - 197)) | (1L << (INDENT - 197)) | (1L << (INDEXED - 197)) | (1L << (INDICATOR - 197)) | (1L << (INDICES - 197)) | (1L << (INFINITE - 197)) | (1L << (INLINE - 197)) | (1L << (INNER - 197)) | (1L << (INOUT - 197)) | (1L << (INSTANTIABLE - 197)) | (1L << (INSTEAD - 197)) | (1L << (INT - 197)) | (1L << (INTEGER - 197)) | (1L << (INTERVAL - 197)) | (1L << (INVALIDATE - 197)) | (1L << (ISOLATION - 197)) | (1L << (ITERATE - 197)) | (1L << (JAVA - 197)) | (1L << (JOIN - 197)) | (1L << (KEEP - 197)) | (1L << (LANGUAGE - 197)) | (1L << (LAST - 197)) | (1L << (LAST_VALUE - 197)) | (1L << (LEADING - 197)) | (1L << (LEFT - 197)) | (1L << (LEVEL - 197)))) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & ((1L << (LIBRARY - 261)) | (1L << (LIKE2 - 261)) | (1L << (LIKE4 - 261)) | (1L << (LIKEC - 261)) | (1L << (LIMIT - 261)) | (1L << (LIST - 261)) | (1L << (LOCAL - 261)) | (1L << (LOCKED - 261)) | (1L << (LOG - 261)) | (1L << (LOGOFF - 261)) | (1L << (LOGON - 261)) | (1L << (LONG - 261)) | (1L << (LOOP - 261)) | (1L << (MAIN - 261)) | (1L << (MAP - 261)) | (1L << (MASTER - 261)) | (1L << (MATCHED - 261)) | (1L << (MAXVALUE - 261)) | (1L << (MEASURES - 261)) | (1L << (MEMBER - 261)) | (1L << (MERGE - 261)) | (1L << (MINUTE - 261)) | (1L << (MINVALUE - 261)) | (1L << (MLSLABEL - 261)) | (1L << (MODEL - 261)) | (1L << (MODIFY - 261)) | (1L << (MONTH - 261)) | (1L << (MULTISET - 261)) | (1L << (NAME - 261)) | (1L << (NAN - 261)) | (1L << (NATURAL - 261)) | (1L << (NATURALN - 261)) | (1L << (NAV - 261)) | (1L << (NCHAR - 261)) | (1L << (NCHAR_CS - 261)) | (1L << (NCLOB - 261)) | (1L << (NESTED - 261)) | (1L << (NEVER - 261)) | (1L << (NEW - 261)) | (1L << (NO - 261)) | (1L << (NOAUDIT - 261)) | (1L << (NOCOPY - 261)) | (1L << (NOCYCLE - 261)) | (1L << (NOENTITYESCAPING - 261)))) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & ((1L << (NONE - 329)) | (1L << (NOSCHEMACHECK - 329)) | (1L << (NVL - 329)) | (1L << (NULLS - 329)) | (1L << (NUMBER - 329)) | (1L << (NUMERIC - 329)) | (1L << (NVARCHAR2 - 329)) | (1L << (MATERIALIZED - 329)) | (1L << (OBJECT - 329)) | (1L << (OFF - 329)) | (1L << (OID - 329)) | (1L << (OLD - 329)) | (1L << (ONLY - 329)) | (1L << (OPEN - 329)) | (1L << (ORADATA - 329)) | (1L << (ORDINALITY - 329)) | (1L << (OSERROR - 329)) | (1L << (OUT - 329)) | (1L << (OUTER - 329)) | (1L << (OVER - 329)) | (1L << (OVERRIDING - 329)) | (1L << (PACKAGE - 329)) | (1L << (PARALLEL_ENABLE - 329)) | (1L << (PARAMETERS - 329)) | (1L << (PARENT - 329)) | (1L << (PARTITION - 329)) | (1L << (PASSING - 329)) | (1L << (PATH - 329)) | (1L << (PIPELINED - 329)) | (1L << (PLAN - 329)) | (1L << (PLS_INTEGER - 329)) | (1L << (POSITIVE - 329)) | (1L << (POSITIVEN - 329)) | (1L << (PRAGMA - 329)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (PREBUILT - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)) | (1L << (PRESENT - 393)) | (1L << (PUBLIC - 393)) | (1L << (RAISE - 393)) | (1L << (RANGE - 393)) | (1L << (RAW - 393)) | (1L << (READ - 393)) | (1L << (REAL - 393)) | (1L << (RECORD - 393)) | (1L << (REDUCED - 393)) | (1L << (REF - 393)) | (1L << (REFERENCE - 393)) | (1L << (REFERENCING - 393)) | (1L << (REFRESH - 393)) | (1L << (REJECT - 393)) | (1L << (RELIES_ON - 393)) | (1L << (RENAME - 393)) | (1L << (REPLACE - 393)) | (1L << (RESPECT - 393)) | (1L << (RESTRICT_REFERENCES - 393)) | (1L << (RESULT - 393)) | (1L << (RESULT_CACHE - 393)) | (1L << (RETURN - 393)) | (1L << (RETURNING - 393)) | (1L << (REUSE - 393)) | (1L << (REVERSE - 393)) | (1L << (REWRITE - 393)) | (1L << (RIGHT - 393)) | (1L << (ROLE - 393)) | (1L << (ROLLBACK - 393)) | (1L << (ROLLUP - 393)) | (1L << (ROW - 393)) | (1L << (ROWID - 393)) | (1L << (ROWS - 393)) | (1L << (RULES - 393)) | (1L << (SAMPLE - 393)) | (1L << (SAVE - 393)) | (1L << (SAVEPOINT - 393)) | (1L << (SCHEMA - 393)) | (1L << (SCHEMACHECK - 393)) | (1L << (SCN - 393)) | (1L << (SECOND - 393)))) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & ((1L << (SEED - 458)) | (1L << (SEGMENT - 458)) | (1L << (SELF - 458)) | (1L << (SEQUENTIAL - 458)) | (1L << (SERIALIZABLE - 458)) | (1L << (SERIALLY_REUSABLE - 458)) | (1L << (SERVERERROR - 458)) | (1L << (SESSIONTIMEZONE - 458)) | (1L << (SET - 458)) | (1L << (SETS - 458)) | (1L << (SETTINGS - 458)) | (1L << (SHOW - 458)) | (1L << (SHUTDOWN - 458)) | (1L << (SIBLINGS - 458)) | (1L << (SIGNTYPE - 458)) | (1L << (SIMPLE_INTEGER - 458)) | (1L << (SINGLE - 458)) | (1L << (SIZE - 458)) | (1L << (SKIP_ - 458)) | (1L << (SMALLINT - 458)) | (1L << (SNAPSHOT - 458)) | (1L << (SOME - 458)) | (1L << (SPECIFICATION - 458)) | (1L << (SQLDATA - 458)) | (1L << (SQLERROR - 458)) | (1L << (STANDALONE - 458)) | (1L << (STARTUP - 458)) | (1L << (STATEMENT - 458)) | (1L << (STATEMENT_ID - 458)) | (1L << (STATIC - 458)) | (1L << (STATISTICS - 458)) | (1L << (STRING - 458)) | (1L << (SUBMULTISET - 458)) | (1L << (SUBPARTITION - 458)) | (1L << (SUBSTITUTABLE - 458)) | (1L << (SUBSTRING - 458)) | (1L << (SUBTYPE - 458)) | (1L << (SUCCESS - 458)) | (1L << (SUSPEND - 458)) | (1L << (TABLES - 458)) | (1L << (TIME - 458)) | (1L << (TIMESTAMP - 458)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 458)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 458)) | (1L << (TIMESTAMP_UNCONSTRAINED - 458)))) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & ((1L << (TIMEZONE_ABBR - 522)) | (1L << (TIMEZONE_HOUR - 522)) | (1L << (TIMEZONE_MINUTE - 522)) | (1L << (TIMEZONE_REGION - 522)) | (1L << (TO_CHAR - 522)) | (1L << (TO_DATE - 522)) | (1L << (TRAILING - 522)) | (1L << (TRANSACTION - 522)) | (1L << (TRANSLATE - 522)) | (1L << (TREAT - 522)) | (1L << (TRIGGER - 522)) | (1L << (TRIM - 522)) | (1L << (TRUNCATE - 522)) | (1L << (TRUSTED - 522)) | (1L << (TYPE - 522)) | (1L << (UNBOUNDED - 522)) | (1L << (UNDER - 522)) | (1L << (UNLIMITED - 522)) | (1L << (UNTIL - 522)) | (1L << (UPDATED - 522)) | (1L << (UPSERT - 522)) | (1L << (UROWID - 522)) | (1L << (USE - 522)) | (1L << (VALIDATE - 522)) | (1L << (VALUE - 522)) | (1L << (VARCHAR - 522)) | (1L << (VARCHAR2 - 522)) | (1L << (VARIABLE - 522)) | (1L << (VARRAY - 522)) | (1L << (VARYING - 522)) | (1L << (VERBOSE - 522)) | (1L << (VERSION - 522)) | (1L << (VERSIONS - 522)) | (1L << (VIEW - 522)) | (1L << (WAIT - 522)) | (1L << (WARNING - 522)) | (1L << (WELLFORMED - 522)) | (1L << (WHENEVER - 522)) | (1L << (WHILE - 522)) | (1L << (WITHOUT - 522)) | (1L << (WITHIN - 522)) | (1L << (WORK - 522)) | (1L << (WRITE - 522)) | (1L << (XML - 522)) | (1L << (XMLAGG - 522)) | (1L << (XMLATTRIBUTES - 522)))) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & ((1L << (XMLCAST - 586)) | (1L << (XMLCOLATTVAL - 586)) | (1L << (XMLELEMENT - 586)) | (1L << (XMLEXISTS - 586)) | (1L << (XMLFOREST - 586)) | (1L << (XMLNAMESPACES - 586)) | (1L << (XMLPARSE - 586)) | (1L << (XMLPI - 586)) | (1L << (XMLQUERY - 586)) | (1L << (XMLROOT - 586)) | (1L << (XMLSERIALIZE - 586)) | (1L << (XMLTABLE - 586)) | (1L << (YEAR - 586)) | (1L << (YES - 586)) | (1L << (YMINTERVAL_UNCONSTRAINED - 586)) | (1L << (ZONE - 586)) | (1L << (PREDICTION - 586)) | (1L << (PREDICTION_BOUNDS - 586)) | (1L << (PREDICTION_COST - 586)) | (1L << (PREDICTION_DETAILS - 586)) | (1L << (PREDICTION_PROBABILITY - 586)) | (1L << (PREDICTION_SET - 586)) | (1L << (CUME_DIST - 586)) | (1L << (DENSE_RANK - 586)) | (1L << (LISTAGG - 586)) | (1L << (PERCENT_RANK - 586)) | (1L << (PERCENTILE_CONT - 586)) | (1L << (PERCENTILE_DISC - 586)) | (1L << (RANK - 586)) | (1L << (AVG - 586)) | (1L << (CORR - 586)) | (1L << (LAG - 586)) | (1L << (LEAD - 586)) | (1L << (MAX - 586)) | (1L << (MEDIAN - 586)) | (1L << (MIN - 586)) | (1L << (NTILE - 586)) | (1L << (RATIO_TO_REPORT - 586)) | (1L << (ROW_NUMBER - 586)) | (1L << (SUM - 586)) | (1L << (VARIANCE - 586)) | (1L << (REGR_ - 586)) | (1L << (STDDEV - 586)) | (1L << (VAR_ - 586)) | (1L << (COVAR_ - 586)) | (1L << (DELIMITED_ID - 586)))) != 0) || _la==REGULAR_ID) {
				{
				setState(5488);
				label_name();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cursor_loop_paramContext extends ParserRuleContext {
		public Index_nameContext index_name() {
			return getRuleContext(Index_nameContext.class,0);
		}
		public TerminalNode IN() { return getToken(PLSQLParser.IN, 0); }
		public Lower_boundContext lower_bound() {
			return getRuleContext(Lower_boundContext.class,0);
		}
		public Upper_boundContext upper_bound() {
			return getRuleContext(Upper_boundContext.class,0);
		}
		public TerminalNode REVERSE() { return getToken(PLSQLParser.REVERSE, 0); }
		public Record_nameContext record_name() {
			return getRuleContext(Record_nameContext.class,0);
		}
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(PLSQLParser.LEFT_PAREN, 0); }
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PLSQLParser.RIGHT_PAREN, 0); }
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public Cursor_loop_paramContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursor_loop_param; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterCursor_loop_param(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitCursor_loop_param(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitCursor_loop_param(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cursor_loop_paramContext cursor_loop_param() throws RecognitionException {
		Cursor_loop_paramContext _localctx = new Cursor_loop_paramContext(_ctx, getState());
		enterRule(_localctx, 588, RULE_cursor_loop_param);
		int _la;
		try {
			setState(5512);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,778,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5491);
				index_name();
				setState(5492);
				match(IN);
				setState(5494);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,775,_ctx) ) {
				case 1:
					{
					setState(5493);
					match(REVERSE);
					}
					break;
				}
				setState(5496);
				lower_bound();
				setState(5497);
				match(T__0);
				setState(5498);
				upper_bound();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5500);
				record_name();
				setState(5501);
				match(IN);
				setState(5510);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case A_LETTER:
				case ADD:
				case AFTER:
				case AGENT:
				case AGGREGATE:
				case ANALYZE:
				case ARRAY:
				case ASSOCIATE:
				case AT:
				case ATTRIBUTE:
				case AUDIT:
				case AUTHID:
				case AUTO:
				case AUTOMATIC:
				case AUTONOMOUS_TRANSACTION:
				case BATCH:
				case BEFORE:
				case BFILE:
				case BINARY_DOUBLE:
				case BINARY_FLOAT:
				case BINARY_INTEGER:
				case BUILD:
				case BLOB:
				case BLOCK:
				case BODY:
				case BOOLEAN:
				case BOTH:
				case BULK:
				case BYTE:
				case C_LETTER:
				case CALL:
				case CANONICAL:
				case CASCADE:
				case CAST:
				case CHAR:
				case CHAR_CS:
				case CHARACTER:
				case CHR:
				case CLOB:
				case CLOSE:
				case CLUSTER:
				case COALESCE:
				case COLLECT:
				case COLUMNS:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case COMPATIBILITY:
				case COMPILE:
				case COMPLETE:
				case COMPOUND:
				case CONCAT:
				case CONSTANT:
				case CONSTRAINT:
				case CONSTRAINTS:
				case CONSTRUCTOR:
				case CONTENT:
				case CONTEXT:
				case CONTINUE:
				case CONVERT:
				case CORRUPT_XID:
				case CORRUPT_XID_ALL:
				case COST:
				case COUNT:
				case CROSS:
				case CUBE:
				case CURRENT_USER:
				case CURSOR:
				case CUSTOMDATUM:
				case CYCLE:
				case DATA:
				case DATABASE:
				case DATE:
				case DAY:
				case DB_ROLE_CHANGE:
				case DBTIMEZONE:
				case DDL:
				case DEBUG:
				case DEC:
				case DECIMAL:
				case DECODE:
				case DECOMPOSE:
				case DECREMENT:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DEMAND:
				case DETERMINISTIC:
				case DIMENSION:
				case DISABLE:
				case DISASSOCIATE:
				case DOCUMENT:
				case DOUBLE:
				case DSINTERVAL_UNCONSTRAINED:
				case EACH:
				case EDITIONING:
				case ELEMENT:
				case EMPTY:
				case ENABLE:
				case ENCODING:
				case ENFORCED:
				case ENTITYESCAPING:
				case ERR:
				case ERRORS:
				case ESCAPE:
				case EVALNAME:
				case EXCEPTION:
				case EXCEPTION_INIT:
				case EXCEPTIONS:
				case EXCLUDE:
				case EXECUTE:
				case EXIT:
				case EXPLAIN:
				case EXTERNAL:
				case EXTRACT:
				case FAILURE:
				case FAST:
				case FINAL:
				case FIRST:
				case FIRST_VALUE:
				case FLOAT:
				case FOLLOWING:
				case FOLLOWS:
				case FORALL:
				case FORCE:
				case FULL:
				case FUNCTION:
				case GROUPING:
				case HASH:
				case HIDE:
				case HOUR:
				case IGNORE:
				case IMMEDIATE:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDENT:
				case INDEXED:
				case INDICATOR:
				case INDICES:
				case INFINITE:
				case INLINE:
				case INNER:
				case INOUT:
				case INSTANTIABLE:
				case INSTEAD:
				case INT:
				case INTEGER:
				case INTERVAL:
				case INVALIDATE:
				case ISOLATION:
				case ITERATE:
				case JAVA:
				case JOIN:
				case KEEP:
				case LANGUAGE:
				case LAST:
				case LAST_VALUE:
				case LEADING:
				case LEFT:
				case LEVEL:
				case LIBRARY:
				case LIKE2:
				case LIKE4:
				case LIKEC:
				case LIMIT:
				case LIST:
				case LOCAL:
				case LOCKED:
				case LOG:
				case LOGOFF:
				case LOGON:
				case LONG:
				case LOOP:
				case MAIN:
				case MAP:
				case MASTER:
				case MATCHED:
				case MAXVALUE:
				case MEASURES:
				case MEMBER:
				case MERGE:
				case MINUTE:
				case MINVALUE:
				case MLSLABEL:
				case MODEL:
				case MODIFY:
				case MONTH:
				case MULTISET:
				case NAME:
				case NAN:
				case NATURAL:
				case NATURALN:
				case NAV:
				case NCHAR:
				case NCHAR_CS:
				case NCLOB:
				case NESTED:
				case NEVER:
				case NEW:
				case NO:
				case NOAUDIT:
				case NOCOPY:
				case NOCYCLE:
				case NOENTITYESCAPING:
				case NONE:
				case NOSCHEMACHECK:
				case NVL:
				case NULLS:
				case NUMBER:
				case NUMERIC:
				case NVARCHAR2:
				case MATERIALIZED:
				case OBJECT:
				case OFF:
				case OID:
				case OLD:
				case ONLY:
				case OPEN:
				case ORADATA:
				case ORDINALITY:
				case OSERROR:
				case OUT:
				case OUTER:
				case OVER:
				case OVERRIDING:
				case PACKAGE:
				case PARALLEL_ENABLE:
				case PARAMETERS:
				case PARENT:
				case PARTITION:
				case PASSING:
				case PATH:
				case PIPELINED:
				case PLAN:
				case PLS_INTEGER:
				case POSITIVE:
				case POSITIVEN:
				case PRAGMA:
				case PREBUILT:
				case PRECEDING:
				case PRECISION:
				case PRESENT:
				case PUBLIC:
				case RAISE:
				case RANGE:
				case RAW:
				case READ:
				case REAL:
				case RECORD:
				case REDUCED:
				case REF:
				case REFERENCE:
				case REFERENCING:
				case REFRESH:
				case REJECT:
				case RELIES_ON:
				case RENAME:
				case REPLACE:
				case RESPECT:
				case RESTRICT_REFERENCES:
				case RESULT:
				case RESULT_CACHE:
				case RETURN:
				case RETURNING:
				case REUSE:
				case REVERSE:
				case REWRITE:
				case RIGHT:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROW:
				case ROWID:
				case ROWS:
				case RULES:
				case SAMPLE:
				case SAVE:
				case SAVEPOINT:
				case SCHEMA:
				case SCHEMACHECK:
				case SCN:
				case SECOND:
				case SEED:
				case SEGMENT:
				case SELF:
				case SEQUENTIAL:
				case SERIALIZABLE:
				case SERIALLY_REUSABLE:
				case SERVERERROR:
				case SESSIONTIMEZONE:
				case SET:
				case SETS:
				case SETTINGS:
				case SHOW:
				case SHUTDOWN:
				case SIBLINGS:
				case SIGNTYPE:
				case SIMPLE_INTEGER:
				case SINGLE:
				case SIZE:
				case SKIP_:
				case SMALLINT:
				case SNAPSHOT:
				case SOME:
				case SPECIFICATION:
				case SQLDATA:
				case SQLERROR:
				case STANDALONE:
				case STARTUP:
				case STATEMENT:
				case STATEMENT_ID:
				case STATIC:
				case STATISTICS:
				case STRING:
				case SUBMULTISET:
				case SUBPARTITION:
				case SUBSTITUTABLE:
				case SUBSTRING:
				case SUBTYPE:
				case SUCCESS:
				case SUSPEND:
				case TABLES:
				case TIME:
				case TIMESTAMP:
				case TIMESTAMP_LTZ_UNCONSTRAINED:
				case TIMESTAMP_TZ_UNCONSTRAINED:
				case TIMESTAMP_UNCONSTRAINED:
				case TIMEZONE_ABBR:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TIMEZONE_REGION:
				case TO_CHAR:
				case TO_DATE:
				case TRAILING:
				case TRANSACTION:
				case TRANSLATE:
				case TREAT:
				case TRIGGER:
				case TRIM:
				case TRUNCATE:
				case TRUSTED:
				case TYPE:
				case UNBOUNDED:
				case UNDER:
				case UNLIMITED:
				case UNTIL:
				case UPDATED:
				case UPSERT:
				case UROWID:
				case USE:
				case VALIDATE:
				case VALUE:
				case VARCHAR:
				case VARCHAR2:
				case VARIABLE:
				case VARRAY:
				case VARYING:
				case VERBOSE:
				case VERSION:
				case VERSIONS:
				case VIEW:
				case WAIT:
				case WARNING:
				case WELLFORMED:
				case WHENEVER:
				case WHILE:
				case WITHOUT:
				case WITHIN:
				case WORK:
				case WRITE:
				case XML:
				case XMLAGG:
				case XMLATTRIBUTES:
				case XMLCAST:
				case XMLCOLATTVAL:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLQUERY:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case YEAR:
				case YES:
				case YMINTERVAL_UNCONSTRAINED:
				case ZONE:
				case PREDICTION:
				case PREDICTION_BOUNDS:
				case PREDICTION_COST:
				case PREDICTION_DETAILS:
				case PREDICTION_PROBABILITY:
				case PREDICTION_SET:
				case CUME_DIST:
				case DENSE_RANK:
				case LISTAGG:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case RANK:
				case AVG:
				case CORR:
				case LAG:
				case LEAD:
				case MAX:
				case MEDIAN:
				case MIN:
				case NTILE:
				case RATIO_TO_REPORT:
				case ROW_NUMBER:
				case SUM:
				case VARIANCE:
				case REGR_:
				case STDDEV:
				case VAR_:
				case COVAR_:
				case DELIMITED_ID:
				case BINDVAR:
				case COLON:
				case REGULAR_ID:
					{
					setState(5502);
					cursor_name();
					setState(5504);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==LEFT_PAREN) {
						{
						setState(5503);
						expression_list();
						}
					}

					}
					break;
				case LEFT_PAREN:
					{
					setState(5506);
					match(LEFT_PAREN);
					setState(5507);
					select_statement();
					setState(5508);
					match(RIGHT_PAREN);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Forall_statementContext extends ParserRuleContext {
		public TerminalNode FORALL() { return getToken(PLSQLParser.FORALL, 0); }
		public Index_nameContext index_name() {
			return getRuleContext(Index_nameContext.class,0);
		}
		public TerminalNode IN() { return getToken(PLSQLParser.IN, 0); }
		public Bounds_clauseContext bounds_clause() {
			return getRuleContext(Bounds_clauseContext.class,0);
		}
		public Sql_statementContext sql_statement() {
			return getRuleContext(Sql_statementContext.class,0);
		}
		public TerminalNode SAVE() { return getToken(PLSQLParser.SAVE, 0); }
		public TerminalNode EXCEPTIONS() { return getToken(PLSQLParser.EXCEPTIONS, 0); }
		public Forall_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_forall_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterForall_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitForall_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitForall_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Forall_statementContext forall_statement() throws RecognitionException {
		Forall_statementContext _localctx = new Forall_statementContext(_ctx, getState());
		enterRule(_localctx, 590, RULE_forall_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5514);
			match(FORALL);
			setState(5515);
			index_name();
			setState(5516);
			match(IN);
			setState(5517);
			bounds_clause();
			setState(5518);
			sql_statement();
			setState(5521);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SAVE) {
				{
				setState(5519);
				match(SAVE);
				setState(5520);
				match(EXCEPTIONS);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Bounds_clauseContext extends ParserRuleContext {
		public Lower_boundContext lower_bound() {
			return getRuleContext(Lower_boundContext.class,0);
		}
		public Upper_boundContext upper_bound() {
			return getRuleContext(Upper_boundContext.class,0);
		}
		public TerminalNode INDICES() { return getToken(PLSQLParser.INDICES, 0); }
		public TerminalNode OF() { return getToken(PLSQLParser.OF, 0); }
		public Collection_nameContext collection_name() {
			return getRuleContext(Collection_nameContext.class,0);
		}
		public Between_boundContext between_bound() {
			return getRuleContext(Between_boundContext.class,0);
		}
		public TerminalNode VALUES() { return getToken(PLSQLParser.VALUES, 0); }
		public Index_nameContext index_name() {
			return getRuleContext(Index_nameContext.class,0);
		}
		public Bounds_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bounds_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterBounds_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitBounds_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitBounds_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Bounds_clauseContext bounds_clause() throws RecognitionException {
		Bounds_clauseContext _localctx = new Bounds_clauseContext(_ctx, getState());
		enterRule(_localctx, 592, RULE_bounds_clause);
		int _la;
		try {
			setState(5536);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,781,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5523);
				lower_bound();
				setState(5524);
				match(T__0);
				setState(5525);
				upper_bound();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5527);
				match(INDICES);
				setState(5528);
				match(OF);
				setState(5529);
				collection_name();
				setState(5531);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==BETWEEN) {
					{
					setState(5530);
					between_bound();
					}
				}

				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5533);
				match(VALUES);
				setState(5534);
				match(OF);
				setState(5535);
				index_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Between_boundContext extends ParserRuleContext {
		public TerminalNode BETWEEN() { return getToken(PLSQLParser.BETWEEN, 0); }
		public Lower_boundContext lower_bound() {
			return getRuleContext(Lower_boundContext.class,0);
		}
		public TerminalNode AND() { return getToken(PLSQLParser.AND, 0); }
		public Upper_boundContext upper_bound() {
			return getRuleContext(Upper_boundContext.class,0);
		}
		public Between_boundContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_between_bound; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterBetween_bound(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitBetween_bound(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitBetween_bound(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Between_boundContext between_bound() throws RecognitionException {
		Between_boundContext _localctx = new Between_boundContext(_ctx, getState());
		enterRule(_localctx, 594, RULE_between_bound);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5538);
			match(BETWEEN);
			setState(5539);
			lower_bound();
			setState(5540);
			match(AND);
			setState(5541);
			upper_bound();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Lower_boundContext extends ParserRuleContext {
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		public Lower_boundContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lower_bound; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterLower_bound(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitLower_bound(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitLower_bound(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Lower_boundContext lower_bound() throws RecognitionException {
		Lower_boundContext _localctx = new Lower_boundContext(_ctx, getState());
		enterRule(_localctx, 596, RULE_lower_bound);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5543);
			concatenation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Upper_boundContext extends ParserRuleContext {
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		public Upper_boundContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_upper_bound; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterUpper_bound(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitUpper_bound(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitUpper_bound(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Upper_boundContext upper_bound() throws RecognitionException {
		Upper_boundContext _localctx = new Upper_boundContext(_ctx, getState());
		enterRule(_localctx, 598, RULE_upper_bound);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5545);
			concatenation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Null_statementContext extends ParserRuleContext {
		public TerminalNode NULL() { return getToken(PLSQLParser.NULL, 0); }
		public Null_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_null_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterNull_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitNull_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitNull_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Null_statementContext null_statement() throws RecognitionException {
		Null_statementContext _localctx = new Null_statementContext(_ctx, getState());
		enterRule(_localctx, 600, RULE_null_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5547);
			match(NULL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Raise_statementContext extends ParserRuleContext {
		public TerminalNode RAISE() { return getToken(PLSQLParser.RAISE, 0); }
		public Exception_nameContext exception_name() {
			return getRuleContext(Exception_nameContext.class,0);
		}
		public Raise_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_raise_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterRaise_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitRaise_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitRaise_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Raise_statementContext raise_statement() throws RecognitionException {
		Raise_statementContext _localctx = new Raise_statementContext(_ctx, getState());
		enterRule(_localctx, 602, RULE_raise_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5549);
			match(RAISE);
			setState(5551);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BUILD) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (CHR - 65)) | (1L << (CLOB - 65)) | (1L << (CLOSE - 65)) | (1L << (CLUSTER - 65)) | (1L << (COALESCE - 65)) | (1L << (COLLECT - 65)) | (1L << (COLUMNS - 65)) | (1L << (COMMENT - 65)) | (1L << (COMMIT - 65)) | (1L << (COMMITTED - 65)) | (1L << (COMPATIBILITY - 65)) | (1L << (COMPILE - 65)) | (1L << (COMPLETE - 65)) | (1L << (COMPOUND - 65)) | (1L << (CONCAT - 65)) | (1L << (CONSTANT - 65)) | (1L << (CONSTRAINT - 65)) | (1L << (CONSTRAINTS - 65)) | (1L << (CONSTRUCTOR - 65)) | (1L << (CONTENT - 65)) | (1L << (CONTEXT - 65)) | (1L << (CONTINUE - 65)) | (1L << (CONVERT - 65)) | (1L << (CORRUPT_XID - 65)) | (1L << (CORRUPT_XID_ALL - 65)) | (1L << (COST - 65)) | (1L << (COUNT - 65)) | (1L << (CROSS - 65)) | (1L << (CUBE - 65)) | (1L << (CURRENT_USER - 65)) | (1L << (CURSOR - 65)) | (1L << (CUSTOMDATUM - 65)) | (1L << (CYCLE - 65)) | (1L << (DATA - 65)) | (1L << (DATABASE - 65)) | (1L << (DATE - 65)) | (1L << (DAY - 65)) | (1L << (DB_ROLE_CHANGE - 65)) | (1L << (DBTIMEZONE - 65)) | (1L << (DDL - 65)) | (1L << (DEBUG - 65)) | (1L << (DEC - 65)) | (1L << (DECIMAL - 65)) | (1L << (DECODE - 65)) | (1L << (DECOMPOSE - 65)) | (1L << (DECREMENT - 65)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DEMAND - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (EDITIONING - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENFORCED - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FAST - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)) | (1L << (FOLLOWING - 129)) | (1L << (FOLLOWS - 129)) | (1L << (FORALL - 129)) | (1L << (FORCE - 129)))) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & ((1L << (FULL - 197)) | (1L << (FUNCTION - 197)) | (1L << (GROUPING - 197)) | (1L << (HASH - 197)) | (1L << (HIDE - 197)) | (1L << (HOUR - 197)) | (1L << (IGNORE - 197)) | (1L << (IMMEDIATE - 197)) | (1L << (INCLUDE - 197)) | (1L << (INCLUDING - 197)) | (1L << (INCREMENT - 197)) | (1L << (INDENT - 197)) | (1L << (INDEXED - 197)) | (1L << (INDICATOR - 197)) | (1L << (INDICES - 197)) | (1L << (INFINITE - 197)) | (1L << (INLINE - 197)) | (1L << (INNER - 197)) | (1L << (INOUT - 197)) | (1L << (INSTANTIABLE - 197)) | (1L << (INSTEAD - 197)) | (1L << (INT - 197)) | (1L << (INTEGER - 197)) | (1L << (INTERVAL - 197)) | (1L << (INVALIDATE - 197)) | (1L << (ISOLATION - 197)) | (1L << (ITERATE - 197)) | (1L << (JAVA - 197)) | (1L << (JOIN - 197)) | (1L << (KEEP - 197)) | (1L << (LANGUAGE - 197)) | (1L << (LAST - 197)) | (1L << (LAST_VALUE - 197)) | (1L << (LEADING - 197)) | (1L << (LEFT - 197)) | (1L << (LEVEL - 197)))) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & ((1L << (LIBRARY - 261)) | (1L << (LIKE2 - 261)) | (1L << (LIKE4 - 261)) | (1L << (LIKEC - 261)) | (1L << (LIMIT - 261)) | (1L << (LIST - 261)) | (1L << (LOCAL - 261)) | (1L << (LOCKED - 261)) | (1L << (LOG - 261)) | (1L << (LOGOFF - 261)) | (1L << (LOGON - 261)) | (1L << (LONG - 261)) | (1L << (LOOP - 261)) | (1L << (MAIN - 261)) | (1L << (MAP - 261)) | (1L << (MASTER - 261)) | (1L << (MATCHED - 261)) | (1L << (MAXVALUE - 261)) | (1L << (MEASURES - 261)) | (1L << (MEMBER - 261)) | (1L << (MERGE - 261)) | (1L << (MINUTE - 261)) | (1L << (MINVALUE - 261)) | (1L << (MLSLABEL - 261)) | (1L << (MODEL - 261)) | (1L << (MODIFY - 261)) | (1L << (MONTH - 261)) | (1L << (MULTISET - 261)) | (1L << (NAME - 261)) | (1L << (NAN - 261)) | (1L << (NATURAL - 261)) | (1L << (NATURALN - 261)) | (1L << (NAV - 261)) | (1L << (NCHAR - 261)) | (1L << (NCHAR_CS - 261)) | (1L << (NCLOB - 261)) | (1L << (NESTED - 261)) | (1L << (NEVER - 261)) | (1L << (NEW - 261)) | (1L << (NO - 261)) | (1L << (NOAUDIT - 261)) | (1L << (NOCOPY - 261)) | (1L << (NOCYCLE - 261)) | (1L << (NOENTITYESCAPING - 261)))) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & ((1L << (NONE - 329)) | (1L << (NOSCHEMACHECK - 329)) | (1L << (NVL - 329)) | (1L << (NULLS - 329)) | (1L << (NUMBER - 329)) | (1L << (NUMERIC - 329)) | (1L << (NVARCHAR2 - 329)) | (1L << (MATERIALIZED - 329)) | (1L << (OBJECT - 329)) | (1L << (OFF - 329)) | (1L << (OID - 329)) | (1L << (OLD - 329)) | (1L << (ONLY - 329)) | (1L << (OPEN - 329)) | (1L << (ORADATA - 329)) | (1L << (ORDINALITY - 329)) | (1L << (OSERROR - 329)) | (1L << (OUT - 329)) | (1L << (OUTER - 329)) | (1L << (OVER - 329)) | (1L << (OVERRIDING - 329)) | (1L << (PACKAGE - 329)) | (1L << (PARALLEL_ENABLE - 329)) | (1L << (PARAMETERS - 329)) | (1L << (PARENT - 329)) | (1L << (PARTITION - 329)) | (1L << (PASSING - 329)) | (1L << (PATH - 329)) | (1L << (PIPELINED - 329)) | (1L << (PLAN - 329)) | (1L << (PLS_INTEGER - 329)) | (1L << (POSITIVE - 329)) | (1L << (POSITIVEN - 329)) | (1L << (PRAGMA - 329)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (PREBUILT - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)) | (1L << (PRESENT - 393)) | (1L << (PUBLIC - 393)) | (1L << (RAISE - 393)) | (1L << (RANGE - 393)) | (1L << (RAW - 393)) | (1L << (READ - 393)) | (1L << (REAL - 393)) | (1L << (RECORD - 393)) | (1L << (REDUCED - 393)) | (1L << (REF - 393)) | (1L << (REFERENCE - 393)) | (1L << (REFERENCING - 393)) | (1L << (REFRESH - 393)) | (1L << (REJECT - 393)) | (1L << (RELIES_ON - 393)) | (1L << (RENAME - 393)) | (1L << (REPLACE - 393)) | (1L << (RESPECT - 393)) | (1L << (RESTRICT_REFERENCES - 393)) | (1L << (RESULT - 393)) | (1L << (RESULT_CACHE - 393)) | (1L << (RETURN - 393)) | (1L << (RETURNING - 393)) | (1L << (REUSE - 393)) | (1L << (REVERSE - 393)) | (1L << (REWRITE - 393)) | (1L << (RIGHT - 393)) | (1L << (ROLE - 393)) | (1L << (ROLLBACK - 393)) | (1L << (ROLLUP - 393)) | (1L << (ROW - 393)) | (1L << (ROWID - 393)) | (1L << (ROWS - 393)) | (1L << (RULES - 393)) | (1L << (SAMPLE - 393)) | (1L << (SAVE - 393)) | (1L << (SAVEPOINT - 393)) | (1L << (SCHEMA - 393)) | (1L << (SCHEMACHECK - 393)) | (1L << (SCN - 393)) | (1L << (SECOND - 393)))) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & ((1L << (SEED - 458)) | (1L << (SEGMENT - 458)) | (1L << (SELF - 458)) | (1L << (SEQUENTIAL - 458)) | (1L << (SERIALIZABLE - 458)) | (1L << (SERIALLY_REUSABLE - 458)) | (1L << (SERVERERROR - 458)) | (1L << (SESSIONTIMEZONE - 458)) | (1L << (SET - 458)) | (1L << (SETS - 458)) | (1L << (SETTINGS - 458)) | (1L << (SHOW - 458)) | (1L << (SHUTDOWN - 458)) | (1L << (SIBLINGS - 458)) | (1L << (SIGNTYPE - 458)) | (1L << (SIMPLE_INTEGER - 458)) | (1L << (SINGLE - 458)) | (1L << (SIZE - 458)) | (1L << (SKIP_ - 458)) | (1L << (SMALLINT - 458)) | (1L << (SNAPSHOT - 458)) | (1L << (SOME - 458)) | (1L << (SPECIFICATION - 458)) | (1L << (SQLDATA - 458)) | (1L << (SQLERROR - 458)) | (1L << (STANDALONE - 458)) | (1L << (STARTUP - 458)) | (1L << (STATEMENT - 458)) | (1L << (STATEMENT_ID - 458)) | (1L << (STATIC - 458)) | (1L << (STATISTICS - 458)) | (1L << (STRING - 458)) | (1L << (SUBMULTISET - 458)) | (1L << (SUBPARTITION - 458)) | (1L << (SUBSTITUTABLE - 458)) | (1L << (SUBSTRING - 458)) | (1L << (SUBTYPE - 458)) | (1L << (SUCCESS - 458)) | (1L << (SUSPEND - 458)) | (1L << (TABLES - 458)) | (1L << (TIME - 458)) | (1L << (TIMESTAMP - 458)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 458)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 458)) | (1L << (TIMESTAMP_UNCONSTRAINED - 458)))) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & ((1L << (TIMEZONE_ABBR - 522)) | (1L << (TIMEZONE_HOUR - 522)) | (1L << (TIMEZONE_MINUTE - 522)) | (1L << (TIMEZONE_REGION - 522)) | (1L << (TO_CHAR - 522)) | (1L << (TO_DATE - 522)) | (1L << (TRAILING - 522)) | (1L << (TRANSACTION - 522)) | (1L << (TRANSLATE - 522)) | (1L << (TREAT - 522)) | (1L << (TRIGGER - 522)) | (1L << (TRIM - 522)) | (1L << (TRUNCATE - 522)) | (1L << (TRUSTED - 522)) | (1L << (TYPE - 522)) | (1L << (UNBOUNDED - 522)) | (1L << (UNDER - 522)) | (1L << (UNLIMITED - 522)) | (1L << (UNTIL - 522)) | (1L << (UPDATED - 522)) | (1L << (UPSERT - 522)) | (1L << (UROWID - 522)) | (1L << (USE - 522)) | (1L << (VALIDATE - 522)) | (1L << (VALUE - 522)) | (1L << (VARCHAR - 522)) | (1L << (VARCHAR2 - 522)) | (1L << (VARIABLE - 522)) | (1L << (VARRAY - 522)) | (1L << (VARYING - 522)) | (1L << (VERBOSE - 522)) | (1L << (VERSION - 522)) | (1L << (VERSIONS - 522)) | (1L << (VIEW - 522)) | (1L << (WAIT - 522)) | (1L << (WARNING - 522)) | (1L << (WELLFORMED - 522)) | (1L << (WHENEVER - 522)) | (1L << (WHILE - 522)) | (1L << (WITHOUT - 522)) | (1L << (WITHIN - 522)) | (1L << (WORK - 522)) | (1L << (WRITE - 522)) | (1L << (XML - 522)) | (1L << (XMLAGG - 522)) | (1L << (XMLATTRIBUTES - 522)))) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & ((1L << (XMLCAST - 586)) | (1L << (XMLCOLATTVAL - 586)) | (1L << (XMLELEMENT - 586)) | (1L << (XMLEXISTS - 586)) | (1L << (XMLFOREST - 586)) | (1L << (XMLNAMESPACES - 586)) | (1L << (XMLPARSE - 586)) | (1L << (XMLPI - 586)) | (1L << (XMLQUERY - 586)) | (1L << (XMLROOT - 586)) | (1L << (XMLSERIALIZE - 586)) | (1L << (XMLTABLE - 586)) | (1L << (YEAR - 586)) | (1L << (YES - 586)) | (1L << (YMINTERVAL_UNCONSTRAINED - 586)) | (1L << (ZONE - 586)) | (1L << (PREDICTION - 586)) | (1L << (PREDICTION_BOUNDS - 586)) | (1L << (PREDICTION_COST - 586)) | (1L << (PREDICTION_DETAILS - 586)) | (1L << (PREDICTION_PROBABILITY - 586)) | (1L << (PREDICTION_SET - 586)) | (1L << (CUME_DIST - 586)) | (1L << (DENSE_RANK - 586)) | (1L << (LISTAGG - 586)) | (1L << (PERCENT_RANK - 586)) | (1L << (PERCENTILE_CONT - 586)) | (1L << (PERCENTILE_DISC - 586)) | (1L << (RANK - 586)) | (1L << (AVG - 586)) | (1L << (CORR - 586)) | (1L << (LAG - 586)) | (1L << (LEAD - 586)) | (1L << (MAX - 586)) | (1L << (MEDIAN - 586)) | (1L << (MIN - 586)) | (1L << (NTILE - 586)) | (1L << (RATIO_TO_REPORT - 586)) | (1L << (ROW_NUMBER - 586)) | (1L << (SUM - 586)) | (1L << (VARIANCE - 586)) | (1L << (REGR_ - 586)) | (1L << (STDDEV - 586)) | (1L << (VAR_ - 586)) | (1L << (COVAR_ - 586)) | (1L << (DELIMITED_ID - 586)))) != 0) || _la==REGULAR_ID) {
				{
				setState(5550);
				exception_name();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Return_statementContext extends ParserRuleContext {
		public TerminalNode RETURN() { return getToken(PLSQLParser.RETURN, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public Return_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_return_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterReturn_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitReturn_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitReturn_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Return_statementContext return_statement() throws RecognitionException {
		Return_statementContext _localctx = new Return_statementContext(_ctx, getState());
		enterRule(_localctx, 604, RULE_return_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5553);
			match(RETURN);
			setState(5555);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BUILD) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (CHR - 65)) | (1L << (CLOB - 65)) | (1L << (CLOSE - 65)) | (1L << (CLUSTER - 65)) | (1L << (COALESCE - 65)) | (1L << (COLLECT - 65)) | (1L << (COLUMNS - 65)) | (1L << (COMMENT - 65)) | (1L << (COMMIT - 65)) | (1L << (COMMITTED - 65)) | (1L << (COMPATIBILITY - 65)) | (1L << (COMPILE - 65)) | (1L << (COMPLETE - 65)) | (1L << (COMPOUND - 65)) | (1L << (CONCAT - 65)) | (1L << (CONNECT_BY_ROOT - 65)) | (1L << (CONSTANT - 65)) | (1L << (CONSTRAINT - 65)) | (1L << (CONSTRAINTS - 65)) | (1L << (CONSTRUCTOR - 65)) | (1L << (CONTENT - 65)) | (1L << (CONTEXT - 65)) | (1L << (CONTINUE - 65)) | (1L << (CONVERT - 65)) | (1L << (CORRUPT_XID - 65)) | (1L << (CORRUPT_XID_ALL - 65)) | (1L << (COST - 65)) | (1L << (COUNT - 65)) | (1L << (CROSS - 65)) | (1L << (CUBE - 65)) | (1L << (CURRENT_USER - 65)) | (1L << (CURSOR - 65)) | (1L << (CUSTOMDATUM - 65)) | (1L << (CYCLE - 65)) | (1L << (DATA - 65)) | (1L << (DATABASE - 65)) | (1L << (DATE - 65)) | (1L << (DAY - 65)) | (1L << (DB_ROLE_CHANGE - 65)) | (1L << (DBTIMEZONE - 65)) | (1L << (DDL - 65)) | (1L << (DEBUG - 65)) | (1L << (DEC - 65)) | (1L << (DECIMAL - 65)) | (1L << (DECODE - 65)) | (1L << (DECOMPOSE - 65)) | (1L << (DECREMENT - 65)) | (1L << (DEFAULT - 65)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DEMAND - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DISTINCT - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (EDITIONING - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENFORCED - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXISTS - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FALSE - 129)) | (1L << (FAST - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)) | (1L << (FOLLOWING - 129)) | (1L << (FOLLOWS - 129)) | (1L << (FORALL - 129)) | (1L << (FORCE - 129)))) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & ((1L << (FULL - 197)) | (1L << (FUNCTION - 197)) | (1L << (GROUPING - 197)) | (1L << (HASH - 197)) | (1L << (HIDE - 197)) | (1L << (HOUR - 197)) | (1L << (IGNORE - 197)) | (1L << (IMMEDIATE - 197)) | (1L << (INCLUDE - 197)) | (1L << (INCLUDING - 197)) | (1L << (INCREMENT - 197)) | (1L << (INDENT - 197)) | (1L << (INDEXED - 197)) | (1L << (INDICATOR - 197)) | (1L << (INDICES - 197)) | (1L << (INFINITE - 197)) | (1L << (INLINE - 197)) | (1L << (INNER - 197)) | (1L << (INOUT - 197)) | (1L << (INSTANTIABLE - 197)) | (1L << (INSTEAD - 197)) | (1L << (INT - 197)) | (1L << (INTEGER - 197)) | (1L << (INTERVAL - 197)) | (1L << (INVALIDATE - 197)) | (1L << (ISOLATION - 197)) | (1L << (ITERATE - 197)) | (1L << (JAVA - 197)) | (1L << (JOIN - 197)) | (1L << (KEEP - 197)) | (1L << (LANGUAGE - 197)) | (1L << (LAST - 197)) | (1L << (LAST_VALUE - 197)) | (1L << (LEADING - 197)) | (1L << (LEFT - 197)) | (1L << (LEVEL - 197)))) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & ((1L << (LIBRARY - 261)) | (1L << (LIKE2 - 261)) | (1L << (LIKE4 - 261)) | (1L << (LIKEC - 261)) | (1L << (LIMIT - 261)) | (1L << (LIST - 261)) | (1L << (LOCAL - 261)) | (1L << (LOCKED - 261)) | (1L << (LOG - 261)) | (1L << (LOGOFF - 261)) | (1L << (LOGON - 261)) | (1L << (LONG - 261)) | (1L << (LOOP - 261)) | (1L << (MAIN - 261)) | (1L << (MAP - 261)) | (1L << (MASTER - 261)) | (1L << (MATCHED - 261)) | (1L << (MAXVALUE - 261)) | (1L << (MEASURES - 261)) | (1L << (MEMBER - 261)) | (1L << (MERGE - 261)) | (1L << (MINUTE - 261)) | (1L << (MINVALUE - 261)) | (1L << (MLSLABEL - 261)) | (1L << (MODEL - 261)) | (1L << (MODIFY - 261)) | (1L << (MONTH - 261)) | (1L << (MULTISET - 261)) | (1L << (NAME - 261)) | (1L << (NAN - 261)) | (1L << (NATURAL - 261)) | (1L << (NATURALN - 261)) | (1L << (NAV - 261)) | (1L << (NCHAR - 261)) | (1L << (NCHAR_CS - 261)) | (1L << (NCLOB - 261)) | (1L << (NESTED - 261)) | (1L << (NEVER - 261)) | (1L << (NEW - 261)) | (1L << (NO - 261)) | (1L << (NOAUDIT - 261)) | (1L << (NOCOPY - 261)) | (1L << (NOCYCLE - 261)) | (1L << (NOENTITYESCAPING - 261)))) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & ((1L << (NONE - 329)) | (1L << (NOSCHEMACHECK - 329)) | (1L << (NOT - 329)) | (1L << (NVL - 329)) | (1L << (NULL - 329)) | (1L << (NULLS - 329)) | (1L << (NUMBER - 329)) | (1L << (NUMERIC - 329)) | (1L << (NVARCHAR2 - 329)) | (1L << (MATERIALIZED - 329)) | (1L << (OBJECT - 329)) | (1L << (OFF - 329)) | (1L << (OID - 329)) | (1L << (OLD - 329)) | (1L << (ONLY - 329)) | (1L << (OPEN - 329)) | (1L << (ORADATA - 329)) | (1L << (ORDINALITY - 329)) | (1L << (OSERROR - 329)) | (1L << (OUT - 329)) | (1L << (OUTER - 329)) | (1L << (OVER - 329)) | (1L << (OVERRIDING - 329)) | (1L << (PACKAGE - 329)) | (1L << (PARALLEL_ENABLE - 329)) | (1L << (PARAMETERS - 329)) | (1L << (PARENT - 329)) | (1L << (PARTITION - 329)) | (1L << (PASSING - 329)) | (1L << (PATH - 329)) | (1L << (PIPELINED - 329)) | (1L << (PLAN - 329)) | (1L << (PLS_INTEGER - 329)) | (1L << (POSITION - 329)) | (1L << (POSITIVE - 329)) | (1L << (POSITIVEN - 329)) | (1L << (PRAGMA - 329)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (PREBUILT - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)) | (1L << (PRESENT - 393)) | (1L << (PRIOR - 393)) | (1L << (PUBLIC - 393)) | (1L << (RAISE - 393)) | (1L << (RANGE - 393)) | (1L << (RAW - 393)) | (1L << (READ - 393)) | (1L << (REAL - 393)) | (1L << (RECORD - 393)) | (1L << (REDUCED - 393)) | (1L << (REF - 393)) | (1L << (REFERENCE - 393)) | (1L << (REFERENCING - 393)) | (1L << (REFRESH - 393)) | (1L << (REJECT - 393)) | (1L << (RELIES_ON - 393)) | (1L << (RENAME - 393)) | (1L << (REPLACE - 393)) | (1L << (RESPECT - 393)) | (1L << (RESTRICT_REFERENCES - 393)) | (1L << (RESULT - 393)) | (1L << (RESULT_CACHE - 393)) | (1L << (RETURN - 393)) | (1L << (RETURNING - 393)) | (1L << (REUSE - 393)) | (1L << (REVERSE - 393)) | (1L << (REWRITE - 393)) | (1L << (RIGHT - 393)) | (1L << (ROLE - 393)) | (1L << (ROLLBACK - 393)) | (1L << (ROLLUP - 393)) | (1L << (ROW - 393)) | (1L << (ROWID - 393)) | (1L << (ROWS - 393)) | (1L << (RULES - 393)) | (1L << (SAMPLE - 393)) | (1L << (SAVE - 393)) | (1L << (SAVEPOINT - 393)) | (1L << (SCHEMA - 393)) | (1L << (SCHEMACHECK - 393)) | (1L << (SCN - 393)) | (1L << (SECOND - 393)))) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & ((1L << (SEED - 458)) | (1L << (SEGMENT - 458)) | (1L << (SELECT - 458)) | (1L << (SELF - 458)) | (1L << (SEQUENTIAL - 458)) | (1L << (SERIALIZABLE - 458)) | (1L << (SERIALLY_REUSABLE - 458)) | (1L << (SERVERERROR - 458)) | (1L << (SESSIONTIMEZONE - 458)) | (1L << (SET - 458)) | (1L << (SETS - 458)) | (1L << (SETTINGS - 458)) | (1L << (SHOW - 458)) | (1L << (SHUTDOWN - 458)) | (1L << (SIBLINGS - 458)) | (1L << (SIGNTYPE - 458)) | (1L << (SIMPLE_INTEGER - 458)) | (1L << (SINGLE - 458)) | (1L << (SIZE - 458)) | (1L << (SKIP_ - 458)) | (1L << (SMALLINT - 458)) | (1L << (SNAPSHOT - 458)) | (1L << (SOME - 458)) | (1L << (SPECIFICATION - 458)) | (1L << (SQLDATA - 458)) | (1L << (SQLERROR - 458)) | (1L << (STANDALONE - 458)) | (1L << (STARTUP - 458)) | (1L << (STATEMENT - 458)) | (1L << (STATEMENT_ID - 458)) | (1L << (STATIC - 458)) | (1L << (STATISTICS - 458)) | (1L << (STRING - 458)) | (1L << (SUBMULTISET - 458)) | (1L << (SUBPARTITION - 458)) | (1L << (SUBSTITUTABLE - 458)) | (1L << (SUBSTRING - 458)) | (1L << (SUBTYPE - 458)) | (1L << (SUCCESS - 458)) | (1L << (SUSPEND - 458)) | (1L << (TABLES - 458)) | (1L << (TIME - 458)) | (1L << (TIMESTAMP - 458)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 458)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 458)) | (1L << (TIMESTAMP_UNCONSTRAINED - 458)))) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & ((1L << (TIMEZONE_ABBR - 522)) | (1L << (TIMEZONE_HOUR - 522)) | (1L << (TIMEZONE_MINUTE - 522)) | (1L << (TIMEZONE_REGION - 522)) | (1L << (TO_CHAR - 522)) | (1L << (TO_DATE - 522)) | (1L << (TRAILING - 522)) | (1L << (TRANSACTION - 522)) | (1L << (TRANSLATE - 522)) | (1L << (TREAT - 522)) | (1L << (TRIGGER - 522)) | (1L << (TRIM - 522)) | (1L << (TRUE - 522)) | (1L << (TRUNCATE - 522)) | (1L << (TRUSTED - 522)) | (1L << (TYPE - 522)) | (1L << (UNBOUNDED - 522)) | (1L << (UNDER - 522)) | (1L << (UNLIMITED - 522)) | (1L << (UNTIL - 522)) | (1L << (UPDATED - 522)) | (1L << (UPSERT - 522)) | (1L << (UROWID - 522)) | (1L << (USE - 522)) | (1L << (VALIDATE - 522)) | (1L << (VALUE - 522)) | (1L << (VARCHAR - 522)) | (1L << (VARCHAR2 - 522)) | (1L << (VARIABLE - 522)) | (1L << (VARRAY - 522)) | (1L << (VARYING - 522)) | (1L << (VERBOSE - 522)) | (1L << (VERSION - 522)) | (1L << (VERSIONS - 522)) | (1L << (VIEW - 522)) | (1L << (WAIT - 522)) | (1L << (WARNING - 522)) | (1L << (WELLFORMED - 522)) | (1L << (WHENEVER - 522)) | (1L << (WHILE - 522)) | (1L << (WITHOUT - 522)) | (1L << (WITHIN - 522)) | (1L << (WORK - 522)) | (1L << (WRITE - 522)) | (1L << (XML - 522)) | (1L << (XMLAGG - 522)) | (1L << (XMLATTRIBUTES - 522)))) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & ((1L << (XMLCAST - 586)) | (1L << (XMLCOLATTVAL - 586)) | (1L << (XMLELEMENT - 586)) | (1L << (XMLEXISTS - 586)) | (1L << (XMLFOREST - 586)) | (1L << (XMLNAMESPACES - 586)) | (1L << (XMLPARSE - 586)) | (1L << (XMLPI - 586)) | (1L << (XMLQUERY - 586)) | (1L << (XMLROOT - 586)) | (1L << (XMLSERIALIZE - 586)) | (1L << (XMLTABLE - 586)) | (1L << (YEAR - 586)) | (1L << (YES - 586)) | (1L << (YMINTERVAL_UNCONSTRAINED - 586)) | (1L << (ZONE - 586)) | (1L << (PREDICTION - 586)) | (1L << (PREDICTION_BOUNDS - 586)) | (1L << (PREDICTION_COST - 586)) | (1L << (PREDICTION_DETAILS - 586)) | (1L << (PREDICTION_PROBABILITY - 586)) | (1L << (PREDICTION_SET - 586)) | (1L << (CUME_DIST - 586)) | (1L << (DENSE_RANK - 586)) | (1L << (LISTAGG - 586)) | (1L << (PERCENT_RANK - 586)) | (1L << (PERCENTILE_CONT - 586)) | (1L << (PERCENTILE_DISC - 586)) | (1L << (RANK - 586)) | (1L << (AVG - 586)) | (1L << (CORR - 586)) | (1L << (LAG - 586)) | (1L << (LEAD - 586)) | (1L << (MAX - 586)) | (1L << (MEDIAN - 586)) | (1L << (MIN - 586)) | (1L << (NTILE - 586)) | (1L << (RATIO_TO_REPORT - 586)) | (1L << (ROW_NUMBER - 586)) | (1L << (SUM - 586)) | (1L << (VARIANCE - 586)) | (1L << (REGR_ - 586)) | (1L << (STDDEV - 586)) | (1L << (VAR_ - 586)) | (1L << (COVAR_ - 586)) | (1L << (NATIONAL_CHAR_STRING_LIT - 586)) | (1L << (UNSIGNED_INTEGER - 586)) | (1L << (APPROXIMATE_NUM_LIT - 586)) | (1L << (CHAR_STRING - 586)) | (1L << (DELIMITED_ID - 586)) | (1L << (LEFT_PAREN - 586)) | (1L << (PLUS_SIGN - 586)))) != 0) || ((((_la - 650)) & ~0x3f) == 0 && ((1L << (_la - 650)) & ((1L << (MINUS_SIGN - 650)) | (1L << (BINDVAR - 650)) | (1L << (COLON - 650)) | (1L << (REGULAR_ID - 650)))) != 0)) {
				{
				setState(5554);
				condition();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Function_callContext extends ParserRuleContext {
		public Routine_nameContext routine_name() {
			return getRuleContext(Routine_nameContext.class,0);
		}
		public TerminalNode CALL() { return getToken(PLSQLParser.CALL, 0); }
		public Function_argumentContext function_argument() {
			return getRuleContext(Function_argumentContext.class,0);
		}
		public Function_callContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_call; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterFunction_call(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitFunction_call(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitFunction_call(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Function_callContext function_call() throws RecognitionException {
		Function_callContext _localctx = new Function_callContext(_ctx, getState());
		enterRule(_localctx, 606, RULE_function_call);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5558);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,784,_ctx) ) {
			case 1:
				{
				setState(5557);
				match(CALL);
				}
				break;
			}
			setState(5560);
			routine_name();
			setState(5562);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(5561);
				function_argument();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BodyContext extends ParserRuleContext {
		public TerminalNode BEGIN() { return getToken(PLSQLParser.BEGIN, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public TerminalNode END() { return getToken(PLSQLParser.END, 0); }
		public TerminalNode EXCEPTION() { return getToken(PLSQLParser.EXCEPTION, 0); }
		public Label_nameContext label_name() {
			return getRuleContext(Label_nameContext.class,0);
		}
		public List<Exception_handlerContext> exception_handler() {
			return getRuleContexts(Exception_handlerContext.class);
		}
		public Exception_handlerContext exception_handler(int i) {
			return getRuleContext(Exception_handlerContext.class,i);
		}
		public BodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterBody(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitBody(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitBody(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BodyContext body() throws RecognitionException {
		BodyContext _localctx = new BodyContext(_ctx, getState());
		enterRule(_localctx, 608, RULE_body);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5564);
			match(BEGIN);
			setState(5565);
			seq_of_statements();
			setState(5572);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EXCEPTION) {
				{
				setState(5566);
				match(EXCEPTION);
				setState(5568); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(5567);
					exception_handler();
					}
					}
					setState(5570); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==WHEN );
				}
			}

			setState(5574);
			match(END);
			setState(5576);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,788,_ctx) ) {
			case 1:
				{
				setState(5575);
				label_name();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Exception_handlerContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(PLSQLParser.WHEN, 0); }
		public List<Exception_nameContext> exception_name() {
			return getRuleContexts(Exception_nameContext.class);
		}
		public Exception_nameContext exception_name(int i) {
			return getRuleContext(Exception_nameContext.class,i);
		}
		public TerminalNode THEN() { return getToken(PLSQLParser.THEN, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public List<TerminalNode> OR() { return getTokens(PLSQLParser.OR); }
		public TerminalNode OR(int i) {
			return getToken(PLSQLParser.OR, i);
		}
		public Exception_handlerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exception_handler; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterException_handler(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitException_handler(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitException_handler(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Exception_handlerContext exception_handler() throws RecognitionException {
		Exception_handlerContext _localctx = new Exception_handlerContext(_ctx, getState());
		enterRule(_localctx, 610, RULE_exception_handler);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5578);
			match(WHEN);
			setState(5579);
			exception_name();
			setState(5584);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==OR) {
				{
				{
				setState(5580);
				match(OR);
				setState(5581);
				exception_name();
				}
				}
				setState(5586);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(5587);
			match(THEN);
			setState(5588);
			seq_of_statements();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Trigger_blockContext extends ParserRuleContext {
		public BodyContext body() {
			return getRuleContext(BodyContext.class,0);
		}
		public TerminalNode DECLARE() { return getToken(PLSQLParser.DECLARE, 0); }
		public List<Declare_specContext> declare_spec() {
			return getRuleContexts(Declare_specContext.class);
		}
		public Declare_specContext declare_spec(int i) {
			return getRuleContext(Declare_specContext.class,i);
		}
		public Trigger_blockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_trigger_block; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterTrigger_block(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitTrigger_block(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitTrigger_block(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Trigger_blockContext trigger_block() throws RecognitionException {
		Trigger_blockContext _localctx = new Trigger_blockContext(_ctx, getState());
		enterRule(_localctx, 612, RULE_trigger_block);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5598);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BUILD) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (CHR - 65)) | (1L << (CLOB - 65)) | (1L << (CLOSE - 65)) | (1L << (CLUSTER - 65)) | (1L << (COALESCE - 65)) | (1L << (COLLECT - 65)) | (1L << (COLUMNS - 65)) | (1L << (COMMENT - 65)) | (1L << (COMMIT - 65)) | (1L << (COMMITTED - 65)) | (1L << (COMPATIBILITY - 65)) | (1L << (COMPILE - 65)) | (1L << (COMPLETE - 65)) | (1L << (COMPOUND - 65)) | (1L << (CONCAT - 65)) | (1L << (CONSTANT - 65)) | (1L << (CONSTRAINT - 65)) | (1L << (CONSTRAINTS - 65)) | (1L << (CONSTRUCTOR - 65)) | (1L << (CONTENT - 65)) | (1L << (CONTEXT - 65)) | (1L << (CONTINUE - 65)) | (1L << (CONVERT - 65)) | (1L << (CORRUPT_XID - 65)) | (1L << (CORRUPT_XID_ALL - 65)) | (1L << (COST - 65)) | (1L << (COUNT - 65)) | (1L << (CREATE - 65)) | (1L << (CROSS - 65)) | (1L << (CUBE - 65)) | (1L << (CURRENT_USER - 65)) | (1L << (CURSOR - 65)) | (1L << (CUSTOMDATUM - 65)) | (1L << (CYCLE - 65)) | (1L << (DATA - 65)) | (1L << (DATABASE - 65)) | (1L << (DATE - 65)) | (1L << (DAY - 65)) | (1L << (DB_ROLE_CHANGE - 65)) | (1L << (DBTIMEZONE - 65)) | (1L << (DDL - 65)) | (1L << (DEBUG - 65)) | (1L << (DEC - 65)) | (1L << (DECIMAL - 65)) | (1L << (DECLARE - 65)) | (1L << (DECODE - 65)) | (1L << (DECOMPOSE - 65)) | (1L << (DECREMENT - 65)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DEMAND - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (EDITIONING - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENFORCED - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FAST - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)) | (1L << (FOLLOWING - 129)) | (1L << (FOLLOWS - 129)) | (1L << (FORALL - 129)) | (1L << (FORCE - 129)))) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & ((1L << (FULL - 197)) | (1L << (FUNCTION - 197)) | (1L << (GROUPING - 197)) | (1L << (HASH - 197)) | (1L << (HIDE - 197)) | (1L << (HOUR - 197)) | (1L << (IGNORE - 197)) | (1L << (IMMEDIATE - 197)) | (1L << (INCLUDE - 197)) | (1L << (INCLUDING - 197)) | (1L << (INCREMENT - 197)) | (1L << (INDENT - 197)) | (1L << (INDEXED - 197)) | (1L << (INDICATOR - 197)) | (1L << (INDICES - 197)) | (1L << (INFINITE - 197)) | (1L << (INLINE - 197)) | (1L << (INNER - 197)) | (1L << (INOUT - 197)) | (1L << (INSTANTIABLE - 197)) | (1L << (INSTEAD - 197)) | (1L << (INT - 197)) | (1L << (INTEGER - 197)) | (1L << (INTERVAL - 197)) | (1L << (INVALIDATE - 197)) | (1L << (ISOLATION - 197)) | (1L << (ITERATE - 197)) | (1L << (JAVA - 197)) | (1L << (JOIN - 197)) | (1L << (KEEP - 197)) | (1L << (LANGUAGE - 197)) | (1L << (LAST - 197)) | (1L << (LAST_VALUE - 197)) | (1L << (LEADING - 197)) | (1L << (LEFT - 197)) | (1L << (LEVEL - 197)))) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & ((1L << (LIBRARY - 261)) | (1L << (LIKE2 - 261)) | (1L << (LIKE4 - 261)) | (1L << (LIKEC - 261)) | (1L << (LIMIT - 261)) | (1L << (LIST - 261)) | (1L << (LOCAL - 261)) | (1L << (LOCKED - 261)) | (1L << (LOG - 261)) | (1L << (LOGOFF - 261)) | (1L << (LOGON - 261)) | (1L << (LONG - 261)) | (1L << (LOOP - 261)) | (1L << (MAIN - 261)) | (1L << (MAP - 261)) | (1L << (MASTER - 261)) | (1L << (MATCHED - 261)) | (1L << (MAXVALUE - 261)) | (1L << (MEASURES - 261)) | (1L << (MEMBER - 261)) | (1L << (MERGE - 261)) | (1L << (MINUTE - 261)) | (1L << (MINVALUE - 261)) | (1L << (MLSLABEL - 261)) | (1L << (MODEL - 261)) | (1L << (MODIFY - 261)) | (1L << (MONTH - 261)) | (1L << (MULTISET - 261)) | (1L << (NAME - 261)) | (1L << (NAN - 261)) | (1L << (NATURAL - 261)) | (1L << (NATURALN - 261)) | (1L << (NAV - 261)) | (1L << (NCHAR - 261)) | (1L << (NCHAR_CS - 261)) | (1L << (NCLOB - 261)) | (1L << (NESTED - 261)) | (1L << (NEVER - 261)) | (1L << (NEW - 261)) | (1L << (NO - 261)) | (1L << (NOAUDIT - 261)) | (1L << (NOCOPY - 261)) | (1L << (NOCYCLE - 261)) | (1L << (NOENTITYESCAPING - 261)))) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & ((1L << (NONE - 329)) | (1L << (NOSCHEMACHECK - 329)) | (1L << (NVL - 329)) | (1L << (NULLS - 329)) | (1L << (NUMBER - 329)) | (1L << (NUMERIC - 329)) | (1L << (NVARCHAR2 - 329)) | (1L << (MATERIALIZED - 329)) | (1L << (OBJECT - 329)) | (1L << (OFF - 329)) | (1L << (OID - 329)) | (1L << (OLD - 329)) | (1L << (ONLY - 329)) | (1L << (OPEN - 329)) | (1L << (ORADATA - 329)) | (1L << (ORDINALITY - 329)) | (1L << (OSERROR - 329)) | (1L << (OUT - 329)) | (1L << (OUTER - 329)) | (1L << (OVER - 329)) | (1L << (OVERRIDING - 329)) | (1L << (PACKAGE - 329)) | (1L << (PARALLEL_ENABLE - 329)) | (1L << (PARAMETERS - 329)) | (1L << (PARENT - 329)) | (1L << (PARTITION - 329)) | (1L << (PASSING - 329)) | (1L << (PATH - 329)) | (1L << (PIPELINED - 329)) | (1L << (PLAN - 329)) | (1L << (PLS_INTEGER - 329)) | (1L << (POSITIVE - 329)) | (1L << (POSITIVEN - 329)) | (1L << (PRAGMA - 329)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (PREBUILT - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)) | (1L << (PRESENT - 393)) | (1L << (PROCEDURE - 393)) | (1L << (PUBLIC - 393)) | (1L << (RAISE - 393)) | (1L << (RANGE - 393)) | (1L << (RAW - 393)) | (1L << (READ - 393)) | (1L << (REAL - 393)) | (1L << (RECORD - 393)) | (1L << (REDUCED - 393)) | (1L << (REF - 393)) | (1L << (REFERENCE - 393)) | (1L << (REFERENCING - 393)) | (1L << (REFRESH - 393)) | (1L << (REJECT - 393)) | (1L << (RELIES_ON - 393)) | (1L << (RENAME - 393)) | (1L << (REPLACE - 393)) | (1L << (RESPECT - 393)) | (1L << (RESTRICT_REFERENCES - 393)) | (1L << (RESULT - 393)) | (1L << (RESULT_CACHE - 393)) | (1L << (RETURN - 393)) | (1L << (RETURNING - 393)) | (1L << (REUSE - 393)) | (1L << (REVERSE - 393)) | (1L << (REWRITE - 393)) | (1L << (RIGHT - 393)) | (1L << (ROLE - 393)) | (1L << (ROLLBACK - 393)) | (1L << (ROLLUP - 393)) | (1L << (ROW - 393)) | (1L << (ROWID - 393)) | (1L << (ROWS - 393)) | (1L << (RULES - 393)) | (1L << (SAMPLE - 393)) | (1L << (SAVE - 393)) | (1L << (SAVEPOINT - 393)) | (1L << (SCHEMA - 393)) | (1L << (SCHEMACHECK - 393)) | (1L << (SCN - 393)) | (1L << (SECOND - 393)))) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & ((1L << (SEED - 458)) | (1L << (SEGMENT - 458)) | (1L << (SELF - 458)) | (1L << (SEQUENTIAL - 458)) | (1L << (SERIALIZABLE - 458)) | (1L << (SERIALLY_REUSABLE - 458)) | (1L << (SERVERERROR - 458)) | (1L << (SESSIONTIMEZONE - 458)) | (1L << (SET - 458)) | (1L << (SETS - 458)) | (1L << (SETTINGS - 458)) | (1L << (SHOW - 458)) | (1L << (SHUTDOWN - 458)) | (1L << (SIBLINGS - 458)) | (1L << (SIGNTYPE - 458)) | (1L << (SIMPLE_INTEGER - 458)) | (1L << (SINGLE - 458)) | (1L << (SIZE - 458)) | (1L << (SKIP_ - 458)) | (1L << (SMALLINT - 458)) | (1L << (SNAPSHOT - 458)) | (1L << (SOME - 458)) | (1L << (SPECIFICATION - 458)) | (1L << (SQLDATA - 458)) | (1L << (SQLERROR - 458)) | (1L << (STANDALONE - 458)) | (1L << (STARTUP - 458)) | (1L << (STATEMENT - 458)) | (1L << (STATEMENT_ID - 458)) | (1L << (STATIC - 458)) | (1L << (STATISTICS - 458)) | (1L << (STRING - 458)) | (1L << (SUBMULTISET - 458)) | (1L << (SUBPARTITION - 458)) | (1L << (SUBSTITUTABLE - 458)) | (1L << (SUBSTRING - 458)) | (1L << (SUBTYPE - 458)) | (1L << (SUCCESS - 458)) | (1L << (SUSPEND - 458)) | (1L << (TABLES - 458)) | (1L << (TIME - 458)) | (1L << (TIMESTAMP - 458)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 458)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 458)) | (1L << (TIMESTAMP_UNCONSTRAINED - 458)))) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & ((1L << (TIMEZONE_ABBR - 522)) | (1L << (TIMEZONE_HOUR - 522)) | (1L << (TIMEZONE_MINUTE - 522)) | (1L << (TIMEZONE_REGION - 522)) | (1L << (TO_CHAR - 522)) | (1L << (TO_DATE - 522)) | (1L << (TRAILING - 522)) | (1L << (TRANSACTION - 522)) | (1L << (TRANSLATE - 522)) | (1L << (TREAT - 522)) | (1L << (TRIGGER - 522)) | (1L << (TRIM - 522)) | (1L << (TRUNCATE - 522)) | (1L << (TRUSTED - 522)) | (1L << (TYPE - 522)) | (1L << (UNBOUNDED - 522)) | (1L << (UNDER - 522)) | (1L << (UNLIMITED - 522)) | (1L << (UNTIL - 522)) | (1L << (UPDATED - 522)) | (1L << (UPSERT - 522)) | (1L << (UROWID - 522)) | (1L << (USE - 522)) | (1L << (VALIDATE - 522)) | (1L << (VALUE - 522)) | (1L << (VARCHAR - 522)) | (1L << (VARCHAR2 - 522)) | (1L << (VARIABLE - 522)) | (1L << (VARRAY - 522)) | (1L << (VARYING - 522)) | (1L << (VERBOSE - 522)) | (1L << (VERSION - 522)) | (1L << (VERSIONS - 522)) | (1L << (VIEW - 522)) | (1L << (WAIT - 522)) | (1L << (WARNING - 522)) | (1L << (WELLFORMED - 522)) | (1L << (WHENEVER - 522)) | (1L << (WHILE - 522)) | (1L << (WITHOUT - 522)) | (1L << (WITHIN - 522)) | (1L << (WORK - 522)) | (1L << (WRITE - 522)) | (1L << (XML - 522)) | (1L << (XMLAGG - 522)) | (1L << (XMLATTRIBUTES - 522)))) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & ((1L << (XMLCAST - 586)) | (1L << (XMLCOLATTVAL - 586)) | (1L << (XMLELEMENT - 586)) | (1L << (XMLEXISTS - 586)) | (1L << (XMLFOREST - 586)) | (1L << (XMLNAMESPACES - 586)) | (1L << (XMLPARSE - 586)) | (1L << (XMLPI - 586)) | (1L << (XMLQUERY - 586)) | (1L << (XMLROOT - 586)) | (1L << (XMLSERIALIZE - 586)) | (1L << (XMLTABLE - 586)) | (1L << (YEAR - 586)) | (1L << (YES - 586)) | (1L << (YMINTERVAL_UNCONSTRAINED - 586)) | (1L << (ZONE - 586)) | (1L << (PREDICTION - 586)) | (1L << (PREDICTION_BOUNDS - 586)) | (1L << (PREDICTION_COST - 586)) | (1L << (PREDICTION_DETAILS - 586)) | (1L << (PREDICTION_PROBABILITY - 586)) | (1L << (PREDICTION_SET - 586)) | (1L << (CUME_DIST - 586)) | (1L << (DENSE_RANK - 586)) | (1L << (LISTAGG - 586)) | (1L << (PERCENT_RANK - 586)) | (1L << (PERCENTILE_CONT - 586)) | (1L << (PERCENTILE_DISC - 586)) | (1L << (RANK - 586)) | (1L << (AVG - 586)) | (1L << (CORR - 586)) | (1L << (LAG - 586)) | (1L << (LEAD - 586)) | (1L << (MAX - 586)) | (1L << (MEDIAN - 586)) | (1L << (MIN - 586)) | (1L << (NTILE - 586)) | (1L << (RATIO_TO_REPORT - 586)) | (1L << (ROW_NUMBER - 586)) | (1L << (SUM - 586)) | (1L << (VARIANCE - 586)) | (1L << (REGR_ - 586)) | (1L << (STDDEV - 586)) | (1L << (VAR_ - 586)) | (1L << (COVAR_ - 586)) | (1L << (DELIMITED_ID - 586)))) != 0) || ((((_la - 655)) & ~0x3f) == 0 && ((1L << (_la - 655)) & ((1L << (BINDVAR - 655)) | (1L << (COLON - 655)) | (1L << (REGULAR_ID - 655)))) != 0)) {
				{
				setState(5591);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DECLARE) {
					{
					setState(5590);
					match(DECLARE);
					}
				}

				setState(5594); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(5593);
					declare_spec();
					}
					}
					setState(5596); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BUILD) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (CHR - 65)) | (1L << (CLOB - 65)) | (1L << (CLOSE - 65)) | (1L << (CLUSTER - 65)) | (1L << (COALESCE - 65)) | (1L << (COLLECT - 65)) | (1L << (COLUMNS - 65)) | (1L << (COMMENT - 65)) | (1L << (COMMIT - 65)) | (1L << (COMMITTED - 65)) | (1L << (COMPATIBILITY - 65)) | (1L << (COMPILE - 65)) | (1L << (COMPLETE - 65)) | (1L << (COMPOUND - 65)) | (1L << (CONCAT - 65)) | (1L << (CONSTANT - 65)) | (1L << (CONSTRAINT - 65)) | (1L << (CONSTRAINTS - 65)) | (1L << (CONSTRUCTOR - 65)) | (1L << (CONTENT - 65)) | (1L << (CONTEXT - 65)) | (1L << (CONTINUE - 65)) | (1L << (CONVERT - 65)) | (1L << (CORRUPT_XID - 65)) | (1L << (CORRUPT_XID_ALL - 65)) | (1L << (COST - 65)) | (1L << (COUNT - 65)) | (1L << (CREATE - 65)) | (1L << (CROSS - 65)) | (1L << (CUBE - 65)) | (1L << (CURRENT_USER - 65)) | (1L << (CURSOR - 65)) | (1L << (CUSTOMDATUM - 65)) | (1L << (CYCLE - 65)) | (1L << (DATA - 65)) | (1L << (DATABASE - 65)) | (1L << (DATE - 65)) | (1L << (DAY - 65)) | (1L << (DB_ROLE_CHANGE - 65)) | (1L << (DBTIMEZONE - 65)) | (1L << (DDL - 65)) | (1L << (DEBUG - 65)) | (1L << (DEC - 65)) | (1L << (DECIMAL - 65)) | (1L << (DECODE - 65)) | (1L << (DECOMPOSE - 65)) | (1L << (DECREMENT - 65)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DEMAND - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (EDITIONING - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENFORCED - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FAST - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)) | (1L << (FOLLOWING - 129)) | (1L << (FOLLOWS - 129)) | (1L << (FORALL - 129)) | (1L << (FORCE - 129)))) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & ((1L << (FULL - 197)) | (1L << (FUNCTION - 197)) | (1L << (GROUPING - 197)) | (1L << (HASH - 197)) | (1L << (HIDE - 197)) | (1L << (HOUR - 197)) | (1L << (IGNORE - 197)) | (1L << (IMMEDIATE - 197)) | (1L << (INCLUDE - 197)) | (1L << (INCLUDING - 197)) | (1L << (INCREMENT - 197)) | (1L << (INDENT - 197)) | (1L << (INDEXED - 197)) | (1L << (INDICATOR - 197)) | (1L << (INDICES - 197)) | (1L << (INFINITE - 197)) | (1L << (INLINE - 197)) | (1L << (INNER - 197)) | (1L << (INOUT - 197)) | (1L << (INSTANTIABLE - 197)) | (1L << (INSTEAD - 197)) | (1L << (INT - 197)) | (1L << (INTEGER - 197)) | (1L << (INTERVAL - 197)) | (1L << (INVALIDATE - 197)) | (1L << (ISOLATION - 197)) | (1L << (ITERATE - 197)) | (1L << (JAVA - 197)) | (1L << (JOIN - 197)) | (1L << (KEEP - 197)) | (1L << (LANGUAGE - 197)) | (1L << (LAST - 197)) | (1L << (LAST_VALUE - 197)) | (1L << (LEADING - 197)) | (1L << (LEFT - 197)) | (1L << (LEVEL - 197)))) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & ((1L << (LIBRARY - 261)) | (1L << (LIKE2 - 261)) | (1L << (LIKE4 - 261)) | (1L << (LIKEC - 261)) | (1L << (LIMIT - 261)) | (1L << (LIST - 261)) | (1L << (LOCAL - 261)) | (1L << (LOCKED - 261)) | (1L << (LOG - 261)) | (1L << (LOGOFF - 261)) | (1L << (LOGON - 261)) | (1L << (LONG - 261)) | (1L << (LOOP - 261)) | (1L << (MAIN - 261)) | (1L << (MAP - 261)) | (1L << (MASTER - 261)) | (1L << (MATCHED - 261)) | (1L << (MAXVALUE - 261)) | (1L << (MEASURES - 261)) | (1L << (MEMBER - 261)) | (1L << (MERGE - 261)) | (1L << (MINUTE - 261)) | (1L << (MINVALUE - 261)) | (1L << (MLSLABEL - 261)) | (1L << (MODEL - 261)) | (1L << (MODIFY - 261)) | (1L << (MONTH - 261)) | (1L << (MULTISET - 261)) | (1L << (NAME - 261)) | (1L << (NAN - 261)) | (1L << (NATURAL - 261)) | (1L << (NATURALN - 261)) | (1L << (NAV - 261)) | (1L << (NCHAR - 261)) | (1L << (NCHAR_CS - 261)) | (1L << (NCLOB - 261)) | (1L << (NESTED - 261)) | (1L << (NEVER - 261)) | (1L << (NEW - 261)) | (1L << (NO - 261)) | (1L << (NOAUDIT - 261)) | (1L << (NOCOPY - 261)) | (1L << (NOCYCLE - 261)) | (1L << (NOENTITYESCAPING - 261)))) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & ((1L << (NONE - 329)) | (1L << (NOSCHEMACHECK - 329)) | (1L << (NVL - 329)) | (1L << (NULLS - 329)) | (1L << (NUMBER - 329)) | (1L << (NUMERIC - 329)) | (1L << (NVARCHAR2 - 329)) | (1L << (MATERIALIZED - 329)) | (1L << (OBJECT - 329)) | (1L << (OFF - 329)) | (1L << (OID - 329)) | (1L << (OLD - 329)) | (1L << (ONLY - 329)) | (1L << (OPEN - 329)) | (1L << (ORADATA - 329)) | (1L << (ORDINALITY - 329)) | (1L << (OSERROR - 329)) | (1L << (OUT - 329)) | (1L << (OUTER - 329)) | (1L << (OVER - 329)) | (1L << (OVERRIDING - 329)) | (1L << (PACKAGE - 329)) | (1L << (PARALLEL_ENABLE - 329)) | (1L << (PARAMETERS - 329)) | (1L << (PARENT - 329)) | (1L << (PARTITION - 329)) | (1L << (PASSING - 329)) | (1L << (PATH - 329)) | (1L << (PIPELINED - 329)) | (1L << (PLAN - 329)) | (1L << (PLS_INTEGER - 329)) | (1L << (POSITIVE - 329)) | (1L << (POSITIVEN - 329)) | (1L << (PRAGMA - 329)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (PREBUILT - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)) | (1L << (PRESENT - 393)) | (1L << (PROCEDURE - 393)) | (1L << (PUBLIC - 393)) | (1L << (RAISE - 393)) | (1L << (RANGE - 393)) | (1L << (RAW - 393)) | (1L << (READ - 393)) | (1L << (REAL - 393)) | (1L << (RECORD - 393)) | (1L << (REDUCED - 393)) | (1L << (REF - 393)) | (1L << (REFERENCE - 393)) | (1L << (REFERENCING - 393)) | (1L << (REFRESH - 393)) | (1L << (REJECT - 393)) | (1L << (RELIES_ON - 393)) | (1L << (RENAME - 393)) | (1L << (REPLACE - 393)) | (1L << (RESPECT - 393)) | (1L << (RESTRICT_REFERENCES - 393)) | (1L << (RESULT - 393)) | (1L << (RESULT_CACHE - 393)) | (1L << (RETURN - 393)) | (1L << (RETURNING - 393)) | (1L << (REUSE - 393)) | (1L << (REVERSE - 393)) | (1L << (REWRITE - 393)) | (1L << (RIGHT - 393)) | (1L << (ROLE - 393)) | (1L << (ROLLBACK - 393)) | (1L << (ROLLUP - 393)) | (1L << (ROW - 393)) | (1L << (ROWID - 393)) | (1L << (ROWS - 393)) | (1L << (RULES - 393)) | (1L << (SAMPLE - 393)) | (1L << (SAVE - 393)) | (1L << (SAVEPOINT - 393)) | (1L << (SCHEMA - 393)) | (1L << (SCHEMACHECK - 393)) | (1L << (SCN - 393)) | (1L << (SECOND - 393)))) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & ((1L << (SEED - 458)) | (1L << (SEGMENT - 458)) | (1L << (SELF - 458)) | (1L << (SEQUENTIAL - 458)) | (1L << (SERIALIZABLE - 458)) | (1L << (SERIALLY_REUSABLE - 458)) | (1L << (SERVERERROR - 458)) | (1L << (SESSIONTIMEZONE - 458)) | (1L << (SET - 458)) | (1L << (SETS - 458)) | (1L << (SETTINGS - 458)) | (1L << (SHOW - 458)) | (1L << (SHUTDOWN - 458)) | (1L << (SIBLINGS - 458)) | (1L << (SIGNTYPE - 458)) | (1L << (SIMPLE_INTEGER - 458)) | (1L << (SINGLE - 458)) | (1L << (SIZE - 458)) | (1L << (SKIP_ - 458)) | (1L << (SMALLINT - 458)) | (1L << (SNAPSHOT - 458)) | (1L << (SOME - 458)) | (1L << (SPECIFICATION - 458)) | (1L << (SQLDATA - 458)) | (1L << (SQLERROR - 458)) | (1L << (STANDALONE - 458)) | (1L << (STARTUP - 458)) | (1L << (STATEMENT - 458)) | (1L << (STATEMENT_ID - 458)) | (1L << (STATIC - 458)) | (1L << (STATISTICS - 458)) | (1L << (STRING - 458)) | (1L << (SUBMULTISET - 458)) | (1L << (SUBPARTITION - 458)) | (1L << (SUBSTITUTABLE - 458)) | (1L << (SUBSTRING - 458)) | (1L << (SUBTYPE - 458)) | (1L << (SUCCESS - 458)) | (1L << (SUSPEND - 458)) | (1L << (TABLES - 458)) | (1L << (TIME - 458)) | (1L << (TIMESTAMP - 458)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 458)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 458)) | (1L << (TIMESTAMP_UNCONSTRAINED - 458)))) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & ((1L << (TIMEZONE_ABBR - 522)) | (1L << (TIMEZONE_HOUR - 522)) | (1L << (TIMEZONE_MINUTE - 522)) | (1L << (TIMEZONE_REGION - 522)) | (1L << (TO_CHAR - 522)) | (1L << (TO_DATE - 522)) | (1L << (TRAILING - 522)) | (1L << (TRANSACTION - 522)) | (1L << (TRANSLATE - 522)) | (1L << (TREAT - 522)) | (1L << (TRIGGER - 522)) | (1L << (TRIM - 522)) | (1L << (TRUNCATE - 522)) | (1L << (TRUSTED - 522)) | (1L << (TYPE - 522)) | (1L << (UNBOUNDED - 522)) | (1L << (UNDER - 522)) | (1L << (UNLIMITED - 522)) | (1L << (UNTIL - 522)) | (1L << (UPDATED - 522)) | (1L << (UPSERT - 522)) | (1L << (UROWID - 522)) | (1L << (USE - 522)) | (1L << (VALIDATE - 522)) | (1L << (VALUE - 522)) | (1L << (VARCHAR - 522)) | (1L << (VARCHAR2 - 522)) | (1L << (VARIABLE - 522)) | (1L << (VARRAY - 522)) | (1L << (VARYING - 522)) | (1L << (VERBOSE - 522)) | (1L << (VERSION - 522)) | (1L << (VERSIONS - 522)) | (1L << (VIEW - 522)) | (1L << (WAIT - 522)) | (1L << (WARNING - 522)) | (1L << (WELLFORMED - 522)) | (1L << (WHENEVER - 522)) | (1L << (WHILE - 522)) | (1L << (WITHOUT - 522)) | (1L << (WITHIN - 522)) | (1L << (WORK - 522)) | (1L << (WRITE - 522)) | (1L << (XML - 522)) | (1L << (XMLAGG - 522)) | (1L << (XMLATTRIBUTES - 522)))) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & ((1L << (XMLCAST - 586)) | (1L << (XMLCOLATTVAL - 586)) | (1L << (XMLELEMENT - 586)) | (1L << (XMLEXISTS - 586)) | (1L << (XMLFOREST - 586)) | (1L << (XMLNAMESPACES - 586)) | (1L << (XMLPARSE - 586)) | (1L << (XMLPI - 586)) | (1L << (XMLQUERY - 586)) | (1L << (XMLROOT - 586)) | (1L << (XMLSERIALIZE - 586)) | (1L << (XMLTABLE - 586)) | (1L << (YEAR - 586)) | (1L << (YES - 586)) | (1L << (YMINTERVAL_UNCONSTRAINED - 586)) | (1L << (ZONE - 586)) | (1L << (PREDICTION - 586)) | (1L << (PREDICTION_BOUNDS - 586)) | (1L << (PREDICTION_COST - 586)) | (1L << (PREDICTION_DETAILS - 586)) | (1L << (PREDICTION_PROBABILITY - 586)) | (1L << (PREDICTION_SET - 586)) | (1L << (CUME_DIST - 586)) | (1L << (DENSE_RANK - 586)) | (1L << (LISTAGG - 586)) | (1L << (PERCENT_RANK - 586)) | (1L << (PERCENTILE_CONT - 586)) | (1L << (PERCENTILE_DISC - 586)) | (1L << (RANK - 586)) | (1L << (AVG - 586)) | (1L << (CORR - 586)) | (1L << (LAG - 586)) | (1L << (LEAD - 586)) | (1L << (MAX - 586)) | (1L << (MEDIAN - 586)) | (1L << (MIN - 586)) | (1L << (NTILE - 586)) | (1L << (RATIO_TO_REPORT - 586)) | (1L << (ROW_NUMBER - 586)) | (1L << (SUM - 586)) | (1L << (VARIANCE - 586)) | (1L << (REGR_ - 586)) | (1L << (STDDEV - 586)) | (1L << (VAR_ - 586)) | (1L << (COVAR_ - 586)) | (1L << (DELIMITED_ID - 586)))) != 0) || ((((_la - 655)) & ~0x3f) == 0 && ((1L << (_la - 655)) & ((1L << (BINDVAR - 655)) | (1L << (COLON - 655)) | (1L << (REGULAR_ID - 655)))) != 0) );
				}
			}

			setState(5600);
			body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BlockContext extends ParserRuleContext {
		public BodyContext body() {
			return getRuleContext(BodyContext.class,0);
		}
		public TerminalNode DECLARE() { return getToken(PLSQLParser.DECLARE, 0); }
		public List<Declare_specContext> declare_spec() {
			return getRuleContexts(Declare_specContext.class);
		}
		public Declare_specContext declare_spec(int i) {
			return getRuleContext(Declare_specContext.class,i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_block; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterBlock(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitBlock(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitBlock(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BlockContext block() throws RecognitionException {
		BlockContext _localctx = new BlockContext(_ctx, getState());
		enterRule(_localctx, 614, RULE_block);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5603);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DECLARE) {
				{
				setState(5602);
				match(DECLARE);
				}
			}

			setState(5606); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(5605);
				declare_spec();
				}
				}
				setState(5608); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BUILD) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (CHR - 65)) | (1L << (CLOB - 65)) | (1L << (CLOSE - 65)) | (1L << (CLUSTER - 65)) | (1L << (COALESCE - 65)) | (1L << (COLLECT - 65)) | (1L << (COLUMNS - 65)) | (1L << (COMMENT - 65)) | (1L << (COMMIT - 65)) | (1L << (COMMITTED - 65)) | (1L << (COMPATIBILITY - 65)) | (1L << (COMPILE - 65)) | (1L << (COMPLETE - 65)) | (1L << (COMPOUND - 65)) | (1L << (CONCAT - 65)) | (1L << (CONSTANT - 65)) | (1L << (CONSTRAINT - 65)) | (1L << (CONSTRAINTS - 65)) | (1L << (CONSTRUCTOR - 65)) | (1L << (CONTENT - 65)) | (1L << (CONTEXT - 65)) | (1L << (CONTINUE - 65)) | (1L << (CONVERT - 65)) | (1L << (CORRUPT_XID - 65)) | (1L << (CORRUPT_XID_ALL - 65)) | (1L << (COST - 65)) | (1L << (COUNT - 65)) | (1L << (CREATE - 65)) | (1L << (CROSS - 65)) | (1L << (CUBE - 65)) | (1L << (CURRENT_USER - 65)) | (1L << (CURSOR - 65)) | (1L << (CUSTOMDATUM - 65)) | (1L << (CYCLE - 65)) | (1L << (DATA - 65)) | (1L << (DATABASE - 65)) | (1L << (DATE - 65)) | (1L << (DAY - 65)) | (1L << (DB_ROLE_CHANGE - 65)) | (1L << (DBTIMEZONE - 65)) | (1L << (DDL - 65)) | (1L << (DEBUG - 65)) | (1L << (DEC - 65)) | (1L << (DECIMAL - 65)) | (1L << (DECODE - 65)) | (1L << (DECOMPOSE - 65)) | (1L << (DECREMENT - 65)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DEMAND - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (EDITIONING - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENFORCED - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FAST - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)) | (1L << (FOLLOWING - 129)) | (1L << (FOLLOWS - 129)) | (1L << (FORALL - 129)) | (1L << (FORCE - 129)))) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & ((1L << (FULL - 197)) | (1L << (FUNCTION - 197)) | (1L << (GROUPING - 197)) | (1L << (HASH - 197)) | (1L << (HIDE - 197)) | (1L << (HOUR - 197)) | (1L << (IGNORE - 197)) | (1L << (IMMEDIATE - 197)) | (1L << (INCLUDE - 197)) | (1L << (INCLUDING - 197)) | (1L << (INCREMENT - 197)) | (1L << (INDENT - 197)) | (1L << (INDEXED - 197)) | (1L << (INDICATOR - 197)) | (1L << (INDICES - 197)) | (1L << (INFINITE - 197)) | (1L << (INLINE - 197)) | (1L << (INNER - 197)) | (1L << (INOUT - 197)) | (1L << (INSTANTIABLE - 197)) | (1L << (INSTEAD - 197)) | (1L << (INT - 197)) | (1L << (INTEGER - 197)) | (1L << (INTERVAL - 197)) | (1L << (INVALIDATE - 197)) | (1L << (ISOLATION - 197)) | (1L << (ITERATE - 197)) | (1L << (JAVA - 197)) | (1L << (JOIN - 197)) | (1L << (KEEP - 197)) | (1L << (LANGUAGE - 197)) | (1L << (LAST - 197)) | (1L << (LAST_VALUE - 197)) | (1L << (LEADING - 197)) | (1L << (LEFT - 197)) | (1L << (LEVEL - 197)))) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & ((1L << (LIBRARY - 261)) | (1L << (LIKE2 - 261)) | (1L << (LIKE4 - 261)) | (1L << (LIKEC - 261)) | (1L << (LIMIT - 261)) | (1L << (LIST - 261)) | (1L << (LOCAL - 261)) | (1L << (LOCKED - 261)) | (1L << (LOG - 261)) | (1L << (LOGOFF - 261)) | (1L << (LOGON - 261)) | (1L << (LONG - 261)) | (1L << (LOOP - 261)) | (1L << (MAIN - 261)) | (1L << (MAP - 261)) | (1L << (MASTER - 261)) | (1L << (MATCHED - 261)) | (1L << (MAXVALUE - 261)) | (1L << (MEASURES - 261)) | (1L << (MEMBER - 261)) | (1L << (MERGE - 261)) | (1L << (MINUTE - 261)) | (1L << (MINVALUE - 261)) | (1L << (MLSLABEL - 261)) | (1L << (MODEL - 261)) | (1L << (MODIFY - 261)) | (1L << (MONTH - 261)) | (1L << (MULTISET - 261)) | (1L << (NAME - 261)) | (1L << (NAN - 261)) | (1L << (NATURAL - 261)) | (1L << (NATURALN - 261)) | (1L << (NAV - 261)) | (1L << (NCHAR - 261)) | (1L << (NCHAR_CS - 261)) | (1L << (NCLOB - 261)) | (1L << (NESTED - 261)) | (1L << (NEVER - 261)) | (1L << (NEW - 261)) | (1L << (NO - 261)) | (1L << (NOAUDIT - 261)) | (1L << (NOCOPY - 261)) | (1L << (NOCYCLE - 261)) | (1L << (NOENTITYESCAPING - 261)))) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & ((1L << (NONE - 329)) | (1L << (NOSCHEMACHECK - 329)) | (1L << (NVL - 329)) | (1L << (NULLS - 329)) | (1L << (NUMBER - 329)) | (1L << (NUMERIC - 329)) | (1L << (NVARCHAR2 - 329)) | (1L << (MATERIALIZED - 329)) | (1L << (OBJECT - 329)) | (1L << (OFF - 329)) | (1L << (OID - 329)) | (1L << (OLD - 329)) | (1L << (ONLY - 329)) | (1L << (OPEN - 329)) | (1L << (ORADATA - 329)) | (1L << (ORDINALITY - 329)) | (1L << (OSERROR - 329)) | (1L << (OUT - 329)) | (1L << (OUTER - 329)) | (1L << (OVER - 329)) | (1L << (OVERRIDING - 329)) | (1L << (PACKAGE - 329)) | (1L << (PARALLEL_ENABLE - 329)) | (1L << (PARAMETERS - 329)) | (1L << (PARENT - 329)) | (1L << (PARTITION - 329)) | (1L << (PASSING - 329)) | (1L << (PATH - 329)) | (1L << (PIPELINED - 329)) | (1L << (PLAN - 329)) | (1L << (PLS_INTEGER - 329)) | (1L << (POSITIVE - 329)) | (1L << (POSITIVEN - 329)) | (1L << (PRAGMA - 329)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (PREBUILT - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)) | (1L << (PRESENT - 393)) | (1L << (PROCEDURE - 393)) | (1L << (PUBLIC - 393)) | (1L << (RAISE - 393)) | (1L << (RANGE - 393)) | (1L << (RAW - 393)) | (1L << (READ - 393)) | (1L << (REAL - 393)) | (1L << (RECORD - 393)) | (1L << (REDUCED - 393)) | (1L << (REF - 393)) | (1L << (REFERENCE - 393)) | (1L << (REFERENCING - 393)) | (1L << (REFRESH - 393)) | (1L << (REJECT - 393)) | (1L << (RELIES_ON - 393)) | (1L << (RENAME - 393)) | (1L << (REPLACE - 393)) | (1L << (RESPECT - 393)) | (1L << (RESTRICT_REFERENCES - 393)) | (1L << (RESULT - 393)) | (1L << (RESULT_CACHE - 393)) | (1L << (RETURN - 393)) | (1L << (RETURNING - 393)) | (1L << (REUSE - 393)) | (1L << (REVERSE - 393)) | (1L << (REWRITE - 393)) | (1L << (RIGHT - 393)) | (1L << (ROLE - 393)) | (1L << (ROLLBACK - 393)) | (1L << (ROLLUP - 393)) | (1L << (ROW - 393)) | (1L << (ROWID - 393)) | (1L << (ROWS - 393)) | (1L << (RULES - 393)) | (1L << (SAMPLE - 393)) | (1L << (SAVE - 393)) | (1L << (SAVEPOINT - 393)) | (1L << (SCHEMA - 393)) | (1L << (SCHEMACHECK - 393)) | (1L << (SCN - 393)) | (1L << (SECOND - 393)))) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & ((1L << (SEED - 458)) | (1L << (SEGMENT - 458)) | (1L << (SELF - 458)) | (1L << (SEQUENTIAL - 458)) | (1L << (SERIALIZABLE - 458)) | (1L << (SERIALLY_REUSABLE - 458)) | (1L << (SERVERERROR - 458)) | (1L << (SESSIONTIMEZONE - 458)) | (1L << (SET - 458)) | (1L << (SETS - 458)) | (1L << (SETTINGS - 458)) | (1L << (SHOW - 458)) | (1L << (SHUTDOWN - 458)) | (1L << (SIBLINGS - 458)) | (1L << (SIGNTYPE - 458)) | (1L << (SIMPLE_INTEGER - 458)) | (1L << (SINGLE - 458)) | (1L << (SIZE - 458)) | (1L << (SKIP_ - 458)) | (1L << (SMALLINT - 458)) | (1L << (SNAPSHOT - 458)) | (1L << (SOME - 458)) | (1L << (SPECIFICATION - 458)) | (1L << (SQLDATA - 458)) | (1L << (SQLERROR - 458)) | (1L << (STANDALONE - 458)) | (1L << (STARTUP - 458)) | (1L << (STATEMENT - 458)) | (1L << (STATEMENT_ID - 458)) | (1L << (STATIC - 458)) | (1L << (STATISTICS - 458)) | (1L << (STRING - 458)) | (1L << (SUBMULTISET - 458)) | (1L << (SUBPARTITION - 458)) | (1L << (SUBSTITUTABLE - 458)) | (1L << (SUBSTRING - 458)) | (1L << (SUBTYPE - 458)) | (1L << (SUCCESS - 458)) | (1L << (SUSPEND - 458)) | (1L << (TABLES - 458)) | (1L << (TIME - 458)) | (1L << (TIMESTAMP - 458)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 458)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 458)) | (1L << (TIMESTAMP_UNCONSTRAINED - 458)))) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & ((1L << (TIMEZONE_ABBR - 522)) | (1L << (TIMEZONE_HOUR - 522)) | (1L << (TIMEZONE_MINUTE - 522)) | (1L << (TIMEZONE_REGION - 522)) | (1L << (TO_CHAR - 522)) | (1L << (TO_DATE - 522)) | (1L << (TRAILING - 522)) | (1L << (TRANSACTION - 522)) | (1L << (TRANSLATE - 522)) | (1L << (TREAT - 522)) | (1L << (TRIGGER - 522)) | (1L << (TRIM - 522)) | (1L << (TRUNCATE - 522)) | (1L << (TRUSTED - 522)) | (1L << (TYPE - 522)) | (1L << (UNBOUNDED - 522)) | (1L << (UNDER - 522)) | (1L << (UNLIMITED - 522)) | (1L << (UNTIL - 522)) | (1L << (UPDATED - 522)) | (1L << (UPSERT - 522)) | (1L << (UROWID - 522)) | (1L << (USE - 522)) | (1L << (VALIDATE - 522)) | (1L << (VALUE - 522)) | (1L << (VARCHAR - 522)) | (1L << (VARCHAR2 - 522)) | (1L << (VARIABLE - 522)) | (1L << (VARRAY - 522)) | (1L << (VARYING - 522)) | (1L << (VERBOSE - 522)) | (1L << (VERSION - 522)) | (1L << (VERSIONS - 522)) | (1L << (VIEW - 522)) | (1L << (WAIT - 522)) | (1L << (WARNING - 522)) | (1L << (WELLFORMED - 522)) | (1L << (WHENEVER - 522)) | (1L << (WHILE - 522)) | (1L << (WITHOUT - 522)) | (1L << (WITHIN - 522)) | (1L << (WORK - 522)) | (1L << (WRITE - 522)) | (1L << (XML - 522)) | (1L << (XMLAGG - 522)) | (1L << (XMLATTRIBUTES - 522)))) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & ((1L << (XMLCAST - 586)) | (1L << (XMLCOLATTVAL - 586)) | (1L << (XMLELEMENT - 586)) | (1L << (XMLEXISTS - 586)) | (1L << (XMLFOREST - 586)) | (1L << (XMLNAMESPACES - 586)) | (1L << (XMLPARSE - 586)) | (1L << (XMLPI - 586)) | (1L << (XMLQUERY - 586)) | (1L << (XMLROOT - 586)) | (1L << (XMLSERIALIZE - 586)) | (1L << (XMLTABLE - 586)) | (1L << (YEAR - 586)) | (1L << (YES - 586)) | (1L << (YMINTERVAL_UNCONSTRAINED - 586)) | (1L << (ZONE - 586)) | (1L << (PREDICTION - 586)) | (1L << (PREDICTION_BOUNDS - 586)) | (1L << (PREDICTION_COST - 586)) | (1L << (PREDICTION_DETAILS - 586)) | (1L << (PREDICTION_PROBABILITY - 586)) | (1L << (PREDICTION_SET - 586)) | (1L << (CUME_DIST - 586)) | (1L << (DENSE_RANK - 586)) | (1L << (LISTAGG - 586)) | (1L << (PERCENT_RANK - 586)) | (1L << (PERCENTILE_CONT - 586)) | (1L << (PERCENTILE_DISC - 586)) | (1L << (RANK - 586)) | (1L << (AVG - 586)) | (1L << (CORR - 586)) | (1L << (LAG - 586)) | (1L << (LEAD - 586)) | (1L << (MAX - 586)) | (1L << (MEDIAN - 586)) | (1L << (MIN - 586)) | (1L << (NTILE - 586)) | (1L << (RATIO_TO_REPORT - 586)) | (1L << (ROW_NUMBER - 586)) | (1L << (SUM - 586)) | (1L << (VARIANCE - 586)) | (1L << (REGR_ - 586)) | (1L << (STDDEV - 586)) | (1L << (VAR_ - 586)) | (1L << (COVAR_ - 586)) | (1L << (DELIMITED_ID - 586)))) != 0) || ((((_la - 655)) & ~0x3f) == 0 && ((1L << (_la - 655)) & ((1L << (BINDVAR - 655)) | (1L << (COLON - 655)) | (1L << (REGULAR_ID - 655)))) != 0) );
			setState(5610);
			body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sql_statementContext extends ParserRuleContext {
		public Execute_immediateContext execute_immediate() {
			return getRuleContext(Execute_immediateContext.class,0);
		}
		public Data_manipulation_language_statementsContext data_manipulation_language_statements() {
			return getRuleContext(Data_manipulation_language_statementsContext.class,0);
		}
		public Cursor_manipulation_statementsContext cursor_manipulation_statements() {
			return getRuleContext(Cursor_manipulation_statementsContext.class,0);
		}
		public Transaction_control_statementsContext transaction_control_statements() {
			return getRuleContext(Transaction_control_statementsContext.class,0);
		}
		public Sql_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sql_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterSql_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitSql_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitSql_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sql_statementContext sql_statement() throws RecognitionException {
		Sql_statementContext _localctx = new Sql_statementContext(_ctx, getState());
		enterRule(_localctx, 616, RULE_sql_statement);
		try {
			setState(5616);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case EXECUTE:
				enterOuterAlt(_localctx, 1);
				{
				setState(5612);
				execute_immediate();
				}
				break;
			case DELETE:
			case EXPLAIN:
			case INSERT:
			case LOCK:
			case MERGE:
			case SELECT:
			case UPDATE:
			case WITH:
			case LEFT_PAREN:
				enterOuterAlt(_localctx, 2);
				{
				setState(5613);
				data_manipulation_language_statements();
				}
				break;
			case CLOSE:
			case FETCH:
			case OPEN:
				enterOuterAlt(_localctx, 3);
				{
				setState(5614);
				cursor_manipulation_statements();
				}
				break;
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case SET:
				enterOuterAlt(_localctx, 4);
				{
				setState(5615);
				transaction_control_statements();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Execute_immediateContext extends ParserRuleContext {
		public TerminalNode EXECUTE() { return getToken(PLSQLParser.EXECUTE, 0); }
		public TerminalNode IMMEDIATE() { return getToken(PLSQLParser.IMMEDIATE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Into_clauseContext into_clause() {
			return getRuleContext(Into_clauseContext.class,0);
		}
		public Using_clauseContext using_clause() {
			return getRuleContext(Using_clauseContext.class,0);
		}
		public Dynamic_returning_clauseContext dynamic_returning_clause() {
			return getRuleContext(Dynamic_returning_clauseContext.class,0);
		}
		public Execute_immediateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_execute_immediate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterExecute_immediate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitExecute_immediate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitExecute_immediate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Execute_immediateContext execute_immediate() throws RecognitionException {
		Execute_immediateContext _localctx = new Execute_immediateContext(_ctx, getState());
		enterRule(_localctx, 618, RULE_execute_immediate);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5618);
			match(EXECUTE);
			setState(5619);
			match(IMMEDIATE);
			setState(5620);
			expression(0);
			setState(5630);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BULK:
			case INTO:
				{
				setState(5621);
				into_clause();
				setState(5623);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(5622);
					using_clause();
					}
				}

				}
				break;
			case USING:
				{
				setState(5625);
				using_clause();
				setState(5627);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==RETURN || _la==RETURNING) {
					{
					setState(5626);
					dynamic_returning_clause();
					}
				}

				}
				break;
			case RETURN:
			case RETURNING:
				{
				setState(5629);
				dynamic_returning_clause();
				}
				break;
			case EOF:
			case SAVE:
			case SEMICOLON:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dynamic_returning_clauseContext extends ParserRuleContext {
		public Into_clauseContext into_clause() {
			return getRuleContext(Into_clauseContext.class,0);
		}
		public TerminalNode RETURNING() { return getToken(PLSQLParser.RETURNING, 0); }
		public TerminalNode RETURN() { return getToken(PLSQLParser.RETURN, 0); }
		public Dynamic_returning_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dynamic_returning_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterDynamic_returning_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitDynamic_returning_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitDynamic_returning_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Dynamic_returning_clauseContext dynamic_returning_clause() throws RecognitionException {
		Dynamic_returning_clauseContext _localctx = new Dynamic_returning_clauseContext(_ctx, getState());
		enterRule(_localctx, 620, RULE_dynamic_returning_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5632);
			_la = _input.LA(1);
			if ( !(_la==RETURN || _la==RETURNING) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5633);
			into_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Data_manipulation_language_statementsContext extends ParserRuleContext {
		public Merge_statementContext merge_statement() {
			return getRuleContext(Merge_statementContext.class,0);
		}
		public Lock_table_statementContext lock_table_statement() {
			return getRuleContext(Lock_table_statementContext.class,0);
		}
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public Update_statementContext update_statement() {
			return getRuleContext(Update_statementContext.class,0);
		}
		public Delete_statementContext delete_statement() {
			return getRuleContext(Delete_statementContext.class,0);
		}
		public Insert_statementContext insert_statement() {
			return getRuleContext(Insert_statementContext.class,0);
		}
		public Explain_statementContext explain_statement() {
			return getRuleContext(Explain_statementContext.class,0);
		}
		public Data_manipulation_language_statementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_data_manipulation_language_statements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterData_manipulation_language_statements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitData_manipulation_language_statements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitData_manipulation_language_statements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Data_manipulation_language_statementsContext data_manipulation_language_statements() throws RecognitionException {
		Data_manipulation_language_statementsContext _localctx = new Data_manipulation_language_statementsContext(_ctx, getState());
		enterRule(_localctx, 622, RULE_data_manipulation_language_statements);
		try {
			setState(5642);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MERGE:
				enterOuterAlt(_localctx, 1);
				{
				setState(5635);
				merge_statement();
				}
				break;
			case LOCK:
				enterOuterAlt(_localctx, 2);
				{
				setState(5636);
				lock_table_statement();
				}
				break;
			case SELECT:
			case WITH:
			case LEFT_PAREN:
				enterOuterAlt(_localctx, 3);
				{
				setState(5637);
				select_statement();
				}
				break;
			case UPDATE:
				enterOuterAlt(_localctx, 4);
				{
				setState(5638);
				update_statement();
				}
				break;
			case DELETE:
				enterOuterAlt(_localctx, 5);
				{
				setState(5639);
				delete_statement();
				}
				break;
			case INSERT:
				enterOuterAlt(_localctx, 6);
				{
				setState(5640);
				insert_statement();
				}
				break;
			case EXPLAIN:
				enterOuterAlt(_localctx, 7);
				{
				setState(5641);
				explain_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cursor_manipulation_statementsContext extends ParserRuleContext {
		public Close_statementContext close_statement() {
			return getRuleContext(Close_statementContext.class,0);
		}
		public Open_statementContext open_statement() {
			return getRuleContext(Open_statementContext.class,0);
		}
		public Fetch_statementContext fetch_statement() {
			return getRuleContext(Fetch_statementContext.class,0);
		}
		public Open_for_statementContext open_for_statement() {
			return getRuleContext(Open_for_statementContext.class,0);
		}
		public Cursor_manipulation_statementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursor_manipulation_statements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterCursor_manipulation_statements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitCursor_manipulation_statements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitCursor_manipulation_statements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cursor_manipulation_statementsContext cursor_manipulation_statements() throws RecognitionException {
		Cursor_manipulation_statementsContext _localctx = new Cursor_manipulation_statementsContext(_ctx, getState());
		enterRule(_localctx, 624, RULE_cursor_manipulation_statements);
		try {
			setState(5648);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,800,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5644);
				close_statement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5645);
				open_statement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5646);
				fetch_statement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5647);
				open_for_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Close_statementContext extends ParserRuleContext {
		public TerminalNode CLOSE() { return getToken(PLSQLParser.CLOSE, 0); }
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public Close_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_close_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterClose_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitClose_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitClose_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Close_statementContext close_statement() throws RecognitionException {
		Close_statementContext _localctx = new Close_statementContext(_ctx, getState());
		enterRule(_localctx, 626, RULE_close_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5650);
			match(CLOSE);
			setState(5651);
			cursor_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Open_statementContext extends ParserRuleContext {
		public TerminalNode OPEN() { return getToken(PLSQLParser.OPEN, 0); }
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public Open_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_open_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterOpen_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitOpen_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitOpen_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Open_statementContext open_statement() throws RecognitionException {
		Open_statementContext _localctx = new Open_statementContext(_ctx, getState());
		enterRule(_localctx, 628, RULE_open_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5653);
			match(OPEN);
			setState(5654);
			cursor_name();
			setState(5656);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(5655);
				expression_list();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Fetch_statementContext extends ParserRuleContext {
		public Token it1;
		public TerminalNode FETCH() { return getToken(PLSQLParser.FETCH, 0); }
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public List<Variable_nameContext> variable_name() {
			return getRuleContexts(Variable_nameContext.class);
		}
		public Variable_nameContext variable_name(int i) {
			return getRuleContext(Variable_nameContext.class,i);
		}
		public TerminalNode BULK() { return getToken(PLSQLParser.BULK, 0); }
		public TerminalNode COLLECT() { return getToken(PLSQLParser.COLLECT, 0); }
		public TerminalNode INTO() { return getToken(PLSQLParser.INTO, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PLSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLSQLParser.COMMA, i);
		}
		public Fetch_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fetch_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterFetch_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitFetch_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitFetch_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Fetch_statementContext fetch_statement() throws RecognitionException {
		Fetch_statementContext _localctx = new Fetch_statementContext(_ctx, getState());
		enterRule(_localctx, 630, RULE_fetch_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5658);
			match(FETCH);
			setState(5659);
			cursor_name();
			setState(5680);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INTO:
				{
				setState(5660);
				((Fetch_statementContext)_localctx).it1 = match(INTO);
				setState(5661);
				variable_name();
				setState(5666);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5662);
					match(COMMA);
					setState(5663);
					variable_name();
					}
					}
					setState(5668);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case BULK:
				{
				setState(5669);
				match(BULK);
				setState(5670);
				match(COLLECT);
				setState(5671);
				match(INTO);
				setState(5672);
				variable_name();
				setState(5677);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5673);
					match(COMMA);
					setState(5674);
					variable_name();
					}
					}
					setState(5679);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Open_for_statementContext extends ParserRuleContext {
		public TerminalNode OPEN() { return getToken(PLSQLParser.OPEN, 0); }
		public Variable_nameContext variable_name() {
			return getRuleContext(Variable_nameContext.class,0);
		}
		public TerminalNode FOR() { return getToken(PLSQLParser.FOR, 0); }
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Using_clauseContext using_clause() {
			return getRuleContext(Using_clauseContext.class,0);
		}
		public Open_for_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_open_for_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterOpen_for_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitOpen_for_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitOpen_for_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Open_for_statementContext open_for_statement() throws RecognitionException {
		Open_for_statementContext _localctx = new Open_for_statementContext(_ctx, getState());
		enterRule(_localctx, 632, RULE_open_for_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5682);
			match(OPEN);
			setState(5683);
			variable_name();
			setState(5684);
			match(FOR);
			setState(5687);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,805,_ctx) ) {
			case 1:
				{
				setState(5685);
				select_statement();
				}
				break;
			case 2:
				{
				setState(5686);
				expression(0);
				}
				break;
			}
			setState(5690);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USING) {
				{
				setState(5689);
				using_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Transaction_control_statementsContext extends ParserRuleContext {
		public Set_transaction_commandContext set_transaction_command() {
			return getRuleContext(Set_transaction_commandContext.class,0);
		}
		public Set_constraint_commandContext set_constraint_command() {
			return getRuleContext(Set_constraint_commandContext.class,0);
		}
		public Commit_statementContext commit_statement() {
			return getRuleContext(Commit_statementContext.class,0);
		}
		public Rollback_statementContext rollback_statement() {
			return getRuleContext(Rollback_statementContext.class,0);
		}
		public Savepoint_statementContext savepoint_statement() {
			return getRuleContext(Savepoint_statementContext.class,0);
		}
		public Transaction_control_statementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transaction_control_statements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterTransaction_control_statements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitTransaction_control_statements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitTransaction_control_statements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Transaction_control_statementsContext transaction_control_statements() throws RecognitionException {
		Transaction_control_statementsContext _localctx = new Transaction_control_statementsContext(_ctx, getState());
		enterRule(_localctx, 634, RULE_transaction_control_statements);
		try {
			setState(5697);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,807,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5692);
				set_transaction_command();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5693);
				set_constraint_command();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5694);
				commit_statement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5695);
				rollback_statement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5696);
				savepoint_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_transaction_commandContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(PLSQLParser.SET, 0); }
		public TerminalNode TRANSACTION() { return getToken(PLSQLParser.TRANSACTION, 0); }
		public TerminalNode READ() { return getToken(PLSQLParser.READ, 0); }
		public TerminalNode ISOLATION() { return getToken(PLSQLParser.ISOLATION, 0); }
		public TerminalNode LEVEL() { return getToken(PLSQLParser.LEVEL, 0); }
		public TerminalNode USE() { return getToken(PLSQLParser.USE, 0); }
		public TerminalNode ROLLBACK() { return getToken(PLSQLParser.ROLLBACK, 0); }
		public TerminalNode SEGMENT() { return getToken(PLSQLParser.SEGMENT, 0); }
		public Rollback_segment_nameContext rollback_segment_name() {
			return getRuleContext(Rollback_segment_nameContext.class,0);
		}
		public TerminalNode NAME() { return getToken(PLSQLParser.NAME, 0); }
		public Quoted_stringContext quoted_string() {
			return getRuleContext(Quoted_stringContext.class,0);
		}
		public TerminalNode ONLY() { return getToken(PLSQLParser.ONLY, 0); }
		public TerminalNode WRITE() { return getToken(PLSQLParser.WRITE, 0); }
		public TerminalNode SERIALIZABLE() { return getToken(PLSQLParser.SERIALIZABLE, 0); }
		public TerminalNode COMMITTED() { return getToken(PLSQLParser.COMMITTED, 0); }
		public Set_transaction_commandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_transaction_command; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterSet_transaction_command(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitSet_transaction_command(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitSet_transaction_command(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_transaction_commandContext set_transaction_command() throws RecognitionException {
		Set_transaction_commandContext _localctx = new Set_transaction_commandContext(_ctx, getState());
		enterRule(_localctx, 636, RULE_set_transaction_command);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5699);
			match(SET);
			setState(5700);
			match(TRANSACTION);
			setState(5714);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case READ:
				{
				setState(5701);
				match(READ);
				setState(5702);
				_la = _input.LA(1);
				if ( !(_la==ONLY || _la==WRITE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case ISOLATION:
				{
				setState(5703);
				match(ISOLATION);
				setState(5704);
				match(LEVEL);
				setState(5708);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case SERIALIZABLE:
					{
					setState(5705);
					match(SERIALIZABLE);
					}
					break;
				case READ:
					{
					setState(5706);
					match(READ);
					setState(5707);
					match(COMMITTED);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case USE:
				{
				setState(5710);
				match(USE);
				setState(5711);
				match(ROLLBACK);
				setState(5712);
				match(SEGMENT);
				setState(5713);
				rollback_segment_name();
				}
				break;
			case EOF:
			case NAME:
			case SAVE:
			case SEMICOLON:
				break;
			default:
				break;
			}
			setState(5718);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NAME) {
				{
				setState(5716);
				match(NAME);
				setState(5717);
				quoted_string();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_constraint_commandContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(PLSQLParser.SET, 0); }
		public TerminalNode CONSTRAINT() { return getToken(PLSQLParser.CONSTRAINT, 0); }
		public TerminalNode CONSTRAINTS() { return getToken(PLSQLParser.CONSTRAINTS, 0); }
		public TerminalNode IMMEDIATE() { return getToken(PLSQLParser.IMMEDIATE, 0); }
		public TerminalNode DEFERRED() { return getToken(PLSQLParser.DEFERRED, 0); }
		public TerminalNode ALL() { return getToken(PLSQLParser.ALL, 0); }
		public List<Constraint_nameContext> constraint_name() {
			return getRuleContexts(Constraint_nameContext.class);
		}
		public Constraint_nameContext constraint_name(int i) {
			return getRuleContext(Constraint_nameContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLSQLParser.COMMA, i);
		}
		public Set_constraint_commandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_constraint_command; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterSet_constraint_command(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitSet_constraint_command(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitSet_constraint_command(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_constraint_commandContext set_constraint_command() throws RecognitionException {
		Set_constraint_commandContext _localctx = new Set_constraint_commandContext(_ctx, getState());
		enterRule(_localctx, 638, RULE_set_constraint_command);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5720);
			match(SET);
			setState(5721);
			_la = _input.LA(1);
			if ( !(_la==CONSTRAINT || _la==CONSTRAINTS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5731);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALL:
				{
				setState(5722);
				match(ALL);
				}
				break;
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BUILD:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPLETE:
			case COMPOUND:
			case CONCAT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECODE:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DEMAND:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case EDITIONING:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENFORCED:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FAST:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LIST:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MASTER:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEVER:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NVL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case MATERIALIZED:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PREBUILT:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PUBLIC:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REDUCED:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REFRESH:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case REWRITE:
			case RIGHT:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SIZE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBSTRING:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TABLES:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TO_CHAR:
			case TO_DATE:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TRUSTED:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERBOSE:
			case VERSION:
			case VERSIONS:
			case VIEW:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHOUT:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case REGULAR_ID:
				{
				setState(5723);
				constraint_name();
				setState(5728);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5724);
					match(COMMA);
					setState(5725);
					constraint_name();
					}
					}
					setState(5730);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(5733);
			_la = _input.LA(1);
			if ( !(_la==DEFERRED || _la==IMMEDIATE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Commit_statementContext extends ParserRuleContext {
		public TerminalNode COMMIT() { return getToken(PLSQLParser.COMMIT, 0); }
		public TerminalNode WORK() { return getToken(PLSQLParser.WORK, 0); }
		public TerminalNode COMMENT() { return getToken(PLSQLParser.COMMENT, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode FORCE() { return getToken(PLSQLParser.FORCE, 0); }
		public Write_clauseContext write_clause() {
			return getRuleContext(Write_clauseContext.class,0);
		}
		public TerminalNode CORRUPT_XID() { return getToken(PLSQLParser.CORRUPT_XID, 0); }
		public TerminalNode CORRUPT_XID_ALL() { return getToken(PLSQLParser.CORRUPT_XID_ALL, 0); }
		public TerminalNode COMMA() { return getToken(PLSQLParser.COMMA, 0); }
		public Commit_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_commit_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterCommit_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitCommit_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitCommit_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Commit_statementContext commit_statement() throws RecognitionException {
		Commit_statementContext _localctx = new Commit_statementContext(_ctx, getState());
		enterRule(_localctx, 640, RULE_commit_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5735);
			match(COMMIT);
			setState(5737);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WORK) {
				{
				setState(5736);
				match(WORK);
				}
			}

			setState(5752);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case COMMENT:
				{
				setState(5739);
				match(COMMENT);
				setState(5740);
				expression(0);
				}
				break;
			case FORCE:
				{
				setState(5741);
				match(FORCE);
				setState(5750);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,815,_ctx) ) {
				case 1:
					{
					setState(5742);
					match(CORRUPT_XID);
					setState(5743);
					expression(0);
					}
					break;
				case 2:
					{
					setState(5744);
					match(CORRUPT_XID_ALL);
					}
					break;
				case 3:
					{
					setState(5745);
					expression(0);
					setState(5748);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(5746);
						match(COMMA);
						setState(5747);
						expression(0);
						}
					}

					}
					break;
				}
				}
				break;
			case EOF:
			case SAVE:
			case WRITE:
			case SEMICOLON:
				break;
			default:
				break;
			}
			setState(5755);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WRITE) {
				{
				setState(5754);
				write_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Write_clauseContext extends ParserRuleContext {
		public TerminalNode WRITE() { return getToken(PLSQLParser.WRITE, 0); }
		public TerminalNode WAIT() { return getToken(PLSQLParser.WAIT, 0); }
		public TerminalNode NOWAIT() { return getToken(PLSQLParser.NOWAIT, 0); }
		public TerminalNode IMMEDIATE() { return getToken(PLSQLParser.IMMEDIATE, 0); }
		public TerminalNode BATCH() { return getToken(PLSQLParser.BATCH, 0); }
		public Write_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_write_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterWrite_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitWrite_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitWrite_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Write_clauseContext write_clause() throws RecognitionException {
		Write_clauseContext _localctx = new Write_clauseContext(_ctx, getState());
		enterRule(_localctx, 642, RULE_write_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5757);
			match(WRITE);
			setState(5759);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOWAIT || _la==WAIT) {
				{
				setState(5758);
				_la = _input.LA(1);
				if ( !(_la==NOWAIT || _la==WAIT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(5762);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==BATCH || _la==IMMEDIATE) {
				{
				setState(5761);
				_la = _input.LA(1);
				if ( !(_la==BATCH || _la==IMMEDIATE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Rollback_statementContext extends ParserRuleContext {
		public TerminalNode ROLLBACK() { return getToken(PLSQLParser.ROLLBACK, 0); }
		public TerminalNode WORK() { return getToken(PLSQLParser.WORK, 0); }
		public TerminalNode TO() { return getToken(PLSQLParser.TO, 0); }
		public Savepoint_nameContext savepoint_name() {
			return getRuleContext(Savepoint_nameContext.class,0);
		}
		public TerminalNode FORCE() { return getToken(PLSQLParser.FORCE, 0); }
		public Quoted_stringContext quoted_string() {
			return getRuleContext(Quoted_stringContext.class,0);
		}
		public TerminalNode SAVEPOINT() { return getToken(PLSQLParser.SAVEPOINT, 0); }
		public Rollback_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rollback_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterRollback_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitRollback_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitRollback_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Rollback_statementContext rollback_statement() throws RecognitionException {
		Rollback_statementContext _localctx = new Rollback_statementContext(_ctx, getState());
		enterRule(_localctx, 644, RULE_rollback_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5764);
			match(ROLLBACK);
			setState(5766);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WORK) {
				{
				setState(5765);
				match(WORK);
				}
			}

			setState(5775);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TO:
				{
				setState(5768);
				match(TO);
				setState(5770);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,821,_ctx) ) {
				case 1:
					{
					setState(5769);
					match(SAVEPOINT);
					}
					break;
				}
				setState(5772);
				savepoint_name();
				}
				break;
			case FORCE:
				{
				setState(5773);
				match(FORCE);
				setState(5774);
				quoted_string();
				}
				break;
			case EOF:
			case SAVE:
			case SEMICOLON:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Savepoint_statementContext extends ParserRuleContext {
		public TerminalNode SAVEPOINT() { return getToken(PLSQLParser.SAVEPOINT, 0); }
		public Savepoint_nameContext savepoint_name() {
			return getRuleContext(Savepoint_nameContext.class,0);
		}
		public Savepoint_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_savepoint_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterSavepoint_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitSavepoint_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitSavepoint_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Savepoint_statementContext savepoint_statement() throws RecognitionException {
		Savepoint_statementContext _localctx = new Savepoint_statementContext(_ctx, getState());
		enterRule(_localctx, 646, RULE_savepoint_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5777);
			match(SAVEPOINT);
			setState(5778);
			savepoint_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Explain_statementContext extends ParserRuleContext {
		public TerminalNode EXPLAIN() { return getToken(PLSQLParser.EXPLAIN, 0); }
		public TerminalNode PLAN() { return getToken(PLSQLParser.PLAN, 0); }
		public TerminalNode FOR() { return getToken(PLSQLParser.FOR, 0); }
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public Update_statementContext update_statement() {
			return getRuleContext(Update_statementContext.class,0);
		}
		public Delete_statementContext delete_statement() {
			return getRuleContext(Delete_statementContext.class,0);
		}
		public Insert_statementContext insert_statement() {
			return getRuleContext(Insert_statementContext.class,0);
		}
		public Merge_statementContext merge_statement() {
			return getRuleContext(Merge_statementContext.class,0);
		}
		public TerminalNode SET() { return getToken(PLSQLParser.SET, 0); }
		public TerminalNode STATEMENT_ID() { return getToken(PLSQLParser.STATEMENT_ID, 0); }
		public TerminalNode EQUALS_OP() { return getToken(PLSQLParser.EQUALS_OP, 0); }
		public Quoted_stringContext quoted_string() {
			return getRuleContext(Quoted_stringContext.class,0);
		}
		public TerminalNode INTO() { return getToken(PLSQLParser.INTO, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public Explain_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_explain_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterExplain_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitExplain_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitExplain_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Explain_statementContext explain_statement() throws RecognitionException {
		Explain_statementContext _localctx = new Explain_statementContext(_ctx, getState());
		enterRule(_localctx, 648, RULE_explain_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5780);
			match(EXPLAIN);
			setState(5781);
			match(PLAN);
			setState(5786);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SET) {
				{
				setState(5782);
				match(SET);
				setState(5783);
				match(STATEMENT_ID);
				setState(5784);
				match(EQUALS_OP);
				setState(5785);
				quoted_string();
				}
			}

			setState(5790);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INTO) {
				{
				setState(5788);
				match(INTO);
				setState(5789);
				tableview_name();
				}
			}

			setState(5792);
			match(FOR);
			setState(5798);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SELECT:
			case WITH:
			case LEFT_PAREN:
				{
				setState(5793);
				select_statement();
				}
				break;
			case UPDATE:
				{
				setState(5794);
				update_statement();
				}
				break;
			case DELETE:
				{
				setState(5795);
				delete_statement();
				}
				break;
			case INSERT:
				{
				setState(5796);
				insert_statement();
				}
				break;
			case MERGE:
				{
				setState(5797);
				merge_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Select_statementContext extends ParserRuleContext {
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public Subquery_factoring_clauseContext subquery_factoring_clause() {
			return getRuleContext(Subquery_factoring_clauseContext.class,0);
		}
		public Select_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterSelect_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitSelect_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitSelect_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Select_statementContext select_statement() throws RecognitionException {
		Select_statementContext _localctx = new Select_statementContext(_ctx, getState());
		enterRule(_localctx, 650, RULE_select_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5801);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(5800);
				subquery_factoring_clause();
				}
			}

			setState(5803);
			subquery(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Subquery_factoring_clauseContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(PLSQLParser.WITH, 0); }
		public List<Factoring_elementContext> factoring_element() {
			return getRuleContexts(Factoring_elementContext.class);
		}
		public Factoring_elementContext factoring_element(int i) {
			return getRuleContext(Factoring_elementContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLSQLParser.COMMA, i);
		}
		public Subquery_factoring_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subquery_factoring_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterSubquery_factoring_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitSubquery_factoring_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitSubquery_factoring_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Subquery_factoring_clauseContext subquery_factoring_clause() throws RecognitionException {
		Subquery_factoring_clauseContext _localctx = new Subquery_factoring_clauseContext(_ctx, getState());
		enterRule(_localctx, 652, RULE_subquery_factoring_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5805);
			match(WITH);
			setState(5806);
			factoring_element();
			setState(5811);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5807);
				match(COMMA);
				setState(5808);
				factoring_element();
				}
				}
				setState(5813);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Factoring_elementContext extends ParserRuleContext {
		public Query_nameContext query_name() {
			return getRuleContext(Query_nameContext.class,0);
		}
		public TerminalNode AS() { return getToken(PLSQLParser.AS, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PLSQLParser.LEFT_PAREN, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PLSQLParser.RIGHT_PAREN, 0); }
		public Paren_column_listContext paren_column_list() {
			return getRuleContext(Paren_column_listContext.class,0);
		}
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public Search_clauseContext search_clause() {
			return getRuleContext(Search_clauseContext.class,0);
		}
		public Cycle_clauseContext cycle_clause() {
			return getRuleContext(Cycle_clauseContext.class,0);
		}
		public Factoring_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_factoring_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterFactoring_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitFactoring_element(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitFactoring_element(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Factoring_elementContext factoring_element() throws RecognitionException {
		Factoring_elementContext _localctx = new Factoring_elementContext(_ctx, getState());
		enterRule(_localctx, 654, RULE_factoring_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5814);
			query_name();
			setState(5816);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(5815);
				paren_column_list();
				}
			}

			setState(5818);
			match(AS);
			setState(5819);
			match(LEFT_PAREN);
			setState(5820);
			subquery(0);
			setState(5822);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ORDER) {
				{
				setState(5821);
				order_by_clause();
				}
			}

			setState(5824);
			match(RIGHT_PAREN);
			setState(5826);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SEARCH) {
				{
				setState(5825);
				search_clause();
				}
			}

			setState(5829);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CYCLE) {
				{
				setState(5828);
				cycle_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Search_clauseContext extends ParserRuleContext {
		public TerminalNode SEARCH() { return getToken(PLSQLParser.SEARCH, 0); }
		public List<TerminalNode> FIRST() { return getTokens(PLSQLParser.FIRST); }
		public TerminalNode FIRST(int i) {
			return getToken(PLSQLParser.FIRST, i);
		}
		public TerminalNode BY() { return getToken(PLSQLParser.BY, 0); }
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public TerminalNode SET() { return getToken(PLSQLParser.SET, 0); }
		public TerminalNode DEPTH() { return getToken(PLSQLParser.DEPTH, 0); }
		public TerminalNode BREADTH() { return getToken(PLSQLParser.BREADTH, 0); }
		public List<TerminalNode> ASC() { return getTokens(PLSQLParser.ASC); }
		public TerminalNode ASC(int i) {
			return getToken(PLSQLParser.ASC, i);
		}
		public List<TerminalNode> DESC() { return getTokens(PLSQLParser.DESC); }
		public TerminalNode DESC(int i) {
			return getToken(PLSQLParser.DESC, i);
		}
		public List<TerminalNode> NULLS() { return getTokens(PLSQLParser.NULLS); }
		public TerminalNode NULLS(int i) {
			return getToken(PLSQLParser.NULLS, i);
		}
		public List<TerminalNode> LAST() { return getTokens(PLSQLParser.LAST); }
		public TerminalNode LAST(int i) {
			return getToken(PLSQLParser.LAST, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLSQLParser.COMMA, i);
		}
		public Search_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_search_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterSearch_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitSearch_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitSearch_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Search_clauseContext search_clause() throws RecognitionException {
		Search_clauseContext _localctx = new Search_clauseContext(_ctx, getState());
		enterRule(_localctx, 656, RULE_search_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5831);
			match(SEARCH);
			setState(5832);
			_la = _input.LA(1);
			if ( !(_la==BREADTH || _la==DEPTH) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5833);
			match(FIRST);
			setState(5834);
			match(BY);
			setState(5835);
			column_name();
			setState(5837);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ASC) {
				{
				setState(5836);
				match(ASC);
				}
			}

			setState(5840);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DESC) {
				{
				setState(5839);
				match(DESC);
				}
			}

			setState(5844);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,834,_ctx) ) {
			case 1:
				{
				setState(5842);
				match(NULLS);
				setState(5843);
				match(FIRST);
				}
				break;
			}
			setState(5848);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NULLS) {
				{
				setState(5846);
				match(NULLS);
				setState(5847);
				match(LAST);
				}
			}

			setState(5868);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5850);
				match(COMMA);
				setState(5851);
				column_name();
				setState(5853);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ASC) {
					{
					setState(5852);
					match(ASC);
					}
				}

				setState(5856);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DESC) {
					{
					setState(5855);
					match(DESC);
					}
				}

				setState(5860);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,838,_ctx) ) {
				case 1:
					{
					setState(5858);
					match(NULLS);
					setState(5859);
					match(FIRST);
					}
					break;
				}
				setState(5864);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NULLS) {
					{
					setState(5862);
					match(NULLS);
					setState(5863);
					match(LAST);
					}
				}

				}
				}
				setState(5870);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(5871);
			match(SET);
			setState(5872);
			column_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cycle_clauseContext extends ParserRuleContext {
		public TerminalNode CYCLE() { return getToken(PLSQLParser.CYCLE, 0); }
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public TerminalNode SET() { return getToken(PLSQLParser.SET, 0); }
		public TerminalNode TO() { return getToken(PLSQLParser.TO, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode DEFAULT() { return getToken(PLSQLParser.DEFAULT, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PLSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLSQLParser.COMMA, i);
		}
		public Cycle_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cycle_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterCycle_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitCycle_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitCycle_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cycle_clauseContext cycle_clause() throws RecognitionException {
		Cycle_clauseContext _localctx = new Cycle_clauseContext(_ctx, getState());
		enterRule(_localctx, 658, RULE_cycle_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5874);
			match(CYCLE);
			setState(5875);
			column_name();
			setState(5880);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5876);
				match(COMMA);
				setState(5877);
				column_name();
				}
				}
				setState(5882);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(5883);
			match(SET);
			setState(5884);
			column_name();
			setState(5885);
			match(TO);
			setState(5886);
			expression(0);
			setState(5887);
			match(DEFAULT);
			setState(5888);
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SubqueryContext extends ParserRuleContext {
		public SubqueryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subquery; }
	 
		public SubqueryContext() { }
		public void copyFrom(SubqueryContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SubqueryParenContext extends SubqueryContext {
		public TerminalNode LEFT_PAREN() { return getToken(PLSQLParser.LEFT_PAREN, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PLSQLParser.RIGHT_PAREN, 0); }
		public SubqueryParenContext(SubqueryContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterSubqueryParen(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitSubqueryParen(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitSubqueryParen(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class IgnoreSubqueryContext extends SubqueryContext {
		public Query_blockContext query_block() {
			return getRuleContext(Query_blockContext.class,0);
		}
		public IgnoreSubqueryContext(SubqueryContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterIgnoreSubquery(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitIgnoreSubquery(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitIgnoreSubquery(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SubqueryCompoundContext extends SubqueryContext {
		public SubqueryContext left;
		public Subquery_operation_partContext op;
		public SubqueryContext right;
		public List<SubqueryContext> subquery() {
			return getRuleContexts(SubqueryContext.class);
		}
		public SubqueryContext subquery(int i) {
			return getRuleContext(SubqueryContext.class,i);
		}
		public Subquery_operation_partContext subquery_operation_part() {
			return getRuleContext(Subquery_operation_partContext.class,0);
		}
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public SubqueryCompoundContext(SubqueryContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterSubqueryCompound(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitSubqueryCompound(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitSubqueryCompound(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SubqueryContext subquery() throws RecognitionException {
		return subquery(0);
	}

	private SubqueryContext subquery(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		SubqueryContext _localctx = new SubqueryContext(_ctx, _parentState);
		SubqueryContext _prevctx = _localctx;
		int _startState = 660;
		enterRecursionRule(_localctx, 660, RULE_subquery, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(5896);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LEFT_PAREN:
				{
				_localctx = new SubqueryParenContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				setState(5891);
				match(LEFT_PAREN);
				setState(5892);
				subquery(0);
				setState(5893);
				match(RIGHT_PAREN);
				}
				break;
			case SELECT:
				{
				_localctx = new IgnoreSubqueryContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(5895);
				query_block();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			_ctx.stop = _input.LT(-1);
			setState(5906);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,844,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new SubqueryCompoundContext(new SubqueryContext(_parentctx, _parentState));
					((SubqueryCompoundContext)_localctx).left = _prevctx;
					pushNewRecursionContext(_localctx, _startState, RULE_subquery);
					setState(5898);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(5899);
					((SubqueryCompoundContext)_localctx).op = subquery_operation_part();
					setState(5900);
					((SubqueryCompoundContext)_localctx).right = subquery(0);
					setState(5902);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,843,_ctx) ) {
					case 1:
						{
						setState(5901);
						order_by_clause();
						}
						break;
					}
					}
					} 
				}
				setState(5908);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,844,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Subquery_operation_partContext extends ParserRuleContext {
		public TerminalNode UNION() { return getToken(PLSQLParser.UNION, 0); }
		public TerminalNode INTERSECT() { return getToken(PLSQLParser.INTERSECT, 0); }
		public TerminalNode EXCEPT() { return getToken(PLSQLParser.EXCEPT, 0); }
		public TerminalNode MINUS() { return getToken(PLSQLParser.MINUS, 0); }
		public TerminalNode ALL() { return getToken(PLSQLParser.ALL, 0); }
		public Subquery_operation_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subquery_operation_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterSubquery_operation_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitSubquery_operation_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitSubquery_operation_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Subquery_operation_partContext subquery_operation_part() throws RecognitionException {
		Subquery_operation_partContext _localctx = new Subquery_operation_partContext(_ctx, getState());
		enterRule(_localctx, 662, RULE_subquery_operation_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5909);
			_la = _input.LA(1);
			if ( !(_la==EXCEPT || _la==INTERSECT || _la==MINUS || _la==UNION) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5911);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALL) {
				{
				setState(5910);
				match(ALL);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Query_blockContext extends ParserRuleContext {
		public Token pref;
		public Selected_elementContext selected_element;
		public List<Selected_elementContext> target_list = new ArrayList<Selected_elementContext>();
		public TerminalNode SELECT() { return getToken(PLSQLParser.SELECT, 0); }
		public List<Selected_elementContext> selected_element() {
			return getRuleContexts(Selected_elementContext.class);
		}
		public Selected_elementContext selected_element(int i) {
			return getRuleContext(Selected_elementContext.class,i);
		}
		public Into_clauseContext into_clause() {
			return getRuleContext(Into_clauseContext.class,0);
		}
		public From_clauseContext from_clause() {
			return getRuleContext(From_clauseContext.class,0);
		}
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public Hierarchical_query_clauseContext hierarchical_query_clause() {
			return getRuleContext(Hierarchical_query_clauseContext.class,0);
		}
		public List<Group_by_clauseContext> group_by_clause() {
			return getRuleContexts(Group_by_clauseContext.class);
		}
		public Group_by_clauseContext group_by_clause(int i) {
			return getRuleContext(Group_by_clauseContext.class,i);
		}
		public List<Having_clauseContext> having_clause() {
			return getRuleContexts(Having_clauseContext.class);
		}
		public Having_clauseContext having_clause(int i) {
			return getRuleContext(Having_clauseContext.class,i);
		}
		public Model_clauseContext model_clause() {
			return getRuleContext(Model_clauseContext.class,0);
		}
		public List<For_update_clauseContext> for_update_clause() {
			return getRuleContexts(For_update_clauseContext.class);
		}
		public For_update_clauseContext for_update_clause(int i) {
			return getRuleContext(For_update_clauseContext.class,i);
		}
		public List<Order_by_clauseContext> order_by_clause() {
			return getRuleContexts(Order_by_clauseContext.class);
		}
		public Order_by_clauseContext order_by_clause(int i) {
			return getRuleContext(Order_by_clauseContext.class,i);
		}
		public List<Limit_clauseContext> limit_clause() {
			return getRuleContexts(Limit_clauseContext.class);
		}
		public Limit_clauseContext limit_clause(int i) {
			return getRuleContext(Limit_clauseContext.class,i);
		}
		public TerminalNode DISTINCT() { return getToken(PLSQLParser.DISTINCT, 0); }
		public TerminalNode UNIQUE() { return getToken(PLSQLParser.UNIQUE, 0); }
		public TerminalNode ALL() { return getToken(PLSQLParser.ALL, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PLSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLSQLParser.COMMA, i);
		}
		public Query_blockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_query_block; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterQuery_block(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitQuery_block(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitQuery_block(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Query_blockContext query_block() throws RecognitionException {
		Query_blockContext _localctx = new Query_blockContext(_ctx, getState());
		enterRule(_localctx, 664, RULE_query_block);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(5913);
			match(SELECT);
			setState(5915);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,846,_ctx) ) {
			case 1:
				{
				setState(5914);
				((Query_blockContext)_localctx).pref = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ALL || _la==DISTINCT || _la==UNIQUE) ) {
					((Query_blockContext)_localctx).pref = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			{
			setState(5917);
			((Query_blockContext)_localctx).selected_element = selected_element();
			((Query_blockContext)_localctx).target_list.add(((Query_blockContext)_localctx).selected_element);
			setState(5922);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,847,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(5918);
					match(COMMA);
					setState(5919);
					((Query_blockContext)_localctx).selected_element = selected_element();
					((Query_blockContext)_localctx).target_list.add(((Query_blockContext)_localctx).selected_element);
					}
					} 
				}
				setState(5924);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,847,_ctx);
			}
			}
			setState(5926);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,848,_ctx) ) {
			case 1:
				{
				setState(5925);
				into_clause();
				}
				break;
			}
			setState(5929);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,849,_ctx) ) {
			case 1:
				{
				setState(5928);
				from_clause();
				}
				break;
			}
			setState(5932);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,850,_ctx) ) {
			case 1:
				{
				setState(5931);
				where_clause();
				}
				break;
			}
			setState(5935);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,851,_ctx) ) {
			case 1:
				{
				setState(5934);
				hierarchical_query_clause();
				}
				break;
			}
			setState(5941);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,853,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					setState(5939);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case GROUP:
						{
						setState(5937);
						group_by_clause();
						}
						break;
					case HAVING:
						{
						setState(5938);
						having_clause();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				setState(5943);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,853,_ctx);
			}
			setState(5945);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,854,_ctx) ) {
			case 1:
				{
				setState(5944);
				model_clause();
				}
				break;
			}
			setState(5952);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,856,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					setState(5950);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case FOR:
						{
						setState(5947);
						for_update_clause();
						}
						break;
					case ORDER:
						{
						setState(5948);
						order_by_clause();
						}
						break;
					case LIMIT:
						{
						setState(5949);
						limit_clause();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				setState(5954);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,856,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Selected_elementContext extends ParserRuleContext {
		public Selected_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selected_element; }
	 
		public Selected_elementContext() { }
		public void copyFrom(Selected_elementContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class Alias_exprContext extends Selected_elementContext {
		public ExpressionContext expr;
		public Column_aliasContext alias;
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Column_aliasContext column_alias() {
			return getRuleContext(Column_aliasContext.class,0);
		}
		public Alias_exprContext(Selected_elementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterAlias_expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitAlias_expr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitAlias_expr(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class IgnoreTableview_nameContext extends Selected_elementContext {
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public IgnoreTableview_nameContext(Selected_elementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterIgnoreTableview_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitIgnoreTableview_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitIgnoreTableview_name(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class StarTableContext extends Selected_elementContext {
		public Dot_idContext dot_id() {
			return getRuleContext(Dot_idContext.class,0);
		}
		public TerminalNode PERIOD() { return getToken(PLSQLParser.PERIOD, 0); }
		public StarContext star() {
			return getRuleContext(StarContext.class,0);
		}
		public StarTableContext(Selected_elementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterStarTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitStarTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitStarTable(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class Star1Context extends Selected_elementContext {
		public StarContext star() {
			return getRuleContext(StarContext.class,0);
		}
		public Star1Context(Selected_elementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterStar1(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitStar1(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitStar1(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Selected_elementContext selected_element() throws RecognitionException {
		Selected_elementContext _localctx = new Selected_elementContext(_ctx, getState());
		enterRule(_localctx, 666, RULE_selected_element);
		try {
			setState(5965);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,858,_ctx) ) {
			case 1:
				_localctx = new Star1Context(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(5955);
				star();
				}
				break;
			case 2:
				_localctx = new StarTableContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(5956);
				dot_id();
				setState(5957);
				match(PERIOD);
				setState(5958);
				star();
				}
				break;
			case 3:
				_localctx = new IgnoreTableview_nameContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(5960);
				tableview_name();
				}
				break;
			case 4:
				_localctx = new Alias_exprContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(5961);
				((Alias_exprContext)_localctx).expr = expression(0);
				setState(5963);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,857,_ctx) ) {
				case 1:
					{
					setState(5962);
					((Alias_exprContext)_localctx).alias = column_alias();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class From_clauseContext extends ParserRuleContext {
		public TerminalNode FROM() { return getToken(PLSQLParser.FROM, 0); }
		public List<Table_refContext> table_ref() {
			return getRuleContexts(Table_refContext.class);
		}
		public Table_refContext table_ref(int i) {
			return getRuleContext(Table_refContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLSQLParser.COMMA, i);
		}
		public From_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_from_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterFrom_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitFrom_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitFrom_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final From_clauseContext from_clause() throws RecognitionException {
		From_clauseContext _localctx = new From_clauseContext(_ctx, getState());
		enterRule(_localctx, 668, RULE_from_clause);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(5967);
			match(FROM);
			setState(5968);
			table_ref(0);
			setState(5973);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,859,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(5969);
					match(COMMA);
					setState(5970);
					table_ref(0);
					}
					} 
				}
				setState(5975);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,859,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_ref_pivotContext extends ParserRuleContext {
		public Table_refContext table_ref() {
			return getRuleContext(Table_refContext.class,0);
		}
		public Pivot_clauseContext pivot_clause() {
			return getRuleContext(Pivot_clauseContext.class,0);
		}
		public Unpivot_clauseContext unpivot_clause() {
			return getRuleContext(Unpivot_clauseContext.class,0);
		}
		public Table_ref_pivotContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_ref_pivot; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterTable_ref_pivot(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitTable_ref_pivot(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitTable_ref_pivot(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_ref_pivotContext table_ref_pivot() throws RecognitionException {
		Table_ref_pivotContext _localctx = new Table_ref_pivotContext(_ctx, getState());
		enterRule(_localctx, 670, RULE_table_ref_pivot);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5976);
			table_ref(0);
			setState(5979);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PIVOT:
				{
				setState(5977);
				pivot_clause();
				}
				break;
			case UNPIVOT:
				{
				setState(5978);
				unpivot_clause();
				}
				break;
			case EOF:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_refContext extends ParserRuleContext {
		public Table_refContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_ref; }
	 
		public Table_refContext() { }
		public void copyFrom(Table_refContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class JoinExprContext extends Table_refContext {
		public Table_refContext table_ref() {
			return getRuleContext(Table_refContext.class,0);
		}
		public Join_clauseContext join_clause() {
			return getRuleContext(Join_clauseContext.class,0);
		}
		public JoinExprContext(Table_refContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterJoinExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitJoinExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitJoinExpr(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableRefSimpleContext extends Table_refContext {
		public Table_ref_auxContext table_ref_aux() {
			return getRuleContext(Table_ref_auxContext.class,0);
		}
		public List<Flashback_query_clauseContext> flashback_query_clause() {
			return getRuleContexts(Flashback_query_clauseContext.class);
		}
		public Flashback_query_clauseContext flashback_query_clause(int i) {
			return getRuleContext(Flashback_query_clauseContext.class,i);
		}
		public TableRefSimpleContext(Table_refContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterTableRefSimple(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitTableRefSimple(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitTableRefSimple(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableRefAuxContext extends Table_refContext {
		public Table_ref_auxContext table_ref_aux() {
			return getRuleContext(Table_ref_auxContext.class,0);
		}
		public List<Flashback_query_clauseContext> flashback_query_clause() {
			return getRuleContexts(Flashback_query_clauseContext.class);
		}
		public Flashback_query_clauseContext flashback_query_clause(int i) {
			return getRuleContext(Flashback_query_clauseContext.class,i);
		}
		public Table_aliasContext table_alias() {
			return getRuleContext(Table_aliasContext.class,0);
		}
		public TableRefAuxContext(Table_refContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterTableRefAux(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitTableRefAux(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitTableRefAux(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_refContext table_ref() throws RecognitionException {
		return table_ref(0);
	}

	private Table_refContext table_ref(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Table_refContext _localctx = new Table_refContext(_ctx, _parentState);
		Table_refContext _prevctx = _localctx;
		int _startState = 672;
		enterRecursionRule(_localctx, 672, RULE_table_ref, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(5999);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,864,_ctx) ) {
			case 1:
				{
				_localctx = new TableRefSimpleContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				setState(5982);
				table_ref_aux();
				setState(5986);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,861,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(5983);
						flashback_query_clause();
						}
						} 
					}
					setState(5988);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,861,_ctx);
				}
				}
				break;
			case 2:
				{
				_localctx = new TableRefAuxContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(5989);
				table_ref_aux();
				setState(5993);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,862,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(5990);
						flashback_query_clause();
						}
						} 
					}
					setState(5995);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,862,_ctx);
				}
				setState(5997);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,863,_ctx) ) {
				case 1:
					{
					setState(5996);
					table_alias();
					}
					break;
				}
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(6005);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,865,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new JoinExprContext(new Table_refContext(_parentctx, _parentState));
					pushNewRecursionContext(_localctx, _startState, RULE_table_ref);
					setState(6001);
					if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
					setState(6002);
					join_clause();
					}
					} 
				}
				setState(6007);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,865,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Table_ref_auxContext extends ParserRuleContext {
		public Dml_table_expression_clauseContext dml_table_expression_clause() {
			return getRuleContext(Dml_table_expression_clauseContext.class,0);
		}
		public Pivot_clauseContext pivot_clause() {
			return getRuleContext(Pivot_clauseContext.class,0);
		}
		public Unpivot_clauseContext unpivot_clause() {
			return getRuleContext(Unpivot_clauseContext.class,0);
		}
		public TerminalNode ONLY() { return getToken(PLSQLParser.ONLY, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PLSQLParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PLSQLParser.RIGHT_PAREN, 0); }
		public Table_ref_auxContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_ref_aux; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterTable_ref_aux(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitTable_ref_aux(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitTable_ref_aux(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_ref_auxContext table_ref_aux() throws RecognitionException {
		Table_ref_auxContext _localctx = new Table_ref_auxContext(_ctx, getState());
		enterRule(_localctx, 674, RULE_table_ref_aux);
		try {
			setState(6018);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,867,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6008);
				dml_table_expression_clause();
				setState(6011);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,866,_ctx) ) {
				case 1:
					{
					setState(6009);
					pivot_clause();
					}
					break;
				case 2:
					{
					setState(6010);
					unpivot_clause();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6013);
				match(ONLY);
				setState(6014);
				match(LEFT_PAREN);
				setState(6015);
				dml_table_expression_clause();
				setState(6016);
				match(RIGHT_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Join_clauseContext extends ParserRuleContext {
		public TerminalNode JOIN() { return getToken(PLSQLParser.JOIN, 0); }
		public Table_refContext table_ref() {
			return getRuleContext(Table_refContext.class,0);
		}
		public List<Query_partition_clauseContext> query_partition_clause() {
			return getRuleContexts(Query_partition_clauseContext.class);
		}
		public Query_partition_clauseContext query_partition_clause(int i) {
			return getRuleContext(Query_partition_clauseContext.class,i);
		}
		public Join_typeContext join_type() {
			return getRuleContext(Join_typeContext.class,0);
		}
		public Join_on_partContext join_on_part() {
			return getRuleContext(Join_on_partContext.class,0);
		}
		public Join_using_partContext join_using_part() {
			return getRuleContext(Join_using_partContext.class,0);
		}
		public Join_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_join_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterJoin_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitJoin_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitJoin_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Join_clauseContext join_clause() throws RecognitionException {
		Join_clauseContext _localctx = new Join_clauseContext(_ctx, getState());
		enterRule(_localctx, 676, RULE_join_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6021);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(6020);
				query_partition_clause();
				}
			}

			setState(6024);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CROSS || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & ((1L << (FULL - 197)) | (1L << (INNER - 197)) | (1L << (LEFT - 197)))) != 0) || _la==NATURAL || _la==RIGHT) {
				{
				setState(6023);
				join_type();
				}
			}

			setState(6026);
			match(JOIN);
			setState(6027);
			table_ref(0);
			setState(6029);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,870,_ctx) ) {
			case 1:
				{
				setState(6028);
				query_partition_clause();
				}
				break;
			}
			setState(6033);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,871,_ctx) ) {
			case 1:
				{
				setState(6031);
				join_on_part();
				}
				break;
			case 2:
				{
				setState(6032);
				join_using_part();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Join_on_partContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(PLSQLParser.ON, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public Join_on_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_join_on_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterJoin_on_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitJoin_on_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitJoin_on_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Join_on_partContext join_on_part() throws RecognitionException {
		Join_on_partContext _localctx = new Join_on_partContext(_ctx, getState());
		enterRule(_localctx, 678, RULE_join_on_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6035);
			match(ON);
			setState(6036);
			condition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Join_using_partContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(PLSQLParser.USING, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PLSQLParser.LEFT_PAREN, 0); }
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PLSQLParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PLSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLSQLParser.COMMA, i);
		}
		public Join_using_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_join_using_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterJoin_using_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitJoin_using_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitJoin_using_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Join_using_partContext join_using_part() throws RecognitionException {
		Join_using_partContext _localctx = new Join_using_partContext(_ctx, getState());
		enterRule(_localctx, 680, RULE_join_using_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6038);
			match(USING);
			setState(6039);
			match(LEFT_PAREN);
			setState(6040);
			column_name();
			setState(6045);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(6041);
				match(COMMA);
				setState(6042);
				column_name();
				}
				}
				setState(6047);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(6048);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Join_typeContext extends ParserRuleContext {
		public TerminalNode CROSS() { return getToken(PLSQLParser.CROSS, 0); }
		public TerminalNode INNER() { return getToken(PLSQLParser.INNER, 0); }
		public TerminalNode NATURAL() { return getToken(PLSQLParser.NATURAL, 0); }
		public TerminalNode FULL() { return getToken(PLSQLParser.FULL, 0); }
		public TerminalNode LEFT() { return getToken(PLSQLParser.LEFT, 0); }
		public TerminalNode RIGHT() { return getToken(PLSQLParser.RIGHT, 0); }
		public TerminalNode OUTER() { return getToken(PLSQLParser.OUTER, 0); }
		public Join_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_join_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterJoin_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitJoin_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitJoin_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Join_typeContext join_type() throws RecognitionException {
		Join_typeContext _localctx = new Join_typeContext(_ctx, getState());
		enterRule(_localctx, 682, RULE_join_type);
		int _la;
		try {
			setState(6061);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CROSS:
				enterOuterAlt(_localctx, 1);
				{
				setState(6050);
				match(CROSS);
				}
				break;
			case FULL:
			case INNER:
			case LEFT:
			case NATURAL:
			case RIGHT:
				enterOuterAlt(_localctx, 2);
				{
				setState(6052);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NATURAL) {
					{
					setState(6051);
					match(NATURAL);
					}
				}

				setState(6059);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case INNER:
					{
					setState(6054);
					match(INNER);
					}
					break;
				case FULL:
				case LEFT:
				case RIGHT:
					{
					setState(6055);
					_la = _input.LA(1);
					if ( !(_la==FULL || _la==LEFT || _la==RIGHT) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(6057);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==OUTER) {
						{
						setState(6056);
						match(OUTER);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Query_partition_clauseContext extends ParserRuleContext {
		public TerminalNode PARTITION() { return getToken(PLSQLParser.PARTITION, 0); }
		public TerminalNode BY() { return getToken(PLSQLParser.BY, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PLSQLParser.LEFT_PAREN, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PLSQLParser.RIGHT_PAREN, 0); }
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLSQLParser.COMMA, i);
		}
		public Query_partition_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_query_partition_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterQuery_partition_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitQuery_partition_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitQuery_partition_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Query_partition_clauseContext query_partition_clause() throws RecognitionException {
		Query_partition_clauseContext _localctx = new Query_partition_clauseContext(_ctx, getState());
		enterRule(_localctx, 684, RULE_query_partition_clause);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(6063);
			match(PARTITION);
			setState(6064);
			match(BY);
			setState(6078);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,878,_ctx) ) {
			case 1:
				{
				setState(6065);
				match(LEFT_PAREN);
				setState(6066);
				subquery(0);
				setState(6067);
				match(RIGHT_PAREN);
				}
				break;
			case 2:
				{
				setState(6069);
				expression_list();
				}
				break;
			case 3:
				{
				setState(6070);
				expression(0);
				setState(6075);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,877,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(6071);
						match(COMMA);
						setState(6072);
						expression(0);
						}
						} 
					}
					setState(6077);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,877,_ctx);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Flashback_query_clauseContext extends ParserRuleContext {
		public TerminalNode VERSIONS() { return getToken(PLSQLParser.VERSIONS, 0); }
		public TerminalNode BETWEEN() { return getToken(PLSQLParser.BETWEEN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode SCN() { return getToken(PLSQLParser.SCN, 0); }
		public TerminalNode TIMESTAMP() { return getToken(PLSQLParser.TIMESTAMP, 0); }
		public TerminalNode AS() { return getToken(PLSQLParser.AS, 0); }
		public TerminalNode OF() { return getToken(PLSQLParser.OF, 0); }
		public TerminalNode SNAPSHOT() { return getToken(PLSQLParser.SNAPSHOT, 0); }
		public Flashback_query_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_flashback_query_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterFlashback_query_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitFlashback_query_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitFlashback_query_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Flashback_query_clauseContext flashback_query_clause() throws RecognitionException {
		Flashback_query_clauseContext _localctx = new Flashback_query_clauseContext(_ctx, getState());
		enterRule(_localctx, 686, RULE_flashback_query_clause);
		int _la;
		try {
			setState(6088);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case VERSIONS:
				enterOuterAlt(_localctx, 1);
				{
				setState(6080);
				match(VERSIONS);
				setState(6081);
				match(BETWEEN);
				setState(6082);
				_la = _input.LA(1);
				if ( !(_la==SCN || _la==TIMESTAMP) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6083);
				expression(0);
				}
				break;
			case AS:
				enterOuterAlt(_localctx, 2);
				{
				setState(6084);
				match(AS);
				setState(6085);
				match(OF);
				setState(6086);
				_la = _input.LA(1);
				if ( !(_la==SCN || _la==SNAPSHOT || _la==TIMESTAMP) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6087);
				expression(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pivot_clauseContext extends ParserRuleContext {
		public TerminalNode PIVOT() { return getToken(PLSQLParser.PIVOT, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PLSQLParser.LEFT_PAREN, 0); }
		public List<Pivot_elementContext> pivot_element() {
			return getRuleContexts(Pivot_elementContext.class);
		}
		public Pivot_elementContext pivot_element(int i) {
			return getRuleContext(Pivot_elementContext.class,i);
		}
		public Pivot_for_clauseContext pivot_for_clause() {
			return getRuleContext(Pivot_for_clauseContext.class,0);
		}
		public Pivot_in_clauseContext pivot_in_clause() {
			return getRuleContext(Pivot_in_clauseContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PLSQLParser.RIGHT_PAREN, 0); }
		public TerminalNode XML() { return getToken(PLSQLParser.XML, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PLSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLSQLParser.COMMA, i);
		}
		public Pivot_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pivot_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterPivot_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitPivot_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitPivot_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Pivot_clauseContext pivot_clause() throws RecognitionException {
		Pivot_clauseContext _localctx = new Pivot_clauseContext(_ctx, getState());
		enterRule(_localctx, 688, RULE_pivot_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6090);
			match(PIVOT);
			setState(6092);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==XML) {
				{
				setState(6091);
				match(XML);
				}
			}

			setState(6094);
			match(LEFT_PAREN);
			setState(6095);
			pivot_element();
			setState(6100);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(6096);
				match(COMMA);
				setState(6097);
				pivot_element();
				}
				}
				setState(6102);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(6103);
			pivot_for_clause();
			setState(6104);
			pivot_in_clause();
			setState(6105);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pivot_elementContext extends ParserRuleContext {
		public Aggregate_function_nameContext aggregate_function_name() {
			return getRuleContext(Aggregate_function_nameContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(PLSQLParser.LEFT_PAREN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PLSQLParser.RIGHT_PAREN, 0); }
		public Column_aliasContext column_alias() {
			return getRuleContext(Column_aliasContext.class,0);
		}
		public Pivot_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pivot_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterPivot_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitPivot_element(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitPivot_element(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Pivot_elementContext pivot_element() throws RecognitionException {
		Pivot_elementContext _localctx = new Pivot_elementContext(_ctx, getState());
		enterRule(_localctx, 690, RULE_pivot_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6107);
			aggregate_function_name();
			setState(6108);
			match(LEFT_PAREN);
			setState(6109);
			expression(0);
			setState(6110);
			match(RIGHT_PAREN);
			setState(6112);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << AS) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BUILD) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (CHR - 65)) | (1L << (CLOB - 65)) | (1L << (CLOSE - 65)) | (1L << (CLUSTER - 65)) | (1L << (COALESCE - 65)) | (1L << (COLLECT - 65)) | (1L << (COLUMNS - 65)) | (1L << (COMMENT - 65)) | (1L << (COMMIT - 65)) | (1L << (COMMITTED - 65)) | (1L << (COMPATIBILITY - 65)) | (1L << (COMPILE - 65)) | (1L << (COMPLETE - 65)) | (1L << (COMPOUND - 65)) | (1L << (CONCAT - 65)) | (1L << (CONSTANT - 65)) | (1L << (CONSTRAINT - 65)) | (1L << (CONSTRAINTS - 65)) | (1L << (CONSTRUCTOR - 65)) | (1L << (CONTENT - 65)) | (1L << (CONTEXT - 65)) | (1L << (CONTINUE - 65)) | (1L << (CONVERT - 65)) | (1L << (CORRUPT_XID - 65)) | (1L << (CORRUPT_XID_ALL - 65)) | (1L << (COST - 65)) | (1L << (COUNT - 65)) | (1L << (CROSS - 65)) | (1L << (CUBE - 65)) | (1L << (CURRENT_USER - 65)) | (1L << (CURSOR - 65)) | (1L << (CUSTOMDATUM - 65)) | (1L << (CYCLE - 65)) | (1L << (DATA - 65)) | (1L << (DATABASE - 65)) | (1L << (DATE - 65)) | (1L << (DAY - 65)) | (1L << (DB_ROLE_CHANGE - 65)) | (1L << (DBTIMEZONE - 65)) | (1L << (DDL - 65)) | (1L << (DEBUG - 65)) | (1L << (DEC - 65)) | (1L << (DECIMAL - 65)) | (1L << (DECODE - 65)) | (1L << (DECOMPOSE - 65)) | (1L << (DECREMENT - 65)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DEMAND - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (EDITIONING - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENFORCED - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FAST - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)) | (1L << (FOLLOWING - 129)) | (1L << (FOLLOWS - 129)) | (1L << (FORALL - 129)) | (1L << (FORCE - 129)))) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & ((1L << (FULL - 197)) | (1L << (FUNCTION - 197)) | (1L << (GROUPING - 197)) | (1L << (HASH - 197)) | (1L << (HIDE - 197)) | (1L << (HOUR - 197)) | (1L << (IGNORE - 197)) | (1L << (IMMEDIATE - 197)) | (1L << (INCLUDE - 197)) | (1L << (INCLUDING - 197)) | (1L << (INCREMENT - 197)) | (1L << (INDENT - 197)) | (1L << (INDEXED - 197)) | (1L << (INDICATOR - 197)) | (1L << (INDICES - 197)) | (1L << (INFINITE - 197)) | (1L << (INLINE - 197)) | (1L << (INNER - 197)) | (1L << (INOUT - 197)) | (1L << (INSTANTIABLE - 197)) | (1L << (INSTEAD - 197)) | (1L << (INT - 197)) | (1L << (INTEGER - 197)) | (1L << (INTERVAL - 197)) | (1L << (INVALIDATE - 197)) | (1L << (ISOLATION - 197)) | (1L << (ITERATE - 197)) | (1L << (JAVA - 197)) | (1L << (JOIN - 197)) | (1L << (KEEP - 197)) | (1L << (LANGUAGE - 197)) | (1L << (LAST - 197)) | (1L << (LAST_VALUE - 197)) | (1L << (LEADING - 197)) | (1L << (LEFT - 197)) | (1L << (LEVEL - 197)))) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & ((1L << (LIBRARY - 261)) | (1L << (LIKE2 - 261)) | (1L << (LIKE4 - 261)) | (1L << (LIKEC - 261)) | (1L << (LIMIT - 261)) | (1L << (LIST - 261)) | (1L << (LOCAL - 261)) | (1L << (LOCKED - 261)) | (1L << (LOG - 261)) | (1L << (LOGOFF - 261)) | (1L << (LOGON - 261)) | (1L << (LONG - 261)) | (1L << (LOOP - 261)) | (1L << (MAIN - 261)) | (1L << (MAP - 261)) | (1L << (MASTER - 261)) | (1L << (MATCHED - 261)) | (1L << (MAXVALUE - 261)) | (1L << (MEASURES - 261)) | (1L << (MEMBER - 261)) | (1L << (MERGE - 261)) | (1L << (MINUTE - 261)) | (1L << (MINVALUE - 261)) | (1L << (MLSLABEL - 261)) | (1L << (MODEL - 261)) | (1L << (MODIFY - 261)) | (1L << (MONTH - 261)) | (1L << (MULTISET - 261)) | (1L << (NAME - 261)) | (1L << (NAN - 261)) | (1L << (NATURAL - 261)) | (1L << (NATURALN - 261)) | (1L << (NAV - 261)) | (1L << (NCHAR - 261)) | (1L << (NCHAR_CS - 261)) | (1L << (NCLOB - 261)) | (1L << (NESTED - 261)) | (1L << (NEVER - 261)) | (1L << (NEW - 261)) | (1L << (NO - 261)) | (1L << (NOAUDIT - 261)) | (1L << (NOCOPY - 261)) | (1L << (NOCYCLE - 261)) | (1L << (NOENTITYESCAPING - 261)))) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & ((1L << (NONE - 329)) | (1L << (NOSCHEMACHECK - 329)) | (1L << (NVL - 329)) | (1L << (NULLS - 329)) | (1L << (NUMBER - 329)) | (1L << (NUMERIC - 329)) | (1L << (NVARCHAR2 - 329)) | (1L << (MATERIALIZED - 329)) | (1L << (OBJECT - 329)) | (1L << (OFF - 329)) | (1L << (OID - 329)) | (1L << (OLD - 329)) | (1L << (ONLY - 329)) | (1L << (OPEN - 329)) | (1L << (ORADATA - 329)) | (1L << (ORDINALITY - 329)) | (1L << (OSERROR - 329)) | (1L << (OUT - 329)) | (1L << (OUTER - 329)) | (1L << (OVER - 329)) | (1L << (OVERRIDING - 329)) | (1L << (PACKAGE - 329)) | (1L << (PARALLEL_ENABLE - 329)) | (1L << (PARAMETERS - 329)) | (1L << (PARENT - 329)) | (1L << (PARTITION - 329)) | (1L << (PASSING - 329)) | (1L << (PATH - 329)) | (1L << (PIPELINED - 329)) | (1L << (PLAN - 329)) | (1L << (PLS_INTEGER - 329)) | (1L << (POSITIVE - 329)) | (1L << (POSITIVEN - 329)) | (1L << (PRAGMA - 329)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (PREBUILT - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)) | (1L << (PRESENT - 393)) | (1L << (PUBLIC - 393)) | (1L << (RAISE - 393)) | (1L << (RANGE - 393)) | (1L << (RAW - 393)) | (1L << (READ - 393)) | (1L << (REAL - 393)) | (1L << (RECORD - 393)) | (1L << (REDUCED - 393)) | (1L << (REF - 393)) | (1L << (REFERENCE - 393)) | (1L << (REFERENCING - 393)) | (1L << (REFRESH - 393)) | (1L << (REJECT - 393)) | (1L << (RELIES_ON - 393)) | (1L << (RENAME - 393)) | (1L << (REPLACE - 393)) | (1L << (RESPECT - 393)) | (1L << (RESTRICT_REFERENCES - 393)) | (1L << (RESULT - 393)) | (1L << (RESULT_CACHE - 393)) | (1L << (RETURN - 393)) | (1L << (RETURNING - 393)) | (1L << (REUSE - 393)) | (1L << (REVERSE - 393)) | (1L << (REWRITE - 393)) | (1L << (RIGHT - 393)) | (1L << (ROLE - 393)) | (1L << (ROLLBACK - 393)) | (1L << (ROLLUP - 393)) | (1L << (ROW - 393)) | (1L << (ROWID - 393)) | (1L << (ROWS - 393)) | (1L << (RULES - 393)) | (1L << (SAMPLE - 393)) | (1L << (SAVE - 393)) | (1L << (SAVEPOINT - 393)) | (1L << (SCHEMA - 393)) | (1L << (SCHEMACHECK - 393)) | (1L << (SCN - 393)) | (1L << (SECOND - 393)))) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & ((1L << (SEED - 458)) | (1L << (SEGMENT - 458)) | (1L << (SELF - 458)) | (1L << (SEQUENTIAL - 458)) | (1L << (SERIALIZABLE - 458)) | (1L << (SERIALLY_REUSABLE - 458)) | (1L << (SERVERERROR - 458)) | (1L << (SESSIONTIMEZONE - 458)) | (1L << (SET - 458)) | (1L << (SETS - 458)) | (1L << (SETTINGS - 458)) | (1L << (SHOW - 458)) | (1L << (SHUTDOWN - 458)) | (1L << (SIBLINGS - 458)) | (1L << (SIGNTYPE - 458)) | (1L << (SIMPLE_INTEGER - 458)) | (1L << (SINGLE - 458)) | (1L << (SIZE - 458)) | (1L << (SKIP_ - 458)) | (1L << (SMALLINT - 458)) | (1L << (SNAPSHOT - 458)) | (1L << (SOME - 458)) | (1L << (SPECIFICATION - 458)) | (1L << (SQLDATA - 458)) | (1L << (SQLERROR - 458)) | (1L << (STANDALONE - 458)) | (1L << (STARTUP - 458)) | (1L << (STATEMENT - 458)) | (1L << (STATEMENT_ID - 458)) | (1L << (STATIC - 458)) | (1L << (STATISTICS - 458)) | (1L << (STRING - 458)) | (1L << (SUBMULTISET - 458)) | (1L << (SUBPARTITION - 458)) | (1L << (SUBSTITUTABLE - 458)) | (1L << (SUBSTRING - 458)) | (1L << (SUBTYPE - 458)) | (1L << (SUCCESS - 458)) | (1L << (SUSPEND - 458)) | (1L << (TABLES - 458)) | (1L << (TIME - 458)) | (1L << (TIMESTAMP - 458)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 458)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 458)) | (1L << (TIMESTAMP_UNCONSTRAINED - 458)))) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & ((1L << (TIMEZONE_ABBR - 522)) | (1L << (TIMEZONE_HOUR - 522)) | (1L << (TIMEZONE_MINUTE - 522)) | (1L << (TIMEZONE_REGION - 522)) | (1L << (TO_CHAR - 522)) | (1L << (TO_DATE - 522)) | (1L << (TRAILING - 522)) | (1L << (TRANSACTION - 522)) | (1L << (TRANSLATE - 522)) | (1L << (TREAT - 522)) | (1L << (TRIGGER - 522)) | (1L << (TRIM - 522)) | (1L << (TRUNCATE - 522)) | (1L << (TRUSTED - 522)) | (1L << (TYPE - 522)) | (1L << (UNBOUNDED - 522)) | (1L << (UNDER - 522)) | (1L << (UNLIMITED - 522)) | (1L << (UNTIL - 522)) | (1L << (UPDATED - 522)) | (1L << (UPSERT - 522)) | (1L << (UROWID - 522)) | (1L << (USE - 522)) | (1L << (VALIDATE - 522)) | (1L << (VALUE - 522)) | (1L << (VARCHAR - 522)) | (1L << (VARCHAR2 - 522)) | (1L << (VARIABLE - 522)) | (1L << (VARRAY - 522)) | (1L << (VARYING - 522)) | (1L << (VERBOSE - 522)) | (1L << (VERSION - 522)) | (1L << (VERSIONS - 522)) | (1L << (VIEW - 522)) | (1L << (WAIT - 522)) | (1L << (WARNING - 522)) | (1L << (WELLFORMED - 522)) | (1L << (WHENEVER - 522)) | (1L << (WHILE - 522)) | (1L << (WITHOUT - 522)) | (1L << (WITHIN - 522)) | (1L << (WORK - 522)) | (1L << (WRITE - 522)) | (1L << (XML - 522)) | (1L << (XMLAGG - 522)) | (1L << (XMLATTRIBUTES - 522)))) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & ((1L << (XMLCAST - 586)) | (1L << (XMLCOLATTVAL - 586)) | (1L << (XMLELEMENT - 586)) | (1L << (XMLEXISTS - 586)) | (1L << (XMLFOREST - 586)) | (1L << (XMLNAMESPACES - 586)) | (1L << (XMLPARSE - 586)) | (1L << (XMLPI - 586)) | (1L << (XMLQUERY - 586)) | (1L << (XMLROOT - 586)) | (1L << (XMLSERIALIZE - 586)) | (1L << (XMLTABLE - 586)) | (1L << (YEAR - 586)) | (1L << (YES - 586)) | (1L << (YMINTERVAL_UNCONSTRAINED - 586)) | (1L << (ZONE - 586)) | (1L << (PREDICTION - 586)) | (1L << (PREDICTION_BOUNDS - 586)) | (1L << (PREDICTION_COST - 586)) | (1L << (PREDICTION_DETAILS - 586)) | (1L << (PREDICTION_PROBABILITY - 586)) | (1L << (PREDICTION_SET - 586)) | (1L << (CUME_DIST - 586)) | (1L << (DENSE_RANK - 586)) | (1L << (LISTAGG - 586)) | (1L << (PERCENT_RANK - 586)) | (1L << (PERCENTILE_CONT - 586)) | (1L << (PERCENTILE_DISC - 586)) | (1L << (RANK - 586)) | (1L << (AVG - 586)) | (1L << (CORR - 586)) | (1L << (LAG - 586)) | (1L << (LEAD - 586)) | (1L << (MAX - 586)) | (1L << (MEDIAN - 586)) | (1L << (MIN - 586)) | (1L << (NTILE - 586)) | (1L << (RATIO_TO_REPORT - 586)) | (1L << (ROW_NUMBER - 586)) | (1L << (SUM - 586)) | (1L << (VARIANCE - 586)) | (1L << (REGR_ - 586)) | (1L << (STDDEV - 586)) | (1L << (VAR_ - 586)) | (1L << (COVAR_ - 586)) | (1L << (NATIONAL_CHAR_STRING_LIT - 586)) | (1L << (CHAR_STRING - 586)) | (1L << (DELIMITED_ID - 586)))) != 0) || _la==REGULAR_ID) {
				{
				setState(6111);
				column_alias();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pivot_for_clauseContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(PLSQLParser.FOR, 0); }
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public TerminalNode LEFT_PAREN() { return getToken(PLSQLParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PLSQLParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PLSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLSQLParser.COMMA, i);
		}
		public Pivot_for_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pivot_for_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterPivot_for_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitPivot_for_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitPivot_for_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Pivot_for_clauseContext pivot_for_clause() throws RecognitionException {
		Pivot_for_clauseContext _localctx = new Pivot_for_clauseContext(_ctx, getState());
		enterRule(_localctx, 692, RULE_pivot_for_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6114);
			match(FOR);
			setState(6127);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BUILD:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPLETE:
			case COMPOUND:
			case CONCAT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECODE:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DEMAND:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case EDITIONING:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENFORCED:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FAST:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LIST:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MASTER:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEVER:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NVL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case MATERIALIZED:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PREBUILT:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PUBLIC:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REDUCED:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REFRESH:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case REWRITE:
			case RIGHT:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SIZE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBSTRING:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TABLES:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TO_CHAR:
			case TO_DATE:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TRUSTED:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERBOSE:
			case VERSION:
			case VERSIONS:
			case VIEW:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHOUT:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case REGULAR_ID:
				{
				setState(6115);
				column_name();
				}
				break;
			case LEFT_PAREN:
				{
				setState(6116);
				match(LEFT_PAREN);
				setState(6117);
				column_name();
				setState(6122);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6118);
					match(COMMA);
					setState(6119);
					column_name();
					}
					}
					setState(6124);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(6125);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pivot_in_clauseContext extends ParserRuleContext {
		public TerminalNode IN() { return getToken(PLSQLParser.IN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PLSQLParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PLSQLParser.RIGHT_PAREN, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public List<TerminalNode> ANY() { return getTokens(PLSQLParser.ANY); }
		public TerminalNode ANY(int i) {
			return getToken(PLSQLParser.ANY, i);
		}
		public List<Pivot_in_clause_elementContext> pivot_in_clause_element() {
			return getRuleContexts(Pivot_in_clause_elementContext.class);
		}
		public Pivot_in_clause_elementContext pivot_in_clause_element(int i) {
			return getRuleContext(Pivot_in_clause_elementContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLSQLParser.COMMA, i);
		}
		public Pivot_in_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pivot_in_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterPivot_in_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitPivot_in_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitPivot_in_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Pivot_in_clauseContext pivot_in_clause() throws RecognitionException {
		Pivot_in_clauseContext _localctx = new Pivot_in_clauseContext(_ctx, getState());
		enterRule(_localctx, 694, RULE_pivot_in_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6129);
			match(IN);
			setState(6130);
			match(LEFT_PAREN);
			setState(6148);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,887,_ctx) ) {
			case 1:
				{
				setState(6131);
				subquery(0);
				}
				break;
			case 2:
				{
				setState(6132);
				match(ANY);
				setState(6137);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6133);
					match(COMMA);
					setState(6134);
					match(ANY);
					}
					}
					setState(6139);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 3:
				{
				setState(6140);
				pivot_in_clause_element();
				setState(6145);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6141);
					match(COMMA);
					setState(6142);
					pivot_in_clause_element();
					}
					}
					setState(6147);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
			setState(6150);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pivot_in_clause_elementContext extends ParserRuleContext {
		public Pivot_in_clause_elementsContext pivot_in_clause_elements() {
			return getRuleContext(Pivot_in_clause_elementsContext.class,0);
		}
		public Column_aliasContext column_alias() {
			return getRuleContext(Column_aliasContext.class,0);
		}
		public Pivot_in_clause_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pivot_in_clause_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterPivot_in_clause_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitPivot_in_clause_element(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitPivot_in_clause_element(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Pivot_in_clause_elementContext pivot_in_clause_element() throws RecognitionException {
		Pivot_in_clause_elementContext _localctx = new Pivot_in_clause_elementContext(_ctx, getState());
		enterRule(_localctx, 696, RULE_pivot_in_clause_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6152);
			pivot_in_clause_elements();
			setState(6154);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << AS) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BUILD) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (CHR - 65)) | (1L << (CLOB - 65)) | (1L << (CLOSE - 65)) | (1L << (CLUSTER - 65)) | (1L << (COALESCE - 65)) | (1L << (COLLECT - 65)) | (1L << (COLUMNS - 65)) | (1L << (COMMENT - 65)) | (1L << (COMMIT - 65)) | (1L << (COMMITTED - 65)) | (1L << (COMPATIBILITY - 65)) | (1L << (COMPILE - 65)) | (1L << (COMPLETE - 65)) | (1L << (COMPOUND - 65)) | (1L << (CONCAT - 65)) | (1L << (CONSTANT - 65)) | (1L << (CONSTRAINT - 65)) | (1L << (CONSTRAINTS - 65)) | (1L << (CONSTRUCTOR - 65)) | (1L << (CONTENT - 65)) | (1L << (CONTEXT - 65)) | (1L << (CONTINUE - 65)) | (1L << (CONVERT - 65)) | (1L << (CORRUPT_XID - 65)) | (1L << (CORRUPT_XID_ALL - 65)) | (1L << (COST - 65)) | (1L << (COUNT - 65)) | (1L << (CROSS - 65)) | (1L << (CUBE - 65)) | (1L << (CURRENT_USER - 65)) | (1L << (CURSOR - 65)) | (1L << (CUSTOMDATUM - 65)) | (1L << (CYCLE - 65)) | (1L << (DATA - 65)) | (1L << (DATABASE - 65)) | (1L << (DATE - 65)) | (1L << (DAY - 65)) | (1L << (DB_ROLE_CHANGE - 65)) | (1L << (DBTIMEZONE - 65)) | (1L << (DDL - 65)) | (1L << (DEBUG - 65)) | (1L << (DEC - 65)) | (1L << (DECIMAL - 65)) | (1L << (DECODE - 65)) | (1L << (DECOMPOSE - 65)) | (1L << (DECREMENT - 65)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DEMAND - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (EDITIONING - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENFORCED - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FAST - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)) | (1L << (FOLLOWING - 129)) | (1L << (FOLLOWS - 129)) | (1L << (FORALL - 129)) | (1L << (FORCE - 129)))) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & ((1L << (FULL - 197)) | (1L << (FUNCTION - 197)) | (1L << (GROUPING - 197)) | (1L << (HASH - 197)) | (1L << (HIDE - 197)) | (1L << (HOUR - 197)) | (1L << (IGNORE - 197)) | (1L << (IMMEDIATE - 197)) | (1L << (INCLUDE - 197)) | (1L << (INCLUDING - 197)) | (1L << (INCREMENT - 197)) | (1L << (INDENT - 197)) | (1L << (INDEXED - 197)) | (1L << (INDICATOR - 197)) | (1L << (INDICES - 197)) | (1L << (INFINITE - 197)) | (1L << (INLINE - 197)) | (1L << (INNER - 197)) | (1L << (INOUT - 197)) | (1L << (INSTANTIABLE - 197)) | (1L << (INSTEAD - 197)) | (1L << (INT - 197)) | (1L << (INTEGER - 197)) | (1L << (INTERVAL - 197)) | (1L << (INVALIDATE - 197)) | (1L << (ISOLATION - 197)) | (1L << (ITERATE - 197)) | (1L << (JAVA - 197)) | (1L << (JOIN - 197)) | (1L << (KEEP - 197)) | (1L << (LANGUAGE - 197)) | (1L << (LAST - 197)) | (1L << (LAST_VALUE - 197)) | (1L << (LEADING - 197)) | (1L << (LEFT - 197)) | (1L << (LEVEL - 197)))) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & ((1L << (LIBRARY - 261)) | (1L << (LIKE2 - 261)) | (1L << (LIKE4 - 261)) | (1L << (LIKEC - 261)) | (1L << (LIMIT - 261)) | (1L << (LIST - 261)) | (1L << (LOCAL - 261)) | (1L << (LOCKED - 261)) | (1L << (LOG - 261)) | (1L << (LOGOFF - 261)) | (1L << (LOGON - 261)) | (1L << (LONG - 261)) | (1L << (LOOP - 261)) | (1L << (MAIN - 261)) | (1L << (MAP - 261)) | (1L << (MASTER - 261)) | (1L << (MATCHED - 261)) | (1L << (MAXVALUE - 261)) | (1L << (MEASURES - 261)) | (1L << (MEMBER - 261)) | (1L << (MERGE - 261)) | (1L << (MINUTE - 261)) | (1L << (MINVALUE - 261)) | (1L << (MLSLABEL - 261)) | (1L << (MODEL - 261)) | (1L << (MODIFY - 261)) | (1L << (MONTH - 261)) | (1L << (MULTISET - 261)) | (1L << (NAME - 261)) | (1L << (NAN - 261)) | (1L << (NATURAL - 261)) | (1L << (NATURALN - 261)) | (1L << (NAV - 261)) | (1L << (NCHAR - 261)) | (1L << (NCHAR_CS - 261)) | (1L << (NCLOB - 261)) | (1L << (NESTED - 261)) | (1L << (NEVER - 261)) | (1L << (NEW - 261)) | (1L << (NO - 261)) | (1L << (NOAUDIT - 261)) | (1L << (NOCOPY - 261)) | (1L << (NOCYCLE - 261)) | (1L << (NOENTITYESCAPING - 261)))) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & ((1L << (NONE - 329)) | (1L << (NOSCHEMACHECK - 329)) | (1L << (NVL - 329)) | (1L << (NULLS - 329)) | (1L << (NUMBER - 329)) | (1L << (NUMERIC - 329)) | (1L << (NVARCHAR2 - 329)) | (1L << (MATERIALIZED - 329)) | (1L << (OBJECT - 329)) | (1L << (OFF - 329)) | (1L << (OID - 329)) | (1L << (OLD - 329)) | (1L << (ONLY - 329)) | (1L << (OPEN - 329)) | (1L << (ORADATA - 329)) | (1L << (ORDINALITY - 329)) | (1L << (OSERROR - 329)) | (1L << (OUT - 329)) | (1L << (OUTER - 329)) | (1L << (OVER - 329)) | (1L << (OVERRIDING - 329)) | (1L << (PACKAGE - 329)) | (1L << (PARALLEL_ENABLE - 329)) | (1L << (PARAMETERS - 329)) | (1L << (PARENT - 329)) | (1L << (PARTITION - 329)) | (1L << (PASSING - 329)) | (1L << (PATH - 329)) | (1L << (PIPELINED - 329)) | (1L << (PLAN - 329)) | (1L << (PLS_INTEGER - 329)) | (1L << (POSITIVE - 329)) | (1L << (POSITIVEN - 329)) | (1L << (PRAGMA - 329)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (PREBUILT - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)) | (1L << (PRESENT - 393)) | (1L << (PUBLIC - 393)) | (1L << (RAISE - 393)) | (1L << (RANGE - 393)) | (1L << (RAW - 393)) | (1L << (READ - 393)) | (1L << (REAL - 393)) | (1L << (RECORD - 393)) | (1L << (REDUCED - 393)) | (1L << (REF - 393)) | (1L << (REFERENCE - 393)) | (1L << (REFERENCING - 393)) | (1L << (REFRESH - 393)) | (1L << (REJECT - 393)) | (1L << (RELIES_ON - 393)) | (1L << (RENAME - 393)) | (1L << (REPLACE - 393)) | (1L << (RESPECT - 393)) | (1L << (RESTRICT_REFERENCES - 393)) | (1L << (RESULT - 393)) | (1L << (RESULT_CACHE - 393)) | (1L << (RETURN - 393)) | (1L << (RETURNING - 393)) | (1L << (REUSE - 393)) | (1L << (REVERSE - 393)) | (1L << (REWRITE - 393)) | (1L << (RIGHT - 393)) | (1L << (ROLE - 393)) | (1L << (ROLLBACK - 393)) | (1L << (ROLLUP - 393)) | (1L << (ROW - 393)) | (1L << (ROWID - 393)) | (1L << (ROWS - 393)) | (1L << (RULES - 393)) | (1L << (SAMPLE - 393)) | (1L << (SAVE - 393)) | (1L << (SAVEPOINT - 393)) | (1L << (SCHEMA - 393)) | (1L << (SCHEMACHECK - 393)) | (1L << (SCN - 393)) | (1L << (SECOND - 393)))) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & ((1L << (SEED - 458)) | (1L << (SEGMENT - 458)) | (1L << (SELF - 458)) | (1L << (SEQUENTIAL - 458)) | (1L << (SERIALIZABLE - 458)) | (1L << (SERIALLY_REUSABLE - 458)) | (1L << (SERVERERROR - 458)) | (1L << (SESSIONTIMEZONE - 458)) | (1L << (SET - 458)) | (1L << (SETS - 458)) | (1L << (SETTINGS - 458)) | (1L << (SHOW - 458)) | (1L << (SHUTDOWN - 458)) | (1L << (SIBLINGS - 458)) | (1L << (SIGNTYPE - 458)) | (1L << (SIMPLE_INTEGER - 458)) | (1L << (SINGLE - 458)) | (1L << (SIZE - 458)) | (1L << (SKIP_ - 458)) | (1L << (SMALLINT - 458)) | (1L << (SNAPSHOT - 458)) | (1L << (SOME - 458)) | (1L << (SPECIFICATION - 458)) | (1L << (SQLDATA - 458)) | (1L << (SQLERROR - 458)) | (1L << (STANDALONE - 458)) | (1L << (STARTUP - 458)) | (1L << (STATEMENT - 458)) | (1L << (STATEMENT_ID - 458)) | (1L << (STATIC - 458)) | (1L << (STATISTICS - 458)) | (1L << (STRING - 458)) | (1L << (SUBMULTISET - 458)) | (1L << (SUBPARTITION - 458)) | (1L << (SUBSTITUTABLE - 458)) | (1L << (SUBSTRING - 458)) | (1L << (SUBTYPE - 458)) | (1L << (SUCCESS - 458)) | (1L << (SUSPEND - 458)) | (1L << (TABLES - 458)) | (1L << (TIME - 458)) | (1L << (TIMESTAMP - 458)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 458)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 458)) | (1L << (TIMESTAMP_UNCONSTRAINED - 458)))) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & ((1L << (TIMEZONE_ABBR - 522)) | (1L << (TIMEZONE_HOUR - 522)) | (1L << (TIMEZONE_MINUTE - 522)) | (1L << (TIMEZONE_REGION - 522)) | (1L << (TO_CHAR - 522)) | (1L << (TO_DATE - 522)) | (1L << (TRAILING - 522)) | (1L << (TRANSACTION - 522)) | (1L << (TRANSLATE - 522)) | (1L << (TREAT - 522)) | (1L << (TRIGGER - 522)) | (1L << (TRIM - 522)) | (1L << (TRUNCATE - 522)) | (1L << (TRUSTED - 522)) | (1L << (TYPE - 522)) | (1L << (UNBOUNDED - 522)) | (1L << (UNDER - 522)) | (1L << (UNLIMITED - 522)) | (1L << (UNTIL - 522)) | (1L << (UPDATED - 522)) | (1L << (UPSERT - 522)) | (1L << (UROWID - 522)) | (1L << (USE - 522)) | (1L << (VALIDATE - 522)) | (1L << (VALUE - 522)) | (1L << (VARCHAR - 522)) | (1L << (VARCHAR2 - 522)) | (1L << (VARIABLE - 522)) | (1L << (VARRAY - 522)) | (1L << (VARYING - 522)) | (1L << (VERBOSE - 522)) | (1L << (VERSION - 522)) | (1L << (VERSIONS - 522)) | (1L << (VIEW - 522)) | (1L << (WAIT - 522)) | (1L << (WARNING - 522)) | (1L << (WELLFORMED - 522)) | (1L << (WHENEVER - 522)) | (1L << (WHILE - 522)) | (1L << (WITHOUT - 522)) | (1L << (WITHIN - 522)) | (1L << (WORK - 522)) | (1L << (WRITE - 522)) | (1L << (XML - 522)) | (1L << (XMLAGG - 522)) | (1L << (XMLATTRIBUTES - 522)))) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & ((1L << (XMLCAST - 586)) | (1L << (XMLCOLATTVAL - 586)) | (1L << (XMLELEMENT - 586)) | (1L << (XMLEXISTS - 586)) | (1L << (XMLFOREST - 586)) | (1L << (XMLNAMESPACES - 586)) | (1L << (XMLPARSE - 586)) | (1L << (XMLPI - 586)) | (1L << (XMLQUERY - 586)) | (1L << (XMLROOT - 586)) | (1L << (XMLSERIALIZE - 586)) | (1L << (XMLTABLE - 586)) | (1L << (YEAR - 586)) | (1L << (YES - 586)) | (1L << (YMINTERVAL_UNCONSTRAINED - 586)) | (1L << (ZONE - 586)) | (1L << (PREDICTION - 586)) | (1L << (PREDICTION_BOUNDS - 586)) | (1L << (PREDICTION_COST - 586)) | (1L << (PREDICTION_DETAILS - 586)) | (1L << (PREDICTION_PROBABILITY - 586)) | (1L << (PREDICTION_SET - 586)) | (1L << (CUME_DIST - 586)) | (1L << (DENSE_RANK - 586)) | (1L << (LISTAGG - 586)) | (1L << (PERCENT_RANK - 586)) | (1L << (PERCENTILE_CONT - 586)) | (1L << (PERCENTILE_DISC - 586)) | (1L << (RANK - 586)) | (1L << (AVG - 586)) | (1L << (CORR - 586)) | (1L << (LAG - 586)) | (1L << (LEAD - 586)) | (1L << (MAX - 586)) | (1L << (MEDIAN - 586)) | (1L << (MIN - 586)) | (1L << (NTILE - 586)) | (1L << (RATIO_TO_REPORT - 586)) | (1L << (ROW_NUMBER - 586)) | (1L << (SUM - 586)) | (1L << (VARIANCE - 586)) | (1L << (REGR_ - 586)) | (1L << (STDDEV - 586)) | (1L << (VAR_ - 586)) | (1L << (COVAR_ - 586)) | (1L << (NATIONAL_CHAR_STRING_LIT - 586)) | (1L << (CHAR_STRING - 586)) | (1L << (DELIMITED_ID - 586)))) != 0) || _la==REGULAR_ID) {
				{
				setState(6153);
				column_alias();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pivot_in_clause_elementsContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public Pivot_in_clause_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pivot_in_clause_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterPivot_in_clause_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitPivot_in_clause_elements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitPivot_in_clause_elements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Pivot_in_clause_elementsContext pivot_in_clause_elements() throws RecognitionException {
		Pivot_in_clause_elementsContext _localctx = new Pivot_in_clause_elementsContext(_ctx, getState());
		enterRule(_localctx, 698, RULE_pivot_in_clause_elements);
		try {
			setState(6158);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,889,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6156);
				expression(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6157);
				expression_list();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unpivot_clauseContext extends ParserRuleContext {
		public TerminalNode UNPIVOT() { return getToken(PLSQLParser.UNPIVOT, 0); }
		public List<TerminalNode> LEFT_PAREN() { return getTokens(PLSQLParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(PLSQLParser.LEFT_PAREN, i);
		}
		public Pivot_for_clauseContext pivot_for_clause() {
			return getRuleContext(Pivot_for_clauseContext.class,0);
		}
		public Unpivot_in_clauseContext unpivot_in_clause() {
			return getRuleContext(Unpivot_in_clauseContext.class,0);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(PLSQLParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(PLSQLParser.RIGHT_PAREN, i);
		}
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public TerminalNode NULLS() { return getToken(PLSQLParser.NULLS, 0); }
		public TerminalNode INCLUDE() { return getToken(PLSQLParser.INCLUDE, 0); }
		public TerminalNode EXCLUDE() { return getToken(PLSQLParser.EXCLUDE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PLSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLSQLParser.COMMA, i);
		}
		public Unpivot_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unpivot_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterUnpivot_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitUnpivot_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitUnpivot_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Unpivot_clauseContext unpivot_clause() throws RecognitionException {
		Unpivot_clauseContext _localctx = new Unpivot_clauseContext(_ctx, getState());
		enterRule(_localctx, 700, RULE_unpivot_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6160);
			match(UNPIVOT);
			setState(6163);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EXCLUDE || _la==INCLUDE) {
				{
				setState(6161);
				_la = _input.LA(1);
				if ( !(_la==EXCLUDE || _la==INCLUDE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6162);
				match(NULLS);
				}
			}

			setState(6165);
			match(LEFT_PAREN);
			setState(6178);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BUILD:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPLETE:
			case COMPOUND:
			case CONCAT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECODE:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DEMAND:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case EDITIONING:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENFORCED:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FAST:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LIST:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MASTER:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEVER:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NVL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case MATERIALIZED:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PREBUILT:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PUBLIC:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REDUCED:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REFRESH:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case REWRITE:
			case RIGHT:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SIZE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBSTRING:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TABLES:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TO_CHAR:
			case TO_DATE:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TRUSTED:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERBOSE:
			case VERSION:
			case VERSIONS:
			case VIEW:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHOUT:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case REGULAR_ID:
				{
				setState(6166);
				column_name();
				}
				break;
			case LEFT_PAREN:
				{
				setState(6167);
				match(LEFT_PAREN);
				setState(6168);
				column_name();
				setState(6173);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6169);
					match(COMMA);
					setState(6170);
					column_name();
					}
					}
					setState(6175);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(6176);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(6180);
			pivot_for_clause();
			setState(6181);
			unpivot_in_clause();
			setState(6182);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unpivot_in_clauseContext extends ParserRuleContext {
		public TerminalNode IN() { return getToken(PLSQLParser.IN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PLSQLParser.LEFT_PAREN, 0); }
		public List<Unpivot_in_elementsContext> unpivot_in_elements() {
			return getRuleContexts(Unpivot_in_elementsContext.class);
		}
		public Unpivot_in_elementsContext unpivot_in_elements(int i) {
			return getRuleContext(Unpivot_in_elementsContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PLSQLParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PLSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLSQLParser.COMMA, i);
		}
		public Unpivot_in_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unpivot_in_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterUnpivot_in_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitUnpivot_in_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitUnpivot_in_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Unpivot_in_clauseContext unpivot_in_clause() throws RecognitionException {
		Unpivot_in_clauseContext _localctx = new Unpivot_in_clauseContext(_ctx, getState());
		enterRule(_localctx, 702, RULE_unpivot_in_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6184);
			match(IN);
			setState(6185);
			match(LEFT_PAREN);
			setState(6186);
			unpivot_in_elements();
			setState(6191);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(6187);
				match(COMMA);
				setState(6188);
				unpivot_in_elements();
				}
				}
				setState(6193);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(6194);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unpivot_in_elementsContext extends ParserRuleContext {
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public List<TerminalNode> LEFT_PAREN() { return getTokens(PLSQLParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(PLSQLParser.LEFT_PAREN, i);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(PLSQLParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(PLSQLParser.RIGHT_PAREN, i);
		}
		public TerminalNode AS() { return getToken(PLSQLParser.AS, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PLSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLSQLParser.COMMA, i);
		}
		public List<ConstantContext> constant() {
			return getRuleContexts(ConstantContext.class);
		}
		public ConstantContext constant(int i) {
			return getRuleContext(ConstantContext.class,i);
		}
		public Unpivot_in_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unpivot_in_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterUnpivot_in_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitUnpivot_in_elements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitUnpivot_in_elements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Unpivot_in_elementsContext unpivot_in_elements() throws RecognitionException {
		Unpivot_in_elementsContext _localctx = new Unpivot_in_elementsContext(_ctx, getState());
		enterRule(_localctx, 704, RULE_unpivot_in_elements);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6208);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BUILD:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPLETE:
			case COMPOUND:
			case CONCAT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECODE:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DEMAND:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case EDITIONING:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENFORCED:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FAST:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LIST:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MASTER:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEVER:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NVL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case MATERIALIZED:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PREBUILT:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PUBLIC:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REDUCED:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REFRESH:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case REWRITE:
			case RIGHT:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SIZE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBSTRING:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TABLES:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TO_CHAR:
			case TO_DATE:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TRUSTED:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERBOSE:
			case VERSION:
			case VERSIONS:
			case VIEW:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHOUT:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case REGULAR_ID:
				{
				setState(6196);
				column_name();
				}
				break;
			case LEFT_PAREN:
				{
				setState(6197);
				match(LEFT_PAREN);
				setState(6198);
				column_name();
				setState(6203);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6199);
					match(COMMA);
					setState(6200);
					column_name();
					}
					}
					setState(6205);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(6206);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(6225);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(6210);
				match(AS);
				setState(6223);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case DATE:
				case DBTIMEZONE:
				case DEFAULT:
				case FALSE:
				case INTERVAL:
				case MAXVALUE:
				case MINVALUE:
				case NULL:
				case SESSIONTIMEZONE:
				case TIMESTAMP:
				case TRUE:
				case NATIONAL_CHAR_STRING_LIT:
				case UNSIGNED_INTEGER:
				case APPROXIMATE_NUM_LIT:
				case CHAR_STRING:
					{
					setState(6211);
					constant();
					}
					break;
				case LEFT_PAREN:
					{
					setState(6212);
					match(LEFT_PAREN);
					setState(6213);
					constant();
					setState(6218);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(6214);
						match(COMMA);
						setState(6215);
						constant();
						}
						}
						setState(6220);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(6221);
					match(RIGHT_PAREN);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Hierarchical_query_clauseContext extends ParserRuleContext {
		public TerminalNode CONNECT() { return getToken(PLSQLParser.CONNECT, 0); }
		public TerminalNode BY() { return getToken(PLSQLParser.BY, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public TerminalNode NOCYCLE() { return getToken(PLSQLParser.NOCYCLE, 0); }
		public Start_partContext start_part() {
			return getRuleContext(Start_partContext.class,0);
		}
		public Hierarchical_query_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_hierarchical_query_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterHierarchical_query_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitHierarchical_query_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitHierarchical_query_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Hierarchical_query_clauseContext hierarchical_query_clause() throws RecognitionException {
		Hierarchical_query_clauseContext _localctx = new Hierarchical_query_clauseContext(_ctx, getState());
		enterRule(_localctx, 706, RULE_hierarchical_query_clause);
		try {
			setState(6244);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CONNECT:
				enterOuterAlt(_localctx, 1);
				{
				setState(6227);
				match(CONNECT);
				setState(6228);
				match(BY);
				setState(6230);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,899,_ctx) ) {
				case 1:
					{
					setState(6229);
					match(NOCYCLE);
					}
					break;
				}
				setState(6232);
				condition();
				setState(6234);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,900,_ctx) ) {
				case 1:
					{
					setState(6233);
					start_part();
					}
					break;
				}
				}
				break;
			case START:
				enterOuterAlt(_localctx, 2);
				{
				setState(6236);
				start_part();
				setState(6237);
				match(CONNECT);
				setState(6238);
				match(BY);
				setState(6240);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,901,_ctx) ) {
				case 1:
					{
					setState(6239);
					match(NOCYCLE);
					}
					break;
				}
				setState(6242);
				condition();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Start_partContext extends ParserRuleContext {
		public TerminalNode START() { return getToken(PLSQLParser.START, 0); }
		public TerminalNode WITH() { return getToken(PLSQLParser.WITH, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public Start_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_start_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterStart_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitStart_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitStart_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Start_partContext start_part() throws RecognitionException {
		Start_partContext _localctx = new Start_partContext(_ctx, getState());
		enterRule(_localctx, 708, RULE_start_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6246);
			match(START);
			setState(6247);
			match(WITH);
			setState(6248);
			condition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Group_by_clauseContext extends ParserRuleContext {
		public TerminalNode GROUP() { return getToken(PLSQLParser.GROUP, 0); }
		public TerminalNode BY() { return getToken(PLSQLParser.BY, 0); }
		public List<Group_by_elementsContext> group_by_elements() {
			return getRuleContexts(Group_by_elementsContext.class);
		}
		public Group_by_elementsContext group_by_elements(int i) {
			return getRuleContext(Group_by_elementsContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLSQLParser.COMMA, i);
		}
		public Group_by_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_group_by_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterGroup_by_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitGroup_by_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitGroup_by_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Group_by_clauseContext group_by_clause() throws RecognitionException {
		Group_by_clauseContext _localctx = new Group_by_clauseContext(_ctx, getState());
		enterRule(_localctx, 710, RULE_group_by_clause);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(6250);
			match(GROUP);
			setState(6251);
			match(BY);
			setState(6252);
			group_by_elements();
			setState(6257);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,903,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(6253);
					match(COMMA);
					setState(6254);
					group_by_elements();
					}
					} 
				}
				setState(6259);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,903,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Group_by_elementsContext extends ParserRuleContext {
		public Grouping_sets_clauseContext grouping_sets_clause() {
			return getRuleContext(Grouping_sets_clauseContext.class,0);
		}
		public Rollup_cube_clauseContext rollup_cube_clause() {
			return getRuleContext(Rollup_cube_clauseContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Group_by_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_group_by_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterGroup_by_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitGroup_by_elements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitGroup_by_elements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Group_by_elementsContext group_by_elements() throws RecognitionException {
		Group_by_elementsContext _localctx = new Group_by_elementsContext(_ctx, getState());
		enterRule(_localctx, 712, RULE_group_by_elements);
		try {
			setState(6263);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,904,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6260);
				grouping_sets_clause();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6261);
				rollup_cube_clause();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6262);
				expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Rollup_cube_clauseContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(PLSQLParser.LEFT_PAREN, 0); }
		public List<Grouping_sets_elementsContext> grouping_sets_elements() {
			return getRuleContexts(Grouping_sets_elementsContext.class);
		}
		public Grouping_sets_elementsContext grouping_sets_elements(int i) {
			return getRuleContext(Grouping_sets_elementsContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PLSQLParser.RIGHT_PAREN, 0); }
		public TerminalNode ROLLUP() { return getToken(PLSQLParser.ROLLUP, 0); }
		public TerminalNode CUBE() { return getToken(PLSQLParser.CUBE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PLSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLSQLParser.COMMA, i);
		}
		public Rollup_cube_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rollup_cube_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterRollup_cube_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitRollup_cube_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitRollup_cube_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Rollup_cube_clauseContext rollup_cube_clause() throws RecognitionException {
		Rollup_cube_clauseContext _localctx = new Rollup_cube_clauseContext(_ctx, getState());
		enterRule(_localctx, 714, RULE_rollup_cube_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6265);
			_la = _input.LA(1);
			if ( !(_la==CUBE || _la==ROLLUP) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(6266);
			match(LEFT_PAREN);
			setState(6267);
			grouping_sets_elements();
			setState(6272);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(6268);
				match(COMMA);
				setState(6269);
				grouping_sets_elements();
				}
				}
				setState(6274);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(6275);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Grouping_sets_clauseContext extends ParserRuleContext {
		public TerminalNode GROUPING() { return getToken(PLSQLParser.GROUPING, 0); }
		public TerminalNode SETS() { return getToken(PLSQLParser.SETS, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PLSQLParser.LEFT_PAREN, 0); }
		public List<Grouping_sets_elementsContext> grouping_sets_elements() {
			return getRuleContexts(Grouping_sets_elementsContext.class);
		}
		public Grouping_sets_elementsContext grouping_sets_elements(int i) {
			return getRuleContext(Grouping_sets_elementsContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PLSQLParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PLSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLSQLParser.COMMA, i);
		}
		public Grouping_sets_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grouping_sets_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterGrouping_sets_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitGrouping_sets_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitGrouping_sets_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Grouping_sets_clauseContext grouping_sets_clause() throws RecognitionException {
		Grouping_sets_clauseContext _localctx = new Grouping_sets_clauseContext(_ctx, getState());
		enterRule(_localctx, 716, RULE_grouping_sets_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6277);
			match(GROUPING);
			setState(6278);
			match(SETS);
			setState(6279);
			match(LEFT_PAREN);
			setState(6280);
			grouping_sets_elements();
			setState(6285);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(6281);
				match(COMMA);
				setState(6282);
				grouping_sets_elements();
				}
				}
				setState(6287);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(6288);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Grouping_sets_elementsContext extends ParserRuleContext {
		public Rollup_cube_clauseContext rollup_cube_clause() {
			return getRuleContext(Rollup_cube_clauseContext.class,0);
		}
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Grouping_sets_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grouping_sets_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterGrouping_sets_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitGrouping_sets_elements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitGrouping_sets_elements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Grouping_sets_elementsContext grouping_sets_elements() throws RecognitionException {
		Grouping_sets_elementsContext _localctx = new Grouping_sets_elementsContext(_ctx, getState());
		enterRule(_localctx, 718, RULE_grouping_sets_elements);
		try {
			setState(6293);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,907,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6290);
				rollup_cube_clause();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6291);
				expression_list();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6292);
				expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Having_clauseContext extends ParserRuleContext {
		public TerminalNode HAVING() { return getToken(PLSQLParser.HAVING, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public Having_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_having_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterHaving_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitHaving_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitHaving_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Having_clauseContext having_clause() throws RecognitionException {
		Having_clauseContext _localctx = new Having_clauseContext(_ctx, getState());
		enterRule(_localctx, 720, RULE_having_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6295);
			match(HAVING);
			setState(6296);
			condition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Model_clauseContext extends ParserRuleContext {
		public TerminalNode MODEL() { return getToken(PLSQLParser.MODEL, 0); }
		public Main_modelContext main_model() {
			return getRuleContext(Main_modelContext.class,0);
		}
		public List<Cell_reference_optionsContext> cell_reference_options() {
			return getRuleContexts(Cell_reference_optionsContext.class);
		}
		public Cell_reference_optionsContext cell_reference_options(int i) {
			return getRuleContext(Cell_reference_optionsContext.class,i);
		}
		public Return_rows_clauseContext return_rows_clause() {
			return getRuleContext(Return_rows_clauseContext.class,0);
		}
		public List<Reference_modelContext> reference_model() {
			return getRuleContexts(Reference_modelContext.class);
		}
		public Reference_modelContext reference_model(int i) {
			return getRuleContext(Reference_modelContext.class,i);
		}
		public Model_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterModel_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitModel_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitModel_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Model_clauseContext model_clause() throws RecognitionException {
		Model_clauseContext _localctx = new Model_clauseContext(_ctx, getState());
		enterRule(_localctx, 722, RULE_model_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6298);
			match(MODEL);
			setState(6302);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==IGNORE || _la==KEEP || _la==UNIQUE) {
				{
				{
				setState(6299);
				cell_reference_options();
				}
				}
				setState(6304);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(6306);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RETURN) {
				{
				setState(6305);
				return_rows_clause();
				}
			}

			setState(6311);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==REFERENCE) {
				{
				{
				setState(6308);
				reference_model();
				}
				}
				setState(6313);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(6314);
			main_model();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cell_reference_optionsContext extends ParserRuleContext {
		public TerminalNode NAV() { return getToken(PLSQLParser.NAV, 0); }
		public TerminalNode IGNORE() { return getToken(PLSQLParser.IGNORE, 0); }
		public TerminalNode KEEP() { return getToken(PLSQLParser.KEEP, 0); }
		public TerminalNode UNIQUE() { return getToken(PLSQLParser.UNIQUE, 0); }
		public TerminalNode DIMENSION() { return getToken(PLSQLParser.DIMENSION, 0); }
		public TerminalNode SINGLE() { return getToken(PLSQLParser.SINGLE, 0); }
		public TerminalNode REFERENCE() { return getToken(PLSQLParser.REFERENCE, 0); }
		public Cell_reference_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cell_reference_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterCell_reference_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitCell_reference_options(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitCell_reference_options(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cell_reference_optionsContext cell_reference_options() throws RecognitionException {
		Cell_reference_optionsContext _localctx = new Cell_reference_optionsContext(_ctx, getState());
		enterRule(_localctx, 724, RULE_cell_reference_options);
		int _la;
		try {
			setState(6324);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case IGNORE:
			case KEEP:
				enterOuterAlt(_localctx, 1);
				{
				setState(6316);
				_la = _input.LA(1);
				if ( !(_la==IGNORE || _la==KEEP) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6317);
				match(NAV);
				}
				break;
			case UNIQUE:
				enterOuterAlt(_localctx, 2);
				{
				setState(6318);
				match(UNIQUE);
				setState(6322);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case DIMENSION:
					{
					setState(6319);
					match(DIMENSION);
					}
					break;
				case SINGLE:
					{
					setState(6320);
					match(SINGLE);
					setState(6321);
					match(REFERENCE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Return_rows_clauseContext extends ParserRuleContext {
		public TerminalNode RETURN() { return getToken(PLSQLParser.RETURN, 0); }
		public TerminalNode ROWS() { return getToken(PLSQLParser.ROWS, 0); }
		public TerminalNode UPDATED() { return getToken(PLSQLParser.UPDATED, 0); }
		public TerminalNode ALL() { return getToken(PLSQLParser.ALL, 0); }
		public Return_rows_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_return_rows_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterReturn_rows_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitReturn_rows_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitReturn_rows_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Return_rows_clauseContext return_rows_clause() throws RecognitionException {
		Return_rows_clauseContext _localctx = new Return_rows_clauseContext(_ctx, getState());
		enterRule(_localctx, 726, RULE_return_rows_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6326);
			match(RETURN);
			setState(6327);
			_la = _input.LA(1);
			if ( !(_la==ALL || _la==UPDATED) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(6328);
			match(ROWS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Reference_modelContext extends ParserRuleContext {
		public TerminalNode REFERENCE() { return getToken(PLSQLParser.REFERENCE, 0); }
		public Reference_model_nameContext reference_model_name() {
			return getRuleContext(Reference_model_nameContext.class,0);
		}
		public TerminalNode ON() { return getToken(PLSQLParser.ON, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PLSQLParser.LEFT_PAREN, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PLSQLParser.RIGHT_PAREN, 0); }
		public Model_column_clausesContext model_column_clauses() {
			return getRuleContext(Model_column_clausesContext.class,0);
		}
		public List<Cell_reference_optionsContext> cell_reference_options() {
			return getRuleContexts(Cell_reference_optionsContext.class);
		}
		public Cell_reference_optionsContext cell_reference_options(int i) {
			return getRuleContext(Cell_reference_optionsContext.class,i);
		}
		public Reference_modelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reference_model; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterReference_model(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitReference_model(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitReference_model(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Reference_modelContext reference_model() throws RecognitionException {
		Reference_modelContext _localctx = new Reference_modelContext(_ctx, getState());
		enterRule(_localctx, 728, RULE_reference_model);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6330);
			match(REFERENCE);
			setState(6331);
			reference_model_name();
			setState(6332);
			match(ON);
			setState(6333);
			match(LEFT_PAREN);
			setState(6334);
			subquery(0);
			setState(6335);
			match(RIGHT_PAREN);
			setState(6336);
			model_column_clauses();
			setState(6340);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==IGNORE || _la==KEEP || _la==UNIQUE) {
				{
				{
				setState(6337);
				cell_reference_options();
				}
				}
				setState(6342);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Main_modelContext extends ParserRuleContext {
		public Model_column_clausesContext model_column_clauses() {
			return getRuleContext(Model_column_clausesContext.class,0);
		}
		public Model_rules_clauseContext model_rules_clause() {
			return getRuleContext(Model_rules_clauseContext.class,0);
		}
		public TerminalNode MAIN() { return getToken(PLSQLParser.MAIN, 0); }
		public Main_model_nameContext main_model_name() {
			return getRuleContext(Main_model_nameContext.class,0);
		}
		public List<Cell_reference_optionsContext> cell_reference_options() {
			return getRuleContexts(Cell_reference_optionsContext.class);
		}
		public Cell_reference_optionsContext cell_reference_options(int i) {
			return getRuleContext(Cell_reference_optionsContext.class,i);
		}
		public Main_modelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_main_model; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterMain_model(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitMain_model(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitMain_model(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Main_modelContext main_model() throws RecognitionException {
		Main_modelContext _localctx = new Main_modelContext(_ctx, getState());
		enterRule(_localctx, 730, RULE_main_model);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6345);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==MAIN) {
				{
				setState(6343);
				match(MAIN);
				setState(6344);
				main_model_name();
				}
			}

			setState(6347);
			model_column_clauses();
			setState(6351);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==IGNORE || _la==KEEP || _la==UNIQUE) {
				{
				{
				setState(6348);
				cell_reference_options();
				}
				}
				setState(6353);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(6354);
			model_rules_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Model_column_clausesContext extends ParserRuleContext {
		public TerminalNode DIMENSION() { return getToken(PLSQLParser.DIMENSION, 0); }
		public TerminalNode BY() { return getToken(PLSQLParser.BY, 0); }
		public List<Model_column_listContext> model_column_list() {
			return getRuleContexts(Model_column_listContext.class);
		}
		public Model_column_listContext model_column_list(int i) {
			return getRuleContext(Model_column_listContext.class,i);
		}
		public TerminalNode MEASURES() { return getToken(PLSQLParser.MEASURES, 0); }
		public Model_column_partition_partContext model_column_partition_part() {
			return getRuleContext(Model_column_partition_partContext.class,0);
		}
		public Model_column_clausesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_column_clauses; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterModel_column_clauses(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitModel_column_clauses(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitModel_column_clauses(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Model_column_clausesContext model_column_clauses() throws RecognitionException {
		Model_column_clausesContext _localctx = new Model_column_clausesContext(_ctx, getState());
		enterRule(_localctx, 732, RULE_model_column_clauses);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6357);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(6356);
				model_column_partition_part();
				}
			}

			setState(6359);
			match(DIMENSION);
			setState(6360);
			match(BY);
			setState(6361);
			model_column_list();
			setState(6362);
			match(MEASURES);
			setState(6363);
			model_column_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Model_column_partition_partContext extends ParserRuleContext {
		public TerminalNode PARTITION() { return getToken(PLSQLParser.PARTITION, 0); }
		public TerminalNode BY() { return getToken(PLSQLParser.BY, 0); }
		public Model_column_listContext model_column_list() {
			return getRuleContext(Model_column_listContext.class,0);
		}
		public Model_column_partition_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_column_partition_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterModel_column_partition_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitModel_column_partition_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitModel_column_partition_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Model_column_partition_partContext model_column_partition_part() throws RecognitionException {
		Model_column_partition_partContext _localctx = new Model_column_partition_partContext(_ctx, getState());
		enterRule(_localctx, 734, RULE_model_column_partition_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6365);
			match(PARTITION);
			setState(6366);
			match(BY);
			setState(6367);
			model_column_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Model_column_listContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(PLSQLParser.LEFT_PAREN, 0); }
		public List<Model_columnContext> model_column() {
			return getRuleContexts(Model_columnContext.class);
		}
		public Model_columnContext model_column(int i) {
			return getRuleContext(Model_columnContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PLSQLParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PLSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLSQLParser.COMMA, i);
		}
		public Model_column_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_column_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterModel_column_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitModel_column_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitModel_column_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Model_column_listContext model_column_list() throws RecognitionException {
		Model_column_listContext _localctx = new Model_column_listContext(_ctx, getState());
		enterRule(_localctx, 736, RULE_model_column_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6369);
			match(LEFT_PAREN);
			setState(6370);
			model_column();
			setState(6375);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(6371);
				match(COMMA);
				setState(6372);
				model_column();
				}
				}
				setState(6377);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(6378);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Model_columnContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Table_aliasContext table_alias() {
			return getRuleContext(Table_aliasContext.class,0);
		}
		public Model_columnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_column; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterModel_column(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitModel_column(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitModel_column(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Model_columnContext model_column() throws RecognitionException {
		Model_columnContext _localctx = new Model_columnContext(_ctx, getState());
		enterRule(_localctx, 738, RULE_model_column);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6380);
			expression(0);
			setState(6382);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << AS) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BUILD) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (CHR - 65)) | (1L << (CLOB - 65)) | (1L << (CLOSE - 65)) | (1L << (CLUSTER - 65)) | (1L << (COALESCE - 65)) | (1L << (COLLECT - 65)) | (1L << (COLUMNS - 65)) | (1L << (COMMENT - 65)) | (1L << (COMMIT - 65)) | (1L << (COMMITTED - 65)) | (1L << (COMPATIBILITY - 65)) | (1L << (COMPILE - 65)) | (1L << (COMPLETE - 65)) | (1L << (COMPOUND - 65)) | (1L << (CONCAT - 65)) | (1L << (CONSTANT - 65)) | (1L << (CONSTRAINT - 65)) | (1L << (CONSTRAINTS - 65)) | (1L << (CONSTRUCTOR - 65)) | (1L << (CONTENT - 65)) | (1L << (CONTEXT - 65)) | (1L << (CONTINUE - 65)) | (1L << (CONVERT - 65)) | (1L << (CORRUPT_XID - 65)) | (1L << (CORRUPT_XID_ALL - 65)) | (1L << (COST - 65)) | (1L << (COUNT - 65)) | (1L << (CROSS - 65)) | (1L << (CUBE - 65)) | (1L << (CURRENT_USER - 65)) | (1L << (CURSOR - 65)) | (1L << (CUSTOMDATUM - 65)) | (1L << (CYCLE - 65)) | (1L << (DATA - 65)) | (1L << (DATABASE - 65)) | (1L << (DATE - 65)) | (1L << (DAY - 65)) | (1L << (DB_ROLE_CHANGE - 65)) | (1L << (DBTIMEZONE - 65)) | (1L << (DDL - 65)) | (1L << (DEBUG - 65)) | (1L << (DEC - 65)) | (1L << (DECIMAL - 65)) | (1L << (DECODE - 65)) | (1L << (DECOMPOSE - 65)) | (1L << (DECREMENT - 65)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DEMAND - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (EDITIONING - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENFORCED - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FAST - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)) | (1L << (FOLLOWING - 129)) | (1L << (FOLLOWS - 129)) | (1L << (FORALL - 129)) | (1L << (FORCE - 129)))) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & ((1L << (FULL - 197)) | (1L << (FUNCTION - 197)) | (1L << (GROUPING - 197)) | (1L << (HASH - 197)) | (1L << (HIDE - 197)) | (1L << (HOUR - 197)) | (1L << (IGNORE - 197)) | (1L << (IMMEDIATE - 197)) | (1L << (INCLUDE - 197)) | (1L << (INCLUDING - 197)) | (1L << (INCREMENT - 197)) | (1L << (INDENT - 197)) | (1L << (INDEXED - 197)) | (1L << (INDICATOR - 197)) | (1L << (INDICES - 197)) | (1L << (INFINITE - 197)) | (1L << (INLINE - 197)) | (1L << (INNER - 197)) | (1L << (INOUT - 197)) | (1L << (INSTANTIABLE - 197)) | (1L << (INSTEAD - 197)) | (1L << (INT - 197)) | (1L << (INTEGER - 197)) | (1L << (INTERVAL - 197)) | (1L << (INVALIDATE - 197)) | (1L << (ISOLATION - 197)) | (1L << (ITERATE - 197)) | (1L << (JAVA - 197)) | (1L << (JOIN - 197)) | (1L << (KEEP - 197)) | (1L << (LANGUAGE - 197)) | (1L << (LAST - 197)) | (1L << (LAST_VALUE - 197)) | (1L << (LEADING - 197)) | (1L << (LEFT - 197)) | (1L << (LEVEL - 197)))) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & ((1L << (LIBRARY - 261)) | (1L << (LIKE2 - 261)) | (1L << (LIKE4 - 261)) | (1L << (LIKEC - 261)) | (1L << (LIMIT - 261)) | (1L << (LIST - 261)) | (1L << (LOCAL - 261)) | (1L << (LOCKED - 261)) | (1L << (LOG - 261)) | (1L << (LOGOFF - 261)) | (1L << (LOGON - 261)) | (1L << (LONG - 261)) | (1L << (LOOP - 261)) | (1L << (MAIN - 261)) | (1L << (MAP - 261)) | (1L << (MASTER - 261)) | (1L << (MATCHED - 261)) | (1L << (MAXVALUE - 261)) | (1L << (MEASURES - 261)) | (1L << (MEMBER - 261)) | (1L << (MERGE - 261)) | (1L << (MINUTE - 261)) | (1L << (MINVALUE - 261)) | (1L << (MLSLABEL - 261)) | (1L << (MODEL - 261)) | (1L << (MODIFY - 261)) | (1L << (MONTH - 261)) | (1L << (MULTISET - 261)) | (1L << (NAME - 261)) | (1L << (NAN - 261)) | (1L << (NATURAL - 261)) | (1L << (NATURALN - 261)) | (1L << (NAV - 261)) | (1L << (NCHAR - 261)) | (1L << (NCHAR_CS - 261)) | (1L << (NCLOB - 261)) | (1L << (NESTED - 261)) | (1L << (NEVER - 261)) | (1L << (NEW - 261)) | (1L << (NO - 261)) | (1L << (NOAUDIT - 261)) | (1L << (NOCOPY - 261)) | (1L << (NOCYCLE - 261)) | (1L << (NOENTITYESCAPING - 261)))) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & ((1L << (NONE - 329)) | (1L << (NOSCHEMACHECK - 329)) | (1L << (NVL - 329)) | (1L << (NULLS - 329)) | (1L << (NUMBER - 329)) | (1L << (NUMERIC - 329)) | (1L << (NVARCHAR2 - 329)) | (1L << (MATERIALIZED - 329)) | (1L << (OBJECT - 329)) | (1L << (OFF - 329)) | (1L << (OID - 329)) | (1L << (OLD - 329)) | (1L << (ONLY - 329)) | (1L << (OPEN - 329)) | (1L << (ORADATA - 329)) | (1L << (ORDINALITY - 329)) | (1L << (OSERROR - 329)) | (1L << (OUT - 329)) | (1L << (OUTER - 329)) | (1L << (OVER - 329)) | (1L << (OVERRIDING - 329)) | (1L << (PACKAGE - 329)) | (1L << (PARALLEL_ENABLE - 329)) | (1L << (PARAMETERS - 329)) | (1L << (PARENT - 329)) | (1L << (PARTITION - 329)) | (1L << (PASSING - 329)) | (1L << (PATH - 329)) | (1L << (PIPELINED - 329)) | (1L << (PLAN - 329)) | (1L << (PLS_INTEGER - 329)) | (1L << (POSITIVE - 329)) | (1L << (POSITIVEN - 329)) | (1L << (PRAGMA - 329)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (PREBUILT - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)) | (1L << (PRESENT - 393)) | (1L << (PUBLIC - 393)) | (1L << (RAISE - 393)) | (1L << (RANGE - 393)) | (1L << (RAW - 393)) | (1L << (READ - 393)) | (1L << (REAL - 393)) | (1L << (RECORD - 393)) | (1L << (REDUCED - 393)) | (1L << (REF - 393)) | (1L << (REFERENCE - 393)) | (1L << (REFERENCING - 393)) | (1L << (REFRESH - 393)) | (1L << (REJECT - 393)) | (1L << (RELIES_ON - 393)) | (1L << (RENAME - 393)) | (1L << (REPLACE - 393)) | (1L << (RESPECT - 393)) | (1L << (RESTRICT_REFERENCES - 393)) | (1L << (RESULT - 393)) | (1L << (RESULT_CACHE - 393)) | (1L << (RETURN - 393)) | (1L << (RETURNING - 393)) | (1L << (REUSE - 393)) | (1L << (REVERSE - 393)) | (1L << (REWRITE - 393)) | (1L << (RIGHT - 393)) | (1L << (ROLE - 393)) | (1L << (ROLLBACK - 393)) | (1L << (ROLLUP - 393)) | (1L << (ROW - 393)) | (1L << (ROWID - 393)) | (1L << (ROWS - 393)) | (1L << (RULES - 393)) | (1L << (SAMPLE - 393)) | (1L << (SAVE - 393)) | (1L << (SAVEPOINT - 393)) | (1L << (SCHEMA - 393)) | (1L << (SCHEMACHECK - 393)) | (1L << (SCN - 393)) | (1L << (SECOND - 393)))) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & ((1L << (SEED - 458)) | (1L << (SEGMENT - 458)) | (1L << (SELF - 458)) | (1L << (SEQUENTIAL - 458)) | (1L << (SERIALIZABLE - 458)) | (1L << (SERIALLY_REUSABLE - 458)) | (1L << (SERVERERROR - 458)) | (1L << (SESSIONTIMEZONE - 458)) | (1L << (SET - 458)) | (1L << (SETS - 458)) | (1L << (SETTINGS - 458)) | (1L << (SHOW - 458)) | (1L << (SHUTDOWN - 458)) | (1L << (SIBLINGS - 458)) | (1L << (SIGNTYPE - 458)) | (1L << (SIMPLE_INTEGER - 458)) | (1L << (SINGLE - 458)) | (1L << (SIZE - 458)) | (1L << (SKIP_ - 458)) | (1L << (SMALLINT - 458)) | (1L << (SNAPSHOT - 458)) | (1L << (SOME - 458)) | (1L << (SPECIFICATION - 458)) | (1L << (SQLDATA - 458)) | (1L << (SQLERROR - 458)) | (1L << (STANDALONE - 458)) | (1L << (STARTUP - 458)) | (1L << (STATEMENT - 458)) | (1L << (STATEMENT_ID - 458)) | (1L << (STATIC - 458)) | (1L << (STATISTICS - 458)) | (1L << (STRING - 458)) | (1L << (SUBMULTISET - 458)) | (1L << (SUBPARTITION - 458)) | (1L << (SUBSTITUTABLE - 458)) | (1L << (SUBSTRING - 458)) | (1L << (SUBTYPE - 458)) | (1L << (SUCCESS - 458)) | (1L << (SUSPEND - 458)) | (1L << (TABLES - 458)) | (1L << (TIME - 458)) | (1L << (TIMESTAMP - 458)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 458)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 458)) | (1L << (TIMESTAMP_UNCONSTRAINED - 458)))) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & ((1L << (TIMEZONE_ABBR - 522)) | (1L << (TIMEZONE_HOUR - 522)) | (1L << (TIMEZONE_MINUTE - 522)) | (1L << (TIMEZONE_REGION - 522)) | (1L << (TO_CHAR - 522)) | (1L << (TO_DATE - 522)) | (1L << (TRAILING - 522)) | (1L << (TRANSACTION - 522)) | (1L << (TRANSLATE - 522)) | (1L << (TREAT - 522)) | (1L << (TRIGGER - 522)) | (1L << (TRIM - 522)) | (1L << (TRUNCATE - 522)) | (1L << (TRUSTED - 522)) | (1L << (TYPE - 522)) | (1L << (UNBOUNDED - 522)) | (1L << (UNDER - 522)) | (1L << (UNLIMITED - 522)) | (1L << (UNTIL - 522)) | (1L << (UPDATED - 522)) | (1L << (UPSERT - 522)) | (1L << (UROWID - 522)) | (1L << (USE - 522)) | (1L << (VALIDATE - 522)) | (1L << (VALUE - 522)) | (1L << (VARCHAR - 522)) | (1L << (VARCHAR2 - 522)) | (1L << (VARIABLE - 522)) | (1L << (VARRAY - 522)) | (1L << (VARYING - 522)) | (1L << (VERBOSE - 522)) | (1L << (VERSION - 522)) | (1L << (VERSIONS - 522)) | (1L << (VIEW - 522)) | (1L << (WAIT - 522)) | (1L << (WARNING - 522)) | (1L << (WELLFORMED - 522)) | (1L << (WHENEVER - 522)) | (1L << (WHILE - 522)) | (1L << (WITHOUT - 522)) | (1L << (WITHIN - 522)) | (1L << (WORK - 522)) | (1L << (WRITE - 522)) | (1L << (XML - 522)) | (1L << (XMLAGG - 522)) | (1L << (XMLATTRIBUTES - 522)))) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & ((1L << (XMLCAST - 586)) | (1L << (XMLCOLATTVAL - 586)) | (1L << (XMLELEMENT - 586)) | (1L << (XMLEXISTS - 586)) | (1L << (XMLFOREST - 586)) | (1L << (XMLNAMESPACES - 586)) | (1L << (XMLPARSE - 586)) | (1L << (XMLPI - 586)) | (1L << (XMLQUERY - 586)) | (1L << (XMLROOT - 586)) | (1L << (XMLSERIALIZE - 586)) | (1L << (XMLTABLE - 586)) | (1L << (YEAR - 586)) | (1L << (YES - 586)) | (1L << (YMINTERVAL_UNCONSTRAINED - 586)) | (1L << (ZONE - 586)) | (1L << (PREDICTION - 586)) | (1L << (PREDICTION_BOUNDS - 586)) | (1L << (PREDICTION_COST - 586)) | (1L << (PREDICTION_DETAILS - 586)) | (1L << (PREDICTION_PROBABILITY - 586)) | (1L << (PREDICTION_SET - 586)) | (1L << (CUME_DIST - 586)) | (1L << (DENSE_RANK - 586)) | (1L << (LISTAGG - 586)) | (1L << (PERCENT_RANK - 586)) | (1L << (PERCENTILE_CONT - 586)) | (1L << (PERCENTILE_DISC - 586)) | (1L << (RANK - 586)) | (1L << (AVG - 586)) | (1L << (CORR - 586)) | (1L << (LAG - 586)) | (1L << (LEAD - 586)) | (1L << (MAX - 586)) | (1L << (MEDIAN - 586)) | (1L << (MIN - 586)) | (1L << (NTILE - 586)) | (1L << (RATIO_TO_REPORT - 586)) | (1L << (ROW_NUMBER - 586)) | (1L << (SUM - 586)) | (1L << (VARIANCE - 586)) | (1L << (REGR_ - 586)) | (1L << (STDDEV - 586)) | (1L << (VAR_ - 586)) | (1L << (COVAR_ - 586)) | (1L << (NATIONAL_CHAR_STRING_LIT - 586)) | (1L << (CHAR_STRING - 586)) | (1L << (DELIMITED_ID - 586)))) != 0) || _la==REGULAR_ID) {
				{
				setState(6381);
				table_alias();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Model_rules_clauseContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(PLSQLParser.LEFT_PAREN, 0); }
		public List<Model_rules_elementContext> model_rules_element() {
			return getRuleContexts(Model_rules_elementContext.class);
		}
		public Model_rules_elementContext model_rules_element(int i) {
			return getRuleContext(Model_rules_elementContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PLSQLParser.RIGHT_PAREN, 0); }
		public Model_rules_partContext model_rules_part() {
			return getRuleContext(Model_rules_partContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLSQLParser.COMMA, i);
		}
		public Model_rules_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_rules_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterModel_rules_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitModel_rules_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitModel_rules_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Model_rules_clauseContext model_rules_clause() throws RecognitionException {
		Model_rules_clauseContext _localctx = new Model_rules_clauseContext(_ctx, getState());
		enterRule(_localctx, 740, RULE_model_rules_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6385);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RULES) {
				{
				setState(6384);
				model_rules_part();
				}
			}

			setState(6387);
			match(LEFT_PAREN);
			setState(6388);
			model_rules_element();
			setState(6393);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(6389);
				match(COMMA);
				setState(6390);
				model_rules_element();
				}
				}
				setState(6395);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(6396);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Model_rules_partContext extends ParserRuleContext {
		public TerminalNode RULES() { return getToken(PLSQLParser.RULES, 0); }
		public TerminalNode UPDATE() { return getToken(PLSQLParser.UPDATE, 0); }
		public TerminalNode UPSERT() { return getToken(PLSQLParser.UPSERT, 0); }
		public TerminalNode ORDER() { return getToken(PLSQLParser.ORDER, 0); }
		public Model_iterate_clauseContext model_iterate_clause() {
			return getRuleContext(Model_iterate_clauseContext.class,0);
		}
		public TerminalNode AUTOMATIC() { return getToken(PLSQLParser.AUTOMATIC, 0); }
		public TerminalNode SEQUENTIAL() { return getToken(PLSQLParser.SEQUENTIAL, 0); }
		public TerminalNode ALL() { return getToken(PLSQLParser.ALL, 0); }
		public Model_rules_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_rules_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterModel_rules_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitModel_rules_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitModel_rules_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Model_rules_partContext model_rules_part() throws RecognitionException {
		Model_rules_partContext _localctx = new Model_rules_partContext(_ctx, getState());
		enterRule(_localctx, 742, RULE_model_rules_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6398);
			match(RULES);
			setState(6404);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UPDATE:
				{
				setState(6399);
				match(UPDATE);
				}
				break;
			case UPSERT:
				{
				setState(6400);
				match(UPSERT);
				setState(6402);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALL) {
					{
					setState(6401);
					match(ALL);
					}
				}

				}
				break;
			case AUTOMATIC:
			case ITERATE:
			case SEQUENTIAL:
			case LEFT_PAREN:
				break;
			default:
				break;
			}
			setState(6408);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTOMATIC || _la==SEQUENTIAL) {
				{
				setState(6406);
				_la = _input.LA(1);
				if ( !(_la==AUTOMATIC || _la==SEQUENTIAL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6407);
				match(ORDER);
				}
			}

			setState(6411);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ITERATE) {
				{
				setState(6410);
				model_iterate_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Model_rules_elementContext extends ParserRuleContext {
		public Cell_assignmentContext cell_assignment() {
			return getRuleContext(Cell_assignmentContext.class,0);
		}
		public TerminalNode EQUALS_OP() { return getToken(PLSQLParser.EQUALS_OP, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode UPDATE() { return getToken(PLSQLParser.UPDATE, 0); }
		public TerminalNode UPSERT() { return getToken(PLSQLParser.UPSERT, 0); }
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public TerminalNode ALL() { return getToken(PLSQLParser.ALL, 0); }
		public Model_rules_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_rules_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterModel_rules_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitModel_rules_element(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitModel_rules_element(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Model_rules_elementContext model_rules_element() throws RecognitionException {
		Model_rules_elementContext _localctx = new Model_rules_elementContext(_ctx, getState());
		enterRule(_localctx, 744, RULE_model_rules_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6418);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,926,_ctx) ) {
			case 1:
				{
				setState(6413);
				match(UPDATE);
				}
				break;
			case 2:
				{
				setState(6414);
				match(UPSERT);
				setState(6416);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,925,_ctx) ) {
				case 1:
					{
					setState(6415);
					match(ALL);
					}
					break;
				}
				}
				break;
			}
			setState(6420);
			cell_assignment();
			setState(6422);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ORDER) {
				{
				setState(6421);
				order_by_clause();
				}
			}

			setState(6424);
			match(EQUALS_OP);
			setState(6425);
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cell_assignmentContext extends ParserRuleContext {
		public Model_expressionContext model_expression() {
			return getRuleContext(Model_expressionContext.class,0);
		}
		public Cell_assignmentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cell_assignment; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterCell_assignment(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitCell_assignment(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitCell_assignment(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cell_assignmentContext cell_assignment() throws RecognitionException {
		Cell_assignmentContext _localctx = new Cell_assignmentContext(_ctx, getState());
		enterRule(_localctx, 746, RULE_cell_assignment);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6427);
			model_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Model_iterate_clauseContext extends ParserRuleContext {
		public TerminalNode ITERATE() { return getToken(PLSQLParser.ITERATE, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PLSQLParser.LEFT_PAREN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PLSQLParser.RIGHT_PAREN, 0); }
		public Until_partContext until_part() {
			return getRuleContext(Until_partContext.class,0);
		}
		public Model_iterate_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_iterate_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterModel_iterate_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitModel_iterate_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitModel_iterate_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Model_iterate_clauseContext model_iterate_clause() throws RecognitionException {
		Model_iterate_clauseContext _localctx = new Model_iterate_clauseContext(_ctx, getState());
		enterRule(_localctx, 748, RULE_model_iterate_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6429);
			match(ITERATE);
			setState(6430);
			match(LEFT_PAREN);
			setState(6431);
			expression(0);
			setState(6432);
			match(RIGHT_PAREN);
			setState(6434);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==UNTIL) {
				{
				setState(6433);
				until_part();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Until_partContext extends ParserRuleContext {
		public TerminalNode UNTIL() { return getToken(PLSQLParser.UNTIL, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PLSQLParser.LEFT_PAREN, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PLSQLParser.RIGHT_PAREN, 0); }
		public Until_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_until_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterUntil_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitUntil_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitUntil_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Until_partContext until_part() throws RecognitionException {
		Until_partContext _localctx = new Until_partContext(_ctx, getState());
		enterRule(_localctx, 750, RULE_until_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6436);
			match(UNTIL);
			setState(6437);
			match(LEFT_PAREN);
			setState(6438);
			condition();
			setState(6439);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Order_by_clauseContext extends ParserRuleContext {
		public TerminalNode ORDER() { return getToken(PLSQLParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(PLSQLParser.BY, 0); }
		public List<Order_by_elementsContext> order_by_elements() {
			return getRuleContexts(Order_by_elementsContext.class);
		}
		public Order_by_elementsContext order_by_elements(int i) {
			return getRuleContext(Order_by_elementsContext.class,i);
		}
		public TerminalNode SIBLINGS() { return getToken(PLSQLParser.SIBLINGS, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PLSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLSQLParser.COMMA, i);
		}
		public Order_by_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_order_by_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterOrder_by_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitOrder_by_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitOrder_by_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Order_by_clauseContext order_by_clause() throws RecognitionException {
		Order_by_clauseContext _localctx = new Order_by_clauseContext(_ctx, getState());
		enterRule(_localctx, 752, RULE_order_by_clause);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(6441);
			match(ORDER);
			setState(6443);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SIBLINGS) {
				{
				setState(6442);
				match(SIBLINGS);
				}
			}

			setState(6445);
			match(BY);
			setState(6446);
			order_by_elements();
			setState(6451);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,930,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(6447);
					match(COMMA);
					setState(6448);
					order_by_elements();
					}
					} 
				}
				setState(6453);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,930,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Order_by_elementsContext extends ParserRuleContext {
		public Token direction;
		public Token nulls;
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode NULLS() { return getToken(PLSQLParser.NULLS, 0); }
		public TerminalNode ASC() { return getToken(PLSQLParser.ASC, 0); }
		public TerminalNode DESC() { return getToken(PLSQLParser.DESC, 0); }
		public TerminalNode FIRST() { return getToken(PLSQLParser.FIRST, 0); }
		public TerminalNode LAST() { return getToken(PLSQLParser.LAST, 0); }
		public Order_by_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_order_by_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterOrder_by_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitOrder_by_elements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitOrder_by_elements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Order_by_elementsContext order_by_elements() throws RecognitionException {
		Order_by_elementsContext _localctx = new Order_by_elementsContext(_ctx, getState());
		enterRule(_localctx, 754, RULE_order_by_elements);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6454);
			expression(0);
			setState(6456);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,931,_ctx) ) {
			case 1:
				{
				setState(6455);
				((Order_by_elementsContext)_localctx).direction = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ASC || _la==DESC) ) {
					((Order_by_elementsContext)_localctx).direction = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(6460);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,932,_ctx) ) {
			case 1:
				{
				setState(6458);
				match(NULLS);
				setState(6459);
				((Order_by_elementsContext)_localctx).nulls = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==FIRST || _la==LAST) ) {
					((Order_by_elementsContext)_localctx).nulls = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class For_update_clauseContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(PLSQLParser.FOR, 0); }
		public TerminalNode UPDATE() { return getToken(PLSQLParser.UPDATE, 0); }
		public For_update_of_partContext for_update_of_part() {
			return getRuleContext(For_update_of_partContext.class,0);
		}
		public For_update_optionsContext for_update_options() {
			return getRuleContext(For_update_optionsContext.class,0);
		}
		public For_update_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_for_update_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterFor_update_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitFor_update_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitFor_update_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final For_update_clauseContext for_update_clause() throws RecognitionException {
		For_update_clauseContext _localctx = new For_update_clauseContext(_ctx, getState());
		enterRule(_localctx, 756, RULE_for_update_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6462);
			match(FOR);
			setState(6463);
			match(UPDATE);
			setState(6465);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,933,_ctx) ) {
			case 1:
				{
				setState(6464);
				for_update_of_part();
				}
				break;
			}
			setState(6468);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,934,_ctx) ) {
			case 1:
				{
				setState(6467);
				for_update_options();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class For_update_of_partContext extends ParserRuleContext {
		public TerminalNode OF() { return getToken(PLSQLParser.OF, 0); }
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLSQLParser.COMMA, i);
		}
		public For_update_of_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_for_update_of_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterFor_update_of_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitFor_update_of_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitFor_update_of_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final For_update_of_partContext for_update_of_part() throws RecognitionException {
		For_update_of_partContext _localctx = new For_update_of_partContext(_ctx, getState());
		enterRule(_localctx, 758, RULE_for_update_of_part);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(6470);
			match(OF);
			setState(6471);
			column_name();
			setState(6476);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,935,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(6472);
					match(COMMA);
					setState(6473);
					column_name();
					}
					} 
				}
				setState(6478);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,935,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class For_update_optionsContext extends ParserRuleContext {
		public TerminalNode SKIP_() { return getToken(PLSQLParser.SKIP_, 0); }
		public TerminalNode LOCKED() { return getToken(PLSQLParser.LOCKED, 0); }
		public TerminalNode NOWAIT() { return getToken(PLSQLParser.NOWAIT, 0); }
		public TerminalNode WAIT() { return getToken(PLSQLParser.WAIT, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public For_update_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_for_update_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterFor_update_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitFor_update_options(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitFor_update_options(this);
			else return visitor.visitChildren(this);
		}
	}

	public final For_update_optionsContext for_update_options() throws RecognitionException {
		For_update_optionsContext _localctx = new For_update_optionsContext(_ctx, getState());
		enterRule(_localctx, 760, RULE_for_update_options);
		try {
			setState(6484);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SKIP_:
				enterOuterAlt(_localctx, 1);
				{
				setState(6479);
				match(SKIP_);
				setState(6480);
				match(LOCKED);
				}
				break;
			case NOWAIT:
				enterOuterAlt(_localctx, 2);
				{
				setState(6481);
				match(NOWAIT);
				}
				break;
			case WAIT:
				enterOuterAlt(_localctx, 3);
				{
				setState(6482);
				match(WAIT);
				setState(6483);
				expression(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Limit_clauseContext extends ParserRuleContext {
		public TerminalNode LIMIT() { return getToken(PLSQLParser.LIMIT, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Limit_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_limit_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterLimit_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitLimit_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitLimit_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Limit_clauseContext limit_clause() throws RecognitionException {
		Limit_clauseContext _localctx = new Limit_clauseContext(_ctx, getState());
		enterRule(_localctx, 762, RULE_limit_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6486);
			match(LIMIT);
			setState(6487);
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Update_statementContext extends ParserRuleContext {
		public TerminalNode UPDATE() { return getToken(PLSQLParser.UPDATE, 0); }
		public General_table_refContext general_table_ref() {
			return getRuleContext(General_table_refContext.class,0);
		}
		public Update_set_clauseContext update_set_clause() {
			return getRuleContext(Update_set_clauseContext.class,0);
		}
		public From_clauseContext from_clause() {
			return getRuleContext(From_clauseContext.class,0);
		}
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public Static_returning_clauseContext static_returning_clause() {
			return getRuleContext(Static_returning_clauseContext.class,0);
		}
		public Error_logging_clauseContext error_logging_clause() {
			return getRuleContext(Error_logging_clauseContext.class,0);
		}
		public Update_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_update_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterUpdate_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitUpdate_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitUpdate_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Update_statementContext update_statement() throws RecognitionException {
		Update_statementContext _localctx = new Update_statementContext(_ctx, getState());
		enterRule(_localctx, 764, RULE_update_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6489);
			match(UPDATE);
			setState(6490);
			general_table_ref();
			setState(6491);
			update_set_clause();
			setState(6493);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(6492);
				from_clause();
				}
			}

			setState(6496);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(6495);
				where_clause();
				}
			}

			setState(6499);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RETURN || _la==RETURNING) {
				{
				setState(6498);
				static_returning_clause();
				}
			}

			setState(6502);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOG) {
				{
				setState(6501);
				error_logging_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Update_set_clauseContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(PLSQLParser.SET, 0); }
		public List<Column_based_update_set_clauseContext> column_based_update_set_clause() {
			return getRuleContexts(Column_based_update_set_clauseContext.class);
		}
		public Column_based_update_set_clauseContext column_based_update_set_clause(int i) {
			return getRuleContext(Column_based_update_set_clauseContext.class,i);
		}
		public TerminalNode VALUE() { return getToken(PLSQLParser.VALUE, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PLSQLParser.LEFT_PAREN, 0); }
		public R_idContext r_id() {
			return getRuleContext(R_idContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PLSQLParser.RIGHT_PAREN, 0); }
		public TerminalNode EQUALS_OP() { return getToken(PLSQLParser.EQUALS_OP, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLSQLParser.COMMA, i);
		}
		public Update_set_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_update_set_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterUpdate_set_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitUpdate_set_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitUpdate_set_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Update_set_clauseContext update_set_clause() throws RecognitionException {
		Update_set_clauseContext _localctx = new Update_set_clauseContext(_ctx, getState());
		enterRule(_localctx, 766, RULE_update_set_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6504);
			match(SET);
			setState(6520);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,942,_ctx) ) {
			case 1:
				{
				setState(6505);
				column_based_update_set_clause();
				setState(6510);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6506);
					match(COMMA);
					setState(6507);
					column_based_update_set_clause();
					}
					}
					setState(6512);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				{
				setState(6513);
				match(VALUE);
				setState(6514);
				match(LEFT_PAREN);
				setState(6515);
				r_id();
				setState(6516);
				match(RIGHT_PAREN);
				setState(6517);
				match(EQUALS_OP);
				setState(6518);
				expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_based_update_set_clauseContext extends ParserRuleContext {
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public TerminalNode EQUALS_OP() { return getToken(PLSQLParser.EQUALS_OP, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Paren_column_listContext paren_column_list() {
			return getRuleContext(Paren_column_listContext.class,0);
		}
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public Column_based_update_set_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_based_update_set_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterColumn_based_update_set_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitColumn_based_update_set_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitColumn_based_update_set_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Column_based_update_set_clauseContext column_based_update_set_clause() throws RecognitionException {
		Column_based_update_set_clauseContext _localctx = new Column_based_update_set_clauseContext(_ctx, getState());
		enterRule(_localctx, 768, RULE_column_based_update_set_clause);
		try {
			setState(6530);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BUILD:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPLETE:
			case COMPOUND:
			case CONCAT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECODE:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DEMAND:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case EDITIONING:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENFORCED:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FAST:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LIST:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MASTER:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEVER:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NVL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case MATERIALIZED:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PREBUILT:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PUBLIC:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REDUCED:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REFRESH:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case REWRITE:
			case RIGHT:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SIZE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBSTRING:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TABLES:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TO_CHAR:
			case TO_DATE:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TRUSTED:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERBOSE:
			case VERSION:
			case VERSIONS:
			case VIEW:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHOUT:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(6522);
				column_name();
				setState(6523);
				match(EQUALS_OP);
				setState(6524);
				expression(0);
				}
				break;
			case LEFT_PAREN:
				enterOuterAlt(_localctx, 2);
				{
				setState(6526);
				paren_column_list();
				setState(6527);
				match(EQUALS_OP);
				setState(6528);
				subquery(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Delete_statementContext extends ParserRuleContext {
		public TerminalNode DELETE() { return getToken(PLSQLParser.DELETE, 0); }
		public General_table_refContext general_table_ref() {
			return getRuleContext(General_table_refContext.class,0);
		}
		public TerminalNode FROM() { return getToken(PLSQLParser.FROM, 0); }
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public Static_returning_clauseContext static_returning_clause() {
			return getRuleContext(Static_returning_clauseContext.class,0);
		}
		public Error_logging_clauseContext error_logging_clause() {
			return getRuleContext(Error_logging_clauseContext.class,0);
		}
		public Delete_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_delete_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterDelete_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitDelete_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitDelete_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Delete_statementContext delete_statement() throws RecognitionException {
		Delete_statementContext _localctx = new Delete_statementContext(_ctx, getState());
		enterRule(_localctx, 770, RULE_delete_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6532);
			match(DELETE);
			setState(6534);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(6533);
				match(FROM);
				}
			}

			setState(6536);
			general_table_ref();
			setState(6538);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(6537);
				where_clause();
				}
			}

			setState(6541);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RETURN || _la==RETURNING) {
				{
				setState(6540);
				static_returning_clause();
				}
			}

			setState(6544);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOG) {
				{
				setState(6543);
				error_logging_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Insert_statementContext extends ParserRuleContext {
		public TerminalNode INSERT() { return getToken(PLSQLParser.INSERT, 0); }
		public Single_table_insertContext single_table_insert() {
			return getRuleContext(Single_table_insertContext.class,0);
		}
		public Multi_table_insertContext multi_table_insert() {
			return getRuleContext(Multi_table_insertContext.class,0);
		}
		public Insert_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insert_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterInsert_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitInsert_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitInsert_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Insert_statementContext insert_statement() throws RecognitionException {
		Insert_statementContext _localctx = new Insert_statementContext(_ctx, getState());
		enterRule(_localctx, 772, RULE_insert_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6546);
			match(INSERT);
			setState(6549);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INTO:
				{
				setState(6547);
				single_table_insert();
				}
				break;
			case ALL:
			case FIRST:
			case WHEN:
				{
				setState(6548);
				multi_table_insert();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Single_table_insertContext extends ParserRuleContext {
		public Insert_into_clauseContext insert_into_clause() {
			return getRuleContext(Insert_into_clauseContext.class,0);
		}
		public Values_clauseContext values_clause() {
			return getRuleContext(Values_clauseContext.class,0);
		}
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public Error_logging_clauseContext error_logging_clause() {
			return getRuleContext(Error_logging_clauseContext.class,0);
		}
		public Static_returning_clauseContext static_returning_clause() {
			return getRuleContext(Static_returning_clauseContext.class,0);
		}
		public Single_table_insertContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_single_table_insert; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterSingle_table_insert(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitSingle_table_insert(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitSingle_table_insert(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Single_table_insertContext single_table_insert() throws RecognitionException {
		Single_table_insertContext _localctx = new Single_table_insertContext(_ctx, getState());
		enterRule(_localctx, 774, RULE_single_table_insert);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6551);
			insert_into_clause();
			setState(6557);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case VALUES:
				{
				setState(6552);
				values_clause();
				setState(6554);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==RETURN || _la==RETURNING) {
					{
					setState(6553);
					static_returning_clause();
					}
				}

				}
				break;
			case SELECT:
			case WITH:
			case LEFT_PAREN:
				{
				setState(6556);
				select_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(6560);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOG) {
				{
				setState(6559);
				error_logging_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Multi_table_insertContext extends ParserRuleContext {
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public TerminalNode ALL() { return getToken(PLSQLParser.ALL, 0); }
		public Conditional_insert_clauseContext conditional_insert_clause() {
			return getRuleContext(Conditional_insert_clauseContext.class,0);
		}
		public List<Multi_table_elementContext> multi_table_element() {
			return getRuleContexts(Multi_table_elementContext.class);
		}
		public Multi_table_elementContext multi_table_element(int i) {
			return getRuleContext(Multi_table_elementContext.class,i);
		}
		public Multi_table_insertContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multi_table_insert; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterMulti_table_insert(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitMulti_table_insert(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitMulti_table_insert(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Multi_table_insertContext multi_table_insert() throws RecognitionException {
		Multi_table_insertContext _localctx = new Multi_table_insertContext(_ctx, getState());
		enterRule(_localctx, 776, RULE_multi_table_insert);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6569);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,953,_ctx) ) {
			case 1:
				{
				setState(6562);
				match(ALL);
				setState(6564); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(6563);
					multi_table_element();
					}
					}
					setState(6566); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==INTO );
				}
				break;
			case 2:
				{
				setState(6568);
				conditional_insert_clause();
				}
				break;
			}
			setState(6571);
			select_statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Multi_table_elementContext extends ParserRuleContext {
		public Insert_into_clauseContext insert_into_clause() {
			return getRuleContext(Insert_into_clauseContext.class,0);
		}
		public Values_clauseContext values_clause() {
			return getRuleContext(Values_clauseContext.class,0);
		}
		public Error_logging_clauseContext error_logging_clause() {
			return getRuleContext(Error_logging_clauseContext.class,0);
		}
		public Multi_table_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multi_table_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterMulti_table_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitMulti_table_element(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitMulti_table_element(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Multi_table_elementContext multi_table_element() throws RecognitionException {
		Multi_table_elementContext _localctx = new Multi_table_elementContext(_ctx, getState());
		enterRule(_localctx, 778, RULE_multi_table_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6573);
			insert_into_clause();
			setState(6575);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==VALUES) {
				{
				setState(6574);
				values_clause();
				}
			}

			setState(6578);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOG) {
				{
				setState(6577);
				error_logging_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Conditional_insert_clauseContext extends ParserRuleContext {
		public List<Conditional_insert_when_partContext> conditional_insert_when_part() {
			return getRuleContexts(Conditional_insert_when_partContext.class);
		}
		public Conditional_insert_when_partContext conditional_insert_when_part(int i) {
			return getRuleContext(Conditional_insert_when_partContext.class,i);
		}
		public Conditional_insert_else_partContext conditional_insert_else_part() {
			return getRuleContext(Conditional_insert_else_partContext.class,0);
		}
		public TerminalNode ALL() { return getToken(PLSQLParser.ALL, 0); }
		public TerminalNode FIRST() { return getToken(PLSQLParser.FIRST, 0); }
		public Conditional_insert_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_conditional_insert_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterConditional_insert_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitConditional_insert_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitConditional_insert_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Conditional_insert_clauseContext conditional_insert_clause() throws RecognitionException {
		Conditional_insert_clauseContext _localctx = new Conditional_insert_clauseContext(_ctx, getState());
		enterRule(_localctx, 780, RULE_conditional_insert_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6581);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALL || _la==FIRST) {
				{
				setState(6580);
				_la = _input.LA(1);
				if ( !(_la==ALL || _la==FIRST) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(6584); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(6583);
				conditional_insert_when_part();
				}
				}
				setState(6586); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==WHEN );
			setState(6589);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ELSE) {
				{
				setState(6588);
				conditional_insert_else_part();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Conditional_insert_when_partContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(PLSQLParser.WHEN, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public TerminalNode THEN() { return getToken(PLSQLParser.THEN, 0); }
		public List<Multi_table_elementContext> multi_table_element() {
			return getRuleContexts(Multi_table_elementContext.class);
		}
		public Multi_table_elementContext multi_table_element(int i) {
			return getRuleContext(Multi_table_elementContext.class,i);
		}
		public Conditional_insert_when_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_conditional_insert_when_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterConditional_insert_when_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitConditional_insert_when_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitConditional_insert_when_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Conditional_insert_when_partContext conditional_insert_when_part() throws RecognitionException {
		Conditional_insert_when_partContext _localctx = new Conditional_insert_when_partContext(_ctx, getState());
		enterRule(_localctx, 782, RULE_conditional_insert_when_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6591);
			match(WHEN);
			setState(6592);
			condition();
			setState(6593);
			match(THEN);
			setState(6595); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(6594);
				multi_table_element();
				}
				}
				setState(6597); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==INTO );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Conditional_insert_else_partContext extends ParserRuleContext {
		public TerminalNode ELSE() { return getToken(PLSQLParser.ELSE, 0); }
		public List<Multi_table_elementContext> multi_table_element() {
			return getRuleContexts(Multi_table_elementContext.class);
		}
		public Multi_table_elementContext multi_table_element(int i) {
			return getRuleContext(Multi_table_elementContext.class,i);
		}
		public Conditional_insert_else_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_conditional_insert_else_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterConditional_insert_else_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitConditional_insert_else_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitConditional_insert_else_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Conditional_insert_else_partContext conditional_insert_else_part() throws RecognitionException {
		Conditional_insert_else_partContext _localctx = new Conditional_insert_else_partContext(_ctx, getState());
		enterRule(_localctx, 784, RULE_conditional_insert_else_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6599);
			match(ELSE);
			setState(6601); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(6600);
				multi_table_element();
				}
				}
				setState(6603); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==INTO );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Insert_into_clauseContext extends ParserRuleContext {
		public TerminalNode INTO() { return getToken(PLSQLParser.INTO, 0); }
		public General_table_refContext general_table_ref() {
			return getRuleContext(General_table_refContext.class,0);
		}
		public Paren_column_listContext paren_column_list() {
			return getRuleContext(Paren_column_listContext.class,0);
		}
		public Insert_into_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insert_into_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterInsert_into_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitInsert_into_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitInsert_into_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Insert_into_clauseContext insert_into_clause() throws RecognitionException {
		Insert_into_clauseContext _localctx = new Insert_into_clauseContext(_ctx, getState());
		enterRule(_localctx, 786, RULE_insert_into_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6605);
			match(INTO);
			setState(6606);
			general_table_ref();
			setState(6608);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,961,_ctx) ) {
			case 1:
				{
				setState(6607);
				paren_column_list();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Values_clauseContext extends ParserRuleContext {
		public TerminalNode VALUES() { return getToken(PLSQLParser.VALUES, 0); }
		public List<Expression_listContext> expression_list() {
			return getRuleContexts(Expression_listContext.class);
		}
		public Expression_listContext expression_list(int i) {
			return getRuleContext(Expression_listContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLSQLParser.COMMA, i);
		}
		public Values_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_values_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterValues_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitValues_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitValues_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Values_clauseContext values_clause() throws RecognitionException {
		Values_clauseContext _localctx = new Values_clauseContext(_ctx, getState());
		enterRule(_localctx, 788, RULE_values_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6610);
			match(VALUES);
			setState(6611);
			expression_list();
			setState(6616);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(6612);
				match(COMMA);
				setState(6613);
				expression_list();
				}
				}
				setState(6618);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Merge_statementContext extends ParserRuleContext {
		public TerminalNode MERGE() { return getToken(PLSQLParser.MERGE, 0); }
		public TerminalNode INTO() { return getToken(PLSQLParser.INTO, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public TerminalNode USING() { return getToken(PLSQLParser.USING, 0); }
		public Selected_tableviewContext selected_tableview() {
			return getRuleContext(Selected_tableviewContext.class,0);
		}
		public TerminalNode ON() { return getToken(PLSQLParser.ON, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PLSQLParser.LEFT_PAREN, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PLSQLParser.RIGHT_PAREN, 0); }
		public Table_aliasContext table_alias() {
			return getRuleContext(Table_aliasContext.class,0);
		}
		public Merge_update_clauseContext merge_update_clause() {
			return getRuleContext(Merge_update_clauseContext.class,0);
		}
		public Merge_insert_clauseContext merge_insert_clause() {
			return getRuleContext(Merge_insert_clauseContext.class,0);
		}
		public Error_logging_clauseContext error_logging_clause() {
			return getRuleContext(Error_logging_clauseContext.class,0);
		}
		public Merge_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_merge_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterMerge_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitMerge_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitMerge_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Merge_statementContext merge_statement() throws RecognitionException {
		Merge_statementContext _localctx = new Merge_statementContext(_ctx, getState());
		enterRule(_localctx, 790, RULE_merge_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6619);
			match(MERGE);
			setState(6620);
			match(INTO);
			setState(6621);
			tableview_name();
			setState(6623);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << AS) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BUILD) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (CHR - 65)) | (1L << (CLOB - 65)) | (1L << (CLOSE - 65)) | (1L << (CLUSTER - 65)) | (1L << (COALESCE - 65)) | (1L << (COLLECT - 65)) | (1L << (COLUMNS - 65)) | (1L << (COMMENT - 65)) | (1L << (COMMIT - 65)) | (1L << (COMMITTED - 65)) | (1L << (COMPATIBILITY - 65)) | (1L << (COMPILE - 65)) | (1L << (COMPLETE - 65)) | (1L << (COMPOUND - 65)) | (1L << (CONCAT - 65)) | (1L << (CONSTANT - 65)) | (1L << (CONSTRAINT - 65)) | (1L << (CONSTRAINTS - 65)) | (1L << (CONSTRUCTOR - 65)) | (1L << (CONTENT - 65)) | (1L << (CONTEXT - 65)) | (1L << (CONTINUE - 65)) | (1L << (CONVERT - 65)) | (1L << (CORRUPT_XID - 65)) | (1L << (CORRUPT_XID_ALL - 65)) | (1L << (COST - 65)) | (1L << (COUNT - 65)) | (1L << (CROSS - 65)) | (1L << (CUBE - 65)) | (1L << (CURRENT_USER - 65)) | (1L << (CURSOR - 65)) | (1L << (CUSTOMDATUM - 65)) | (1L << (CYCLE - 65)) | (1L << (DATA - 65)) | (1L << (DATABASE - 65)) | (1L << (DATE - 65)) | (1L << (DAY - 65)) | (1L << (DB_ROLE_CHANGE - 65)) | (1L << (DBTIMEZONE - 65)) | (1L << (DDL - 65)) | (1L << (DEBUG - 65)) | (1L << (DEC - 65)) | (1L << (DECIMAL - 65)) | (1L << (DECODE - 65)) | (1L << (DECOMPOSE - 65)) | (1L << (DECREMENT - 65)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DEMAND - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (EDITIONING - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENFORCED - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FAST - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)) | (1L << (FOLLOWING - 129)) | (1L << (FOLLOWS - 129)) | (1L << (FORALL - 129)) | (1L << (FORCE - 129)))) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & ((1L << (FULL - 197)) | (1L << (FUNCTION - 197)) | (1L << (GROUPING - 197)) | (1L << (HASH - 197)) | (1L << (HIDE - 197)) | (1L << (HOUR - 197)) | (1L << (IGNORE - 197)) | (1L << (IMMEDIATE - 197)) | (1L << (INCLUDE - 197)) | (1L << (INCLUDING - 197)) | (1L << (INCREMENT - 197)) | (1L << (INDENT - 197)) | (1L << (INDEXED - 197)) | (1L << (INDICATOR - 197)) | (1L << (INDICES - 197)) | (1L << (INFINITE - 197)) | (1L << (INLINE - 197)) | (1L << (INNER - 197)) | (1L << (INOUT - 197)) | (1L << (INSTANTIABLE - 197)) | (1L << (INSTEAD - 197)) | (1L << (INT - 197)) | (1L << (INTEGER - 197)) | (1L << (INTERVAL - 197)) | (1L << (INVALIDATE - 197)) | (1L << (ISOLATION - 197)) | (1L << (ITERATE - 197)) | (1L << (JAVA - 197)) | (1L << (JOIN - 197)) | (1L << (KEEP - 197)) | (1L << (LANGUAGE - 197)) | (1L << (LAST - 197)) | (1L << (LAST_VALUE - 197)) | (1L << (LEADING - 197)) | (1L << (LEFT - 197)) | (1L << (LEVEL - 197)))) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & ((1L << (LIBRARY - 261)) | (1L << (LIKE2 - 261)) | (1L << (LIKE4 - 261)) | (1L << (LIKEC - 261)) | (1L << (LIMIT - 261)) | (1L << (LIST - 261)) | (1L << (LOCAL - 261)) | (1L << (LOCKED - 261)) | (1L << (LOG - 261)) | (1L << (LOGOFF - 261)) | (1L << (LOGON - 261)) | (1L << (LONG - 261)) | (1L << (LOOP - 261)) | (1L << (MAIN - 261)) | (1L << (MAP - 261)) | (1L << (MASTER - 261)) | (1L << (MATCHED - 261)) | (1L << (MAXVALUE - 261)) | (1L << (MEASURES - 261)) | (1L << (MEMBER - 261)) | (1L << (MERGE - 261)) | (1L << (MINUTE - 261)) | (1L << (MINVALUE - 261)) | (1L << (MLSLABEL - 261)) | (1L << (MODEL - 261)) | (1L << (MODIFY - 261)) | (1L << (MONTH - 261)) | (1L << (MULTISET - 261)) | (1L << (NAME - 261)) | (1L << (NAN - 261)) | (1L << (NATURAL - 261)) | (1L << (NATURALN - 261)) | (1L << (NAV - 261)) | (1L << (NCHAR - 261)) | (1L << (NCHAR_CS - 261)) | (1L << (NCLOB - 261)) | (1L << (NESTED - 261)) | (1L << (NEVER - 261)) | (1L << (NEW - 261)) | (1L << (NO - 261)) | (1L << (NOAUDIT - 261)) | (1L << (NOCOPY - 261)) | (1L << (NOCYCLE - 261)) | (1L << (NOENTITYESCAPING - 261)))) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & ((1L << (NONE - 329)) | (1L << (NOSCHEMACHECK - 329)) | (1L << (NVL - 329)) | (1L << (NULLS - 329)) | (1L << (NUMBER - 329)) | (1L << (NUMERIC - 329)) | (1L << (NVARCHAR2 - 329)) | (1L << (MATERIALIZED - 329)) | (1L << (OBJECT - 329)) | (1L << (OFF - 329)) | (1L << (OID - 329)) | (1L << (OLD - 329)) | (1L << (ONLY - 329)) | (1L << (OPEN - 329)) | (1L << (ORADATA - 329)) | (1L << (ORDINALITY - 329)) | (1L << (OSERROR - 329)) | (1L << (OUT - 329)) | (1L << (OUTER - 329)) | (1L << (OVER - 329)) | (1L << (OVERRIDING - 329)) | (1L << (PACKAGE - 329)) | (1L << (PARALLEL_ENABLE - 329)) | (1L << (PARAMETERS - 329)) | (1L << (PARENT - 329)) | (1L << (PARTITION - 329)) | (1L << (PASSING - 329)) | (1L << (PATH - 329)) | (1L << (PIPELINED - 329)) | (1L << (PLAN - 329)) | (1L << (PLS_INTEGER - 329)) | (1L << (POSITIVE - 329)) | (1L << (POSITIVEN - 329)) | (1L << (PRAGMA - 329)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (PREBUILT - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)) | (1L << (PRESENT - 393)) | (1L << (PUBLIC - 393)) | (1L << (RAISE - 393)) | (1L << (RANGE - 393)) | (1L << (RAW - 393)) | (1L << (READ - 393)) | (1L << (REAL - 393)) | (1L << (RECORD - 393)) | (1L << (REDUCED - 393)) | (1L << (REF - 393)) | (1L << (REFERENCE - 393)) | (1L << (REFERENCING - 393)) | (1L << (REFRESH - 393)) | (1L << (REJECT - 393)) | (1L << (RELIES_ON - 393)) | (1L << (RENAME - 393)) | (1L << (REPLACE - 393)) | (1L << (RESPECT - 393)) | (1L << (RESTRICT_REFERENCES - 393)) | (1L << (RESULT - 393)) | (1L << (RESULT_CACHE - 393)) | (1L << (RETURN - 393)) | (1L << (RETURNING - 393)) | (1L << (REUSE - 393)) | (1L << (REVERSE - 393)) | (1L << (REWRITE - 393)) | (1L << (RIGHT - 393)) | (1L << (ROLE - 393)) | (1L << (ROLLBACK - 393)) | (1L << (ROLLUP - 393)) | (1L << (ROW - 393)) | (1L << (ROWID - 393)) | (1L << (ROWS - 393)) | (1L << (RULES - 393)) | (1L << (SAMPLE - 393)) | (1L << (SAVE - 393)) | (1L << (SAVEPOINT - 393)) | (1L << (SCHEMA - 393)) | (1L << (SCHEMACHECK - 393)) | (1L << (SCN - 393)) | (1L << (SECOND - 393)))) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & ((1L << (SEED - 458)) | (1L << (SEGMENT - 458)) | (1L << (SELF - 458)) | (1L << (SEQUENTIAL - 458)) | (1L << (SERIALIZABLE - 458)) | (1L << (SERIALLY_REUSABLE - 458)) | (1L << (SERVERERROR - 458)) | (1L << (SESSIONTIMEZONE - 458)) | (1L << (SET - 458)) | (1L << (SETS - 458)) | (1L << (SETTINGS - 458)) | (1L << (SHOW - 458)) | (1L << (SHUTDOWN - 458)) | (1L << (SIBLINGS - 458)) | (1L << (SIGNTYPE - 458)) | (1L << (SIMPLE_INTEGER - 458)) | (1L << (SINGLE - 458)) | (1L << (SIZE - 458)) | (1L << (SKIP_ - 458)) | (1L << (SMALLINT - 458)) | (1L << (SNAPSHOT - 458)) | (1L << (SOME - 458)) | (1L << (SPECIFICATION - 458)) | (1L << (SQLDATA - 458)) | (1L << (SQLERROR - 458)) | (1L << (STANDALONE - 458)) | (1L << (STARTUP - 458)) | (1L << (STATEMENT - 458)) | (1L << (STATEMENT_ID - 458)) | (1L << (STATIC - 458)) | (1L << (STATISTICS - 458)) | (1L << (STRING - 458)) | (1L << (SUBMULTISET - 458)) | (1L << (SUBPARTITION - 458)) | (1L << (SUBSTITUTABLE - 458)) | (1L << (SUBSTRING - 458)) | (1L << (SUBTYPE - 458)) | (1L << (SUCCESS - 458)) | (1L << (SUSPEND - 458)) | (1L << (TABLES - 458)) | (1L << (TIME - 458)) | (1L << (TIMESTAMP - 458)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 458)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 458)) | (1L << (TIMESTAMP_UNCONSTRAINED - 458)))) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & ((1L << (TIMEZONE_ABBR - 522)) | (1L << (TIMEZONE_HOUR - 522)) | (1L << (TIMEZONE_MINUTE - 522)) | (1L << (TIMEZONE_REGION - 522)) | (1L << (TO_CHAR - 522)) | (1L << (TO_DATE - 522)) | (1L << (TRAILING - 522)) | (1L << (TRANSACTION - 522)) | (1L << (TRANSLATE - 522)) | (1L << (TREAT - 522)) | (1L << (TRIGGER - 522)) | (1L << (TRIM - 522)) | (1L << (TRUNCATE - 522)) | (1L << (TRUSTED - 522)) | (1L << (TYPE - 522)) | (1L << (UNBOUNDED - 522)) | (1L << (UNDER - 522)) | (1L << (UNLIMITED - 522)) | (1L << (UNTIL - 522)) | (1L << (UPDATED - 522)) | (1L << (UPSERT - 522)) | (1L << (UROWID - 522)) | (1L << (USE - 522)) | (1L << (VALIDATE - 522)) | (1L << (VALUE - 522)) | (1L << (VARCHAR - 522)) | (1L << (VARCHAR2 - 522)) | (1L << (VARIABLE - 522)) | (1L << (VARRAY - 522)) | (1L << (VARYING - 522)) | (1L << (VERBOSE - 522)) | (1L << (VERSION - 522)) | (1L << (VERSIONS - 522)) | (1L << (VIEW - 522)) | (1L << (WAIT - 522)) | (1L << (WARNING - 522)) | (1L << (WELLFORMED - 522)) | (1L << (WHENEVER - 522)) | (1L << (WHILE - 522)) | (1L << (WITHOUT - 522)) | (1L << (WITHIN - 522)) | (1L << (WORK - 522)) | (1L << (WRITE - 522)) | (1L << (XML - 522)) | (1L << (XMLAGG - 522)) | (1L << (XMLATTRIBUTES - 522)))) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & ((1L << (XMLCAST - 586)) | (1L << (XMLCOLATTVAL - 586)) | (1L << (XMLELEMENT - 586)) | (1L << (XMLEXISTS - 586)) | (1L << (XMLFOREST - 586)) | (1L << (XMLNAMESPACES - 586)) | (1L << (XMLPARSE - 586)) | (1L << (XMLPI - 586)) | (1L << (XMLQUERY - 586)) | (1L << (XMLROOT - 586)) | (1L << (XMLSERIALIZE - 586)) | (1L << (XMLTABLE - 586)) | (1L << (YEAR - 586)) | (1L << (YES - 586)) | (1L << (YMINTERVAL_UNCONSTRAINED - 586)) | (1L << (ZONE - 586)) | (1L << (PREDICTION - 586)) | (1L << (PREDICTION_BOUNDS - 586)) | (1L << (PREDICTION_COST - 586)) | (1L << (PREDICTION_DETAILS - 586)) | (1L << (PREDICTION_PROBABILITY - 586)) | (1L << (PREDICTION_SET - 586)) | (1L << (CUME_DIST - 586)) | (1L << (DENSE_RANK - 586)) | (1L << (LISTAGG - 586)) | (1L << (PERCENT_RANK - 586)) | (1L << (PERCENTILE_CONT - 586)) | (1L << (PERCENTILE_DISC - 586)) | (1L << (RANK - 586)) | (1L << (AVG - 586)) | (1L << (CORR - 586)) | (1L << (LAG - 586)) | (1L << (LEAD - 586)) | (1L << (MAX - 586)) | (1L << (MEDIAN - 586)) | (1L << (MIN - 586)) | (1L << (NTILE - 586)) | (1L << (RATIO_TO_REPORT - 586)) | (1L << (ROW_NUMBER - 586)) | (1L << (SUM - 586)) | (1L << (VARIANCE - 586)) | (1L << (REGR_ - 586)) | (1L << (STDDEV - 586)) | (1L << (VAR_ - 586)) | (1L << (COVAR_ - 586)) | (1L << (NATIONAL_CHAR_STRING_LIT - 586)) | (1L << (CHAR_STRING - 586)) | (1L << (DELIMITED_ID - 586)))) != 0) || _la==REGULAR_ID) {
				{
				setState(6622);
				table_alias();
				}
			}

			setState(6625);
			match(USING);
			setState(6626);
			selected_tableview();
			setState(6627);
			match(ON);
			setState(6628);
			match(LEFT_PAREN);
			setState(6629);
			condition();
			setState(6630);
			match(RIGHT_PAREN);
			setState(6639);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,966,_ctx) ) {
			case 1:
				{
				setState(6631);
				merge_update_clause();
				setState(6633);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WHEN) {
					{
					setState(6632);
					merge_insert_clause();
					}
				}

				}
				break;
			case 2:
				{
				setState(6635);
				merge_insert_clause();
				setState(6637);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WHEN) {
					{
					setState(6636);
					merge_update_clause();
					}
				}

				}
				break;
			}
			setState(6642);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOG) {
				{
				setState(6641);
				error_logging_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Merge_update_clauseContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(PLSQLParser.WHEN, 0); }
		public TerminalNode MATCHED() { return getToken(PLSQLParser.MATCHED, 0); }
		public TerminalNode THEN() { return getToken(PLSQLParser.THEN, 0); }
		public TerminalNode UPDATE() { return getToken(PLSQLParser.UPDATE, 0); }
		public TerminalNode SET() { return getToken(PLSQLParser.SET, 0); }
		public List<Merge_elementContext> merge_element() {
			return getRuleContexts(Merge_elementContext.class);
		}
		public Merge_elementContext merge_element(int i) {
			return getRuleContext(Merge_elementContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLSQLParser.COMMA, i);
		}
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public Merge_update_delete_partContext merge_update_delete_part() {
			return getRuleContext(Merge_update_delete_partContext.class,0);
		}
		public Merge_update_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_merge_update_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterMerge_update_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitMerge_update_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitMerge_update_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Merge_update_clauseContext merge_update_clause() throws RecognitionException {
		Merge_update_clauseContext _localctx = new Merge_update_clauseContext(_ctx, getState());
		enterRule(_localctx, 792, RULE_merge_update_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6644);
			match(WHEN);
			setState(6645);
			match(MATCHED);
			setState(6646);
			match(THEN);
			setState(6647);
			match(UPDATE);
			setState(6648);
			match(SET);
			setState(6649);
			merge_element();
			setState(6654);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(6650);
				match(COMMA);
				setState(6651);
				merge_element();
				}
				}
				setState(6656);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(6658);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(6657);
				where_clause();
				}
			}

			setState(6661);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,970,_ctx) ) {
			case 1:
				{
				setState(6660);
				merge_update_delete_part();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Merge_elementContext extends ParserRuleContext {
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public TerminalNode EQUALS_OP() { return getToken(PLSQLParser.EQUALS_OP, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Merge_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_merge_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterMerge_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitMerge_element(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitMerge_element(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Merge_elementContext merge_element() throws RecognitionException {
		Merge_elementContext _localctx = new Merge_elementContext(_ctx, getState());
		enterRule(_localctx, 794, RULE_merge_element);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6663);
			column_name();
			setState(6664);
			match(EQUALS_OP);
			setState(6665);
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Merge_update_delete_partContext extends ParserRuleContext {
		public TerminalNode DELETE() { return getToken(PLSQLParser.DELETE, 0); }
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public Merge_update_delete_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_merge_update_delete_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterMerge_update_delete_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitMerge_update_delete_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitMerge_update_delete_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Merge_update_delete_partContext merge_update_delete_part() throws RecognitionException {
		Merge_update_delete_partContext _localctx = new Merge_update_delete_partContext(_ctx, getState());
		enterRule(_localctx, 796, RULE_merge_update_delete_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6667);
			match(DELETE);
			setState(6668);
			where_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Merge_insert_clauseContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(PLSQLParser.WHEN, 0); }
		public TerminalNode NOT() { return getToken(PLSQLParser.NOT, 0); }
		public TerminalNode MATCHED() { return getToken(PLSQLParser.MATCHED, 0); }
		public TerminalNode THEN() { return getToken(PLSQLParser.THEN, 0); }
		public TerminalNode INSERT() { return getToken(PLSQLParser.INSERT, 0); }
		public TerminalNode VALUES() { return getToken(PLSQLParser.VALUES, 0); }
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public Paren_column_listContext paren_column_list() {
			return getRuleContext(Paren_column_listContext.class,0);
		}
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public Merge_insert_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_merge_insert_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterMerge_insert_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitMerge_insert_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitMerge_insert_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Merge_insert_clauseContext merge_insert_clause() throws RecognitionException {
		Merge_insert_clauseContext _localctx = new Merge_insert_clauseContext(_ctx, getState());
		enterRule(_localctx, 798, RULE_merge_insert_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6670);
			match(WHEN);
			setState(6671);
			match(NOT);
			setState(6672);
			match(MATCHED);
			setState(6673);
			match(THEN);
			setState(6674);
			match(INSERT);
			setState(6676);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(6675);
				paren_column_list();
				}
			}

			setState(6678);
			match(VALUES);
			setState(6679);
			expression_list();
			setState(6681);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(6680);
				where_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Selected_tableviewContext extends ParserRuleContext {
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(PLSQLParser.LEFT_PAREN, 0); }
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PLSQLParser.RIGHT_PAREN, 0); }
		public Table_aliasContext table_alias() {
			return getRuleContext(Table_aliasContext.class,0);
		}
		public Selected_tableviewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selected_tableview; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterSelected_tableview(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitSelected_tableview(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitSelected_tableview(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Selected_tableviewContext selected_tableview() throws RecognitionException {
		Selected_tableviewContext _localctx = new Selected_tableviewContext(_ctx, getState());
		enterRule(_localctx, 800, RULE_selected_tableview);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6688);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BUILD:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPLETE:
			case COMPOUND:
			case CONCAT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECODE:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DEMAND:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case EDITIONING:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENFORCED:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FAST:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LIST:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MASTER:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEVER:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NVL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case MATERIALIZED:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PREBUILT:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PUBLIC:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REDUCED:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REFRESH:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case REWRITE:
			case RIGHT:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SIZE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBSTRING:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TABLES:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TO_CHAR:
			case TO_DATE:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TRUSTED:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERBOSE:
			case VERSION:
			case VERSIONS:
			case VIEW:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHOUT:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case REGULAR_ID:
				{
				setState(6683);
				tableview_name();
				}
				break;
			case LEFT_PAREN:
				{
				setState(6684);
				match(LEFT_PAREN);
				setState(6685);
				select_statement();
				setState(6686);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(6691);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << AS) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BUILD) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (CHR - 65)) | (1L << (CLOB - 65)) | (1L << (CLOSE - 65)) | (1L << (CLUSTER - 65)) | (1L << (COALESCE - 65)) | (1L << (COLLECT - 65)) | (1L << (COLUMNS - 65)) | (1L << (COMMENT - 65)) | (1L << (COMMIT - 65)) | (1L << (COMMITTED - 65)) | (1L << (COMPATIBILITY - 65)) | (1L << (COMPILE - 65)) | (1L << (COMPLETE - 65)) | (1L << (COMPOUND - 65)) | (1L << (CONCAT - 65)) | (1L << (CONSTANT - 65)) | (1L << (CONSTRAINT - 65)) | (1L << (CONSTRAINTS - 65)) | (1L << (CONSTRUCTOR - 65)) | (1L << (CONTENT - 65)) | (1L << (CONTEXT - 65)) | (1L << (CONTINUE - 65)) | (1L << (CONVERT - 65)) | (1L << (CORRUPT_XID - 65)) | (1L << (CORRUPT_XID_ALL - 65)) | (1L << (COST - 65)) | (1L << (COUNT - 65)) | (1L << (CROSS - 65)) | (1L << (CUBE - 65)) | (1L << (CURRENT_USER - 65)) | (1L << (CURSOR - 65)) | (1L << (CUSTOMDATUM - 65)) | (1L << (CYCLE - 65)) | (1L << (DATA - 65)) | (1L << (DATABASE - 65)) | (1L << (DATE - 65)) | (1L << (DAY - 65)) | (1L << (DB_ROLE_CHANGE - 65)) | (1L << (DBTIMEZONE - 65)) | (1L << (DDL - 65)) | (1L << (DEBUG - 65)) | (1L << (DEC - 65)) | (1L << (DECIMAL - 65)) | (1L << (DECODE - 65)) | (1L << (DECOMPOSE - 65)) | (1L << (DECREMENT - 65)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DEMAND - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (EDITIONING - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENFORCED - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FAST - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)) | (1L << (FOLLOWING - 129)) | (1L << (FOLLOWS - 129)) | (1L << (FORALL - 129)) | (1L << (FORCE - 129)))) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & ((1L << (FULL - 197)) | (1L << (FUNCTION - 197)) | (1L << (GROUPING - 197)) | (1L << (HASH - 197)) | (1L << (HIDE - 197)) | (1L << (HOUR - 197)) | (1L << (IGNORE - 197)) | (1L << (IMMEDIATE - 197)) | (1L << (INCLUDE - 197)) | (1L << (INCLUDING - 197)) | (1L << (INCREMENT - 197)) | (1L << (INDENT - 197)) | (1L << (INDEXED - 197)) | (1L << (INDICATOR - 197)) | (1L << (INDICES - 197)) | (1L << (INFINITE - 197)) | (1L << (INLINE - 197)) | (1L << (INNER - 197)) | (1L << (INOUT - 197)) | (1L << (INSTANTIABLE - 197)) | (1L << (INSTEAD - 197)) | (1L << (INT - 197)) | (1L << (INTEGER - 197)) | (1L << (INTERVAL - 197)) | (1L << (INVALIDATE - 197)) | (1L << (ISOLATION - 197)) | (1L << (ITERATE - 197)) | (1L << (JAVA - 197)) | (1L << (JOIN - 197)) | (1L << (KEEP - 197)) | (1L << (LANGUAGE - 197)) | (1L << (LAST - 197)) | (1L << (LAST_VALUE - 197)) | (1L << (LEADING - 197)) | (1L << (LEFT - 197)) | (1L << (LEVEL - 197)))) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & ((1L << (LIBRARY - 261)) | (1L << (LIKE2 - 261)) | (1L << (LIKE4 - 261)) | (1L << (LIKEC - 261)) | (1L << (LIMIT - 261)) | (1L << (LIST - 261)) | (1L << (LOCAL - 261)) | (1L << (LOCKED - 261)) | (1L << (LOG - 261)) | (1L << (LOGOFF - 261)) | (1L << (LOGON - 261)) | (1L << (LONG - 261)) | (1L << (LOOP - 261)) | (1L << (MAIN - 261)) | (1L << (MAP - 261)) | (1L << (MASTER - 261)) | (1L << (MATCHED - 261)) | (1L << (MAXVALUE - 261)) | (1L << (MEASURES - 261)) | (1L << (MEMBER - 261)) | (1L << (MERGE - 261)) | (1L << (MINUTE - 261)) | (1L << (MINVALUE - 261)) | (1L << (MLSLABEL - 261)) | (1L << (MODEL - 261)) | (1L << (MODIFY - 261)) | (1L << (MONTH - 261)) | (1L << (MULTISET - 261)) | (1L << (NAME - 261)) | (1L << (NAN - 261)) | (1L << (NATURAL - 261)) | (1L << (NATURALN - 261)) | (1L << (NAV - 261)) | (1L << (NCHAR - 261)) | (1L << (NCHAR_CS - 261)) | (1L << (NCLOB - 261)) | (1L << (NESTED - 261)) | (1L << (NEVER - 261)) | (1L << (NEW - 261)) | (1L << (NO - 261)) | (1L << (NOAUDIT - 261)) | (1L << (NOCOPY - 261)) | (1L << (NOCYCLE - 261)) | (1L << (NOENTITYESCAPING - 261)))) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & ((1L << (NONE - 329)) | (1L << (NOSCHEMACHECK - 329)) | (1L << (NVL - 329)) | (1L << (NULLS - 329)) | (1L << (NUMBER - 329)) | (1L << (NUMERIC - 329)) | (1L << (NVARCHAR2 - 329)) | (1L << (MATERIALIZED - 329)) | (1L << (OBJECT - 329)) | (1L << (OFF - 329)) | (1L << (OID - 329)) | (1L << (OLD - 329)) | (1L << (ONLY - 329)) | (1L << (OPEN - 329)) | (1L << (ORADATA - 329)) | (1L << (ORDINALITY - 329)) | (1L << (OSERROR - 329)) | (1L << (OUT - 329)) | (1L << (OUTER - 329)) | (1L << (OVER - 329)) | (1L << (OVERRIDING - 329)) | (1L << (PACKAGE - 329)) | (1L << (PARALLEL_ENABLE - 329)) | (1L << (PARAMETERS - 329)) | (1L << (PARENT - 329)) | (1L << (PARTITION - 329)) | (1L << (PASSING - 329)) | (1L << (PATH - 329)) | (1L << (PIPELINED - 329)) | (1L << (PLAN - 329)) | (1L << (PLS_INTEGER - 329)) | (1L << (POSITIVE - 329)) | (1L << (POSITIVEN - 329)) | (1L << (PRAGMA - 329)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (PREBUILT - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)) | (1L << (PRESENT - 393)) | (1L << (PUBLIC - 393)) | (1L << (RAISE - 393)) | (1L << (RANGE - 393)) | (1L << (RAW - 393)) | (1L << (READ - 393)) | (1L << (REAL - 393)) | (1L << (RECORD - 393)) | (1L << (REDUCED - 393)) | (1L << (REF - 393)) | (1L << (REFERENCE - 393)) | (1L << (REFERENCING - 393)) | (1L << (REFRESH - 393)) | (1L << (REJECT - 393)) | (1L << (RELIES_ON - 393)) | (1L << (RENAME - 393)) | (1L << (REPLACE - 393)) | (1L << (RESPECT - 393)) | (1L << (RESTRICT_REFERENCES - 393)) | (1L << (RESULT - 393)) | (1L << (RESULT_CACHE - 393)) | (1L << (RETURN - 393)) | (1L << (RETURNING - 393)) | (1L << (REUSE - 393)) | (1L << (REVERSE - 393)) | (1L << (REWRITE - 393)) | (1L << (RIGHT - 393)) | (1L << (ROLE - 393)) | (1L << (ROLLBACK - 393)) | (1L << (ROLLUP - 393)) | (1L << (ROW - 393)) | (1L << (ROWID - 393)) | (1L << (ROWS - 393)) | (1L << (RULES - 393)) | (1L << (SAMPLE - 393)) | (1L << (SAVE - 393)) | (1L << (SAVEPOINT - 393)) | (1L << (SCHEMA - 393)) | (1L << (SCHEMACHECK - 393)) | (1L << (SCN - 393)) | (1L << (SECOND - 393)))) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & ((1L << (SEED - 458)) | (1L << (SEGMENT - 458)) | (1L << (SELF - 458)) | (1L << (SEQUENTIAL - 458)) | (1L << (SERIALIZABLE - 458)) | (1L << (SERIALLY_REUSABLE - 458)) | (1L << (SERVERERROR - 458)) | (1L << (SESSIONTIMEZONE - 458)) | (1L << (SET - 458)) | (1L << (SETS - 458)) | (1L << (SETTINGS - 458)) | (1L << (SHOW - 458)) | (1L << (SHUTDOWN - 458)) | (1L << (SIBLINGS - 458)) | (1L << (SIGNTYPE - 458)) | (1L << (SIMPLE_INTEGER - 458)) | (1L << (SINGLE - 458)) | (1L << (SIZE - 458)) | (1L << (SKIP_ - 458)) | (1L << (SMALLINT - 458)) | (1L << (SNAPSHOT - 458)) | (1L << (SOME - 458)) | (1L << (SPECIFICATION - 458)) | (1L << (SQLDATA - 458)) | (1L << (SQLERROR - 458)) | (1L << (STANDALONE - 458)) | (1L << (STARTUP - 458)) | (1L << (STATEMENT - 458)) | (1L << (STATEMENT_ID - 458)) | (1L << (STATIC - 458)) | (1L << (STATISTICS - 458)) | (1L << (STRING - 458)) | (1L << (SUBMULTISET - 458)) | (1L << (SUBPARTITION - 458)) | (1L << (SUBSTITUTABLE - 458)) | (1L << (SUBSTRING - 458)) | (1L << (SUBTYPE - 458)) | (1L << (SUCCESS - 458)) | (1L << (SUSPEND - 458)) | (1L << (TABLES - 458)) | (1L << (TIME - 458)) | (1L << (TIMESTAMP - 458)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 458)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 458)) | (1L << (TIMESTAMP_UNCONSTRAINED - 458)))) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & ((1L << (TIMEZONE_ABBR - 522)) | (1L << (TIMEZONE_HOUR - 522)) | (1L << (TIMEZONE_MINUTE - 522)) | (1L << (TIMEZONE_REGION - 522)) | (1L << (TO_CHAR - 522)) | (1L << (TO_DATE - 522)) | (1L << (TRAILING - 522)) | (1L << (TRANSACTION - 522)) | (1L << (TRANSLATE - 522)) | (1L << (TREAT - 522)) | (1L << (TRIGGER - 522)) | (1L << (TRIM - 522)) | (1L << (TRUNCATE - 522)) | (1L << (TRUSTED - 522)) | (1L << (TYPE - 522)) | (1L << (UNBOUNDED - 522)) | (1L << (UNDER - 522)) | (1L << (UNLIMITED - 522)) | (1L << (UNTIL - 522)) | (1L << (UPDATED - 522)) | (1L << (UPSERT - 522)) | (1L << (UROWID - 522)) | (1L << (USE - 522)) | (1L << (VALIDATE - 522)) | (1L << (VALUE - 522)) | (1L << (VARCHAR - 522)) | (1L << (VARCHAR2 - 522)) | (1L << (VARIABLE - 522)) | (1L << (VARRAY - 522)) | (1L << (VARYING - 522)) | (1L << (VERBOSE - 522)) | (1L << (VERSION - 522)) | (1L << (VERSIONS - 522)) | (1L << (VIEW - 522)) | (1L << (WAIT - 522)) | (1L << (WARNING - 522)) | (1L << (WELLFORMED - 522)) | (1L << (WHENEVER - 522)) | (1L << (WHILE - 522)) | (1L << (WITHOUT - 522)) | (1L << (WITHIN - 522)) | (1L << (WORK - 522)) | (1L << (WRITE - 522)) | (1L << (XML - 522)) | (1L << (XMLAGG - 522)) | (1L << (XMLATTRIBUTES - 522)))) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & ((1L << (XMLCAST - 586)) | (1L << (XMLCOLATTVAL - 586)) | (1L << (XMLELEMENT - 586)) | (1L << (XMLEXISTS - 586)) | (1L << (XMLFOREST - 586)) | (1L << (XMLNAMESPACES - 586)) | (1L << (XMLPARSE - 586)) | (1L << (XMLPI - 586)) | (1L << (XMLQUERY - 586)) | (1L << (XMLROOT - 586)) | (1L << (XMLSERIALIZE - 586)) | (1L << (XMLTABLE - 586)) | (1L << (YEAR - 586)) | (1L << (YES - 586)) | (1L << (YMINTERVAL_UNCONSTRAINED - 586)) | (1L << (ZONE - 586)) | (1L << (PREDICTION - 586)) | (1L << (PREDICTION_BOUNDS - 586)) | (1L << (PREDICTION_COST - 586)) | (1L << (PREDICTION_DETAILS - 586)) | (1L << (PREDICTION_PROBABILITY - 586)) | (1L << (PREDICTION_SET - 586)) | (1L << (CUME_DIST - 586)) | (1L << (DENSE_RANK - 586)) | (1L << (LISTAGG - 586)) | (1L << (PERCENT_RANK - 586)) | (1L << (PERCENTILE_CONT - 586)) | (1L << (PERCENTILE_DISC - 586)) | (1L << (RANK - 586)) | (1L << (AVG - 586)) | (1L << (CORR - 586)) | (1L << (LAG - 586)) | (1L << (LEAD - 586)) | (1L << (MAX - 586)) | (1L << (MEDIAN - 586)) | (1L << (MIN - 586)) | (1L << (NTILE - 586)) | (1L << (RATIO_TO_REPORT - 586)) | (1L << (ROW_NUMBER - 586)) | (1L << (SUM - 586)) | (1L << (VARIANCE - 586)) | (1L << (REGR_ - 586)) | (1L << (STDDEV - 586)) | (1L << (VAR_ - 586)) | (1L << (COVAR_ - 586)) | (1L << (NATIONAL_CHAR_STRING_LIT - 586)) | (1L << (CHAR_STRING - 586)) | (1L << (DELIMITED_ID - 586)))) != 0) || _la==REGULAR_ID) {
				{
				setState(6690);
				table_alias();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Lock_table_statementContext extends ParserRuleContext {
		public TerminalNode LOCK() { return getToken(PLSQLParser.LOCK, 0); }
		public TerminalNode TABLE() { return getToken(PLSQLParser.TABLE, 0); }
		public List<Lock_table_elementContext> lock_table_element() {
			return getRuleContexts(Lock_table_elementContext.class);
		}
		public Lock_table_elementContext lock_table_element(int i) {
			return getRuleContext(Lock_table_elementContext.class,i);
		}
		public TerminalNode IN() { return getToken(PLSQLParser.IN, 0); }
		public Lock_modeContext lock_mode() {
			return getRuleContext(Lock_modeContext.class,0);
		}
		public TerminalNode MODE() { return getToken(PLSQLParser.MODE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PLSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLSQLParser.COMMA, i);
		}
		public Wait_nowait_partContext wait_nowait_part() {
			return getRuleContext(Wait_nowait_partContext.class,0);
		}
		public Lock_table_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lock_table_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterLock_table_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitLock_table_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitLock_table_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Lock_table_statementContext lock_table_statement() throws RecognitionException {
		Lock_table_statementContext _localctx = new Lock_table_statementContext(_ctx, getState());
		enterRule(_localctx, 802, RULE_lock_table_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6693);
			match(LOCK);
			setState(6694);
			match(TABLE);
			setState(6695);
			lock_table_element();
			setState(6700);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(6696);
				match(COMMA);
				setState(6697);
				lock_table_element();
				}
				}
				setState(6702);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(6703);
			match(IN);
			setState(6704);
			lock_mode();
			setState(6705);
			match(MODE);
			setState(6707);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOWAIT || _la==WAIT) {
				{
				setState(6706);
				wait_nowait_part();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Wait_nowait_partContext extends ParserRuleContext {
		public TerminalNode WAIT() { return getToken(PLSQLParser.WAIT, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode NOWAIT() { return getToken(PLSQLParser.NOWAIT, 0); }
		public Wait_nowait_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_wait_nowait_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterWait_nowait_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitWait_nowait_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitWait_nowait_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Wait_nowait_partContext wait_nowait_part() throws RecognitionException {
		Wait_nowait_partContext _localctx = new Wait_nowait_partContext(_ctx, getState());
		enterRule(_localctx, 804, RULE_wait_nowait_part);
		try {
			setState(6712);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WAIT:
				enterOuterAlt(_localctx, 1);
				{
				setState(6709);
				match(WAIT);
				setState(6710);
				expression(0);
				}
				break;
			case NOWAIT:
				enterOuterAlt(_localctx, 2);
				{
				setState(6711);
				match(NOWAIT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Lock_table_elementContext extends ParserRuleContext {
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public Partition_extension_clauseContext partition_extension_clause() {
			return getRuleContext(Partition_extension_clauseContext.class,0);
		}
		public Lock_table_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lock_table_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterLock_table_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitLock_table_element(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitLock_table_element(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Lock_table_elementContext lock_table_element() throws RecognitionException {
		Lock_table_elementContext _localctx = new Lock_table_elementContext(_ctx, getState());
		enterRule(_localctx, 806, RULE_lock_table_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6714);
			tableview_name();
			setState(6716);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION || _la==SUBPARTITION) {
				{
				setState(6715);
				partition_extension_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Lock_modeContext extends ParserRuleContext {
		public TerminalNode ROW() { return getToken(PLSQLParser.ROW, 0); }
		public TerminalNode SHARE() { return getToken(PLSQLParser.SHARE, 0); }
		public TerminalNode EXCLUSIVE() { return getToken(PLSQLParser.EXCLUSIVE, 0); }
		public TerminalNode UPDATE() { return getToken(PLSQLParser.UPDATE, 0); }
		public Lock_modeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lock_mode; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterLock_mode(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitLock_mode(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitLock_mode(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Lock_modeContext lock_mode() throws RecognitionException {
		Lock_modeContext _localctx = new Lock_modeContext(_ctx, getState());
		enterRule(_localctx, 808, RULE_lock_mode);
		int _la;
		try {
			setState(6730);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,980,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6718);
				match(ROW);
				setState(6719);
				match(SHARE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6720);
				match(ROW);
				setState(6721);
				match(EXCLUSIVE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6722);
				match(SHARE);
				setState(6724);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==UPDATE) {
					{
					setState(6723);
					match(UPDATE);
					}
				}

				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6726);
				match(SHARE);
				setState(6727);
				match(ROW);
				setState(6728);
				match(EXCLUSIVE);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6729);
				match(EXCLUSIVE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class General_table_refContext extends ParserRuleContext {
		public Dml_table_expression_clauseContext dml_table_expression_clause() {
			return getRuleContext(Dml_table_expression_clauseContext.class,0);
		}
		public TerminalNode ONLY() { return getToken(PLSQLParser.ONLY, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PLSQLParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PLSQLParser.RIGHT_PAREN, 0); }
		public Table_aliasContext table_alias() {
			return getRuleContext(Table_aliasContext.class,0);
		}
		public General_table_refContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_general_table_ref; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterGeneral_table_ref(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitGeneral_table_ref(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitGeneral_table_ref(this);
			else return visitor.visitChildren(this);
		}
	}

	public final General_table_refContext general_table_ref() throws RecognitionException {
		General_table_refContext _localctx = new General_table_refContext(_ctx, getState());
		enterRule(_localctx, 810, RULE_general_table_ref);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6738);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,981,_ctx) ) {
			case 1:
				{
				setState(6732);
				dml_table_expression_clause();
				}
				break;
			case 2:
				{
				setState(6733);
				match(ONLY);
				setState(6734);
				match(LEFT_PAREN);
				setState(6735);
				dml_table_expression_clause();
				setState(6736);
				match(RIGHT_PAREN);
				}
				break;
			}
			setState(6741);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,982,_ctx) ) {
			case 1:
				{
				setState(6740);
				table_alias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Static_returning_clauseContext extends ParserRuleContext {
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public Into_clauseContext into_clause() {
			return getRuleContext(Into_clauseContext.class,0);
		}
		public TerminalNode RETURNING() { return getToken(PLSQLParser.RETURNING, 0); }
		public TerminalNode RETURN() { return getToken(PLSQLParser.RETURN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PLSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLSQLParser.COMMA, i);
		}
		public Static_returning_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_static_returning_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterStatic_returning_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitStatic_returning_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitStatic_returning_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Static_returning_clauseContext static_returning_clause() throws RecognitionException {
		Static_returning_clauseContext _localctx = new Static_returning_clauseContext(_ctx, getState());
		enterRule(_localctx, 812, RULE_static_returning_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6743);
			_la = _input.LA(1);
			if ( !(_la==RETURN || _la==RETURNING) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(6744);
			expression(0);
			setState(6749);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(6745);
				match(COMMA);
				setState(6746);
				expression(0);
				}
				}
				setState(6751);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(6752);
			into_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Error_logging_clauseContext extends ParserRuleContext {
		public TerminalNode LOG() { return getToken(PLSQLParser.LOG, 0); }
		public TerminalNode ERRORS() { return getToken(PLSQLParser.ERRORS, 0); }
		public Error_logging_into_partContext error_logging_into_part() {
			return getRuleContext(Error_logging_into_partContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Error_logging_reject_partContext error_logging_reject_part() {
			return getRuleContext(Error_logging_reject_partContext.class,0);
		}
		public Error_logging_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_error_logging_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterError_logging_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitError_logging_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitError_logging_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Error_logging_clauseContext error_logging_clause() throws RecognitionException {
		Error_logging_clauseContext _localctx = new Error_logging_clauseContext(_ctx, getState());
		enterRule(_localctx, 814, RULE_error_logging_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6754);
			match(LOG);
			setState(6755);
			match(ERRORS);
			setState(6757);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,984,_ctx) ) {
			case 1:
				{
				setState(6756);
				error_logging_into_part();
				}
				break;
			}
			setState(6760);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,985,_ctx) ) {
			case 1:
				{
				setState(6759);
				expression(0);
				}
				break;
			}
			setState(6763);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==REJECT) {
				{
				setState(6762);
				error_logging_reject_part();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Error_logging_into_partContext extends ParserRuleContext {
		public TerminalNode INTO() { return getToken(PLSQLParser.INTO, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public Error_logging_into_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_error_logging_into_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterError_logging_into_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitError_logging_into_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitError_logging_into_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Error_logging_into_partContext error_logging_into_part() throws RecognitionException {
		Error_logging_into_partContext _localctx = new Error_logging_into_partContext(_ctx, getState());
		enterRule(_localctx, 816, RULE_error_logging_into_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6765);
			match(INTO);
			setState(6766);
			tableview_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Error_logging_reject_partContext extends ParserRuleContext {
		public TerminalNode REJECT() { return getToken(PLSQLParser.REJECT, 0); }
		public TerminalNode LIMIT() { return getToken(PLSQLParser.LIMIT, 0); }
		public TerminalNode UNLIMITED() { return getToken(PLSQLParser.UNLIMITED, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Error_logging_reject_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_error_logging_reject_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterError_logging_reject_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitError_logging_reject_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitError_logging_reject_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Error_logging_reject_partContext error_logging_reject_part() throws RecognitionException {
		Error_logging_reject_partContext _localctx = new Error_logging_reject_partContext(_ctx, getState());
		enterRule(_localctx, 818, RULE_error_logging_reject_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6768);
			match(REJECT);
			setState(6769);
			match(LIMIT);
			setState(6772);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,987,_ctx) ) {
			case 1:
				{
				setState(6770);
				match(UNLIMITED);
				}
				break;
			case 2:
				{
				setState(6771);
				expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dml_table_expression_clauseContext extends ParserRuleContext {
		public Table_collection_expressionContext table_collection_expression() {
			return getRuleContext(Table_collection_expressionContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(PLSQLParser.LEFT_PAREN, 0); }
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PLSQLParser.RIGHT_PAREN, 0); }
		public Subquery_restriction_clauseContext subquery_restriction_clause() {
			return getRuleContext(Subquery_restriction_clauseContext.class,0);
		}
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public Sample_clauseContext sample_clause() {
			return getRuleContext(Sample_clauseContext.class,0);
		}
		public Dml_table_expression_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dml_table_expression_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterDml_table_expression_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitDml_table_expression_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitDml_table_expression_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Dml_table_expression_clauseContext dml_table_expression_clause() throws RecognitionException {
		Dml_table_expression_clauseContext _localctx = new Dml_table_expression_clauseContext(_ctx, getState());
		enterRule(_localctx, 820, RULE_dml_table_expression_clause);
		int _la;
		try {
			setState(6786);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TABLE:
			case THE:
				enterOuterAlt(_localctx, 1);
				{
				setState(6774);
				table_collection_expression();
				}
				break;
			case LEFT_PAREN:
				enterOuterAlt(_localctx, 2);
				{
				setState(6775);
				match(LEFT_PAREN);
				setState(6776);
				select_statement();
				setState(6778);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(6777);
					subquery_restriction_clause();
					}
				}

				setState(6780);
				match(RIGHT_PAREN);
				}
				break;
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BUILD:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPLETE:
			case COMPOUND:
			case CONCAT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECODE:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DEMAND:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case EDITIONING:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENFORCED:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FAST:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LIST:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MASTER:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEVER:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NVL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case MATERIALIZED:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PREBUILT:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PUBLIC:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REDUCED:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REFRESH:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case REWRITE:
			case RIGHT:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SIZE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBSTRING:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TABLES:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TO_CHAR:
			case TO_DATE:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TRUSTED:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERBOSE:
			case VERSION:
			case VERSIONS:
			case VIEW:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHOUT:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 3);
				{
				setState(6782);
				tableview_name();
				setState(6784);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,989,_ctx) ) {
				case 1:
					{
					setState(6783);
					sample_clause();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_collection_expressionContext extends ParserRuleContext {
		public TerminalNode TABLE() { return getToken(PLSQLParser.TABLE, 0); }
		public TerminalNode THE() { return getToken(PLSQLParser.THE, 0); }
		public List<TerminalNode> LEFT_PAREN() { return getTokens(PLSQLParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(PLSQLParser.LEFT_PAREN, i);
		}
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(PLSQLParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(PLSQLParser.RIGHT_PAREN, i);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode PLUS_SIGN() { return getToken(PLSQLParser.PLUS_SIGN, 0); }
		public Table_collection_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_collection_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterTable_collection_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitTable_collection_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitTable_collection_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_collection_expressionContext table_collection_expression() throws RecognitionException {
		Table_collection_expressionContext _localctx = new Table_collection_expressionContext(_ctx, getState());
		enterRule(_localctx, 822, RULE_table_collection_expression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6788);
			_la = _input.LA(1);
			if ( !(_la==TABLE || _la==THE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(6801);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,992,_ctx) ) {
			case 1:
				{
				setState(6789);
				match(LEFT_PAREN);
				setState(6790);
				subquery(0);
				setState(6791);
				match(RIGHT_PAREN);
				}
				break;
			case 2:
				{
				setState(6793);
				match(LEFT_PAREN);
				setState(6794);
				expression(0);
				setState(6795);
				match(RIGHT_PAREN);
				setState(6799);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,991,_ctx) ) {
				case 1:
					{
					setState(6796);
					match(LEFT_PAREN);
					setState(6797);
					match(PLUS_SIGN);
					setState(6798);
					match(RIGHT_PAREN);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Subquery_restriction_clauseContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(PLSQLParser.WITH, 0); }
		public TerminalNode READ() { return getToken(PLSQLParser.READ, 0); }
		public TerminalNode ONLY() { return getToken(PLSQLParser.ONLY, 0); }
		public TerminalNode CHECK() { return getToken(PLSQLParser.CHECK, 0); }
		public TerminalNode OPTION() { return getToken(PLSQLParser.OPTION, 0); }
		public TerminalNode CONSTRAINT() { return getToken(PLSQLParser.CONSTRAINT, 0); }
		public Constraint_nameContext constraint_name() {
			return getRuleContext(Constraint_nameContext.class,0);
		}
		public Subquery_restriction_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subquery_restriction_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterSubquery_restriction_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitSubquery_restriction_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitSubquery_restriction_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Subquery_restriction_clauseContext subquery_restriction_clause() throws RecognitionException {
		Subquery_restriction_clauseContext _localctx = new Subquery_restriction_clauseContext(_ctx, getState());
		enterRule(_localctx, 824, RULE_subquery_restriction_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6803);
			match(WITH);
			setState(6812);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case READ:
				{
				setState(6804);
				match(READ);
				setState(6805);
				match(ONLY);
				}
				break;
			case CHECK:
				{
				setState(6806);
				match(CHECK);
				setState(6807);
				match(OPTION);
				setState(6810);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(6808);
					match(CONSTRAINT);
					setState(6809);
					constraint_name();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sample_clauseContext extends ParserRuleContext {
		public TerminalNode SAMPLE() { return getToken(PLSQLParser.SAMPLE, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PLSQLParser.LEFT_PAREN, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PLSQLParser.RIGHT_PAREN, 0); }
		public TerminalNode BLOCK() { return getToken(PLSQLParser.BLOCK, 0); }
		public TerminalNode COMMA() { return getToken(PLSQLParser.COMMA, 0); }
		public Seed_partContext seed_part() {
			return getRuleContext(Seed_partContext.class,0);
		}
		public Sample_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sample_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterSample_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitSample_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitSample_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sample_clauseContext sample_clause() throws RecognitionException {
		Sample_clauseContext _localctx = new Sample_clauseContext(_ctx, getState());
		enterRule(_localctx, 826, RULE_sample_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6814);
			match(SAMPLE);
			setState(6816);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==BLOCK) {
				{
				setState(6815);
				match(BLOCK);
				}
			}

			setState(6818);
			match(LEFT_PAREN);
			setState(6819);
			expression(0);
			setState(6822);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(6820);
				match(COMMA);
				setState(6821);
				expression(0);
				}
			}

			setState(6824);
			match(RIGHT_PAREN);
			setState(6826);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,997,_ctx) ) {
			case 1:
				{
				setState(6825);
				seed_part();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Seed_partContext extends ParserRuleContext {
		public TerminalNode SEED() { return getToken(PLSQLParser.SEED, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PLSQLParser.LEFT_PAREN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PLSQLParser.RIGHT_PAREN, 0); }
		public Seed_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_seed_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterSeed_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitSeed_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitSeed_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Seed_partContext seed_part() throws RecognitionException {
		Seed_partContext _localctx = new Seed_partContext(_ctx, getState());
		enterRule(_localctx, 828, RULE_seed_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6828);
			match(SEED);
			setState(6829);
			match(LEFT_PAREN);
			setState(6830);
			expression(0);
			setState(6831);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cursor_expressionContext extends ParserRuleContext {
		public TerminalNode CURSOR() { return getToken(PLSQLParser.CURSOR, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PLSQLParser.LEFT_PAREN, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PLSQLParser.RIGHT_PAREN, 0); }
		public Cursor_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursor_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterCursor_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitCursor_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitCursor_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cursor_expressionContext cursor_expression() throws RecognitionException {
		Cursor_expressionContext _localctx = new Cursor_expressionContext(_ctx, getState());
		enterRule(_localctx, 830, RULE_cursor_expression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6833);
			match(CURSOR);
			setState(6834);
			match(LEFT_PAREN);
			setState(6835);
			subquery(0);
			setState(6836);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Expression_listContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(PLSQLParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PLSQLParser.RIGHT_PAREN, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLSQLParser.COMMA, i);
		}
		public Expression_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expression_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterExpression_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitExpression_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitExpression_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Expression_listContext expression_list() throws RecognitionException {
		Expression_listContext _localctx = new Expression_listContext(_ctx, getState());
		enterRule(_localctx, 832, RULE_expression_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6838);
			match(LEFT_PAREN);
			setState(6840);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BUILD) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (CHR - 65)) | (1L << (CLOB - 65)) | (1L << (CLOSE - 65)) | (1L << (CLUSTER - 65)) | (1L << (COALESCE - 65)) | (1L << (COLLECT - 65)) | (1L << (COLUMNS - 65)) | (1L << (COMMENT - 65)) | (1L << (COMMIT - 65)) | (1L << (COMMITTED - 65)) | (1L << (COMPATIBILITY - 65)) | (1L << (COMPILE - 65)) | (1L << (COMPLETE - 65)) | (1L << (COMPOUND - 65)) | (1L << (CONCAT - 65)) | (1L << (CONNECT_BY_ROOT - 65)) | (1L << (CONSTANT - 65)) | (1L << (CONSTRAINT - 65)) | (1L << (CONSTRAINTS - 65)) | (1L << (CONSTRUCTOR - 65)) | (1L << (CONTENT - 65)) | (1L << (CONTEXT - 65)) | (1L << (CONTINUE - 65)) | (1L << (CONVERT - 65)) | (1L << (CORRUPT_XID - 65)) | (1L << (CORRUPT_XID_ALL - 65)) | (1L << (COST - 65)) | (1L << (COUNT - 65)) | (1L << (CROSS - 65)) | (1L << (CUBE - 65)) | (1L << (CURRENT_USER - 65)) | (1L << (CURSOR - 65)) | (1L << (CUSTOMDATUM - 65)) | (1L << (CYCLE - 65)) | (1L << (DATA - 65)) | (1L << (DATABASE - 65)) | (1L << (DATE - 65)) | (1L << (DAY - 65)) | (1L << (DB_ROLE_CHANGE - 65)) | (1L << (DBTIMEZONE - 65)) | (1L << (DDL - 65)) | (1L << (DEBUG - 65)) | (1L << (DEC - 65)) | (1L << (DECIMAL - 65)) | (1L << (DECODE - 65)) | (1L << (DECOMPOSE - 65)) | (1L << (DECREMENT - 65)) | (1L << (DEFAULT - 65)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DEMAND - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DISTINCT - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (EDITIONING - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENFORCED - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXISTS - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FALSE - 129)) | (1L << (FAST - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)) | (1L << (FOLLOWING - 129)) | (1L << (FOLLOWS - 129)) | (1L << (FORALL - 129)) | (1L << (FORCE - 129)))) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & ((1L << (FULL - 197)) | (1L << (FUNCTION - 197)) | (1L << (GROUPING - 197)) | (1L << (HASH - 197)) | (1L << (HIDE - 197)) | (1L << (HOUR - 197)) | (1L << (IGNORE - 197)) | (1L << (IMMEDIATE - 197)) | (1L << (INCLUDE - 197)) | (1L << (INCLUDING - 197)) | (1L << (INCREMENT - 197)) | (1L << (INDENT - 197)) | (1L << (INDEXED - 197)) | (1L << (INDICATOR - 197)) | (1L << (INDICES - 197)) | (1L << (INFINITE - 197)) | (1L << (INLINE - 197)) | (1L << (INNER - 197)) | (1L << (INOUT - 197)) | (1L << (INSTANTIABLE - 197)) | (1L << (INSTEAD - 197)) | (1L << (INT - 197)) | (1L << (INTEGER - 197)) | (1L << (INTERVAL - 197)) | (1L << (INVALIDATE - 197)) | (1L << (ISOLATION - 197)) | (1L << (ITERATE - 197)) | (1L << (JAVA - 197)) | (1L << (JOIN - 197)) | (1L << (KEEP - 197)) | (1L << (LANGUAGE - 197)) | (1L << (LAST - 197)) | (1L << (LAST_VALUE - 197)) | (1L << (LEADING - 197)) | (1L << (LEFT - 197)) | (1L << (LEVEL - 197)))) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & ((1L << (LIBRARY - 261)) | (1L << (LIKE2 - 261)) | (1L << (LIKE4 - 261)) | (1L << (LIKEC - 261)) | (1L << (LIMIT - 261)) | (1L << (LIST - 261)) | (1L << (LOCAL - 261)) | (1L << (LOCKED - 261)) | (1L << (LOG - 261)) | (1L << (LOGOFF - 261)) | (1L << (LOGON - 261)) | (1L << (LONG - 261)) | (1L << (LOOP - 261)) | (1L << (MAIN - 261)) | (1L << (MAP - 261)) | (1L << (MASTER - 261)) | (1L << (MATCHED - 261)) | (1L << (MAXVALUE - 261)) | (1L << (MEASURES - 261)) | (1L << (MEMBER - 261)) | (1L << (MERGE - 261)) | (1L << (MINUTE - 261)) | (1L << (MINVALUE - 261)) | (1L << (MLSLABEL - 261)) | (1L << (MODEL - 261)) | (1L << (MODIFY - 261)) | (1L << (MONTH - 261)) | (1L << (MULTISET - 261)) | (1L << (NAME - 261)) | (1L << (NAN - 261)) | (1L << (NATURAL - 261)) | (1L << (NATURALN - 261)) | (1L << (NAV - 261)) | (1L << (NCHAR - 261)) | (1L << (NCHAR_CS - 261)) | (1L << (NCLOB - 261)) | (1L << (NESTED - 261)) | (1L << (NEVER - 261)) | (1L << (NEW - 261)) | (1L << (NO - 261)) | (1L << (NOAUDIT - 261)) | (1L << (NOCOPY - 261)) | (1L << (NOCYCLE - 261)) | (1L << (NOENTITYESCAPING - 261)))) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & ((1L << (NONE - 329)) | (1L << (NOSCHEMACHECK - 329)) | (1L << (NOT - 329)) | (1L << (NVL - 329)) | (1L << (NULL - 329)) | (1L << (NULLS - 329)) | (1L << (NUMBER - 329)) | (1L << (NUMERIC - 329)) | (1L << (NVARCHAR2 - 329)) | (1L << (MATERIALIZED - 329)) | (1L << (OBJECT - 329)) | (1L << (OFF - 329)) | (1L << (OID - 329)) | (1L << (OLD - 329)) | (1L << (ONLY - 329)) | (1L << (OPEN - 329)) | (1L << (ORADATA - 329)) | (1L << (ORDINALITY - 329)) | (1L << (OSERROR - 329)) | (1L << (OUT - 329)) | (1L << (OUTER - 329)) | (1L << (OVER - 329)) | (1L << (OVERRIDING - 329)) | (1L << (PACKAGE - 329)) | (1L << (PARALLEL_ENABLE - 329)) | (1L << (PARAMETERS - 329)) | (1L << (PARENT - 329)) | (1L << (PARTITION - 329)) | (1L << (PASSING - 329)) | (1L << (PATH - 329)) | (1L << (PIPELINED - 329)) | (1L << (PLAN - 329)) | (1L << (PLS_INTEGER - 329)) | (1L << (POSITION - 329)) | (1L << (POSITIVE - 329)) | (1L << (POSITIVEN - 329)) | (1L << (PRAGMA - 329)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (PREBUILT - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)) | (1L << (PRESENT - 393)) | (1L << (PRIOR - 393)) | (1L << (PUBLIC - 393)) | (1L << (RAISE - 393)) | (1L << (RANGE - 393)) | (1L << (RAW - 393)) | (1L << (READ - 393)) | (1L << (REAL - 393)) | (1L << (RECORD - 393)) | (1L << (REDUCED - 393)) | (1L << (REF - 393)) | (1L << (REFERENCE - 393)) | (1L << (REFERENCING - 393)) | (1L << (REFRESH - 393)) | (1L << (REJECT - 393)) | (1L << (RELIES_ON - 393)) | (1L << (RENAME - 393)) | (1L << (REPLACE - 393)) | (1L << (RESPECT - 393)) | (1L << (RESTRICT_REFERENCES - 393)) | (1L << (RESULT - 393)) | (1L << (RESULT_CACHE - 393)) | (1L << (RETURN - 393)) | (1L << (RETURNING - 393)) | (1L << (REUSE - 393)) | (1L << (REVERSE - 393)) | (1L << (REWRITE - 393)) | (1L << (RIGHT - 393)) | (1L << (ROLE - 393)) | (1L << (ROLLBACK - 393)) | (1L << (ROLLUP - 393)) | (1L << (ROW - 393)) | (1L << (ROWID - 393)) | (1L << (ROWS - 393)) | (1L << (RULES - 393)) | (1L << (SAMPLE - 393)) | (1L << (SAVE - 393)) | (1L << (SAVEPOINT - 393)) | (1L << (SCHEMA - 393)) | (1L << (SCHEMACHECK - 393)) | (1L << (SCN - 393)) | (1L << (SECOND - 393)))) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & ((1L << (SEED - 458)) | (1L << (SEGMENT - 458)) | (1L << (SELECT - 458)) | (1L << (SELF - 458)) | (1L << (SEQUENTIAL - 458)) | (1L << (SERIALIZABLE - 458)) | (1L << (SERIALLY_REUSABLE - 458)) | (1L << (SERVERERROR - 458)) | (1L << (SESSIONTIMEZONE - 458)) | (1L << (SET - 458)) | (1L << (SETS - 458)) | (1L << (SETTINGS - 458)) | (1L << (SHOW - 458)) | (1L << (SHUTDOWN - 458)) | (1L << (SIBLINGS - 458)) | (1L << (SIGNTYPE - 458)) | (1L << (SIMPLE_INTEGER - 458)) | (1L << (SINGLE - 458)) | (1L << (SIZE - 458)) | (1L << (SKIP_ - 458)) | (1L << (SMALLINT - 458)) | (1L << (SNAPSHOT - 458)) | (1L << (SOME - 458)) | (1L << (SPECIFICATION - 458)) | (1L << (SQLDATA - 458)) | (1L << (SQLERROR - 458)) | (1L << (STANDALONE - 458)) | (1L << (STARTUP - 458)) | (1L << (STATEMENT - 458)) | (1L << (STATEMENT_ID - 458)) | (1L << (STATIC - 458)) | (1L << (STATISTICS - 458)) | (1L << (STRING - 458)) | (1L << (SUBMULTISET - 458)) | (1L << (SUBPARTITION - 458)) | (1L << (SUBSTITUTABLE - 458)) | (1L << (SUBSTRING - 458)) | (1L << (SUBTYPE - 458)) | (1L << (SUCCESS - 458)) | (1L << (SUSPEND - 458)) | (1L << (TABLES - 458)) | (1L << (TIME - 458)) | (1L << (TIMESTAMP - 458)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 458)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 458)) | (1L << (TIMESTAMP_UNCONSTRAINED - 458)))) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & ((1L << (TIMEZONE_ABBR - 522)) | (1L << (TIMEZONE_HOUR - 522)) | (1L << (TIMEZONE_MINUTE - 522)) | (1L << (TIMEZONE_REGION - 522)) | (1L << (TO_CHAR - 522)) | (1L << (TO_DATE - 522)) | (1L << (TRAILING - 522)) | (1L << (TRANSACTION - 522)) | (1L << (TRANSLATE - 522)) | (1L << (TREAT - 522)) | (1L << (TRIGGER - 522)) | (1L << (TRIM - 522)) | (1L << (TRUE - 522)) | (1L << (TRUNCATE - 522)) | (1L << (TRUSTED - 522)) | (1L << (TYPE - 522)) | (1L << (UNBOUNDED - 522)) | (1L << (UNDER - 522)) | (1L << (UNLIMITED - 522)) | (1L << (UNTIL - 522)) | (1L << (UPDATED - 522)) | (1L << (UPSERT - 522)) | (1L << (UROWID - 522)) | (1L << (USE - 522)) | (1L << (VALIDATE - 522)) | (1L << (VALUE - 522)) | (1L << (VARCHAR - 522)) | (1L << (VARCHAR2 - 522)) | (1L << (VARIABLE - 522)) | (1L << (VARRAY - 522)) | (1L << (VARYING - 522)) | (1L << (VERBOSE - 522)) | (1L << (VERSION - 522)) | (1L << (VERSIONS - 522)) | (1L << (VIEW - 522)) | (1L << (WAIT - 522)) | (1L << (WARNING - 522)) | (1L << (WELLFORMED - 522)) | (1L << (WHENEVER - 522)) | (1L << (WHILE - 522)) | (1L << (WITHOUT - 522)) | (1L << (WITHIN - 522)) | (1L << (WORK - 522)) | (1L << (WRITE - 522)) | (1L << (XML - 522)) | (1L << (XMLAGG - 522)) | (1L << (XMLATTRIBUTES - 522)))) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & ((1L << (XMLCAST - 586)) | (1L << (XMLCOLATTVAL - 586)) | (1L << (XMLELEMENT - 586)) | (1L << (XMLEXISTS - 586)) | (1L << (XMLFOREST - 586)) | (1L << (XMLNAMESPACES - 586)) | (1L << (XMLPARSE - 586)) | (1L << (XMLPI - 586)) | (1L << (XMLQUERY - 586)) | (1L << (XMLROOT - 586)) | (1L << (XMLSERIALIZE - 586)) | (1L << (XMLTABLE - 586)) | (1L << (YEAR - 586)) | (1L << (YES - 586)) | (1L << (YMINTERVAL_UNCONSTRAINED - 586)) | (1L << (ZONE - 586)) | (1L << (PREDICTION - 586)) | (1L << (PREDICTION_BOUNDS - 586)) | (1L << (PREDICTION_COST - 586)) | (1L << (PREDICTION_DETAILS - 586)) | (1L << (PREDICTION_PROBABILITY - 586)) | (1L << (PREDICTION_SET - 586)) | (1L << (CUME_DIST - 586)) | (1L << (DENSE_RANK - 586)) | (1L << (LISTAGG - 586)) | (1L << (PERCENT_RANK - 586)) | (1L << (PERCENTILE_CONT - 586)) | (1L << (PERCENTILE_DISC - 586)) | (1L << (RANK - 586)) | (1L << (AVG - 586)) | (1L << (CORR - 586)) | (1L << (LAG - 586)) | (1L << (LEAD - 586)) | (1L << (MAX - 586)) | (1L << (MEDIAN - 586)) | (1L << (MIN - 586)) | (1L << (NTILE - 586)) | (1L << (RATIO_TO_REPORT - 586)) | (1L << (ROW_NUMBER - 586)) | (1L << (SUM - 586)) | (1L << (VARIANCE - 586)) | (1L << (REGR_ - 586)) | (1L << (STDDEV - 586)) | (1L << (VAR_ - 586)) | (1L << (COVAR_ - 586)) | (1L << (NATIONAL_CHAR_STRING_LIT - 586)) | (1L << (UNSIGNED_INTEGER - 586)) | (1L << (APPROXIMATE_NUM_LIT - 586)) | (1L << (CHAR_STRING - 586)) | (1L << (DELIMITED_ID - 586)) | (1L << (LEFT_PAREN - 586)) | (1L << (PLUS_SIGN - 586)))) != 0) || ((((_la - 650)) & ~0x3f) == 0 && ((1L << (_la - 650)) & ((1L << (MINUS_SIGN - 650)) | (1L << (BINDVAR - 650)) | (1L << (COLON - 650)) | (1L << (REGULAR_ID - 650)))) != 0)) {
				{
				setState(6839);
				expression(0);
				}
			}

			setState(6846);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(6842);
				match(COMMA);
				setState(6843);
				expression(0);
				}
				}
				setState(6848);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(6849);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConditionContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public ConditionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_condition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterCondition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitCondition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitCondition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConditionContext condition() throws RecognitionException {
		ConditionContext _localctx = new ConditionContext(_ctx, getState());
		enterRule(_localctx, 834, RULE_condition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6851);
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExpressionContext extends ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expression; }
	 
		public ExpressionContext() { }
		public void copyFrom(ExpressionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class IgnoreExprContext extends ExpressionContext {
		public Binary_expressionContext binary_expression() {
			return getRuleContext(Binary_expressionContext.class,0);
		}
		public IgnoreExprContext(ExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterIgnoreExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitIgnoreExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitIgnoreExpr(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AndExprContext extends ExpressionContext {
		public ExpressionContext left;
		public Token op;
		public ExpressionContext right;
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode AND() { return getToken(PLSQLParser.AND, 0); }
		public AndExprContext(ExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterAndExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitAndExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitAndExpr(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class LikeExprContext extends ExpressionContext {
		public ExpressionContext left;
		public Like_typeContext op;
		public ExpressionContext expression;
		public List<ExpressionContext> right = new ArrayList<ExpressionContext>();
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public Like_typeContext like_type() {
			return getRuleContext(Like_typeContext.class,0);
		}
		public TerminalNode NOT() { return getToken(PLSQLParser.NOT, 0); }
		public TerminalNode ESCAPE() { return getToken(PLSQLParser.ESCAPE, 0); }
		public LikeExprContext(ExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterLikeExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitLikeExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitLikeExpr(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class RelExprContext extends ExpressionContext {
		public ExpressionContext left;
		public Relational_operatorContext op;
		public ExpressionContext right;
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public Relational_operatorContext relational_operator() {
			return getRuleContext(Relational_operatorContext.class,0);
		}
		public RelExprContext(ExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterRelExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitRelExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitRelExpr(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class MemberExprContext extends ExpressionContext {
		public ExpressionContext left;
		public Token op;
		public Binary_expressionContext right;
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Binary_expressionContext binary_expression() {
			return getRuleContext(Binary_expressionContext.class,0);
		}
		public TerminalNode MEMBER() { return getToken(PLSQLParser.MEMBER, 0); }
		public TerminalNode SUBMULTISET() { return getToken(PLSQLParser.SUBMULTISET, 0); }
		public TerminalNode OF() { return getToken(PLSQLParser.OF, 0); }
		public MemberExprContext(ExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterMemberExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitMemberExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitMemberExpr(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class BetweenExprContext extends ExpressionContext {
		public ExpressionContext left;
		public Token op;
		public ExpressionContext expression;
		public List<ExpressionContext> right = new ArrayList<ExpressionContext>();
		public TerminalNode AND() { return getToken(PLSQLParser.AND, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode BETWEEN() { return getToken(PLSQLParser.BETWEEN, 0); }
		public TerminalNode NOT() { return getToken(PLSQLParser.NOT, 0); }
		public BetweenExprContext(ExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterBetweenExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitBetweenExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitBetweenExpr(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CursorExprContext extends ExpressionContext {
		public Token op;
		public Cursor_partContext expr;
		public TerminalNode CURSOR() { return getToken(PLSQLParser.CURSOR, 0); }
		public Cursor_partContext cursor_part() {
			return getRuleContext(Cursor_partContext.class,0);
		}
		public CursorExprContext(ExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterCursorExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitCursorExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitCursorExpr(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class IsExprContext extends ExpressionContext {
		public ExpressionContext left;
		public Token op;
		public Is_partContext right;
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode IS() { return getToken(PLSQLParser.IS, 0); }
		public Is_partContext is_part() {
			return getRuleContext(Is_partContext.class,0);
		}
		public IsExprContext(ExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterIsExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitIsExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitIsExpr(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class NotExprContext extends ExpressionContext {
		public Token op;
		public ExpressionContext expr;
		public TerminalNode NOT() { return getToken(PLSQLParser.NOT, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public NotExprContext(ExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterNotExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitNotExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitNotExpr(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class InExprContext extends ExpressionContext {
		public ExpressionContext left;
		public Token op;
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode IN() { return getToken(PLSQLParser.IN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PLSQLParser.LEFT_PAREN, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PLSQLParser.RIGHT_PAREN, 0); }
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public TerminalNode NOT() { return getToken(PLSQLParser.NOT, 0); }
		public InExprContext(ExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterInExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitInExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitInExpr(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ParenExprContext extends ExpressionContext {
		public TerminalNode LEFT_PAREN() { return getToken(PLSQLParser.LEFT_PAREN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PLSQLParser.RIGHT_PAREN, 0); }
		public ParenExprContext(ExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterParenExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitParenExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitParenExpr(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class OrExprContext extends ExpressionContext {
		public ExpressionContext left;
		public Token op;
		public ExpressionContext right;
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode OR() { return getToken(PLSQLParser.OR, 0); }
		public OrExprContext(ExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterOrExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitOrExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitOrExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExpressionContext expression() throws RecognitionException {
		return expression(0);
	}

	private ExpressionContext expression(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		ExpressionContext _localctx = new ExpressionContext(_ctx, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 836;
		enterRecursionRule(_localctx, 836, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(6863);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1000,_ctx) ) {
			case 1:
				{
				_localctx = new CursorExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				setState(6854);
				((CursorExprContext)_localctx).op = match(CURSOR);
				setState(6855);
				((CursorExprContext)_localctx).expr = cursor_part();
				}
				break;
			case 2:
				{
				_localctx = new NotExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6856);
				((NotExprContext)_localctx).op = match(NOT);
				setState(6857);
				((NotExprContext)_localctx).expr = expression(5);
				}
				break;
			case 3:
				{
				_localctx = new IgnoreExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6858);
				binary_expression(0);
				}
				break;
			case 4:
				{
				_localctx = new ParenExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6859);
				match(LEFT_PAREN);
				setState(6860);
				expression(0);
				setState(6861);
				match(RIGHT_PAREN);
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(6917);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,1008,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(6915);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,1007,_ctx) ) {
					case 1:
						{
						_localctx = new BetweenExprContext(new ExpressionContext(_parentctx, _parentState));
						((BetweenExprContext)_localctx).left = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_expression);
						setState(6865);
						if (!(precpred(_ctx, 10))) throw new FailedPredicateException(this, "precpred(_ctx, 10)");
						setState(6867);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(6866);
							match(NOT);
							}
						}

						setState(6869);
						((BetweenExprContext)_localctx).op = match(BETWEEN);
						setState(6870);
						((BetweenExprContext)_localctx).expression = expression(0);
						((BetweenExprContext)_localctx).right.add(((BetweenExprContext)_localctx).expression);
						setState(6871);
						match(AND);
						setState(6872);
						((BetweenExprContext)_localctx).expression = expression(11);
						((BetweenExprContext)_localctx).right.add(((BetweenExprContext)_localctx).expression);
						}
						break;
					case 2:
						{
						_localctx = new RelExprContext(new ExpressionContext(_parentctx, _parentState));
						((RelExprContext)_localctx).left = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_expression);
						setState(6874);
						if (!(precpred(_ctx, 8))) throw new FailedPredicateException(this, "precpred(_ctx, 8)");
						setState(6875);
						((RelExprContext)_localctx).op = relational_operator();
						setState(6876);
						((RelExprContext)_localctx).right = expression(9);
						}
						break;
					case 3:
						{
						_localctx = new AndExprContext(new ExpressionContext(_parentctx, _parentState));
						((AndExprContext)_localctx).left = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_expression);
						setState(6878);
						if (!(precpred(_ctx, 4))) throw new FailedPredicateException(this, "precpred(_ctx, 4)");
						setState(6879);
						((AndExprContext)_localctx).op = match(AND);
						setState(6880);
						((AndExprContext)_localctx).right = expression(5);
						}
						break;
					case 4:
						{
						_localctx = new OrExprContext(new ExpressionContext(_parentctx, _parentState));
						((OrExprContext)_localctx).left = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_expression);
						setState(6881);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(6882);
						((OrExprContext)_localctx).op = match(OR);
						setState(6883);
						((OrExprContext)_localctx).right = expression(4);
						}
						break;
					case 5:
						{
						_localctx = new IsExprContext(new ExpressionContext(_parentctx, _parentState));
						((IsExprContext)_localctx).left = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_expression);
						setState(6884);
						if (!(precpred(_ctx, 12))) throw new FailedPredicateException(this, "precpred(_ctx, 12)");
						setState(6885);
						((IsExprContext)_localctx).op = match(IS);
						setState(6886);
						((IsExprContext)_localctx).right = is_part();
						}
						break;
					case 6:
						{
						_localctx = new InExprContext(new ExpressionContext(_parentctx, _parentState));
						((InExprContext)_localctx).left = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_expression);
						setState(6887);
						if (!(precpred(_ctx, 11))) throw new FailedPredicateException(this, "precpred(_ctx, 11)");
						setState(6889);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(6888);
							match(NOT);
							}
						}

						setState(6891);
						((InExprContext)_localctx).op = match(IN);
						setState(6897);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,1003,_ctx) ) {
						case 1:
							{
							setState(6892);
							match(LEFT_PAREN);
							setState(6893);
							subquery(0);
							setState(6894);
							match(RIGHT_PAREN);
							}
							break;
						case 2:
							{
							setState(6896);
							expression_list();
							}
							break;
						}
						}
						break;
					case 7:
						{
						_localctx = new LikeExprContext(new ExpressionContext(_parentctx, _parentState));
						((LikeExprContext)_localctx).left = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_expression);
						setState(6899);
						if (!(precpred(_ctx, 9))) throw new FailedPredicateException(this, "precpred(_ctx, 9)");
						setState(6901);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(6900);
							match(NOT);
							}
						}

						setState(6903);
						((LikeExprContext)_localctx).op = like_type();
						setState(6904);
						((LikeExprContext)_localctx).expression = expression(0);
						((LikeExprContext)_localctx).right.add(((LikeExprContext)_localctx).expression);
						setState(6907);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,1005,_ctx) ) {
						case 1:
							{
							setState(6905);
							match(ESCAPE);
							setState(6906);
							((LikeExprContext)_localctx).expression = expression(0);
							((LikeExprContext)_localctx).right.add(((LikeExprContext)_localctx).expression);
							}
							break;
						}
						}
						break;
					case 8:
						{
						_localctx = new MemberExprContext(new ExpressionContext(_parentctx, _parentState));
						((MemberExprContext)_localctx).left = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_expression);
						setState(6909);
						if (!(precpred(_ctx, 7))) throw new FailedPredicateException(this, "precpred(_ctx, 7)");
						setState(6910);
						((MemberExprContext)_localctx).op = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==MEMBER || _la==SUBMULTISET) ) {
							((MemberExprContext)_localctx).op = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(6912);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==OF) {
							{
							setState(6911);
							match(OF);
							}
						}

						setState(6914);
						((MemberExprContext)_localctx).right = binary_expression(0);
						}
						break;
					}
					} 
				}
				setState(6919);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1008,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Is_partContext extends ParserRuleContext {
		public TerminalNode NULL() { return getToken(PLSQLParser.NULL, 0); }
		public TerminalNode NAN() { return getToken(PLSQLParser.NAN, 0); }
		public TerminalNode PRESENT() { return getToken(PLSQLParser.PRESENT, 0); }
		public TerminalNode INFINITE() { return getToken(PLSQLParser.INFINITE, 0); }
		public TerminalNode A_LETTER() { return getToken(PLSQLParser.A_LETTER, 0); }
		public TerminalNode SET() { return getToken(PLSQLParser.SET, 0); }
		public TerminalNode EMPTY() { return getToken(PLSQLParser.EMPTY, 0); }
		public TerminalNode OF() { return getToken(PLSQLParser.OF, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PLSQLParser.LEFT_PAREN, 0); }
		public List<Type_specContext> type_spec() {
			return getRuleContexts(Type_specContext.class);
		}
		public Type_specContext type_spec(int i) {
			return getRuleContext(Type_specContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PLSQLParser.RIGHT_PAREN, 0); }
		public TerminalNode NOT() { return getToken(PLSQLParser.NOT, 0); }
		public TerminalNode TYPE() { return getToken(PLSQLParser.TYPE, 0); }
		public TerminalNode ONLY() { return getToken(PLSQLParser.ONLY, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PLSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLSQLParser.COMMA, i);
		}
		public Is_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_is_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterIs_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitIs_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitIs_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Is_partContext is_part() throws RecognitionException {
		Is_partContext _localctx = new Is_partContext(_ctx, getState());
		enterRule(_localctx, 838, RULE_is_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6921);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(6920);
				match(NOT);
				}
			}

			setState(6948);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NULL:
				{
				setState(6923);
				match(NULL);
				}
				break;
			case NAN:
				{
				setState(6924);
				match(NAN);
				}
				break;
			case PRESENT:
				{
				setState(6925);
				match(PRESENT);
				}
				break;
			case INFINITE:
				{
				setState(6926);
				match(INFINITE);
				}
				break;
			case A_LETTER:
				{
				setState(6927);
				match(A_LETTER);
				setState(6928);
				match(SET);
				}
				break;
			case EMPTY:
				{
				setState(6929);
				match(EMPTY);
				}
				break;
			case OF:
				{
				setState(6930);
				match(OF);
				setState(6932);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TYPE) {
					{
					setState(6931);
					match(TYPE);
					}
				}

				setState(6934);
				match(LEFT_PAREN);
				setState(6936);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1011,_ctx) ) {
				case 1:
					{
					setState(6935);
					match(ONLY);
					}
					break;
				}
				setState(6938);
				type_spec();
				setState(6943);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6939);
					match(COMMA);
					setState(6940);
					type_spec();
					}
					}
					setState(6945);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(6946);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cursor_partContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(PLSQLParser.LEFT_PAREN, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PLSQLParser.RIGHT_PAREN, 0); }
		public Cursor_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursor_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterCursor_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitCursor_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitCursor_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cursor_partContext cursor_part() throws RecognitionException {
		Cursor_partContext _localctx = new Cursor_partContext(_ctx, getState());
		enterRule(_localctx, 840, RULE_cursor_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6950);
			match(LEFT_PAREN);
			setState(6951);
			subquery(0);
			setState(6952);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Multiset_typeContext extends ParserRuleContext {
		public TerminalNode MEMBER() { return getToken(PLSQLParser.MEMBER, 0); }
		public TerminalNode SUBMULTISET() { return getToken(PLSQLParser.SUBMULTISET, 0); }
		public Multiset_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multiset_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterMultiset_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitMultiset_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitMultiset_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Multiset_typeContext multiset_type() throws RecognitionException {
		Multiset_typeContext _localctx = new Multiset_typeContext(_ctx, getState());
		enterRule(_localctx, 842, RULE_multiset_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6954);
			_la = _input.LA(1);
			if ( !(_la==MEMBER || _la==SUBMULTISET) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Relational_operatorContext extends ParserRuleContext {
		public TerminalNode EQUALS_OP() { return getToken(PLSQLParser.EQUALS_OP, 0); }
		public Not_equal_opContext not_equal_op() {
			return getRuleContext(Not_equal_opContext.class,0);
		}
		public TerminalNode LESS_THAN_OP() { return getToken(PLSQLParser.LESS_THAN_OP, 0); }
		public TerminalNode GREATER_THAN_OP() { return getToken(PLSQLParser.GREATER_THAN_OP, 0); }
		public Less_than_or_equals_opContext less_than_or_equals_op() {
			return getRuleContext(Less_than_or_equals_opContext.class,0);
		}
		public Greater_than_or_equals_opContext greater_than_or_equals_op() {
			return getRuleContext(Greater_than_or_equals_opContext.class,0);
		}
		public Relational_operatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_relational_operator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterRelational_operator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitRelational_operator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitRelational_operator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Relational_operatorContext relational_operator() throws RecognitionException {
		Relational_operatorContext _localctx = new Relational_operatorContext(_ctx, getState());
		enterRule(_localctx, 844, RULE_relational_operator);
		try {
			setState(6962);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1014,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6956);
				match(EQUALS_OP);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6957);
				not_equal_op();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6958);
				match(LESS_THAN_OP);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6959);
				match(GREATER_THAN_OP);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6960);
				less_than_or_equals_op();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(6961);
				greater_than_or_equals_op();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Like_typeContext extends ParserRuleContext {
		public TerminalNode LIKE() { return getToken(PLSQLParser.LIKE, 0); }
		public TerminalNode LIKEC() { return getToken(PLSQLParser.LIKEC, 0); }
		public TerminalNode LIKE2() { return getToken(PLSQLParser.LIKE2, 0); }
		public TerminalNode LIKE4() { return getToken(PLSQLParser.LIKE4, 0); }
		public TerminalNode ILIKE() { return getToken(PLSQLParser.ILIKE, 0); }
		public Like_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_like_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterLike_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitLike_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitLike_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Like_typeContext like_type() throws RecognitionException {
		Like_typeContext _localctx = new Like_typeContext(_ctx, getState());
		enterRule(_localctx, 846, RULE_like_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6964);
			_la = _input.LA(1);
			if ( !(((((_la - 215)) & ~0x3f) == 0 && ((1L << (_la - 215)) & ((1L << (ILIKE - 215)) | (1L << (LIKE - 215)) | (1L << (LIKE2 - 215)) | (1L << (LIKE4 - 215)) | (1L << (LIKEC - 215)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Like_escape_partContext extends ParserRuleContext {
		public TerminalNode ESCAPE() { return getToken(PLSQLParser.ESCAPE, 0); }
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		public Like_escape_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_like_escape_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterLike_escape_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitLike_escape_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitLike_escape_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Like_escape_partContext like_escape_part() throws RecognitionException {
		Like_escape_partContext _localctx = new Like_escape_partContext(_ctx, getState());
		enterRule(_localctx, 848, RULE_like_escape_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6966);
			match(ESCAPE);
			setState(6967);
			concatenation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Between_elementsContext extends ParserRuleContext {
		public List<ConcatenationContext> concatenation() {
			return getRuleContexts(ConcatenationContext.class);
		}
		public ConcatenationContext concatenation(int i) {
			return getRuleContext(ConcatenationContext.class,i);
		}
		public TerminalNode AND() { return getToken(PLSQLParser.AND, 0); }
		public Between_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_between_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterBetween_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitBetween_elements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitBetween_elements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Between_elementsContext between_elements() throws RecognitionException {
		Between_elementsContext _localctx = new Between_elementsContext(_ctx, getState());
		enterRule(_localctx, 850, RULE_between_elements);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6969);
			concatenation();
			setState(6970);
			match(AND);
			setState(6971);
			concatenation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConcatenationContext extends ParserRuleContext {
		public Binary_expressionContext binary_expression() {
			return getRuleContext(Binary_expressionContext.class,0);
		}
		public ConcatenationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_concatenation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterConcatenation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitConcatenation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitConcatenation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConcatenationContext concatenation() throws RecognitionException {
		ConcatenationContext _localctx = new ConcatenationContext(_ctx, getState());
		enterRule(_localctx, 852, RULE_concatenation);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6973);
			binary_expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Binary_expressionContext extends ParserRuleContext {
		public Binary_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_binary_expression; }
	 
		public Binary_expressionContext() { }
		public void copyFrom(Binary_expressionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class BinaryExprContext extends Binary_expressionContext {
		public Binary_expressionContext left;
		public Token op;
		public Binary_expressionContext right;
		public List<Binary_expressionContext> binary_expression() {
			return getRuleContexts(Binary_expressionContext.class);
		}
		public Binary_expressionContext binary_expression(int i) {
			return getRuleContext(Binary_expressionContext.class,i);
		}
		public TerminalNode ASTERISK() { return getToken(PLSQLParser.ASTERISK, 0); }
		public TerminalNode SOLIDUS() { return getToken(PLSQLParser.SOLIDUS, 0); }
		public TerminalNode PERCENT() { return getToken(PLSQLParser.PERCENT, 0); }
		public TerminalNode PLUS_SIGN() { return getToken(PLSQLParser.PLUS_SIGN, 0); }
		public TerminalNode MINUS_SIGN() { return getToken(PLSQLParser.MINUS_SIGN, 0); }
		public TerminalNode CONCATENATION_OP() { return getToken(PLSQLParser.CONCATENATION_OP, 0); }
		public TerminalNode AT() { return getToken(PLSQLParser.AT, 0); }
		public Interval_expressionContext interval_expression() {
			return getRuleContext(Interval_expressionContext.class,0);
		}
		public TerminalNode LOCAL() { return getToken(PLSQLParser.LOCAL, 0); }
		public TerminalNode TIME() { return getToken(PLSQLParser.TIME, 0); }
		public TerminalNode ZONE() { return getToken(PLSQLParser.ZONE, 0); }
		public BinaryExprContext(Binary_expressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterBinaryExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitBinaryExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitBinaryExpr(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class IgnoreBinaryExprContext extends Binary_expressionContext {
		public Unary_expressionContext unary_expression() {
			return getRuleContext(Unary_expressionContext.class,0);
		}
		public IgnoreBinaryExprContext(Binary_expressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterIgnoreBinaryExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitIgnoreBinaryExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitIgnoreBinaryExpr(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ParenBinaryExprContext extends Binary_expressionContext {
		public TerminalNode LEFT_PAREN() { return getToken(PLSQLParser.LEFT_PAREN, 0); }
		public Binary_expressionContext binary_expression() {
			return getRuleContext(Binary_expressionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PLSQLParser.RIGHT_PAREN, 0); }
		public ParenBinaryExprContext(Binary_expressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterParenBinaryExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitParenBinaryExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitParenBinaryExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Binary_expressionContext binary_expression() throws RecognitionException {
		return binary_expression(0);
	}

	private Binary_expressionContext binary_expression(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Binary_expressionContext _localctx = new Binary_expressionContext(_ctx, _parentState);
		Binary_expressionContext _prevctx = _localctx;
		int _startState = 854;
		enterRecursionRule(_localctx, 854, RULE_binary_expression, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(6981);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1015,_ctx) ) {
			case 1:
				{
				_localctx = new ParenBinaryExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				setState(6976);
				match(LEFT_PAREN);
				setState(6977);
				binary_expression(0);
				setState(6978);
				match(RIGHT_PAREN);
				}
				break;
			case 2:
				{
				_localctx = new IgnoreBinaryExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6980);
				unary_expression(0);
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(7008);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,1019,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(7006);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,1018,_ctx) ) {
					case 1:
						{
						_localctx = new BinaryExprContext(new Binary_expressionContext(_parentctx, _parentState));
						((BinaryExprContext)_localctx).left = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_binary_expression);
						setState(6983);
						if (!(precpred(_ctx, 6))) throw new FailedPredicateException(this, "precpred(_ctx, 6)");
						setState(6984);
						((BinaryExprContext)_localctx).op = _input.LT(1);
						_la = _input.LA(1);
						if ( !(((((_la - 643)) & ~0x3f) == 0 && ((1L << (_la - 643)) & ((1L << (PERCENT - 643)) | (1L << (ASTERISK - 643)) | (1L << (SOLIDUS - 643)))) != 0)) ) {
							((BinaryExprContext)_localctx).op = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(6985);
						((BinaryExprContext)_localctx).right = binary_expression(7);
						}
						break;
					case 2:
						{
						_localctx = new BinaryExprContext(new Binary_expressionContext(_parentctx, _parentState));
						((BinaryExprContext)_localctx).left = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_binary_expression);
						setState(6986);
						if (!(precpred(_ctx, 5))) throw new FailedPredicateException(this, "precpred(_ctx, 5)");
						setState(6987);
						((BinaryExprContext)_localctx).op = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==PLUS_SIGN || _la==MINUS_SIGN) ) {
							((BinaryExprContext)_localctx).op = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(6988);
						((BinaryExprContext)_localctx).right = binary_expression(6);
						}
						break;
					case 3:
						{
						_localctx = new BinaryExprContext(new Binary_expressionContext(_parentctx, _parentState));
						((BinaryExprContext)_localctx).left = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_binary_expression);
						setState(6989);
						if (!(precpred(_ctx, 4))) throw new FailedPredicateException(this, "precpred(_ctx, 4)");
						setState(6990);
						((BinaryExprContext)_localctx).op = match(CONCATENATION_OP);
						setState(6991);
						((BinaryExprContext)_localctx).right = binary_expression(5);
						}
						break;
					case 4:
						{
						_localctx = new BinaryExprContext(new Binary_expressionContext(_parentctx, _parentState));
						((BinaryExprContext)_localctx).left = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_binary_expression);
						setState(6992);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(6993);
						((BinaryExprContext)_localctx).op = match(T__1);
						setState(6994);
						((BinaryExprContext)_localctx).right = binary_expression(4);
						}
						break;
					case 5:
						{
						_localctx = new BinaryExprContext(new Binary_expressionContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_binary_expression);
						setState(6995);
						if (!(precpred(_ctx, 7))) throw new FailedPredicateException(this, "precpred(_ctx, 7)");
						setState(7004);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case AT:
							{
							setState(6996);
							match(AT);
							setState(7001);
							_errHandler.sync(this);
							switch (_input.LA(1)) {
							case LOCAL:
								{
								setState(6997);
								match(LOCAL);
								}
								break;
							case TIME:
								{
								setState(6998);
								match(TIME);
								setState(6999);
								match(ZONE);
								setState(7000);
								binary_expression(0);
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							}
							break;
						case DAY:
						case YEAR:
							{
							setState(7003);
							interval_expression();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;
					}
					} 
				}
				setState(7010);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1019,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Interval_expressionContext extends ParserRuleContext {
		public TerminalNode DAY() { return getToken(PLSQLParser.DAY, 0); }
		public TerminalNode TO() { return getToken(PLSQLParser.TO, 0); }
		public TerminalNode SECOND() { return getToken(PLSQLParser.SECOND, 0); }
		public List<TerminalNode> LEFT_PAREN() { return getTokens(PLSQLParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(PLSQLParser.LEFT_PAREN, i);
		}
		public List<ConcatenationContext> concatenation() {
			return getRuleContexts(ConcatenationContext.class);
		}
		public ConcatenationContext concatenation(int i) {
			return getRuleContext(ConcatenationContext.class,i);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(PLSQLParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(PLSQLParser.RIGHT_PAREN, i);
		}
		public TerminalNode YEAR() { return getToken(PLSQLParser.YEAR, 0); }
		public TerminalNode MONTH() { return getToken(PLSQLParser.MONTH, 0); }
		public Interval_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_interval_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterInterval_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitInterval_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitInterval_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Interval_expressionContext interval_expression() throws RecognitionException {
		Interval_expressionContext _localctx = new Interval_expressionContext(_ctx, getState());
		enterRule(_localctx, 856, RULE_interval_expression);
		int _la;
		try {
			setState(7035);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DAY:
				enterOuterAlt(_localctx, 1);
				{
				setState(7011);
				match(DAY);
				setState(7016);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEFT_PAREN) {
					{
					setState(7012);
					match(LEFT_PAREN);
					setState(7013);
					concatenation();
					setState(7014);
					match(RIGHT_PAREN);
					}
				}

				setState(7018);
				match(TO);
				setState(7019);
				match(SECOND);
				setState(7024);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1021,_ctx) ) {
				case 1:
					{
					setState(7020);
					match(LEFT_PAREN);
					setState(7021);
					concatenation();
					setState(7022);
					match(RIGHT_PAREN);
					}
					break;
				}
				}
				break;
			case YEAR:
				enterOuterAlt(_localctx, 2);
				{
				setState(7026);
				match(YEAR);
				setState(7031);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEFT_PAREN) {
					{
					setState(7027);
					match(LEFT_PAREN);
					setState(7028);
					concatenation();
					setState(7029);
					match(RIGHT_PAREN);
					}
				}

				setState(7033);
				match(TO);
				setState(7034);
				match(MONTH);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Model_expressionContext extends ParserRuleContext {
		public Unary_expressionContext unary_expression() {
			return getRuleContext(Unary_expressionContext.class,0);
		}
		public TerminalNode LEFT_BRACKET() { return getToken(PLSQLParser.LEFT_BRACKET, 0); }
		public Model_expression_elementContext model_expression_element() {
			return getRuleContext(Model_expression_elementContext.class,0);
		}
		public TerminalNode RIGHT_BRACKET() { return getToken(PLSQLParser.RIGHT_BRACKET, 0); }
		public Model_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterModel_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitModel_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitModel_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Model_expressionContext model_expression() throws RecognitionException {
		Model_expressionContext _localctx = new Model_expressionContext(_ctx, getState());
		enterRule(_localctx, 858, RULE_model_expression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7037);
			unary_expression(0);
			setState(7038);
			match(LEFT_BRACKET);
			setState(7039);
			model_expression_element();
			setState(7040);
			match(RIGHT_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Model_expression_elementContext extends ParserRuleContext {
		public List<TerminalNode> ANY() { return getTokens(PLSQLParser.ANY); }
		public TerminalNode ANY(int i) {
			return getToken(PLSQLParser.ANY, i);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLSQLParser.COMMA, i);
		}
		public List<Single_column_for_loopContext> single_column_for_loop() {
			return getRuleContexts(Single_column_for_loopContext.class);
		}
		public Single_column_for_loopContext single_column_for_loop(int i) {
			return getRuleContext(Single_column_for_loopContext.class,i);
		}
		public Multi_column_for_loopContext multi_column_for_loop() {
			return getRuleContext(Multi_column_for_loopContext.class,0);
		}
		public Model_expression_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_expression_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterModel_expression_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitModel_expression_element(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitModel_expression_element(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Model_expression_elementContext model_expression_element() throws RecognitionException {
		Model_expression_elementContext _localctx = new Model_expression_elementContext(_ctx, getState());
		enterRule(_localctx, 860, RULE_model_expression_element);
		int _la;
		try {
			setState(7065);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1028,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7044);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1024,_ctx) ) {
				case 1:
					{
					setState(7042);
					match(ANY);
					}
					break;
				case 2:
					{
					setState(7043);
					expression(0);
					}
					break;
				}
				setState(7053);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(7046);
					match(COMMA);
					setState(7049);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,1025,_ctx) ) {
					case 1:
						{
						setState(7047);
						match(ANY);
						}
						break;
					case 2:
						{
						setState(7048);
						expression(0);
						}
						break;
					}
					}
					}
					setState(7055);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7056);
				single_column_for_loop();
				setState(7061);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(7057);
					match(COMMA);
					setState(7058);
					single_column_for_loop();
					}
					}
					setState(7063);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7064);
				multi_column_for_loop();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Single_column_for_loopContext extends ParserRuleContext {
		public ExpressionContext ex1;
		public ExpressionContext ex2;
		public ExpressionContext ex3;
		public TerminalNode FOR() { return getToken(PLSQLParser.FOR, 0); }
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public TerminalNode IN() { return getToken(PLSQLParser.IN, 0); }
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public TerminalNode FROM() { return getToken(PLSQLParser.FROM, 0); }
		public TerminalNode TO() { return getToken(PLSQLParser.TO, 0); }
		public For_increment_decrement_typeContext for_increment_decrement_type() {
			return getRuleContext(For_increment_decrement_typeContext.class,0);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public For_like_partContext for_like_part() {
			return getRuleContext(For_like_partContext.class,0);
		}
		public Single_column_for_loopContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_single_column_for_loop; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterSingle_column_for_loop(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitSingle_column_for_loop(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitSingle_column_for_loop(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Single_column_for_loopContext single_column_for_loop() throws RecognitionException {
		Single_column_for_loopContext _localctx = new Single_column_for_loopContext(_ctx, getState());
		enterRule(_localctx, 862, RULE_single_column_for_loop);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7067);
			match(FOR);
			setState(7068);
			column_name();
			setState(7081);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case IN:
				{
				setState(7069);
				match(IN);
				setState(7070);
				expression_list();
				}
				break;
			case FROM:
			case LIKE:
				{
				setState(7072);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIKE) {
					{
					setState(7071);
					for_like_part();
					}
				}

				setState(7074);
				match(FROM);
				setState(7075);
				((Single_column_for_loopContext)_localctx).ex1 = expression(0);
				setState(7076);
				match(TO);
				setState(7077);
				((Single_column_for_loopContext)_localctx).ex2 = expression(0);
				setState(7078);
				for_increment_decrement_type();
				setState(7079);
				((Single_column_for_loopContext)_localctx).ex3 = expression(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class For_like_partContext extends ParserRuleContext {
		public TerminalNode LIKE() { return getToken(PLSQLParser.LIKE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public For_like_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_for_like_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterFor_like_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitFor_like_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitFor_like_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final For_like_partContext for_like_part() throws RecognitionException {
		For_like_partContext _localctx = new For_like_partContext(_ctx, getState());
		enterRule(_localctx, 864, RULE_for_like_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7083);
			match(LIKE);
			setState(7084);
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class For_increment_decrement_typeContext extends ParserRuleContext {
		public TerminalNode INCREMENT() { return getToken(PLSQLParser.INCREMENT, 0); }
		public TerminalNode DECREMENT() { return getToken(PLSQLParser.DECREMENT, 0); }
		public For_increment_decrement_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_for_increment_decrement_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterFor_increment_decrement_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitFor_increment_decrement_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitFor_increment_decrement_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final For_increment_decrement_typeContext for_increment_decrement_type() throws RecognitionException {
		For_increment_decrement_typeContext _localctx = new For_increment_decrement_typeContext(_ctx, getState());
		enterRule(_localctx, 866, RULE_for_increment_decrement_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7086);
			_la = _input.LA(1);
			if ( !(_la==DECREMENT || _la==INCREMENT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Multi_column_for_loopContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(PLSQLParser.FOR, 0); }
		public List<TerminalNode> LEFT_PAREN() { return getTokens(PLSQLParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(PLSQLParser.LEFT_PAREN, i);
		}
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(PLSQLParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(PLSQLParser.RIGHT_PAREN, i);
		}
		public TerminalNode IN() { return getToken(PLSQLParser.IN, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public List<Expression_listContext> expression_list() {
			return getRuleContexts(Expression_listContext.class);
		}
		public Expression_listContext expression_list(int i) {
			return getRuleContext(Expression_listContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLSQLParser.COMMA, i);
		}
		public Multi_column_for_loopContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multi_column_for_loop; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterMulti_column_for_loop(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitMulti_column_for_loop(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitMulti_column_for_loop(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Multi_column_for_loopContext multi_column_for_loop() throws RecognitionException {
		Multi_column_for_loopContext _localctx = new Multi_column_for_loopContext(_ctx, getState());
		enterRule(_localctx, 868, RULE_multi_column_for_loop);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7088);
			match(FOR);
			setState(7089);
			match(LEFT_PAREN);
			setState(7090);
			column_name();
			setState(7095);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(7091);
				match(COMMA);
				setState(7092);
				column_name();
				}
				}
				setState(7097);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(7098);
			match(RIGHT_PAREN);
			setState(7099);
			match(IN);
			setState(7100);
			match(LEFT_PAREN);
			setState(7113);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1033,_ctx) ) {
			case 1:
				{
				setState(7101);
				subquery(0);
				}
				break;
			case 2:
				{
				setState(7102);
				match(LEFT_PAREN);
				setState(7103);
				expression_list();
				setState(7108);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(7104);
					match(COMMA);
					setState(7105);
					expression_list();
					}
					}
					setState(7110);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(7111);
				match(RIGHT_PAREN);
				}
				break;
			}
			setState(7115);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unary_expressionContext extends ParserRuleContext {
		public Unary_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unary_expression; }
	 
		public Unary_expressionContext() { }
		public void copyFrom(Unary_expressionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class IgnoreUnaryExprContext extends Unary_expressionContext {
		public Case_statementContext case_statement() {
			return getRuleContext(Case_statementContext.class,0);
		}
		public Quantified_expressionContext quantified_expression() {
			return getRuleContext(Quantified_expressionContext.class,0);
		}
		public Standard_functionContext standard_function() {
			return getRuleContext(Standard_functionContext.class,0);
		}
		public AtomContext atom() {
			return getRuleContext(AtomContext.class,0);
		}
		public IgnoreUnaryExprContext(Unary_expressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterIgnoreUnaryExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitIgnoreUnaryExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitIgnoreUnaryExpr(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class UnaryExprContext extends Unary_expressionContext {
		public Token op;
		public Unary_expressionContext unary_expression() {
			return getRuleContext(Unary_expressionContext.class,0);
		}
		public TerminalNode MINUS_SIGN() { return getToken(PLSQLParser.MINUS_SIGN, 0); }
		public TerminalNode PLUS_SIGN() { return getToken(PLSQLParser.PLUS_SIGN, 0); }
		public TerminalNode PRIOR() { return getToken(PLSQLParser.PRIOR, 0); }
		public TerminalNode CONNECT_BY_ROOT() { return getToken(PLSQLParser.CONNECT_BY_ROOT, 0); }
		public TerminalNode NEW() { return getToken(PLSQLParser.NEW, 0); }
		public TerminalNode DISTINCT() { return getToken(PLSQLParser.DISTINCT, 0); }
		public TerminalNode ALL() { return getToken(PLSQLParser.ALL, 0); }
		public Model_expression_elementContext model_expression_element() {
			return getRuleContext(Model_expression_elementContext.class,0);
		}
		public TerminalNode RIGHT_BRACKET() { return getToken(PLSQLParser.RIGHT_BRACKET, 0); }
		public TerminalNode LEFT_BRACKET() { return getToken(PLSQLParser.LEFT_BRACKET, 0); }
		public UnaryExprContext(Unary_expressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterUnaryExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitUnaryExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitUnaryExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Unary_expressionContext unary_expression() throws RecognitionException {
		return unary_expression(0);
	}

	private Unary_expressionContext unary_expression(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Unary_expressionContext _localctx = new Unary_expressionContext(_ctx, _parentState);
		Unary_expressionContext _prevctx = _localctx;
		int _startState = 870;
		enterRecursionRule(_localctx, 870, RULE_unary_expression, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(7134);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1034,_ctx) ) {
			case 1:
				{
				_localctx = new UnaryExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				setState(7118);
				((UnaryExprContext)_localctx).op = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==PLUS_SIGN || _la==MINUS_SIGN) ) {
					((UnaryExprContext)_localctx).op = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7119);
				unary_expression(10);
				}
				break;
			case 2:
				{
				_localctx = new UnaryExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(7120);
				((UnaryExprContext)_localctx).op = match(PRIOR);
				setState(7121);
				unary_expression(9);
				}
				break;
			case 3:
				{
				_localctx = new UnaryExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(7122);
				((UnaryExprContext)_localctx).op = match(CONNECT_BY_ROOT);
				setState(7123);
				unary_expression(8);
				}
				break;
			case 4:
				{
				_localctx = new UnaryExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(7124);
				((UnaryExprContext)_localctx).op = match(NEW);
				setState(7125);
				unary_expression(7);
				}
				break;
			case 5:
				{
				_localctx = new UnaryExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(7126);
				((UnaryExprContext)_localctx).op = match(DISTINCT);
				setState(7127);
				unary_expression(6);
				}
				break;
			case 6:
				{
				_localctx = new UnaryExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(7128);
				((UnaryExprContext)_localctx).op = match(ALL);
				setState(7129);
				unary_expression(5);
				}
				break;
			case 7:
				{
				_localctx = new IgnoreUnaryExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(7130);
				case_statement();
				}
				break;
			case 8:
				{
				_localctx = new IgnoreUnaryExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(7131);
				quantified_expression();
				}
				break;
			case 9:
				{
				_localctx = new IgnoreUnaryExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(7132);
				standard_function(0);
				}
				break;
			case 10:
				{
				_localctx = new IgnoreUnaryExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(7133);
				atom();
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(7143);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,1035,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new UnaryExprContext(new Unary_expressionContext(_parentctx, _parentState));
					pushNewRecursionContext(_localctx, _startState, RULE_unary_expression);
					setState(7136);
					if (!(precpred(_ctx, 11))) throw new FailedPredicateException(this, "precpred(_ctx, 11)");
					setState(7137);
					((UnaryExprContext)_localctx).op = match(LEFT_BRACKET);
					setState(7138);
					model_expression_element();
					setState(7139);
					match(RIGHT_BRACKET);
					}
					} 
				}
				setState(7145);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1035,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Case_statementContext extends ParserRuleContext {
		public Searched_case_statementContext searched_case_statement() {
			return getRuleContext(Searched_case_statementContext.class,0);
		}
		public Simple_case_statementContext simple_case_statement() {
			return getRuleContext(Simple_case_statementContext.class,0);
		}
		public Case_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_case_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterCase_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitCase_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitCase_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Case_statementContext case_statement() throws RecognitionException {
		Case_statementContext _localctx = new Case_statementContext(_ctx, getState());
		enterRule(_localctx, 872, RULE_case_statement);
		try {
			setState(7148);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1036,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7146);
				searched_case_statement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7147);
				simple_case_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Simple_case_statementContext extends ParserRuleContext {
		public Token ck1;
		public AtomContext atom() {
			return getRuleContext(AtomContext.class,0);
		}
		public TerminalNode END() { return getToken(PLSQLParser.END, 0); }
		public List<TerminalNode> CASE() { return getTokens(PLSQLParser.CASE); }
		public TerminalNode CASE(int i) {
			return getToken(PLSQLParser.CASE, i);
		}
		public List<Label_nameContext> label_name() {
			return getRuleContexts(Label_nameContext.class);
		}
		public Label_nameContext label_name(int i) {
			return getRuleContext(Label_nameContext.class,i);
		}
		public List<Simple_case_when_partContext> simple_case_when_part() {
			return getRuleContexts(Simple_case_when_partContext.class);
		}
		public Simple_case_when_partContext simple_case_when_part(int i) {
			return getRuleContext(Simple_case_when_partContext.class,i);
		}
		public Case_else_partContext case_else_part() {
			return getRuleContext(Case_else_partContext.class,0);
		}
		public Simple_case_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simple_case_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterSimple_case_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitSimple_case_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitSimple_case_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Simple_case_statementContext simple_case_statement() throws RecognitionException {
		Simple_case_statementContext _localctx = new Simple_case_statementContext(_ctx, getState());
		enterRule(_localctx, 874, RULE_simple_case_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7151);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BUILD) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (CHR - 65)) | (1L << (CLOB - 65)) | (1L << (CLOSE - 65)) | (1L << (CLUSTER - 65)) | (1L << (COALESCE - 65)) | (1L << (COLLECT - 65)) | (1L << (COLUMNS - 65)) | (1L << (COMMENT - 65)) | (1L << (COMMIT - 65)) | (1L << (COMMITTED - 65)) | (1L << (COMPATIBILITY - 65)) | (1L << (COMPILE - 65)) | (1L << (COMPLETE - 65)) | (1L << (COMPOUND - 65)) | (1L << (CONCAT - 65)) | (1L << (CONSTANT - 65)) | (1L << (CONSTRAINT - 65)) | (1L << (CONSTRAINTS - 65)) | (1L << (CONSTRUCTOR - 65)) | (1L << (CONTENT - 65)) | (1L << (CONTEXT - 65)) | (1L << (CONTINUE - 65)) | (1L << (CONVERT - 65)) | (1L << (CORRUPT_XID - 65)) | (1L << (CORRUPT_XID_ALL - 65)) | (1L << (COST - 65)) | (1L << (COUNT - 65)) | (1L << (CROSS - 65)) | (1L << (CUBE - 65)) | (1L << (CURRENT_USER - 65)) | (1L << (CURSOR - 65)) | (1L << (CUSTOMDATUM - 65)) | (1L << (CYCLE - 65)) | (1L << (DATA - 65)) | (1L << (DATABASE - 65)) | (1L << (DATE - 65)) | (1L << (DAY - 65)) | (1L << (DB_ROLE_CHANGE - 65)) | (1L << (DBTIMEZONE - 65)) | (1L << (DDL - 65)) | (1L << (DEBUG - 65)) | (1L << (DEC - 65)) | (1L << (DECIMAL - 65)) | (1L << (DECODE - 65)) | (1L << (DECOMPOSE - 65)) | (1L << (DECREMENT - 65)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DEMAND - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (EDITIONING - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENFORCED - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FAST - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)) | (1L << (FOLLOWING - 129)) | (1L << (FOLLOWS - 129)) | (1L << (FORALL - 129)) | (1L << (FORCE - 129)))) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & ((1L << (FULL - 197)) | (1L << (FUNCTION - 197)) | (1L << (GROUPING - 197)) | (1L << (HASH - 197)) | (1L << (HIDE - 197)) | (1L << (HOUR - 197)) | (1L << (IGNORE - 197)) | (1L << (IMMEDIATE - 197)) | (1L << (INCLUDE - 197)) | (1L << (INCLUDING - 197)) | (1L << (INCREMENT - 197)) | (1L << (INDENT - 197)) | (1L << (INDEXED - 197)) | (1L << (INDICATOR - 197)) | (1L << (INDICES - 197)) | (1L << (INFINITE - 197)) | (1L << (INLINE - 197)) | (1L << (INNER - 197)) | (1L << (INOUT - 197)) | (1L << (INSTANTIABLE - 197)) | (1L << (INSTEAD - 197)) | (1L << (INT - 197)) | (1L << (INTEGER - 197)) | (1L << (INTERVAL - 197)) | (1L << (INVALIDATE - 197)) | (1L << (ISOLATION - 197)) | (1L << (ITERATE - 197)) | (1L << (JAVA - 197)) | (1L << (JOIN - 197)) | (1L << (KEEP - 197)) | (1L << (LANGUAGE - 197)) | (1L << (LAST - 197)) | (1L << (LAST_VALUE - 197)) | (1L << (LEADING - 197)) | (1L << (LEFT - 197)) | (1L << (LEVEL - 197)))) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & ((1L << (LIBRARY - 261)) | (1L << (LIKE2 - 261)) | (1L << (LIKE4 - 261)) | (1L << (LIKEC - 261)) | (1L << (LIMIT - 261)) | (1L << (LIST - 261)) | (1L << (LOCAL - 261)) | (1L << (LOCKED - 261)) | (1L << (LOG - 261)) | (1L << (LOGOFF - 261)) | (1L << (LOGON - 261)) | (1L << (LONG - 261)) | (1L << (LOOP - 261)) | (1L << (MAIN - 261)) | (1L << (MAP - 261)) | (1L << (MASTER - 261)) | (1L << (MATCHED - 261)) | (1L << (MAXVALUE - 261)) | (1L << (MEASURES - 261)) | (1L << (MEMBER - 261)) | (1L << (MERGE - 261)) | (1L << (MINUTE - 261)) | (1L << (MINVALUE - 261)) | (1L << (MLSLABEL - 261)) | (1L << (MODEL - 261)) | (1L << (MODIFY - 261)) | (1L << (MONTH - 261)) | (1L << (MULTISET - 261)) | (1L << (NAME - 261)) | (1L << (NAN - 261)) | (1L << (NATURAL - 261)) | (1L << (NATURALN - 261)) | (1L << (NAV - 261)) | (1L << (NCHAR - 261)) | (1L << (NCHAR_CS - 261)) | (1L << (NCLOB - 261)) | (1L << (NESTED - 261)) | (1L << (NEVER - 261)) | (1L << (NEW - 261)) | (1L << (NO - 261)) | (1L << (NOAUDIT - 261)) | (1L << (NOCOPY - 261)) | (1L << (NOCYCLE - 261)) | (1L << (NOENTITYESCAPING - 261)))) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & ((1L << (NONE - 329)) | (1L << (NOSCHEMACHECK - 329)) | (1L << (NVL - 329)) | (1L << (NULLS - 329)) | (1L << (NUMBER - 329)) | (1L << (NUMERIC - 329)) | (1L << (NVARCHAR2 - 329)) | (1L << (MATERIALIZED - 329)) | (1L << (OBJECT - 329)) | (1L << (OFF - 329)) | (1L << (OID - 329)) | (1L << (OLD - 329)) | (1L << (ONLY - 329)) | (1L << (OPEN - 329)) | (1L << (ORADATA - 329)) | (1L << (ORDINALITY - 329)) | (1L << (OSERROR - 329)) | (1L << (OUT - 329)) | (1L << (OUTER - 329)) | (1L << (OVER - 329)) | (1L << (OVERRIDING - 329)) | (1L << (PACKAGE - 329)) | (1L << (PARALLEL_ENABLE - 329)) | (1L << (PARAMETERS - 329)) | (1L << (PARENT - 329)) | (1L << (PARTITION - 329)) | (1L << (PASSING - 329)) | (1L << (PATH - 329)) | (1L << (PIPELINED - 329)) | (1L << (PLAN - 329)) | (1L << (PLS_INTEGER - 329)) | (1L << (POSITIVE - 329)) | (1L << (POSITIVEN - 329)) | (1L << (PRAGMA - 329)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (PREBUILT - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)) | (1L << (PRESENT - 393)) | (1L << (PUBLIC - 393)) | (1L << (RAISE - 393)) | (1L << (RANGE - 393)) | (1L << (RAW - 393)) | (1L << (READ - 393)) | (1L << (REAL - 393)) | (1L << (RECORD - 393)) | (1L << (REDUCED - 393)) | (1L << (REF - 393)) | (1L << (REFERENCE - 393)) | (1L << (REFERENCING - 393)) | (1L << (REFRESH - 393)) | (1L << (REJECT - 393)) | (1L << (RELIES_ON - 393)) | (1L << (RENAME - 393)) | (1L << (REPLACE - 393)) | (1L << (RESPECT - 393)) | (1L << (RESTRICT_REFERENCES - 393)) | (1L << (RESULT - 393)) | (1L << (RESULT_CACHE - 393)) | (1L << (RETURN - 393)) | (1L << (RETURNING - 393)) | (1L << (REUSE - 393)) | (1L << (REVERSE - 393)) | (1L << (REWRITE - 393)) | (1L << (RIGHT - 393)) | (1L << (ROLE - 393)) | (1L << (ROLLBACK - 393)) | (1L << (ROLLUP - 393)) | (1L << (ROW - 393)) | (1L << (ROWID - 393)) | (1L << (ROWS - 393)) | (1L << (RULES - 393)) | (1L << (SAMPLE - 393)) | (1L << (SAVE - 393)) | (1L << (SAVEPOINT - 393)) | (1L << (SCHEMA - 393)) | (1L << (SCHEMACHECK - 393)) | (1L << (SCN - 393)) | (1L << (SECOND - 393)))) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & ((1L << (SEED - 458)) | (1L << (SEGMENT - 458)) | (1L << (SELF - 458)) | (1L << (SEQUENTIAL - 458)) | (1L << (SERIALIZABLE - 458)) | (1L << (SERIALLY_REUSABLE - 458)) | (1L << (SERVERERROR - 458)) | (1L << (SESSIONTIMEZONE - 458)) | (1L << (SET - 458)) | (1L << (SETS - 458)) | (1L << (SETTINGS - 458)) | (1L << (SHOW - 458)) | (1L << (SHUTDOWN - 458)) | (1L << (SIBLINGS - 458)) | (1L << (SIGNTYPE - 458)) | (1L << (SIMPLE_INTEGER - 458)) | (1L << (SINGLE - 458)) | (1L << (SIZE - 458)) | (1L << (SKIP_ - 458)) | (1L << (SMALLINT - 458)) | (1L << (SNAPSHOT - 458)) | (1L << (SOME - 458)) | (1L << (SPECIFICATION - 458)) | (1L << (SQLDATA - 458)) | (1L << (SQLERROR - 458)) | (1L << (STANDALONE - 458)) | (1L << (STARTUP - 458)) | (1L << (STATEMENT - 458)) | (1L << (STATEMENT_ID - 458)) | (1L << (STATIC - 458)) | (1L << (STATISTICS - 458)) | (1L << (STRING - 458)) | (1L << (SUBMULTISET - 458)) | (1L << (SUBPARTITION - 458)) | (1L << (SUBSTITUTABLE - 458)) | (1L << (SUBSTRING - 458)) | (1L << (SUBTYPE - 458)) | (1L << (SUCCESS - 458)) | (1L << (SUSPEND - 458)) | (1L << (TABLES - 458)) | (1L << (TIME - 458)) | (1L << (TIMESTAMP - 458)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 458)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 458)) | (1L << (TIMESTAMP_UNCONSTRAINED - 458)))) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & ((1L << (TIMEZONE_ABBR - 522)) | (1L << (TIMEZONE_HOUR - 522)) | (1L << (TIMEZONE_MINUTE - 522)) | (1L << (TIMEZONE_REGION - 522)) | (1L << (TO_CHAR - 522)) | (1L << (TO_DATE - 522)) | (1L << (TRAILING - 522)) | (1L << (TRANSACTION - 522)) | (1L << (TRANSLATE - 522)) | (1L << (TREAT - 522)) | (1L << (TRIGGER - 522)) | (1L << (TRIM - 522)) | (1L << (TRUNCATE - 522)) | (1L << (TRUSTED - 522)) | (1L << (TYPE - 522)) | (1L << (UNBOUNDED - 522)) | (1L << (UNDER - 522)) | (1L << (UNLIMITED - 522)) | (1L << (UNTIL - 522)) | (1L << (UPDATED - 522)) | (1L << (UPSERT - 522)) | (1L << (UROWID - 522)) | (1L << (USE - 522)) | (1L << (VALIDATE - 522)) | (1L << (VALUE - 522)) | (1L << (VARCHAR - 522)) | (1L << (VARCHAR2 - 522)) | (1L << (VARIABLE - 522)) | (1L << (VARRAY - 522)) | (1L << (VARYING - 522)) | (1L << (VERBOSE - 522)) | (1L << (VERSION - 522)) | (1L << (VERSIONS - 522)) | (1L << (VIEW - 522)) | (1L << (WAIT - 522)) | (1L << (WARNING - 522)) | (1L << (WELLFORMED - 522)) | (1L << (WHENEVER - 522)) | (1L << (WHILE - 522)) | (1L << (WITHOUT - 522)) | (1L << (WITHIN - 522)) | (1L << (WORK - 522)) | (1L << (WRITE - 522)) | (1L << (XML - 522)) | (1L << (XMLAGG - 522)) | (1L << (XMLATTRIBUTES - 522)))) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & ((1L << (XMLCAST - 586)) | (1L << (XMLCOLATTVAL - 586)) | (1L << (XMLELEMENT - 586)) | (1L << (XMLEXISTS - 586)) | (1L << (XMLFOREST - 586)) | (1L << (XMLNAMESPACES - 586)) | (1L << (XMLPARSE - 586)) | (1L << (XMLPI - 586)) | (1L << (XMLQUERY - 586)) | (1L << (XMLROOT - 586)) | (1L << (XMLSERIALIZE - 586)) | (1L << (XMLTABLE - 586)) | (1L << (YEAR - 586)) | (1L << (YES - 586)) | (1L << (YMINTERVAL_UNCONSTRAINED - 586)) | (1L << (ZONE - 586)) | (1L << (PREDICTION - 586)) | (1L << (PREDICTION_BOUNDS - 586)) | (1L << (PREDICTION_COST - 586)) | (1L << (PREDICTION_DETAILS - 586)) | (1L << (PREDICTION_PROBABILITY - 586)) | (1L << (PREDICTION_SET - 586)) | (1L << (CUME_DIST - 586)) | (1L << (DENSE_RANK - 586)) | (1L << (LISTAGG - 586)) | (1L << (PERCENT_RANK - 586)) | (1L << (PERCENTILE_CONT - 586)) | (1L << (PERCENTILE_DISC - 586)) | (1L << (RANK - 586)) | (1L << (AVG - 586)) | (1L << (CORR - 586)) | (1L << (LAG - 586)) | (1L << (LEAD - 586)) | (1L << (MAX - 586)) | (1L << (MEDIAN - 586)) | (1L << (MIN - 586)) | (1L << (NTILE - 586)) | (1L << (RATIO_TO_REPORT - 586)) | (1L << (ROW_NUMBER - 586)) | (1L << (SUM - 586)) | (1L << (VARIANCE - 586)) | (1L << (REGR_ - 586)) | (1L << (STDDEV - 586)) | (1L << (VAR_ - 586)) | (1L << (COVAR_ - 586)) | (1L << (DELIMITED_ID - 586)))) != 0) || _la==REGULAR_ID) {
				{
				setState(7150);
				label_name();
				}
			}

			setState(7153);
			((Simple_case_statementContext)_localctx).ck1 = match(CASE);
			setState(7154);
			atom();
			setState(7156); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(7155);
				simple_case_when_part();
				}
				}
				setState(7158); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==WHEN );
			setState(7161);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ELSE) {
				{
				setState(7160);
				case_else_part();
				}
			}

			setState(7163);
			match(END);
			setState(7165);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1040,_ctx) ) {
			case 1:
				{
				setState(7164);
				match(CASE);
				}
				break;
			}
			setState(7168);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1041,_ctx) ) {
			case 1:
				{
				setState(7167);
				label_name();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Simple_case_when_partContext extends ParserRuleContext {
		public ExpressionContext whenExpr;
		public ExpressionContext thenExpr;
		public TerminalNode WHEN() { return getToken(PLSQLParser.WHEN, 0); }
		public TerminalNode THEN() { return getToken(PLSQLParser.THEN, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public Simple_case_when_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simple_case_when_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterSimple_case_when_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitSimple_case_when_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitSimple_case_when_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Simple_case_when_partContext simple_case_when_part() throws RecognitionException {
		Simple_case_when_partContext _localctx = new Simple_case_when_partContext(_ctx, getState());
		enterRule(_localctx, 876, RULE_simple_case_when_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7170);
			match(WHEN);
			setState(7171);
			((Simple_case_when_partContext)_localctx).whenExpr = expression(0);
			setState(7172);
			match(THEN);
			setState(7175);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1042,_ctx) ) {
			case 1:
				{
				setState(7173);
				seq_of_statements();
				}
				break;
			case 2:
				{
				setState(7174);
				((Simple_case_when_partContext)_localctx).thenExpr = expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Searched_case_statementContext extends ParserRuleContext {
		public Token ck1;
		public TerminalNode END() { return getToken(PLSQLParser.END, 0); }
		public List<TerminalNode> CASE() { return getTokens(PLSQLParser.CASE); }
		public TerminalNode CASE(int i) {
			return getToken(PLSQLParser.CASE, i);
		}
		public List<Label_nameContext> label_name() {
			return getRuleContexts(Label_nameContext.class);
		}
		public Label_nameContext label_name(int i) {
			return getRuleContext(Label_nameContext.class,i);
		}
		public List<Searched_case_when_partContext> searched_case_when_part() {
			return getRuleContexts(Searched_case_when_partContext.class);
		}
		public Searched_case_when_partContext searched_case_when_part(int i) {
			return getRuleContext(Searched_case_when_partContext.class,i);
		}
		public Case_else_partContext case_else_part() {
			return getRuleContext(Case_else_partContext.class,0);
		}
		public Searched_case_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_searched_case_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterSearched_case_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitSearched_case_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitSearched_case_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Searched_case_statementContext searched_case_statement() throws RecognitionException {
		Searched_case_statementContext _localctx = new Searched_case_statementContext(_ctx, getState());
		enterRule(_localctx, 878, RULE_searched_case_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7178);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BUILD) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (CHR - 65)) | (1L << (CLOB - 65)) | (1L << (CLOSE - 65)) | (1L << (CLUSTER - 65)) | (1L << (COALESCE - 65)) | (1L << (COLLECT - 65)) | (1L << (COLUMNS - 65)) | (1L << (COMMENT - 65)) | (1L << (COMMIT - 65)) | (1L << (COMMITTED - 65)) | (1L << (COMPATIBILITY - 65)) | (1L << (COMPILE - 65)) | (1L << (COMPLETE - 65)) | (1L << (COMPOUND - 65)) | (1L << (CONCAT - 65)) | (1L << (CONSTANT - 65)) | (1L << (CONSTRAINT - 65)) | (1L << (CONSTRAINTS - 65)) | (1L << (CONSTRUCTOR - 65)) | (1L << (CONTENT - 65)) | (1L << (CONTEXT - 65)) | (1L << (CONTINUE - 65)) | (1L << (CONVERT - 65)) | (1L << (CORRUPT_XID - 65)) | (1L << (CORRUPT_XID_ALL - 65)) | (1L << (COST - 65)) | (1L << (COUNT - 65)) | (1L << (CROSS - 65)) | (1L << (CUBE - 65)) | (1L << (CURRENT_USER - 65)) | (1L << (CURSOR - 65)) | (1L << (CUSTOMDATUM - 65)) | (1L << (CYCLE - 65)) | (1L << (DATA - 65)) | (1L << (DATABASE - 65)) | (1L << (DATE - 65)) | (1L << (DAY - 65)) | (1L << (DB_ROLE_CHANGE - 65)) | (1L << (DBTIMEZONE - 65)) | (1L << (DDL - 65)) | (1L << (DEBUG - 65)) | (1L << (DEC - 65)) | (1L << (DECIMAL - 65)) | (1L << (DECODE - 65)) | (1L << (DECOMPOSE - 65)) | (1L << (DECREMENT - 65)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DEMAND - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (EDITIONING - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENFORCED - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FAST - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)) | (1L << (FOLLOWING - 129)) | (1L << (FOLLOWS - 129)) | (1L << (FORALL - 129)) | (1L << (FORCE - 129)))) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & ((1L << (FULL - 197)) | (1L << (FUNCTION - 197)) | (1L << (GROUPING - 197)) | (1L << (HASH - 197)) | (1L << (HIDE - 197)) | (1L << (HOUR - 197)) | (1L << (IGNORE - 197)) | (1L << (IMMEDIATE - 197)) | (1L << (INCLUDE - 197)) | (1L << (INCLUDING - 197)) | (1L << (INCREMENT - 197)) | (1L << (INDENT - 197)) | (1L << (INDEXED - 197)) | (1L << (INDICATOR - 197)) | (1L << (INDICES - 197)) | (1L << (INFINITE - 197)) | (1L << (INLINE - 197)) | (1L << (INNER - 197)) | (1L << (INOUT - 197)) | (1L << (INSTANTIABLE - 197)) | (1L << (INSTEAD - 197)) | (1L << (INT - 197)) | (1L << (INTEGER - 197)) | (1L << (INTERVAL - 197)) | (1L << (INVALIDATE - 197)) | (1L << (ISOLATION - 197)) | (1L << (ITERATE - 197)) | (1L << (JAVA - 197)) | (1L << (JOIN - 197)) | (1L << (KEEP - 197)) | (1L << (LANGUAGE - 197)) | (1L << (LAST - 197)) | (1L << (LAST_VALUE - 197)) | (1L << (LEADING - 197)) | (1L << (LEFT - 197)) | (1L << (LEVEL - 197)))) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & ((1L << (LIBRARY - 261)) | (1L << (LIKE2 - 261)) | (1L << (LIKE4 - 261)) | (1L << (LIKEC - 261)) | (1L << (LIMIT - 261)) | (1L << (LIST - 261)) | (1L << (LOCAL - 261)) | (1L << (LOCKED - 261)) | (1L << (LOG - 261)) | (1L << (LOGOFF - 261)) | (1L << (LOGON - 261)) | (1L << (LONG - 261)) | (1L << (LOOP - 261)) | (1L << (MAIN - 261)) | (1L << (MAP - 261)) | (1L << (MASTER - 261)) | (1L << (MATCHED - 261)) | (1L << (MAXVALUE - 261)) | (1L << (MEASURES - 261)) | (1L << (MEMBER - 261)) | (1L << (MERGE - 261)) | (1L << (MINUTE - 261)) | (1L << (MINVALUE - 261)) | (1L << (MLSLABEL - 261)) | (1L << (MODEL - 261)) | (1L << (MODIFY - 261)) | (1L << (MONTH - 261)) | (1L << (MULTISET - 261)) | (1L << (NAME - 261)) | (1L << (NAN - 261)) | (1L << (NATURAL - 261)) | (1L << (NATURALN - 261)) | (1L << (NAV - 261)) | (1L << (NCHAR - 261)) | (1L << (NCHAR_CS - 261)) | (1L << (NCLOB - 261)) | (1L << (NESTED - 261)) | (1L << (NEVER - 261)) | (1L << (NEW - 261)) | (1L << (NO - 261)) | (1L << (NOAUDIT - 261)) | (1L << (NOCOPY - 261)) | (1L << (NOCYCLE - 261)) | (1L << (NOENTITYESCAPING - 261)))) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & ((1L << (NONE - 329)) | (1L << (NOSCHEMACHECK - 329)) | (1L << (NVL - 329)) | (1L << (NULLS - 329)) | (1L << (NUMBER - 329)) | (1L << (NUMERIC - 329)) | (1L << (NVARCHAR2 - 329)) | (1L << (MATERIALIZED - 329)) | (1L << (OBJECT - 329)) | (1L << (OFF - 329)) | (1L << (OID - 329)) | (1L << (OLD - 329)) | (1L << (ONLY - 329)) | (1L << (OPEN - 329)) | (1L << (ORADATA - 329)) | (1L << (ORDINALITY - 329)) | (1L << (OSERROR - 329)) | (1L << (OUT - 329)) | (1L << (OUTER - 329)) | (1L << (OVER - 329)) | (1L << (OVERRIDING - 329)) | (1L << (PACKAGE - 329)) | (1L << (PARALLEL_ENABLE - 329)) | (1L << (PARAMETERS - 329)) | (1L << (PARENT - 329)) | (1L << (PARTITION - 329)) | (1L << (PASSING - 329)) | (1L << (PATH - 329)) | (1L << (PIPELINED - 329)) | (1L << (PLAN - 329)) | (1L << (PLS_INTEGER - 329)) | (1L << (POSITIVE - 329)) | (1L << (POSITIVEN - 329)) | (1L << (PRAGMA - 329)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (PREBUILT - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)) | (1L << (PRESENT - 393)) | (1L << (PUBLIC - 393)) | (1L << (RAISE - 393)) | (1L << (RANGE - 393)) | (1L << (RAW - 393)) | (1L << (READ - 393)) | (1L << (REAL - 393)) | (1L << (RECORD - 393)) | (1L << (REDUCED - 393)) | (1L << (REF - 393)) | (1L << (REFERENCE - 393)) | (1L << (REFERENCING - 393)) | (1L << (REFRESH - 393)) | (1L << (REJECT - 393)) | (1L << (RELIES_ON - 393)) | (1L << (RENAME - 393)) | (1L << (REPLACE - 393)) | (1L << (RESPECT - 393)) | (1L << (RESTRICT_REFERENCES - 393)) | (1L << (RESULT - 393)) | (1L << (RESULT_CACHE - 393)) | (1L << (RETURN - 393)) | (1L << (RETURNING - 393)) | (1L << (REUSE - 393)) | (1L << (REVERSE - 393)) | (1L << (REWRITE - 393)) | (1L << (RIGHT - 393)) | (1L << (ROLE - 393)) | (1L << (ROLLBACK - 393)) | (1L << (ROLLUP - 393)) | (1L << (ROW - 393)) | (1L << (ROWID - 393)) | (1L << (ROWS - 393)) | (1L << (RULES - 393)) | (1L << (SAMPLE - 393)) | (1L << (SAVE - 393)) | (1L << (SAVEPOINT - 393)) | (1L << (SCHEMA - 393)) | (1L << (SCHEMACHECK - 393)) | (1L << (SCN - 393)) | (1L << (SECOND - 393)))) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & ((1L << (SEED - 458)) | (1L << (SEGMENT - 458)) | (1L << (SELF - 458)) | (1L << (SEQUENTIAL - 458)) | (1L << (SERIALIZABLE - 458)) | (1L << (SERIALLY_REUSABLE - 458)) | (1L << (SERVERERROR - 458)) | (1L << (SESSIONTIMEZONE - 458)) | (1L << (SET - 458)) | (1L << (SETS - 458)) | (1L << (SETTINGS - 458)) | (1L << (SHOW - 458)) | (1L << (SHUTDOWN - 458)) | (1L << (SIBLINGS - 458)) | (1L << (SIGNTYPE - 458)) | (1L << (SIMPLE_INTEGER - 458)) | (1L << (SINGLE - 458)) | (1L << (SIZE - 458)) | (1L << (SKIP_ - 458)) | (1L << (SMALLINT - 458)) | (1L << (SNAPSHOT - 458)) | (1L << (SOME - 458)) | (1L << (SPECIFICATION - 458)) | (1L << (SQLDATA - 458)) | (1L << (SQLERROR - 458)) | (1L << (STANDALONE - 458)) | (1L << (STARTUP - 458)) | (1L << (STATEMENT - 458)) | (1L << (STATEMENT_ID - 458)) | (1L << (STATIC - 458)) | (1L << (STATISTICS - 458)) | (1L << (STRING - 458)) | (1L << (SUBMULTISET - 458)) | (1L << (SUBPARTITION - 458)) | (1L << (SUBSTITUTABLE - 458)) | (1L << (SUBSTRING - 458)) | (1L << (SUBTYPE - 458)) | (1L << (SUCCESS - 458)) | (1L << (SUSPEND - 458)) | (1L << (TABLES - 458)) | (1L << (TIME - 458)) | (1L << (TIMESTAMP - 458)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 458)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 458)) | (1L << (TIMESTAMP_UNCONSTRAINED - 458)))) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & ((1L << (TIMEZONE_ABBR - 522)) | (1L << (TIMEZONE_HOUR - 522)) | (1L << (TIMEZONE_MINUTE - 522)) | (1L << (TIMEZONE_REGION - 522)) | (1L << (TO_CHAR - 522)) | (1L << (TO_DATE - 522)) | (1L << (TRAILING - 522)) | (1L << (TRANSACTION - 522)) | (1L << (TRANSLATE - 522)) | (1L << (TREAT - 522)) | (1L << (TRIGGER - 522)) | (1L << (TRIM - 522)) | (1L << (TRUNCATE - 522)) | (1L << (TRUSTED - 522)) | (1L << (TYPE - 522)) | (1L << (UNBOUNDED - 522)) | (1L << (UNDER - 522)) | (1L << (UNLIMITED - 522)) | (1L << (UNTIL - 522)) | (1L << (UPDATED - 522)) | (1L << (UPSERT - 522)) | (1L << (UROWID - 522)) | (1L << (USE - 522)) | (1L << (VALIDATE - 522)) | (1L << (VALUE - 522)) | (1L << (VARCHAR - 522)) | (1L << (VARCHAR2 - 522)) | (1L << (VARIABLE - 522)) | (1L << (VARRAY - 522)) | (1L << (VARYING - 522)) | (1L << (VERBOSE - 522)) | (1L << (VERSION - 522)) | (1L << (VERSIONS - 522)) | (1L << (VIEW - 522)) | (1L << (WAIT - 522)) | (1L << (WARNING - 522)) | (1L << (WELLFORMED - 522)) | (1L << (WHENEVER - 522)) | (1L << (WHILE - 522)) | (1L << (WITHOUT - 522)) | (1L << (WITHIN - 522)) | (1L << (WORK - 522)) | (1L << (WRITE - 522)) | (1L << (XML - 522)) | (1L << (XMLAGG - 522)) | (1L << (XMLATTRIBUTES - 522)))) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & ((1L << (XMLCAST - 586)) | (1L << (XMLCOLATTVAL - 586)) | (1L << (XMLELEMENT - 586)) | (1L << (XMLEXISTS - 586)) | (1L << (XMLFOREST - 586)) | (1L << (XMLNAMESPACES - 586)) | (1L << (XMLPARSE - 586)) | (1L << (XMLPI - 586)) | (1L << (XMLQUERY - 586)) | (1L << (XMLROOT - 586)) | (1L << (XMLSERIALIZE - 586)) | (1L << (XMLTABLE - 586)) | (1L << (YEAR - 586)) | (1L << (YES - 586)) | (1L << (YMINTERVAL_UNCONSTRAINED - 586)) | (1L << (ZONE - 586)) | (1L << (PREDICTION - 586)) | (1L << (PREDICTION_BOUNDS - 586)) | (1L << (PREDICTION_COST - 586)) | (1L << (PREDICTION_DETAILS - 586)) | (1L << (PREDICTION_PROBABILITY - 586)) | (1L << (PREDICTION_SET - 586)) | (1L << (CUME_DIST - 586)) | (1L << (DENSE_RANK - 586)) | (1L << (LISTAGG - 586)) | (1L << (PERCENT_RANK - 586)) | (1L << (PERCENTILE_CONT - 586)) | (1L << (PERCENTILE_DISC - 586)) | (1L << (RANK - 586)) | (1L << (AVG - 586)) | (1L << (CORR - 586)) | (1L << (LAG - 586)) | (1L << (LEAD - 586)) | (1L << (MAX - 586)) | (1L << (MEDIAN - 586)) | (1L << (MIN - 586)) | (1L << (NTILE - 586)) | (1L << (RATIO_TO_REPORT - 586)) | (1L << (ROW_NUMBER - 586)) | (1L << (SUM - 586)) | (1L << (VARIANCE - 586)) | (1L << (REGR_ - 586)) | (1L << (STDDEV - 586)) | (1L << (VAR_ - 586)) | (1L << (COVAR_ - 586)) | (1L << (DELIMITED_ID - 586)))) != 0) || _la==REGULAR_ID) {
				{
				setState(7177);
				label_name();
				}
			}

			setState(7180);
			((Searched_case_statementContext)_localctx).ck1 = match(CASE);
			setState(7182); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(7181);
				searched_case_when_part();
				}
				}
				setState(7184); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==WHEN );
			setState(7187);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ELSE) {
				{
				setState(7186);
				case_else_part();
				}
			}

			setState(7189);
			match(END);
			setState(7191);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1046,_ctx) ) {
			case 1:
				{
				setState(7190);
				match(CASE);
				}
				break;
			}
			setState(7194);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1047,_ctx) ) {
			case 1:
				{
				setState(7193);
				label_name();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Searched_case_when_partContext extends ParserRuleContext {
		public ExpressionContext whenExpr;
		public ExpressionContext thenExpr;
		public TerminalNode WHEN() { return getToken(PLSQLParser.WHEN, 0); }
		public TerminalNode THEN() { return getToken(PLSQLParser.THEN, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public Searched_case_when_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_searched_case_when_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterSearched_case_when_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitSearched_case_when_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitSearched_case_when_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Searched_case_when_partContext searched_case_when_part() throws RecognitionException {
		Searched_case_when_partContext _localctx = new Searched_case_when_partContext(_ctx, getState());
		enterRule(_localctx, 880, RULE_searched_case_when_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7196);
			match(WHEN);
			setState(7197);
			((Searched_case_when_partContext)_localctx).whenExpr = expression(0);
			setState(7198);
			match(THEN);
			setState(7201);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1048,_ctx) ) {
			case 1:
				{
				setState(7199);
				seq_of_statements();
				}
				break;
			case 2:
				{
				setState(7200);
				((Searched_case_when_partContext)_localctx).thenExpr = expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Case_else_partContext extends ParserRuleContext {
		public TerminalNode ELSE() { return getToken(PLSQLParser.ELSE, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Case_else_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_case_else_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterCase_else_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitCase_else_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitCase_else_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Case_else_partContext case_else_part() throws RecognitionException {
		Case_else_partContext _localctx = new Case_else_partContext(_ctx, getState());
		enterRule(_localctx, 882, RULE_case_else_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7203);
			match(ELSE);
			setState(7206);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1049,_ctx) ) {
			case 1:
				{
				setState(7204);
				seq_of_statements();
				}
				break;
			case 2:
				{
				setState(7205);
				expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AtomContext extends ParserRuleContext {
		public Table_elementContext table_element() {
			return getRuleContext(Table_elementContext.class,0);
		}
		public Outer_join_signContext outer_join_sign() {
			return getRuleContext(Outer_join_signContext.class,0);
		}
		public Bind_variableContext bind_variable() {
			return getRuleContext(Bind_variableContext.class,0);
		}
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public LiteralContext literal() {
			return getRuleContext(LiteralContext.class,0);
		}
		public General_elementContext general_element() {
			return getRuleContext(General_elementContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(PLSQLParser.LEFT_PAREN, 0); }
		public AtomContext atom() {
			return getRuleContext(AtomContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PLSQLParser.RIGHT_PAREN, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public AtomContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_atom; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitAtom(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AtomContext atom() throws RecognitionException {
		AtomContext _localctx = new AtomContext(_ctx, getState());
		enterRule(_localctx, 884, RULE_atom);
		try {
			setState(7226);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1051,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7208);
				table_element();
				setState(7209);
				outer_join_sign();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7211);
				bind_variable();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7212);
				constant();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7213);
				literal();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(7214);
				general_element();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(7215);
				match(LEFT_PAREN);
				setState(7216);
				atom();
				setState(7217);
				match(RIGHT_PAREN);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(7224);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1050,_ctx) ) {
				case 1:
					{
					setState(7219);
					match(LEFT_PAREN);
					setState(7220);
					subquery(0);
					setState(7221);
					match(RIGHT_PAREN);
					}
					break;
				case 2:
					{
					setState(7223);
					expression_list();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Expression_or_vectorContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Vector_exprContext vector_expr() {
			return getRuleContext(Vector_exprContext.class,0);
		}
		public Expression_or_vectorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expression_or_vector; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterExpression_or_vector(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitExpression_or_vector(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitExpression_or_vector(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Expression_or_vectorContext expression_or_vector() throws RecognitionException {
		Expression_or_vectorContext _localctx = new Expression_or_vectorContext(_ctx, getState());
		enterRule(_localctx, 886, RULE_expression_or_vector);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7228);
			expression(0);
			setState(7230);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(7229);
				vector_expr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Vector_exprContext extends ParserRuleContext {
		public List<TerminalNode> COMMA() { return getTokens(PLSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLSQLParser.COMMA, i);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public Vector_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_vector_expr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterVector_expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitVector_expr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitVector_expr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Vector_exprContext vector_expr() throws RecognitionException {
		Vector_exprContext _localctx = new Vector_exprContext(_ctx, getState());
		enterRule(_localctx, 888, RULE_vector_expr);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7232);
			match(COMMA);
			setState(7233);
			expression(0);
			setState(7238);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(7234);
				match(COMMA);
				setState(7235);
				expression(0);
				}
				}
				setState(7240);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Quantified_expressionContext extends ParserRuleContext {
		public TerminalNode SOME() { return getToken(PLSQLParser.SOME, 0); }
		public TerminalNode EXISTS() { return getToken(PLSQLParser.EXISTS, 0); }
		public TerminalNode ALL() { return getToken(PLSQLParser.ALL, 0); }
		public TerminalNode ANY() { return getToken(PLSQLParser.ANY, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PLSQLParser.LEFT_PAREN, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PLSQLParser.RIGHT_PAREN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Quantified_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_quantified_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterQuantified_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitQuantified_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitQuantified_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Quantified_expressionContext quantified_expression() throws RecognitionException {
		Quantified_expressionContext _localctx = new Quantified_expressionContext(_ctx, getState());
		enterRule(_localctx, 890, RULE_quantified_expression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7241);
			_la = _input.LA(1);
			if ( !(_la==ALL || _la==ANY || _la==EXISTS || _la==SOME) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(7250);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1054,_ctx) ) {
			case 1:
				{
				setState(7242);
				match(LEFT_PAREN);
				setState(7243);
				subquery(0);
				setState(7244);
				match(RIGHT_PAREN);
				}
				break;
			case 2:
				{
				setState(7246);
				match(LEFT_PAREN);
				setState(7247);
				expression(0);
				setState(7248);
				match(RIGHT_PAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Standard_functionContext extends ParserRuleContext {
		public Standard_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_standard_function; }
	 
		public Standard_functionContext() { }
		public void copyFrom(Standard_functionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class AggregateCallContext extends Standard_functionContext {
		public Aggregate_windowed_functionContext aggregate_windowed_function() {
			return getRuleContext(Aggregate_windowed_functionContext.class,0);
		}
		public AggregateCallContext(Standard_functionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterAggregateCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitAggregateCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitAggregateCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TodoCallContext extends Standard_functionContext {
		public Regular_idContext regular_id() {
			return getRuleContext(Regular_idContext.class,0);
		}
		public Function_argument_modelingContext function_argument_modeling() {
			return getRuleContext(Function_argument_modelingContext.class,0);
		}
		public Using_clauseContext using_clause() {
			return getRuleContext(Using_clauseContext.class,0);
		}
		public TerminalNode CHR() { return getToken(PLSQLParser.CHR, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PLSQLParser.LEFT_PAREN, 0); }
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		public TerminalNode USING() { return getToken(PLSQLParser.USING, 0); }
		public TerminalNode NCHAR_CS() { return getToken(PLSQLParser.NCHAR_CS, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PLSQLParser.RIGHT_PAREN, 0); }
		public TerminalNode COLLECT() { return getToken(PLSQLParser.COLLECT, 0); }
		public Collect_order_by_partContext collect_order_by_part() {
			return getRuleContext(Collect_order_by_partContext.class,0);
		}
		public TerminalNode DISTINCT() { return getToken(PLSQLParser.DISTINCT, 0); }
		public TerminalNode UNIQUE() { return getToken(PLSQLParser.UNIQUE, 0); }
		public TerminalNode DECOMPOSE() { return getToken(PLSQLParser.DECOMPOSE, 0); }
		public TerminalNode CANONICAL() { return getToken(PLSQLParser.CANONICAL, 0); }
		public TerminalNode COMPATIBILITY() { return getToken(PLSQLParser.COMPATIBILITY, 0); }
		public Function_argument_analyticContext function_argument_analytic() {
			return getRuleContext(Function_argument_analyticContext.class,0);
		}
		public Over_clauseContext over_clause() {
			return getRuleContext(Over_clauseContext.class,0);
		}
		public TerminalNode FIRST_VALUE() { return getToken(PLSQLParser.FIRST_VALUE, 0); }
		public TerminalNode LAST_VALUE() { return getToken(PLSQLParser.LAST_VALUE, 0); }
		public Respect_or_ignore_nullsContext respect_or_ignore_nulls() {
			return getRuleContext(Respect_or_ignore_nullsContext.class,0);
		}
		public Standard_prediction_function_keywordContext standard_prediction_function_keyword() {
			return getRuleContext(Standard_prediction_function_keywordContext.class,0);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLSQLParser.COMMA, i);
		}
		public Cost_matrix_clauseContext cost_matrix_clause() {
			return getRuleContext(Cost_matrix_clauseContext.class,0);
		}
		public TerminalNode POSITION() { return getToken(PLSQLParser.POSITION, 0); }
		public TerminalNode IN() { return getToken(PLSQLParser.IN, 0); }
		public TerminalNode TRANSLATE() { return getToken(PLSQLParser.TRANSLATE, 0); }
		public TerminalNode CHAR_CS() { return getToken(PLSQLParser.CHAR_CS, 0); }
		public TerminalNode TREAT() { return getToken(PLSQLParser.TREAT, 0); }
		public TerminalNode AS() { return getToken(PLSQLParser.AS, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode REF() { return getToken(PLSQLParser.REF, 0); }
		public TerminalNode TRIM() { return getToken(PLSQLParser.TRIM, 0); }
		public TerminalNode FROM() { return getToken(PLSQLParser.FROM, 0); }
		public Quoted_stringContext quoted_string() {
			return getRuleContext(Quoted_stringContext.class,0);
		}
		public TerminalNode LEADING() { return getToken(PLSQLParser.LEADING, 0); }
		public TerminalNode TRAILING() { return getToken(PLSQLParser.TRAILING, 0); }
		public TerminalNode BOTH() { return getToken(PLSQLParser.BOTH, 0); }
		public TodoCallContext(Standard_functionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterTodoCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitTodoCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitTodoCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class XmlCallContext extends Standard_functionContext {
		public TerminalNode XMLAGG() { return getToken(PLSQLParser.XMLAGG, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PLSQLParser.LEFT_PAREN, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PLSQLParser.RIGHT_PAREN, 0); }
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public TerminalNode PERIOD() { return getToken(PLSQLParser.PERIOD, 0); }
		public General_elementContext general_element() {
			return getRuleContext(General_elementContext.class,0);
		}
		public List<Xml_multiuse_expression_elementContext> xml_multiuse_expression_element() {
			return getRuleContexts(Xml_multiuse_expression_elementContext.class);
		}
		public Xml_multiuse_expression_elementContext xml_multiuse_expression_element(int i) {
			return getRuleContext(Xml_multiuse_expression_elementContext.class,i);
		}
		public TerminalNode XMLCOLATTVAL() { return getToken(PLSQLParser.XMLCOLATTVAL, 0); }
		public TerminalNode XMLFOREST() { return getToken(PLSQLParser.XMLFOREST, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PLSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLSQLParser.COMMA, i);
		}
		public TerminalNode XMLELEMENT() { return getToken(PLSQLParser.XMLELEMENT, 0); }
		public Xml_attributes_clauseContext xml_attributes_clause() {
			return getRuleContext(Xml_attributes_clauseContext.class,0);
		}
		public TerminalNode ENTITYESCAPING() { return getToken(PLSQLParser.ENTITYESCAPING, 0); }
		public TerminalNode NOENTITYESCAPING() { return getToken(PLSQLParser.NOENTITYESCAPING, 0); }
		public TerminalNode NAME() { return getToken(PLSQLParser.NAME, 0); }
		public TerminalNode EVALNAME() { return getToken(PLSQLParser.EVALNAME, 0); }
		public List<Column_aliasContext> column_alias() {
			return getRuleContexts(Column_aliasContext.class);
		}
		public Column_aliasContext column_alias(int i) {
			return getRuleContext(Column_aliasContext.class,i);
		}
		public TerminalNode XMLEXISTS() { return getToken(PLSQLParser.XMLEXISTS, 0); }
		public Xml_passing_clauseContext xml_passing_clause() {
			return getRuleContext(Xml_passing_clauseContext.class,0);
		}
		public TerminalNode XMLPARSE() { return getToken(PLSQLParser.XMLPARSE, 0); }
		public List<ConcatenationContext> concatenation() {
			return getRuleContexts(ConcatenationContext.class);
		}
		public ConcatenationContext concatenation(int i) {
			return getRuleContext(ConcatenationContext.class,i);
		}
		public TerminalNode DOCUMENT() { return getToken(PLSQLParser.DOCUMENT, 0); }
		public TerminalNode CONTENT() { return getToken(PLSQLParser.CONTENT, 0); }
		public TerminalNode WELLFORMED() { return getToken(PLSQLParser.WELLFORMED, 0); }
		public TerminalNode XMLPI() { return getToken(PLSQLParser.XMLPI, 0); }
		public R_idContext r_id() {
			return getRuleContext(R_idContext.class,0);
		}
		public TerminalNode XMLQUERY() { return getToken(PLSQLParser.XMLQUERY, 0); }
		public TerminalNode RETURNING() { return getToken(PLSQLParser.RETURNING, 0); }
		public TerminalNode NULL() { return getToken(PLSQLParser.NULL, 0); }
		public TerminalNode ON() { return getToken(PLSQLParser.ON, 0); }
		public TerminalNode EMPTY() { return getToken(PLSQLParser.EMPTY, 0); }
		public TerminalNode XMLROOT() { return getToken(PLSQLParser.XMLROOT, 0); }
		public Xmlroot_param_version_partContext xmlroot_param_version_part() {
			return getRuleContext(Xmlroot_param_version_partContext.class,0);
		}
		public Xmlroot_param_standalone_partContext xmlroot_param_standalone_part() {
			return getRuleContext(Xmlroot_param_standalone_partContext.class,0);
		}
		public TerminalNode XMLSERIALIZE() { return getToken(PLSQLParser.XMLSERIALIZE, 0); }
		public TerminalNode AS() { return getToken(PLSQLParser.AS, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public Xmlserialize_param_enconding_partContext xmlserialize_param_enconding_part() {
			return getRuleContext(Xmlserialize_param_enconding_partContext.class,0);
		}
		public Xmlserialize_param_version_partContext xmlserialize_param_version_part() {
			return getRuleContext(Xmlserialize_param_version_partContext.class,0);
		}
		public Xmlserialize_param_ident_partContext xmlserialize_param_ident_part() {
			return getRuleContext(Xmlserialize_param_ident_partContext.class,0);
		}
		public TerminalNode DEFAULTS() { return getToken(PLSQLParser.DEFAULTS, 0); }
		public TerminalNode HIDE() { return getToken(PLSQLParser.HIDE, 0); }
		public TerminalNode SHOW() { return getToken(PLSQLParser.SHOW, 0); }
		public TerminalNode XMLTABLE() { return getToken(PLSQLParser.XMLTABLE, 0); }
		public Xml_namespaces_clauseContext xml_namespaces_clause() {
			return getRuleContext(Xml_namespaces_clauseContext.class,0);
		}
		public TerminalNode COLUMNS() { return getToken(PLSQLParser.COLUMNS, 0); }
		public List<Xml_table_columnContext> xml_table_column() {
			return getRuleContexts(Xml_table_columnContext.class);
		}
		public Xml_table_columnContext xml_table_column(int i) {
			return getRuleContext(Xml_table_columnContext.class,i);
		}
		public XmlCallContext(Standard_functionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterXmlCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitXmlCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitXmlCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CastCallContext extends Standard_functionContext {
		public List<TerminalNode> LEFT_PAREN() { return getTokens(PLSQLParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(PLSQLParser.LEFT_PAREN, i);
		}
		public TerminalNode AS() { return getToken(PLSQLParser.AS, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(PLSQLParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(PLSQLParser.RIGHT_PAREN, i);
		}
		public TerminalNode CAST() { return getToken(PLSQLParser.CAST, 0); }
		public TerminalNode XMLCAST() { return getToken(PLSQLParser.XMLCAST, 0); }
		public TerminalNode MULTISET() { return getToken(PLSQLParser.MULTISET, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public AtomContext atom() {
			return getRuleContext(AtomContext.class,0);
		}
		public Standard_functionContext standard_function() {
			return getRuleContext(Standard_functionContext.class,0);
		}
		public CastCallContext(Standard_functionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterCastCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitCastCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitCastCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ExtractCallContext extends Standard_functionContext {
		public Token name;
		public TerminalNode LEFT_PAREN() { return getToken(PLSQLParser.LEFT_PAREN, 0); }
		public TerminalNode FROM() { return getToken(PLSQLParser.FROM, 0); }
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PLSQLParser.RIGHT_PAREN, 0); }
		public TerminalNode EXTRACT() { return getToken(PLSQLParser.EXTRACT, 0); }
		public Regular_idContext regular_id() {
			return getRuleContext(Regular_idContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public ExtractCallContext(Standard_functionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterExtractCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitExtractCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitExtractCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class WithinOrOverCallContext extends Standard_functionContext {
		public Within_or_over_clause_keywordContext name;
		public Function_argumentContext function_argument() {
			return getRuleContext(Function_argumentContext.class,0);
		}
		public Within_or_over_clause_keywordContext within_or_over_clause_keyword() {
			return getRuleContext(Within_or_over_clause_keywordContext.class,0);
		}
		public List<Within_or_over_partContext> within_or_over_part() {
			return getRuleContexts(Within_or_over_partContext.class);
		}
		public Within_or_over_partContext within_or_over_part(int i) {
			return getRuleContext(Within_or_over_partContext.class,i);
		}
		public WithinOrOverCallContext(Standard_functionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterWithinOrOverCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitWithinOrOverCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitWithinOrOverCall(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Standard_functionContext standard_function() throws RecognitionException {
		return standard_function(0);
	}

	private Standard_functionContext standard_function(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Standard_functionContext _localctx = new Standard_functionContext(_ctx, _parentState);
		Standard_functionContext _prevctx = _localctx;
		int _startState = 892;
		enterRecursionRule(_localctx, 892, RULE_standard_function, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(7568);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1105,_ctx) ) {
			case 1:
				{
				_localctx = new AggregateCallContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				setState(7253);
				aggregate_windowed_function();
				}
				break;
			case 2:
				{
				_localctx = new TodoCallContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(7254);
				regular_id();
				setState(7255);
				function_argument_modeling();
				setState(7257);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1055,_ctx) ) {
				case 1:
					{
					setState(7256);
					using_clause();
					}
					break;
				}
				}
				break;
			case 3:
				{
				_localctx = new CastCallContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(7259);
				_la = _input.LA(1);
				if ( !(_la==CAST || _la==XMLCAST) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7260);
				match(LEFT_PAREN);
				setState(7268);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1056,_ctx) ) {
				case 1:
					{
					setState(7261);
					match(MULTISET);
					setState(7262);
					match(LEFT_PAREN);
					setState(7263);
					subquery(0);
					setState(7264);
					match(RIGHT_PAREN);
					}
					break;
				case 2:
					{
					setState(7266);
					concatenation();
					}
					break;
				case 3:
					{
					setState(7267);
					expression(0);
					}
					break;
				}
				setState(7270);
				match(AS);
				setState(7271);
				type_spec();
				setState(7272);
				match(RIGHT_PAREN);
				}
				break;
			case 4:
				{
				_localctx = new CastCallContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(7276);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1057,_ctx) ) {
				case 1:
					{
					setState(7274);
					subquery(0);
					}
					break;
				case 2:
					{
					setState(7275);
					atom();
					}
					break;
				}
				setState(7278);
				match(T__2);
				setState(7279);
				type_spec();
				}
				break;
			case 5:
				{
				_localctx = new TodoCallContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(7281);
				match(CHR);
				setState(7282);
				match(LEFT_PAREN);
				setState(7283);
				concatenation();
				setState(7284);
				match(USING);
				setState(7285);
				match(NCHAR_CS);
				setState(7286);
				match(RIGHT_PAREN);
				}
				break;
			case 6:
				{
				_localctx = new TodoCallContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(7288);
				match(COLLECT);
				setState(7289);
				match(LEFT_PAREN);
				setState(7291);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1058,_ctx) ) {
				case 1:
					{
					setState(7290);
					_la = _input.LA(1);
					if ( !(_la==DISTINCT || _la==UNIQUE) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(7293);
				concatenation();
				setState(7295);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ORDER) {
					{
					setState(7294);
					collect_order_by_part();
					}
				}

				setState(7297);
				match(RIGHT_PAREN);
				}
				break;
			case 7:
				{
				_localctx = new WithinOrOverCallContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(7299);
				((WithinOrOverCallContext)_localctx).name = within_or_over_clause_keyword();
				setState(7300);
				function_argument();
				setState(7302); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(7301);
						within_or_over_part();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(7304); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,1060,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 8:
				{
				_localctx = new TodoCallContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(7306);
				match(DECOMPOSE);
				setState(7307);
				match(LEFT_PAREN);
				setState(7308);
				concatenation();
				setState(7310);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CANONICAL || _la==COMPATIBILITY) {
					{
					setState(7309);
					_la = _input.LA(1);
					if ( !(_la==CANONICAL || _la==COMPATIBILITY) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(7312);
				match(RIGHT_PAREN);
				}
				break;
			case 9:
				{
				_localctx = new ExtractCallContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(7314);
				((ExtractCallContext)_localctx).name = match(EXTRACT);
				setState(7315);
				match(LEFT_PAREN);
				setState(7318);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1062,_ctx) ) {
				case 1:
					{
					setState(7316);
					regular_id();
					}
					break;
				case 2:
					{
					setState(7317);
					expression(0);
					}
					break;
				}
				setState(7320);
				match(FROM);
				setState(7321);
				concatenation();
				setState(7322);
				match(RIGHT_PAREN);
				}
				break;
			case 10:
				{
				_localctx = new TodoCallContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(7324);
				_la = _input.LA(1);
				if ( !(_la==FIRST_VALUE || _la==LAST_VALUE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7325);
				function_argument_analytic();
				setState(7327);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IGNORE || _la==RESPECT) {
					{
					setState(7326);
					respect_or_ignore_nulls();
					}
				}

				setState(7329);
				over_clause();
				}
				break;
			case 11:
				{
				_localctx = new TodoCallContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(7331);
				standard_prediction_function_keyword();
				setState(7332);
				match(LEFT_PAREN);
				setState(7333);
				expression(0);
				setState(7338);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(7334);
					match(COMMA);
					setState(7335);
					expression(0);
					}
					}
					setState(7340);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(7342);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COST) {
					{
					setState(7341);
					cost_matrix_clause();
					}
				}

				setState(7345);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(7344);
					using_clause();
					}
				}

				setState(7347);
				match(RIGHT_PAREN);
				}
				break;
			case 12:
				{
				_localctx = new TodoCallContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(7349);
				match(POSITION);
				setState(7350);
				match(LEFT_PAREN);
				setState(7351);
				expression(0);
				setState(7352);
				match(IN);
				setState(7353);
				expression(0);
				setState(7354);
				match(RIGHT_PAREN);
				}
				break;
			case 13:
				{
				_localctx = new TodoCallContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(7356);
				match(TRANSLATE);
				setState(7357);
				match(LEFT_PAREN);
				setState(7358);
				expression(0);
				setState(7361);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(7359);
					match(USING);
					setState(7360);
					_la = _input.LA(1);
					if ( !(_la==CHAR_CS || _la==NCHAR_CS) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(7367);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(7363);
					match(COMMA);
					setState(7364);
					expression(0);
					}
					}
					setState(7369);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(7370);
				match(RIGHT_PAREN);
				}
				break;
			case 14:
				{
				_localctx = new TodoCallContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(7372);
				match(TREAT);
				setState(7373);
				match(LEFT_PAREN);
				setState(7374);
				expression(0);
				setState(7375);
				match(AS);
				setState(7377);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1069,_ctx) ) {
				case 1:
					{
					setState(7376);
					match(REF);
					}
					break;
				}
				setState(7379);
				type_spec();
				setState(7380);
				match(RIGHT_PAREN);
				}
				break;
			case 15:
				{
				_localctx = new TodoCallContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(7382);
				match(TRIM);
				setState(7383);
				match(LEFT_PAREN);
				setState(7391);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1072,_ctx) ) {
				case 1:
					{
					setState(7385);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==BOTH || _la==LEADING || _la==TRAILING) {
						{
						setState(7384);
						_la = _input.LA(1);
						if ( !(_la==BOTH || _la==LEADING || _la==TRAILING) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
					}

					setState(7388);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==NATIONAL_CHAR_STRING_LIT || _la==CHAR_STRING) {
						{
						setState(7387);
						quoted_string();
						}
					}

					setState(7390);
					match(FROM);
					}
					break;
				}
				setState(7393);
				concatenation();
				setState(7394);
				match(RIGHT_PAREN);
				}
				break;
			case 16:
				{
				_localctx = new XmlCallContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(7396);
				match(XMLAGG);
				setState(7397);
				match(LEFT_PAREN);
				setState(7398);
				expression(0);
				setState(7400);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ORDER) {
					{
					setState(7399);
					order_by_clause();
					}
				}

				setState(7402);
				match(RIGHT_PAREN);
				setState(7405);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1074,_ctx) ) {
				case 1:
					{
					setState(7403);
					match(PERIOD);
					setState(7404);
					general_element();
					}
					break;
				}
				}
				break;
			case 17:
				{
				_localctx = new XmlCallContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(7407);
				_la = _input.LA(1);
				if ( !(_la==XMLCOLATTVAL || _la==XMLFOREST) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7408);
				match(LEFT_PAREN);
				setState(7409);
				xml_multiuse_expression_element();
				setState(7414);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(7410);
					match(COMMA);
					setState(7411);
					xml_multiuse_expression_element();
					}
					}
					setState(7416);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(7417);
				match(RIGHT_PAREN);
				setState(7420);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1076,_ctx) ) {
				case 1:
					{
					setState(7418);
					match(PERIOD);
					setState(7419);
					general_element();
					}
					break;
				}
				}
				break;
			case 18:
				{
				_localctx = new XmlCallContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(7422);
				match(XMLELEMENT);
				setState(7423);
				match(LEFT_PAREN);
				setState(7425);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1077,_ctx) ) {
				case 1:
					{
					setState(7424);
					_la = _input.LA(1);
					if ( !(_la==ENTITYESCAPING || _la==NOENTITYESCAPING) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(7428);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1078,_ctx) ) {
				case 1:
					{
					setState(7427);
					_la = _input.LA(1);
					if ( !(_la==EVALNAME || _la==NAME) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(7430);
				expression(0);
				setState(7433);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1079,_ctx) ) {
				case 1:
					{
					setState(7431);
					match(COMMA);
					setState(7432);
					xml_attributes_clause();
					}
					break;
				}
				setState(7442);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(7435);
					match(COMMA);
					setState(7436);
					expression(0);
					setState(7438);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << AS) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BUILD) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (CHR - 65)) | (1L << (CLOB - 65)) | (1L << (CLOSE - 65)) | (1L << (CLUSTER - 65)) | (1L << (COALESCE - 65)) | (1L << (COLLECT - 65)) | (1L << (COLUMNS - 65)) | (1L << (COMMENT - 65)) | (1L << (COMMIT - 65)) | (1L << (COMMITTED - 65)) | (1L << (COMPATIBILITY - 65)) | (1L << (COMPILE - 65)) | (1L << (COMPLETE - 65)) | (1L << (COMPOUND - 65)) | (1L << (CONCAT - 65)) | (1L << (CONSTANT - 65)) | (1L << (CONSTRAINT - 65)) | (1L << (CONSTRAINTS - 65)) | (1L << (CONSTRUCTOR - 65)) | (1L << (CONTENT - 65)) | (1L << (CONTEXT - 65)) | (1L << (CONTINUE - 65)) | (1L << (CONVERT - 65)) | (1L << (CORRUPT_XID - 65)) | (1L << (CORRUPT_XID_ALL - 65)) | (1L << (COST - 65)) | (1L << (COUNT - 65)) | (1L << (CROSS - 65)) | (1L << (CUBE - 65)) | (1L << (CURRENT_USER - 65)) | (1L << (CURSOR - 65)) | (1L << (CUSTOMDATUM - 65)) | (1L << (CYCLE - 65)) | (1L << (DATA - 65)) | (1L << (DATABASE - 65)) | (1L << (DATE - 65)) | (1L << (DAY - 65)) | (1L << (DB_ROLE_CHANGE - 65)) | (1L << (DBTIMEZONE - 65)) | (1L << (DDL - 65)) | (1L << (DEBUG - 65)) | (1L << (DEC - 65)) | (1L << (DECIMAL - 65)) | (1L << (DECODE - 65)) | (1L << (DECOMPOSE - 65)) | (1L << (DECREMENT - 65)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DEMAND - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (EDITIONING - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENFORCED - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FAST - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)) | (1L << (FOLLOWING - 129)) | (1L << (FOLLOWS - 129)) | (1L << (FORALL - 129)) | (1L << (FORCE - 129)))) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & ((1L << (FULL - 197)) | (1L << (FUNCTION - 197)) | (1L << (GROUPING - 197)) | (1L << (HASH - 197)) | (1L << (HIDE - 197)) | (1L << (HOUR - 197)) | (1L << (IGNORE - 197)) | (1L << (IMMEDIATE - 197)) | (1L << (INCLUDE - 197)) | (1L << (INCLUDING - 197)) | (1L << (INCREMENT - 197)) | (1L << (INDENT - 197)) | (1L << (INDEXED - 197)) | (1L << (INDICATOR - 197)) | (1L << (INDICES - 197)) | (1L << (INFINITE - 197)) | (1L << (INLINE - 197)) | (1L << (INNER - 197)) | (1L << (INOUT - 197)) | (1L << (INSTANTIABLE - 197)) | (1L << (INSTEAD - 197)) | (1L << (INT - 197)) | (1L << (INTEGER - 197)) | (1L << (INTERVAL - 197)) | (1L << (INVALIDATE - 197)) | (1L << (ISOLATION - 197)) | (1L << (ITERATE - 197)) | (1L << (JAVA - 197)) | (1L << (JOIN - 197)) | (1L << (KEEP - 197)) | (1L << (LANGUAGE - 197)) | (1L << (LAST - 197)) | (1L << (LAST_VALUE - 197)) | (1L << (LEADING - 197)) | (1L << (LEFT - 197)) | (1L << (LEVEL - 197)))) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & ((1L << (LIBRARY - 261)) | (1L << (LIKE2 - 261)) | (1L << (LIKE4 - 261)) | (1L << (LIKEC - 261)) | (1L << (LIMIT - 261)) | (1L << (LIST - 261)) | (1L << (LOCAL - 261)) | (1L << (LOCKED - 261)) | (1L << (LOG - 261)) | (1L << (LOGOFF - 261)) | (1L << (LOGON - 261)) | (1L << (LONG - 261)) | (1L << (LOOP - 261)) | (1L << (MAIN - 261)) | (1L << (MAP - 261)) | (1L << (MASTER - 261)) | (1L << (MATCHED - 261)) | (1L << (MAXVALUE - 261)) | (1L << (MEASURES - 261)) | (1L << (MEMBER - 261)) | (1L << (MERGE - 261)) | (1L << (MINUTE - 261)) | (1L << (MINVALUE - 261)) | (1L << (MLSLABEL - 261)) | (1L << (MODEL - 261)) | (1L << (MODIFY - 261)) | (1L << (MONTH - 261)) | (1L << (MULTISET - 261)) | (1L << (NAME - 261)) | (1L << (NAN - 261)) | (1L << (NATURAL - 261)) | (1L << (NATURALN - 261)) | (1L << (NAV - 261)) | (1L << (NCHAR - 261)) | (1L << (NCHAR_CS - 261)) | (1L << (NCLOB - 261)) | (1L << (NESTED - 261)) | (1L << (NEVER - 261)) | (1L << (NEW - 261)) | (1L << (NO - 261)) | (1L << (NOAUDIT - 261)) | (1L << (NOCOPY - 261)) | (1L << (NOCYCLE - 261)) | (1L << (NOENTITYESCAPING - 261)))) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & ((1L << (NONE - 329)) | (1L << (NOSCHEMACHECK - 329)) | (1L << (NVL - 329)) | (1L << (NULLS - 329)) | (1L << (NUMBER - 329)) | (1L << (NUMERIC - 329)) | (1L << (NVARCHAR2 - 329)) | (1L << (MATERIALIZED - 329)) | (1L << (OBJECT - 329)) | (1L << (OFF - 329)) | (1L << (OID - 329)) | (1L << (OLD - 329)) | (1L << (ONLY - 329)) | (1L << (OPEN - 329)) | (1L << (ORADATA - 329)) | (1L << (ORDINALITY - 329)) | (1L << (OSERROR - 329)) | (1L << (OUT - 329)) | (1L << (OUTER - 329)) | (1L << (OVER - 329)) | (1L << (OVERRIDING - 329)) | (1L << (PACKAGE - 329)) | (1L << (PARALLEL_ENABLE - 329)) | (1L << (PARAMETERS - 329)) | (1L << (PARENT - 329)) | (1L << (PARTITION - 329)) | (1L << (PASSING - 329)) | (1L << (PATH - 329)) | (1L << (PIPELINED - 329)) | (1L << (PLAN - 329)) | (1L << (PLS_INTEGER - 329)) | (1L << (POSITIVE - 329)) | (1L << (POSITIVEN - 329)) | (1L << (PRAGMA - 329)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (PREBUILT - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)) | (1L << (PRESENT - 393)) | (1L << (PUBLIC - 393)) | (1L << (RAISE - 393)) | (1L << (RANGE - 393)) | (1L << (RAW - 393)) | (1L << (READ - 393)) | (1L << (REAL - 393)) | (1L << (RECORD - 393)) | (1L << (REDUCED - 393)) | (1L << (REF - 393)) | (1L << (REFERENCE - 393)) | (1L << (REFERENCING - 393)) | (1L << (REFRESH - 393)) | (1L << (REJECT - 393)) | (1L << (RELIES_ON - 393)) | (1L << (RENAME - 393)) | (1L << (REPLACE - 393)) | (1L << (RESPECT - 393)) | (1L << (RESTRICT_REFERENCES - 393)) | (1L << (RESULT - 393)) | (1L << (RESULT_CACHE - 393)) | (1L << (RETURN - 393)) | (1L << (RETURNING - 393)) | (1L << (REUSE - 393)) | (1L << (REVERSE - 393)) | (1L << (REWRITE - 393)) | (1L << (RIGHT - 393)) | (1L << (ROLE - 393)) | (1L << (ROLLBACK - 393)) | (1L << (ROLLUP - 393)) | (1L << (ROW - 393)) | (1L << (ROWID - 393)) | (1L << (ROWS - 393)) | (1L << (RULES - 393)) | (1L << (SAMPLE - 393)) | (1L << (SAVE - 393)) | (1L << (SAVEPOINT - 393)) | (1L << (SCHEMA - 393)) | (1L << (SCHEMACHECK - 393)) | (1L << (SCN - 393)) | (1L << (SECOND - 393)))) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & ((1L << (SEED - 458)) | (1L << (SEGMENT - 458)) | (1L << (SELF - 458)) | (1L << (SEQUENTIAL - 458)) | (1L << (SERIALIZABLE - 458)) | (1L << (SERIALLY_REUSABLE - 458)) | (1L << (SERVERERROR - 458)) | (1L << (SESSIONTIMEZONE - 458)) | (1L << (SET - 458)) | (1L << (SETS - 458)) | (1L << (SETTINGS - 458)) | (1L << (SHOW - 458)) | (1L << (SHUTDOWN - 458)) | (1L << (SIBLINGS - 458)) | (1L << (SIGNTYPE - 458)) | (1L << (SIMPLE_INTEGER - 458)) | (1L << (SINGLE - 458)) | (1L << (SIZE - 458)) | (1L << (SKIP_ - 458)) | (1L << (SMALLINT - 458)) | (1L << (SNAPSHOT - 458)) | (1L << (SOME - 458)) | (1L << (SPECIFICATION - 458)) | (1L << (SQLDATA - 458)) | (1L << (SQLERROR - 458)) | (1L << (STANDALONE - 458)) | (1L << (STARTUP - 458)) | (1L << (STATEMENT - 458)) | (1L << (STATEMENT_ID - 458)) | (1L << (STATIC - 458)) | (1L << (STATISTICS - 458)) | (1L << (STRING - 458)) | (1L << (SUBMULTISET - 458)) | (1L << (SUBPARTITION - 458)) | (1L << (SUBSTITUTABLE - 458)) | (1L << (SUBSTRING - 458)) | (1L << (SUBTYPE - 458)) | (1L << (SUCCESS - 458)) | (1L << (SUSPEND - 458)) | (1L << (TABLES - 458)) | (1L << (TIME - 458)) | (1L << (TIMESTAMP - 458)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 458)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 458)) | (1L << (TIMESTAMP_UNCONSTRAINED - 458)))) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & ((1L << (TIMEZONE_ABBR - 522)) | (1L << (TIMEZONE_HOUR - 522)) | (1L << (TIMEZONE_MINUTE - 522)) | (1L << (TIMEZONE_REGION - 522)) | (1L << (TO_CHAR - 522)) | (1L << (TO_DATE - 522)) | (1L << (TRAILING - 522)) | (1L << (TRANSACTION - 522)) | (1L << (TRANSLATE - 522)) | (1L << (TREAT - 522)) | (1L << (TRIGGER - 522)) | (1L << (TRIM - 522)) | (1L << (TRUNCATE - 522)) | (1L << (TRUSTED - 522)) | (1L << (TYPE - 522)) | (1L << (UNBOUNDED - 522)) | (1L << (UNDER - 522)) | (1L << (UNLIMITED - 522)) | (1L << (UNTIL - 522)) | (1L << (UPDATED - 522)) | (1L << (UPSERT - 522)) | (1L << (UROWID - 522)) | (1L << (USE - 522)) | (1L << (VALIDATE - 522)) | (1L << (VALUE - 522)) | (1L << (VARCHAR - 522)) | (1L << (VARCHAR2 - 522)) | (1L << (VARIABLE - 522)) | (1L << (VARRAY - 522)) | (1L << (VARYING - 522)) | (1L << (VERBOSE - 522)) | (1L << (VERSION - 522)) | (1L << (VERSIONS - 522)) | (1L << (VIEW - 522)) | (1L << (WAIT - 522)) | (1L << (WARNING - 522)) | (1L << (WELLFORMED - 522)) | (1L << (WHENEVER - 522)) | (1L << (WHILE - 522)) | (1L << (WITHOUT - 522)) | (1L << (WITHIN - 522)) | (1L << (WORK - 522)) | (1L << (WRITE - 522)) | (1L << (XML - 522)) | (1L << (XMLAGG - 522)) | (1L << (XMLATTRIBUTES - 522)))) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & ((1L << (XMLCAST - 586)) | (1L << (XMLCOLATTVAL - 586)) | (1L << (XMLELEMENT - 586)) | (1L << (XMLEXISTS - 586)) | (1L << (XMLFOREST - 586)) | (1L << (XMLNAMESPACES - 586)) | (1L << (XMLPARSE - 586)) | (1L << (XMLPI - 586)) | (1L << (XMLQUERY - 586)) | (1L << (XMLROOT - 586)) | (1L << (XMLSERIALIZE - 586)) | (1L << (XMLTABLE - 586)) | (1L << (YEAR - 586)) | (1L << (YES - 586)) | (1L << (YMINTERVAL_UNCONSTRAINED - 586)) | (1L << (ZONE - 586)) | (1L << (PREDICTION - 586)) | (1L << (PREDICTION_BOUNDS - 586)) | (1L << (PREDICTION_COST - 586)) | (1L << (PREDICTION_DETAILS - 586)) | (1L << (PREDICTION_PROBABILITY - 586)) | (1L << (PREDICTION_SET - 586)) | (1L << (CUME_DIST - 586)) | (1L << (DENSE_RANK - 586)) | (1L << (LISTAGG - 586)) | (1L << (PERCENT_RANK - 586)) | (1L << (PERCENTILE_CONT - 586)) | (1L << (PERCENTILE_DISC - 586)) | (1L << (RANK - 586)) | (1L << (AVG - 586)) | (1L << (CORR - 586)) | (1L << (LAG - 586)) | (1L << (LEAD - 586)) | (1L << (MAX - 586)) | (1L << (MEDIAN - 586)) | (1L << (MIN - 586)) | (1L << (NTILE - 586)) | (1L << (RATIO_TO_REPORT - 586)) | (1L << (ROW_NUMBER - 586)) | (1L << (SUM - 586)) | (1L << (VARIANCE - 586)) | (1L << (REGR_ - 586)) | (1L << (STDDEV - 586)) | (1L << (VAR_ - 586)) | (1L << (COVAR_ - 586)) | (1L << (NATIONAL_CHAR_STRING_LIT - 586)) | (1L << (CHAR_STRING - 586)) | (1L << (DELIMITED_ID - 586)))) != 0) || _la==REGULAR_ID) {
						{
						setState(7437);
						column_alias();
						}
					}

					}
					}
					setState(7444);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(7445);
				match(RIGHT_PAREN);
				setState(7448);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1082,_ctx) ) {
				case 1:
					{
					setState(7446);
					match(PERIOD);
					setState(7447);
					general_element();
					}
					break;
				}
				}
				break;
			case 19:
				{
				_localctx = new XmlCallContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(7450);
				match(XMLEXISTS);
				setState(7451);
				match(LEFT_PAREN);
				setState(7452);
				expression(0);
				setState(7454);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PASSING) {
					{
					setState(7453);
					xml_passing_clause();
					}
				}

				setState(7456);
				match(RIGHT_PAREN);
				}
				break;
			case 20:
				{
				_localctx = new XmlCallContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(7458);
				match(XMLPARSE);
				setState(7459);
				match(LEFT_PAREN);
				setState(7460);
				_la = _input.LA(1);
				if ( !(_la==CONTENT || _la==DOCUMENT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7461);
				concatenation();
				setState(7463);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WELLFORMED) {
					{
					setState(7462);
					match(WELLFORMED);
					}
				}

				setState(7465);
				match(RIGHT_PAREN);
				setState(7468);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1085,_ctx) ) {
				case 1:
					{
					setState(7466);
					match(PERIOD);
					setState(7467);
					general_element();
					}
					break;
				}
				}
				break;
			case 21:
				{
				_localctx = new XmlCallContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(7470);
				match(XMLPI);
				setState(7471);
				match(LEFT_PAREN);
				setState(7476);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case NAME:
					{
					setState(7472);
					match(NAME);
					setState(7473);
					r_id();
					}
					break;
				case EVALNAME:
					{
					setState(7474);
					match(EVALNAME);
					setState(7475);
					concatenation();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(7480);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(7478);
					match(COMMA);
					setState(7479);
					concatenation();
					}
				}

				setState(7482);
				match(RIGHT_PAREN);
				setState(7485);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1088,_ctx) ) {
				case 1:
					{
					setState(7483);
					match(PERIOD);
					setState(7484);
					general_element();
					}
					break;
				}
				}
				break;
			case 22:
				{
				_localctx = new XmlCallContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(7487);
				match(XMLQUERY);
				setState(7488);
				match(LEFT_PAREN);
				setState(7489);
				concatenation();
				setState(7491);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PASSING) {
					{
					setState(7490);
					xml_passing_clause();
					}
				}

				setState(7493);
				match(RETURNING);
				setState(7494);
				match(CONTENT);
				setState(7498);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NULL) {
					{
					setState(7495);
					match(NULL);
					setState(7496);
					match(ON);
					setState(7497);
					match(EMPTY);
					}
				}

				setState(7500);
				match(RIGHT_PAREN);
				setState(7503);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1091,_ctx) ) {
				case 1:
					{
					setState(7501);
					match(PERIOD);
					setState(7502);
					general_element();
					}
					break;
				}
				}
				break;
			case 23:
				{
				_localctx = new XmlCallContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(7505);
				match(XMLROOT);
				setState(7506);
				match(LEFT_PAREN);
				setState(7507);
				concatenation();
				setState(7510);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1092,_ctx) ) {
				case 1:
					{
					setState(7508);
					match(COMMA);
					setState(7509);
					xmlroot_param_version_part();
					}
					break;
				}
				setState(7514);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(7512);
					match(COMMA);
					setState(7513);
					xmlroot_param_standalone_part();
					}
				}

				setState(7516);
				match(RIGHT_PAREN);
				setState(7519);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1094,_ctx) ) {
				case 1:
					{
					setState(7517);
					match(PERIOD);
					setState(7518);
					general_element();
					}
					break;
				}
				}
				break;
			case 24:
				{
				_localctx = new XmlCallContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(7521);
				match(XMLSERIALIZE);
				setState(7522);
				match(LEFT_PAREN);
				setState(7523);
				_la = _input.LA(1);
				if ( !(_la==CONTENT || _la==DOCUMENT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7524);
				concatenation();
				setState(7527);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(7525);
					match(AS);
					setState(7526);
					type_spec();
					}
				}

				setState(7530);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ENCODING) {
					{
					setState(7529);
					xmlserialize_param_enconding_part();
					}
				}

				setState(7533);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==VERSION) {
					{
					setState(7532);
					xmlserialize_param_version_part();
					}
				}

				setState(7536);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INDENT || _la==NO) {
					{
					setState(7535);
					xmlserialize_param_ident_part();
					}
				}

				setState(7540);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==HIDE || _la==SHOW) {
					{
					setState(7538);
					_la = _input.LA(1);
					if ( !(_la==HIDE || _la==SHOW) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(7539);
					match(DEFAULTS);
					}
				}

				setState(7542);
				match(RIGHT_PAREN);
				setState(7545);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1100,_ctx) ) {
				case 1:
					{
					setState(7543);
					match(PERIOD);
					setState(7544);
					general_element();
					}
					break;
				}
				}
				break;
			case 25:
				{
				_localctx = new XmlCallContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(7547);
				match(XMLTABLE);
				setState(7548);
				match(LEFT_PAREN);
				setState(7550);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1101,_ctx) ) {
				case 1:
					{
					setState(7549);
					xml_namespaces_clause();
					}
					break;
				}
				setState(7552);
				concatenation();
				setState(7554);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PASSING) {
					{
					setState(7553);
					xml_passing_clause();
					}
				}

				setState(7561);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMNS) {
					{
					setState(7556);
					match(COLUMNS);
					setState(7557);
					xml_table_column();
					{
					setState(7558);
					match(COMMA);
					setState(7559);
					xml_table_column();
					}
					}
				}

				setState(7563);
				match(RIGHT_PAREN);
				setState(7566);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1104,_ctx) ) {
				case 1:
					{
					setState(7564);
					match(PERIOD);
					setState(7565);
					general_element();
					}
					break;
				}
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(7575);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,1106,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new CastCallContext(new Standard_functionContext(_parentctx, _parentState));
					pushNewRecursionContext(_localctx, _startState, RULE_standard_function);
					setState(7570);
					if (!(precpred(_ctx, 22))) throw new FailedPredicateException(this, "precpred(_ctx, 22)");
					setState(7571);
					match(T__2);
					setState(7572);
					type_spec();
					}
					} 
				}
				setState(7577);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1106,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Aggregate_windowed_functionContext extends ParserRuleContext {
		public StarContext args;
		public Token pref;
		public Over_clause_keywordContext over_clause_keyword() {
			return getRuleContext(Over_clause_keywordContext.class,0);
		}
		public Function_argument_analyticContext function_argument_analytic() {
			return getRuleContext(Function_argument_analyticContext.class,0);
		}
		public Over_clauseContext over_clause() {
			return getRuleContext(Over_clauseContext.class,0);
		}
		public TerminalNode COUNT() { return getToken(PLSQLParser.COUNT, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PLSQLParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PLSQLParser.RIGHT_PAREN, 0); }
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		public StarContext star() {
			return getRuleContext(StarContext.class,0);
		}
		public TerminalNode DISTINCT() { return getToken(PLSQLParser.DISTINCT, 0); }
		public TerminalNode UNIQUE() { return getToken(PLSQLParser.UNIQUE, 0); }
		public TerminalNode ALL() { return getToken(PLSQLParser.ALL, 0); }
		public Aggregate_windowed_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aggregate_windowed_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterAggregate_windowed_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitAggregate_windowed_function(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitAggregate_windowed_function(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Aggregate_windowed_functionContext aggregate_windowed_function() throws RecognitionException {
		Aggregate_windowed_functionContext _localctx = new Aggregate_windowed_functionContext(_ctx, getState());
		enterRule(_localctx, 894, RULE_aggregate_windowed_function);
		int _la;
		try {
			setState(7596);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
				enterOuterAlt(_localctx, 1);
				{
				setState(7578);
				over_clause_keyword();
				setState(7579);
				function_argument_analytic();
				setState(7581);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1107,_ctx) ) {
				case 1:
					{
					setState(7580);
					over_clause();
					}
					break;
				}
				}
				break;
			case COUNT:
				enterOuterAlt(_localctx, 2);
				{
				setState(7583);
				match(COUNT);
				setState(7584);
				match(LEFT_PAREN);
				setState(7590);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ASTERISK:
					{
					setState(7585);
					((Aggregate_windowed_functionContext)_localctx).args = star();
					}
					break;
				case A_LETTER:
				case ADD:
				case AFTER:
				case AGENT:
				case AGGREGATE:
				case ALL:
				case ANALYZE:
				case ANY:
				case ARRAY:
				case ASSOCIATE:
				case AT:
				case ATTRIBUTE:
				case AUDIT:
				case AUTHID:
				case AUTO:
				case AUTOMATIC:
				case AUTONOMOUS_TRANSACTION:
				case BATCH:
				case BEFORE:
				case BFILE:
				case BINARY_DOUBLE:
				case BINARY_FLOAT:
				case BINARY_INTEGER:
				case BUILD:
				case BLOB:
				case BLOCK:
				case BODY:
				case BOOLEAN:
				case BOTH:
				case BULK:
				case BYTE:
				case C_LETTER:
				case CALL:
				case CANONICAL:
				case CASCADE:
				case CASE:
				case CAST:
				case CHAR:
				case CHAR_CS:
				case CHARACTER:
				case CHR:
				case CLOB:
				case CLOSE:
				case CLUSTER:
				case COALESCE:
				case COLLECT:
				case COLUMNS:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case COMPATIBILITY:
				case COMPILE:
				case COMPLETE:
				case COMPOUND:
				case CONCAT:
				case CONNECT_BY_ROOT:
				case CONSTANT:
				case CONSTRAINT:
				case CONSTRAINTS:
				case CONSTRUCTOR:
				case CONTENT:
				case CONTEXT:
				case CONTINUE:
				case CONVERT:
				case CORRUPT_XID:
				case CORRUPT_XID_ALL:
				case COST:
				case COUNT:
				case CROSS:
				case CUBE:
				case CURRENT_USER:
				case CURSOR:
				case CUSTOMDATUM:
				case CYCLE:
				case DATA:
				case DATABASE:
				case DATE:
				case DAY:
				case DB_ROLE_CHANGE:
				case DBTIMEZONE:
				case DDL:
				case DEBUG:
				case DEC:
				case DECIMAL:
				case DECODE:
				case DECOMPOSE:
				case DECREMENT:
				case DEFAULT:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DEMAND:
				case DETERMINISTIC:
				case DIMENSION:
				case DISABLE:
				case DISASSOCIATE:
				case DISTINCT:
				case DOCUMENT:
				case DOUBLE:
				case DSINTERVAL_UNCONSTRAINED:
				case EACH:
				case EDITIONING:
				case ELEMENT:
				case EMPTY:
				case ENABLE:
				case ENCODING:
				case ENFORCED:
				case ENTITYESCAPING:
				case ERR:
				case ERRORS:
				case ESCAPE:
				case EVALNAME:
				case EXCEPTION:
				case EXCEPTION_INIT:
				case EXCEPTIONS:
				case EXCLUDE:
				case EXECUTE:
				case EXISTS:
				case EXIT:
				case EXPLAIN:
				case EXTERNAL:
				case EXTRACT:
				case FAILURE:
				case FALSE:
				case FAST:
				case FINAL:
				case FIRST:
				case FIRST_VALUE:
				case FLOAT:
				case FOLLOWING:
				case FOLLOWS:
				case FORALL:
				case FORCE:
				case FULL:
				case FUNCTION:
				case GROUPING:
				case HASH:
				case HIDE:
				case HOUR:
				case IGNORE:
				case IMMEDIATE:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDENT:
				case INDEXED:
				case INDICATOR:
				case INDICES:
				case INFINITE:
				case INLINE:
				case INNER:
				case INOUT:
				case INSTANTIABLE:
				case INSTEAD:
				case INT:
				case INTEGER:
				case INTERVAL:
				case INVALIDATE:
				case ISOLATION:
				case ITERATE:
				case JAVA:
				case JOIN:
				case KEEP:
				case LANGUAGE:
				case LAST:
				case LAST_VALUE:
				case LEADING:
				case LEFT:
				case LEVEL:
				case LIBRARY:
				case LIKE2:
				case LIKE4:
				case LIKEC:
				case LIMIT:
				case LIST:
				case LOCAL:
				case LOCKED:
				case LOG:
				case LOGOFF:
				case LOGON:
				case LONG:
				case LOOP:
				case MAIN:
				case MAP:
				case MASTER:
				case MATCHED:
				case MAXVALUE:
				case MEASURES:
				case MEMBER:
				case MERGE:
				case MINUTE:
				case MINVALUE:
				case MLSLABEL:
				case MODEL:
				case MODIFY:
				case MONTH:
				case MULTISET:
				case NAME:
				case NAN:
				case NATURAL:
				case NATURALN:
				case NAV:
				case NCHAR:
				case NCHAR_CS:
				case NCLOB:
				case NESTED:
				case NEVER:
				case NEW:
				case NO:
				case NOAUDIT:
				case NOCOPY:
				case NOCYCLE:
				case NOENTITYESCAPING:
				case NONE:
				case NOSCHEMACHECK:
				case NVL:
				case NULL:
				case NULLS:
				case NUMBER:
				case NUMERIC:
				case NVARCHAR2:
				case MATERIALIZED:
				case OBJECT:
				case OFF:
				case OID:
				case OLD:
				case ONLY:
				case OPEN:
				case ORADATA:
				case ORDINALITY:
				case OSERROR:
				case OUT:
				case OUTER:
				case OVER:
				case OVERRIDING:
				case PACKAGE:
				case PARALLEL_ENABLE:
				case PARAMETERS:
				case PARENT:
				case PARTITION:
				case PASSING:
				case PATH:
				case PIPELINED:
				case PLAN:
				case PLS_INTEGER:
				case POSITION:
				case POSITIVE:
				case POSITIVEN:
				case PRAGMA:
				case PREBUILT:
				case PRECEDING:
				case PRECISION:
				case PRESENT:
				case PRIOR:
				case PUBLIC:
				case RAISE:
				case RANGE:
				case RAW:
				case READ:
				case REAL:
				case RECORD:
				case REDUCED:
				case REF:
				case REFERENCE:
				case REFERENCING:
				case REFRESH:
				case REJECT:
				case RELIES_ON:
				case RENAME:
				case REPLACE:
				case RESPECT:
				case RESTRICT_REFERENCES:
				case RESULT:
				case RESULT_CACHE:
				case RETURN:
				case RETURNING:
				case REUSE:
				case REVERSE:
				case REWRITE:
				case RIGHT:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROW:
				case ROWID:
				case ROWS:
				case RULES:
				case SAMPLE:
				case SAVE:
				case SAVEPOINT:
				case SCHEMA:
				case SCHEMACHECK:
				case SCN:
				case SECOND:
				case SEED:
				case SEGMENT:
				case SELECT:
				case SELF:
				case SEQUENTIAL:
				case SERIALIZABLE:
				case SERIALLY_REUSABLE:
				case SERVERERROR:
				case SESSIONTIMEZONE:
				case SET:
				case SETS:
				case SETTINGS:
				case SHOW:
				case SHUTDOWN:
				case SIBLINGS:
				case SIGNTYPE:
				case SIMPLE_INTEGER:
				case SINGLE:
				case SIZE:
				case SKIP_:
				case SMALLINT:
				case SNAPSHOT:
				case SOME:
				case SPECIFICATION:
				case SQLDATA:
				case SQLERROR:
				case STANDALONE:
				case STARTUP:
				case STATEMENT:
				case STATEMENT_ID:
				case STATIC:
				case STATISTICS:
				case STRING:
				case SUBMULTISET:
				case SUBPARTITION:
				case SUBSTITUTABLE:
				case SUBSTRING:
				case SUBTYPE:
				case SUCCESS:
				case SUSPEND:
				case TABLES:
				case TIME:
				case TIMESTAMP:
				case TIMESTAMP_LTZ_UNCONSTRAINED:
				case TIMESTAMP_TZ_UNCONSTRAINED:
				case TIMESTAMP_UNCONSTRAINED:
				case TIMEZONE_ABBR:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TIMEZONE_REGION:
				case TO_CHAR:
				case TO_DATE:
				case TRAILING:
				case TRANSACTION:
				case TRANSLATE:
				case TREAT:
				case TRIGGER:
				case TRIM:
				case TRUE:
				case TRUNCATE:
				case TRUSTED:
				case TYPE:
				case UNBOUNDED:
				case UNDER:
				case UNIQUE:
				case UNLIMITED:
				case UNTIL:
				case UPDATED:
				case UPSERT:
				case UROWID:
				case USE:
				case VALIDATE:
				case VALUE:
				case VARCHAR:
				case VARCHAR2:
				case VARIABLE:
				case VARRAY:
				case VARYING:
				case VERBOSE:
				case VERSION:
				case VERSIONS:
				case VIEW:
				case WAIT:
				case WARNING:
				case WELLFORMED:
				case WHENEVER:
				case WHILE:
				case WITHOUT:
				case WITHIN:
				case WORK:
				case WRITE:
				case XML:
				case XMLAGG:
				case XMLATTRIBUTES:
				case XMLCAST:
				case XMLCOLATTVAL:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLQUERY:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case YEAR:
				case YES:
				case YMINTERVAL_UNCONSTRAINED:
				case ZONE:
				case PREDICTION:
				case PREDICTION_BOUNDS:
				case PREDICTION_COST:
				case PREDICTION_DETAILS:
				case PREDICTION_PROBABILITY:
				case PREDICTION_SET:
				case CUME_DIST:
				case DENSE_RANK:
				case LISTAGG:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case RANK:
				case AVG:
				case CORR:
				case LAG:
				case LEAD:
				case MAX:
				case MEDIAN:
				case MIN:
				case NTILE:
				case RATIO_TO_REPORT:
				case ROW_NUMBER:
				case SUM:
				case VARIANCE:
				case REGR_:
				case STDDEV:
				case VAR_:
				case COVAR_:
				case NATIONAL_CHAR_STRING_LIT:
				case UNSIGNED_INTEGER:
				case APPROXIMATE_NUM_LIT:
				case CHAR_STRING:
				case DELIMITED_ID:
				case LEFT_PAREN:
				case PLUS_SIGN:
				case MINUS_SIGN:
				case BINDVAR:
				case COLON:
				case REGULAR_ID:
					{
					setState(7587);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,1108,_ctx) ) {
					case 1:
						{
						setState(7586);
						((Aggregate_windowed_functionContext)_localctx).pref = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==ALL || _la==DISTINCT || _la==UNIQUE) ) {
							((Aggregate_windowed_functionContext)_localctx).pref = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					}
					setState(7589);
					concatenation();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(7592);
				match(RIGHT_PAREN);
				setState(7594);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1110,_ctx) ) {
				case 1:
					{
					setState(7593);
					over_clause();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Over_clause_keywordContext extends ParserRuleContext {
		public TerminalNode AVG() { return getToken(PLSQLParser.AVG, 0); }
		public TerminalNode CORR() { return getToken(PLSQLParser.CORR, 0); }
		public TerminalNode LAG() { return getToken(PLSQLParser.LAG, 0); }
		public TerminalNode LEAD() { return getToken(PLSQLParser.LEAD, 0); }
		public TerminalNode MAX() { return getToken(PLSQLParser.MAX, 0); }
		public TerminalNode MEDIAN() { return getToken(PLSQLParser.MEDIAN, 0); }
		public TerminalNode MIN() { return getToken(PLSQLParser.MIN, 0); }
		public TerminalNode NTILE() { return getToken(PLSQLParser.NTILE, 0); }
		public TerminalNode RATIO_TO_REPORT() { return getToken(PLSQLParser.RATIO_TO_REPORT, 0); }
		public TerminalNode ROW_NUMBER() { return getToken(PLSQLParser.ROW_NUMBER, 0); }
		public TerminalNode SUM() { return getToken(PLSQLParser.SUM, 0); }
		public TerminalNode VARIANCE() { return getToken(PLSQLParser.VARIANCE, 0); }
		public TerminalNode REGR_() { return getToken(PLSQLParser.REGR_, 0); }
		public TerminalNode STDDEV() { return getToken(PLSQLParser.STDDEV, 0); }
		public TerminalNode VAR_() { return getToken(PLSQLParser.VAR_, 0); }
		public TerminalNode COVAR_() { return getToken(PLSQLParser.COVAR_, 0); }
		public Over_clause_keywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_over_clause_keyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterOver_clause_keyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitOver_clause_keyword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitOver_clause_keyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Over_clause_keywordContext over_clause_keyword() throws RecognitionException {
		Over_clause_keywordContext _localctx = new Over_clause_keywordContext(_ctx, getState());
		enterRule(_localctx, 896, RULE_over_clause_keyword);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7598);
			_la = _input.LA(1);
			if ( !(((((_la - 618)) & ~0x3f) == 0 && ((1L << (_la - 618)) & ((1L << (AVG - 618)) | (1L << (CORR - 618)) | (1L << (LAG - 618)) | (1L << (LEAD - 618)) | (1L << (MAX - 618)) | (1L << (MEDIAN - 618)) | (1L << (MIN - 618)) | (1L << (NTILE - 618)) | (1L << (RATIO_TO_REPORT - 618)) | (1L << (ROW_NUMBER - 618)) | (1L << (SUM - 618)) | (1L << (VARIANCE - 618)) | (1L << (REGR_ - 618)) | (1L << (STDDEV - 618)) | (1L << (VAR_ - 618)) | (1L << (COVAR_ - 618)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Within_or_over_clause_keywordContext extends ParserRuleContext {
		public TerminalNode CUME_DIST() { return getToken(PLSQLParser.CUME_DIST, 0); }
		public TerminalNode DENSE_RANK() { return getToken(PLSQLParser.DENSE_RANK, 0); }
		public TerminalNode LISTAGG() { return getToken(PLSQLParser.LISTAGG, 0); }
		public TerminalNode PERCENT_RANK() { return getToken(PLSQLParser.PERCENT_RANK, 0); }
		public TerminalNode PERCENTILE_CONT() { return getToken(PLSQLParser.PERCENTILE_CONT, 0); }
		public TerminalNode PERCENTILE_DISC() { return getToken(PLSQLParser.PERCENTILE_DISC, 0); }
		public TerminalNode RANK() { return getToken(PLSQLParser.RANK, 0); }
		public Within_or_over_clause_keywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_within_or_over_clause_keyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterWithin_or_over_clause_keyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitWithin_or_over_clause_keyword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitWithin_or_over_clause_keyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Within_or_over_clause_keywordContext within_or_over_clause_keyword() throws RecognitionException {
		Within_or_over_clause_keywordContext _localctx = new Within_or_over_clause_keywordContext(_ctx, getState());
		enterRule(_localctx, 898, RULE_within_or_over_clause_keyword);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7600);
			_la = _input.LA(1);
			if ( !(((((_la - 611)) & ~0x3f) == 0 && ((1L << (_la - 611)) & ((1L << (CUME_DIST - 611)) | (1L << (DENSE_RANK - 611)) | (1L << (LISTAGG - 611)) | (1L << (PERCENT_RANK - 611)) | (1L << (PERCENTILE_CONT - 611)) | (1L << (PERCENTILE_DISC - 611)) | (1L << (RANK - 611)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Standard_prediction_function_keywordContext extends ParserRuleContext {
		public TerminalNode PREDICTION() { return getToken(PLSQLParser.PREDICTION, 0); }
		public TerminalNode PREDICTION_BOUNDS() { return getToken(PLSQLParser.PREDICTION_BOUNDS, 0); }
		public TerminalNode PREDICTION_COST() { return getToken(PLSQLParser.PREDICTION_COST, 0); }
		public TerminalNode PREDICTION_DETAILS() { return getToken(PLSQLParser.PREDICTION_DETAILS, 0); }
		public TerminalNode PREDICTION_PROBABILITY() { return getToken(PLSQLParser.PREDICTION_PROBABILITY, 0); }
		public TerminalNode PREDICTION_SET() { return getToken(PLSQLParser.PREDICTION_SET, 0); }
		public Standard_prediction_function_keywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_standard_prediction_function_keyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterStandard_prediction_function_keyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitStandard_prediction_function_keyword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitStandard_prediction_function_keyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Standard_prediction_function_keywordContext standard_prediction_function_keyword() throws RecognitionException {
		Standard_prediction_function_keywordContext _localctx = new Standard_prediction_function_keywordContext(_ctx, getState());
		enterRule(_localctx, 900, RULE_standard_prediction_function_keyword);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7602);
			_la = _input.LA(1);
			if ( !(((((_la - 605)) & ~0x3f) == 0 && ((1L << (_la - 605)) & ((1L << (PREDICTION - 605)) | (1L << (PREDICTION_BOUNDS - 605)) | (1L << (PREDICTION_COST - 605)) | (1L << (PREDICTION_DETAILS - 605)) | (1L << (PREDICTION_PROBABILITY - 605)) | (1L << (PREDICTION_SET - 605)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Over_clauseContext extends ParserRuleContext {
		public TerminalNode OVER() { return getToken(PLSQLParser.OVER, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PLSQLParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PLSQLParser.RIGHT_PAREN, 0); }
		public Query_partition_clauseContext query_partition_clause() {
			return getRuleContext(Query_partition_clauseContext.class,0);
		}
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public Windowing_clauseContext windowing_clause() {
			return getRuleContext(Windowing_clauseContext.class,0);
		}
		public Over_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_over_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterOver_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitOver_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitOver_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Over_clauseContext over_clause() throws RecognitionException {
		Over_clauseContext _localctx = new Over_clauseContext(_ctx, getState());
		enterRule(_localctx, 902, RULE_over_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7604);
			match(OVER);
			setState(7605);
			match(LEFT_PAREN);
			setState(7607);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(7606);
				query_partition_clause();
				}
			}

			setState(7613);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ORDER) {
				{
				setState(7609);
				order_by_clause();
				setState(7611);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==RANGE || _la==ROWS) {
					{
					setState(7610);
					windowing_clause();
					}
				}

				}
			}

			setState(7615);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Windowing_clauseContext extends ParserRuleContext {
		public Windowing_typeContext windowing_type() {
			return getRuleContext(Windowing_typeContext.class,0);
		}
		public TerminalNode BETWEEN() { return getToken(PLSQLParser.BETWEEN, 0); }
		public List<Windowing_elementsContext> windowing_elements() {
			return getRuleContexts(Windowing_elementsContext.class);
		}
		public Windowing_elementsContext windowing_elements(int i) {
			return getRuleContext(Windowing_elementsContext.class,i);
		}
		public TerminalNode AND() { return getToken(PLSQLParser.AND, 0); }
		public Windowing_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowing_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterWindowing_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitWindowing_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitWindowing_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Windowing_clauseContext windowing_clause() throws RecognitionException {
		Windowing_clauseContext _localctx = new Windowing_clauseContext(_ctx, getState());
		enterRule(_localctx, 904, RULE_windowing_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7617);
			windowing_type();
			setState(7624);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BETWEEN:
				{
				setState(7618);
				match(BETWEEN);
				setState(7619);
				windowing_elements();
				setState(7620);
				match(AND);
				setState(7621);
				windowing_elements();
				}
				break;
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ALL:
			case ANALYZE:
			case ANY:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BUILD:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CASE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPLETE:
			case COMPOUND:
			case CONCAT:
			case CONNECT_BY_ROOT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECODE:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DEMAND:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DISTINCT:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case EDITIONING:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENFORCED:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FALSE:
			case FAST:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LIST:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MASTER:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEVER:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NVL:
			case NULL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case MATERIALIZED:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITION:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PREBUILT:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIOR:
			case PUBLIC:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REDUCED:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REFRESH:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case REWRITE:
			case RIGHT:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELECT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SIZE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBSTRING:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TABLES:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TO_CHAR:
			case TO_DATE:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUE:
			case TRUNCATE:
			case TRUSTED:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERBOSE:
			case VERSION:
			case VERSIONS:
			case VIEW:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHOUT:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case NATIONAL_CHAR_STRING_LIT:
			case UNSIGNED_INTEGER:
			case APPROXIMATE_NUM_LIT:
			case CHAR_STRING:
			case DELIMITED_ID:
			case LEFT_PAREN:
			case PLUS_SIGN:
			case MINUS_SIGN:
			case BINDVAR:
			case COLON:
			case REGULAR_ID:
				{
				setState(7623);
				windowing_elements();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Windowing_typeContext extends ParserRuleContext {
		public TerminalNode ROWS() { return getToken(PLSQLParser.ROWS, 0); }
		public TerminalNode RANGE() { return getToken(PLSQLParser.RANGE, 0); }
		public Windowing_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowing_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterWindowing_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitWindowing_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitWindowing_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Windowing_typeContext windowing_type() throws RecognitionException {
		Windowing_typeContext _localctx = new Windowing_typeContext(_ctx, getState());
		enterRule(_localctx, 906, RULE_windowing_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7626);
			_la = _input.LA(1);
			if ( !(_la==RANGE || _la==ROWS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Windowing_elementsContext extends ParserRuleContext {
		public TerminalNode UNBOUNDED() { return getToken(PLSQLParser.UNBOUNDED, 0); }
		public TerminalNode PRECEDING() { return getToken(PLSQLParser.PRECEDING, 0); }
		public TerminalNode CURRENT() { return getToken(PLSQLParser.CURRENT, 0); }
		public TerminalNode ROW() { return getToken(PLSQLParser.ROW, 0); }
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		public TerminalNode FOLLOWING() { return getToken(PLSQLParser.FOLLOWING, 0); }
		public Windowing_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowing_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterWindowing_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitWindowing_elements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitWindowing_elements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Windowing_elementsContext windowing_elements() throws RecognitionException {
		Windowing_elementsContext _localctx = new Windowing_elementsContext(_ctx, getState());
		enterRule(_localctx, 908, RULE_windowing_elements);
		int _la;
		try {
			setState(7635);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1116,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7628);
				match(UNBOUNDED);
				setState(7629);
				match(PRECEDING);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7630);
				match(CURRENT);
				setState(7631);
				match(ROW);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7632);
				concatenation();
				setState(7633);
				_la = _input.LA(1);
				if ( !(_la==FOLLOWING || _la==PRECEDING) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Using_clauseContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(PLSQLParser.USING, 0); }
		public StarContext star() {
			return getRuleContext(StarContext.class,0);
		}
		public List<Using_elementContext> using_element() {
			return getRuleContexts(Using_elementContext.class);
		}
		public Using_elementContext using_element(int i) {
			return getRuleContext(Using_elementContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLSQLParser.COMMA, i);
		}
		public Using_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_using_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterUsing_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitUsing_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitUsing_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Using_clauseContext using_clause() throws RecognitionException {
		Using_clauseContext _localctx = new Using_clauseContext(_ctx, getState());
		enterRule(_localctx, 910, RULE_using_clause);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(7637);
			match(USING);
			setState(7647);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1118,_ctx) ) {
			case 1:
				{
				setState(7638);
				star();
				}
				break;
			case 2:
				{
				setState(7639);
				using_element();
				setState(7644);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1117,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(7640);
						match(COMMA);
						setState(7641);
						using_element();
						}
						} 
					}
					setState(7646);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,1117,_ctx);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Using_elementContext extends ParserRuleContext {
		public Selected_elementContext selected_element() {
			return getRuleContext(Selected_elementContext.class,0);
		}
		public TerminalNode IN() { return getToken(PLSQLParser.IN, 0); }
		public TerminalNode OUT() { return getToken(PLSQLParser.OUT, 0); }
		public Column_aliasContext column_alias() {
			return getRuleContext(Column_aliasContext.class,0);
		}
		public Using_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_using_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterUsing_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitUsing_element(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitUsing_element(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Using_elementContext using_element() throws RecognitionException {
		Using_elementContext _localctx = new Using_elementContext(_ctx, getState());
		enterRule(_localctx, 912, RULE_using_element);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7654);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1120,_ctx) ) {
			case 1:
				{
				setState(7649);
				match(IN);
				setState(7651);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1119,_ctx) ) {
				case 1:
					{
					setState(7650);
					match(OUT);
					}
					break;
				}
				}
				break;
			case 2:
				{
				setState(7653);
				match(OUT);
				}
				break;
			}
			setState(7656);
			selected_element();
			setState(7658);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1121,_ctx) ) {
			case 1:
				{
				setState(7657);
				column_alias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Collect_order_by_partContext extends ParserRuleContext {
		public TerminalNode ORDER() { return getToken(PLSQLParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(PLSQLParser.BY, 0); }
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		public Collect_order_by_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_collect_order_by_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterCollect_order_by_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitCollect_order_by_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitCollect_order_by_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Collect_order_by_partContext collect_order_by_part() throws RecognitionException {
		Collect_order_by_partContext _localctx = new Collect_order_by_partContext(_ctx, getState());
		enterRule(_localctx, 914, RULE_collect_order_by_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7660);
			match(ORDER);
			setState(7661);
			match(BY);
			setState(7662);
			concatenation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Within_or_over_partContext extends ParserRuleContext {
		public TerminalNode WITHIN() { return getToken(PLSQLParser.WITHIN, 0); }
		public TerminalNode GROUP() { return getToken(PLSQLParser.GROUP, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PLSQLParser.LEFT_PAREN, 0); }
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PLSQLParser.RIGHT_PAREN, 0); }
		public Over_clauseContext over_clause() {
			return getRuleContext(Over_clauseContext.class,0);
		}
		public Within_or_over_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_within_or_over_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterWithin_or_over_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitWithin_or_over_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitWithin_or_over_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Within_or_over_partContext within_or_over_part() throws RecognitionException {
		Within_or_over_partContext _localctx = new Within_or_over_partContext(_ctx, getState());
		enterRule(_localctx, 916, RULE_within_or_over_part);
		try {
			setState(7671);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WITHIN:
				enterOuterAlt(_localctx, 1);
				{
				setState(7664);
				match(WITHIN);
				setState(7665);
				match(GROUP);
				setState(7666);
				match(LEFT_PAREN);
				setState(7667);
				order_by_clause();
				setState(7668);
				match(RIGHT_PAREN);
				}
				break;
			case OVER:
				enterOuterAlt(_localctx, 2);
				{
				setState(7670);
				over_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cost_matrix_clauseContext extends ParserRuleContext {
		public TerminalNode COST() { return getToken(PLSQLParser.COST, 0); }
		public TerminalNode MODEL() { return getToken(PLSQLParser.MODEL, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PLSQLParser.LEFT_PAREN, 0); }
		public List<Cost_class_nameContext> cost_class_name() {
			return getRuleContexts(Cost_class_nameContext.class);
		}
		public Cost_class_nameContext cost_class_name(int i) {
			return getRuleContext(Cost_class_nameContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PLSQLParser.RIGHT_PAREN, 0); }
		public TerminalNode VALUES() { return getToken(PLSQLParser.VALUES, 0); }
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public TerminalNode AUTO() { return getToken(PLSQLParser.AUTO, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PLSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLSQLParser.COMMA, i);
		}
		public Cost_matrix_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cost_matrix_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterCost_matrix_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitCost_matrix_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitCost_matrix_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cost_matrix_clauseContext cost_matrix_clause() throws RecognitionException {
		Cost_matrix_clauseContext _localctx = new Cost_matrix_clauseContext(_ctx, getState());
		enterRule(_localctx, 918, RULE_cost_matrix_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7673);
			match(COST);
			setState(7691);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MODEL:
				{
				setState(7674);
				match(MODEL);
				setState(7676);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AUTO) {
					{
					setState(7675);
					match(AUTO);
					}
				}

				}
				break;
			case LEFT_PAREN:
				{
				setState(7678);
				match(LEFT_PAREN);
				setState(7679);
				cost_class_name();
				setState(7684);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(7680);
					match(COMMA);
					setState(7681);
					cost_class_name();
					}
					}
					setState(7686);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(7687);
				match(RIGHT_PAREN);
				setState(7688);
				match(VALUES);
				setState(7689);
				expression_list();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_passing_clauseContext extends ParserRuleContext {
		public TerminalNode PASSING() { return getToken(PLSQLParser.PASSING, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(PLSQLParser.COMMA, 0); }
		public TerminalNode BY() { return getToken(PLSQLParser.BY, 0); }
		public TerminalNode VALUE() { return getToken(PLSQLParser.VALUE, 0); }
		public List<Column_aliasContext> column_alias() {
			return getRuleContexts(Column_aliasContext.class);
		}
		public Column_aliasContext column_alias(int i) {
			return getRuleContext(Column_aliasContext.class,i);
		}
		public Xml_passing_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_passing_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterXml_passing_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitXml_passing_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitXml_passing_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xml_passing_clauseContext xml_passing_clause() throws RecognitionException {
		Xml_passing_clauseContext _localctx = new Xml_passing_clauseContext(_ctx, getState());
		enterRule(_localctx, 920, RULE_xml_passing_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7693);
			match(PASSING);
			setState(7696);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==BY) {
				{
				setState(7694);
				match(BY);
				setState(7695);
				match(VALUE);
				}
			}

			setState(7698);
			expression(0);
			setState(7700);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << AS) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BUILD) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (CHR - 65)) | (1L << (CLOB - 65)) | (1L << (CLOSE - 65)) | (1L << (CLUSTER - 65)) | (1L << (COALESCE - 65)) | (1L << (COLLECT - 65)) | (1L << (COLUMNS - 65)) | (1L << (COMMENT - 65)) | (1L << (COMMIT - 65)) | (1L << (COMMITTED - 65)) | (1L << (COMPATIBILITY - 65)) | (1L << (COMPILE - 65)) | (1L << (COMPLETE - 65)) | (1L << (COMPOUND - 65)) | (1L << (CONCAT - 65)) | (1L << (CONSTANT - 65)) | (1L << (CONSTRAINT - 65)) | (1L << (CONSTRAINTS - 65)) | (1L << (CONSTRUCTOR - 65)) | (1L << (CONTENT - 65)) | (1L << (CONTEXT - 65)) | (1L << (CONTINUE - 65)) | (1L << (CONVERT - 65)) | (1L << (CORRUPT_XID - 65)) | (1L << (CORRUPT_XID_ALL - 65)) | (1L << (COST - 65)) | (1L << (COUNT - 65)) | (1L << (CROSS - 65)) | (1L << (CUBE - 65)) | (1L << (CURRENT_USER - 65)) | (1L << (CURSOR - 65)) | (1L << (CUSTOMDATUM - 65)) | (1L << (CYCLE - 65)) | (1L << (DATA - 65)) | (1L << (DATABASE - 65)) | (1L << (DATE - 65)) | (1L << (DAY - 65)) | (1L << (DB_ROLE_CHANGE - 65)) | (1L << (DBTIMEZONE - 65)) | (1L << (DDL - 65)) | (1L << (DEBUG - 65)) | (1L << (DEC - 65)) | (1L << (DECIMAL - 65)) | (1L << (DECODE - 65)) | (1L << (DECOMPOSE - 65)) | (1L << (DECREMENT - 65)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DEMAND - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (EDITIONING - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENFORCED - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FAST - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)) | (1L << (FOLLOWING - 129)) | (1L << (FOLLOWS - 129)) | (1L << (FORALL - 129)) | (1L << (FORCE - 129)))) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & ((1L << (FULL - 197)) | (1L << (FUNCTION - 197)) | (1L << (GROUPING - 197)) | (1L << (HASH - 197)) | (1L << (HIDE - 197)) | (1L << (HOUR - 197)) | (1L << (IGNORE - 197)) | (1L << (IMMEDIATE - 197)) | (1L << (INCLUDE - 197)) | (1L << (INCLUDING - 197)) | (1L << (INCREMENT - 197)) | (1L << (INDENT - 197)) | (1L << (INDEXED - 197)) | (1L << (INDICATOR - 197)) | (1L << (INDICES - 197)) | (1L << (INFINITE - 197)) | (1L << (INLINE - 197)) | (1L << (INNER - 197)) | (1L << (INOUT - 197)) | (1L << (INSTANTIABLE - 197)) | (1L << (INSTEAD - 197)) | (1L << (INT - 197)) | (1L << (INTEGER - 197)) | (1L << (INTERVAL - 197)) | (1L << (INVALIDATE - 197)) | (1L << (ISOLATION - 197)) | (1L << (ITERATE - 197)) | (1L << (JAVA - 197)) | (1L << (JOIN - 197)) | (1L << (KEEP - 197)) | (1L << (LANGUAGE - 197)) | (1L << (LAST - 197)) | (1L << (LAST_VALUE - 197)) | (1L << (LEADING - 197)) | (1L << (LEFT - 197)) | (1L << (LEVEL - 197)))) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & ((1L << (LIBRARY - 261)) | (1L << (LIKE2 - 261)) | (1L << (LIKE4 - 261)) | (1L << (LIKEC - 261)) | (1L << (LIMIT - 261)) | (1L << (LIST - 261)) | (1L << (LOCAL - 261)) | (1L << (LOCKED - 261)) | (1L << (LOG - 261)) | (1L << (LOGOFF - 261)) | (1L << (LOGON - 261)) | (1L << (LONG - 261)) | (1L << (LOOP - 261)) | (1L << (MAIN - 261)) | (1L << (MAP - 261)) | (1L << (MASTER - 261)) | (1L << (MATCHED - 261)) | (1L << (MAXVALUE - 261)) | (1L << (MEASURES - 261)) | (1L << (MEMBER - 261)) | (1L << (MERGE - 261)) | (1L << (MINUTE - 261)) | (1L << (MINVALUE - 261)) | (1L << (MLSLABEL - 261)) | (1L << (MODEL - 261)) | (1L << (MODIFY - 261)) | (1L << (MONTH - 261)) | (1L << (MULTISET - 261)) | (1L << (NAME - 261)) | (1L << (NAN - 261)) | (1L << (NATURAL - 261)) | (1L << (NATURALN - 261)) | (1L << (NAV - 261)) | (1L << (NCHAR - 261)) | (1L << (NCHAR_CS - 261)) | (1L << (NCLOB - 261)) | (1L << (NESTED - 261)) | (1L << (NEVER - 261)) | (1L << (NEW - 261)) | (1L << (NO - 261)) | (1L << (NOAUDIT - 261)) | (1L << (NOCOPY - 261)) | (1L << (NOCYCLE - 261)) | (1L << (NOENTITYESCAPING - 261)))) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & ((1L << (NONE - 329)) | (1L << (NOSCHEMACHECK - 329)) | (1L << (NVL - 329)) | (1L << (NULLS - 329)) | (1L << (NUMBER - 329)) | (1L << (NUMERIC - 329)) | (1L << (NVARCHAR2 - 329)) | (1L << (MATERIALIZED - 329)) | (1L << (OBJECT - 329)) | (1L << (OFF - 329)) | (1L << (OID - 329)) | (1L << (OLD - 329)) | (1L << (ONLY - 329)) | (1L << (OPEN - 329)) | (1L << (ORADATA - 329)) | (1L << (ORDINALITY - 329)) | (1L << (OSERROR - 329)) | (1L << (OUT - 329)) | (1L << (OUTER - 329)) | (1L << (OVER - 329)) | (1L << (OVERRIDING - 329)) | (1L << (PACKAGE - 329)) | (1L << (PARALLEL_ENABLE - 329)) | (1L << (PARAMETERS - 329)) | (1L << (PARENT - 329)) | (1L << (PARTITION - 329)) | (1L << (PASSING - 329)) | (1L << (PATH - 329)) | (1L << (PIPELINED - 329)) | (1L << (PLAN - 329)) | (1L << (PLS_INTEGER - 329)) | (1L << (POSITIVE - 329)) | (1L << (POSITIVEN - 329)) | (1L << (PRAGMA - 329)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (PREBUILT - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)) | (1L << (PRESENT - 393)) | (1L << (PUBLIC - 393)) | (1L << (RAISE - 393)) | (1L << (RANGE - 393)) | (1L << (RAW - 393)) | (1L << (READ - 393)) | (1L << (REAL - 393)) | (1L << (RECORD - 393)) | (1L << (REDUCED - 393)) | (1L << (REF - 393)) | (1L << (REFERENCE - 393)) | (1L << (REFERENCING - 393)) | (1L << (REFRESH - 393)) | (1L << (REJECT - 393)) | (1L << (RELIES_ON - 393)) | (1L << (RENAME - 393)) | (1L << (REPLACE - 393)) | (1L << (RESPECT - 393)) | (1L << (RESTRICT_REFERENCES - 393)) | (1L << (RESULT - 393)) | (1L << (RESULT_CACHE - 393)) | (1L << (RETURN - 393)) | (1L << (RETURNING - 393)) | (1L << (REUSE - 393)) | (1L << (REVERSE - 393)) | (1L << (REWRITE - 393)) | (1L << (RIGHT - 393)) | (1L << (ROLE - 393)) | (1L << (ROLLBACK - 393)) | (1L << (ROLLUP - 393)) | (1L << (ROW - 393)) | (1L << (ROWID - 393)) | (1L << (ROWS - 393)) | (1L << (RULES - 393)) | (1L << (SAMPLE - 393)) | (1L << (SAVE - 393)) | (1L << (SAVEPOINT - 393)) | (1L << (SCHEMA - 393)) | (1L << (SCHEMACHECK - 393)) | (1L << (SCN - 393)) | (1L << (SECOND - 393)))) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & ((1L << (SEED - 458)) | (1L << (SEGMENT - 458)) | (1L << (SELF - 458)) | (1L << (SEQUENTIAL - 458)) | (1L << (SERIALIZABLE - 458)) | (1L << (SERIALLY_REUSABLE - 458)) | (1L << (SERVERERROR - 458)) | (1L << (SESSIONTIMEZONE - 458)) | (1L << (SET - 458)) | (1L << (SETS - 458)) | (1L << (SETTINGS - 458)) | (1L << (SHOW - 458)) | (1L << (SHUTDOWN - 458)) | (1L << (SIBLINGS - 458)) | (1L << (SIGNTYPE - 458)) | (1L << (SIMPLE_INTEGER - 458)) | (1L << (SINGLE - 458)) | (1L << (SIZE - 458)) | (1L << (SKIP_ - 458)) | (1L << (SMALLINT - 458)) | (1L << (SNAPSHOT - 458)) | (1L << (SOME - 458)) | (1L << (SPECIFICATION - 458)) | (1L << (SQLDATA - 458)) | (1L << (SQLERROR - 458)) | (1L << (STANDALONE - 458)) | (1L << (STARTUP - 458)) | (1L << (STATEMENT - 458)) | (1L << (STATEMENT_ID - 458)) | (1L << (STATIC - 458)) | (1L << (STATISTICS - 458)) | (1L << (STRING - 458)) | (1L << (SUBMULTISET - 458)) | (1L << (SUBPARTITION - 458)) | (1L << (SUBSTITUTABLE - 458)) | (1L << (SUBSTRING - 458)) | (1L << (SUBTYPE - 458)) | (1L << (SUCCESS - 458)) | (1L << (SUSPEND - 458)) | (1L << (TABLES - 458)) | (1L << (TIME - 458)) | (1L << (TIMESTAMP - 458)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 458)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 458)) | (1L << (TIMESTAMP_UNCONSTRAINED - 458)))) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & ((1L << (TIMEZONE_ABBR - 522)) | (1L << (TIMEZONE_HOUR - 522)) | (1L << (TIMEZONE_MINUTE - 522)) | (1L << (TIMEZONE_REGION - 522)) | (1L << (TO_CHAR - 522)) | (1L << (TO_DATE - 522)) | (1L << (TRAILING - 522)) | (1L << (TRANSACTION - 522)) | (1L << (TRANSLATE - 522)) | (1L << (TREAT - 522)) | (1L << (TRIGGER - 522)) | (1L << (TRIM - 522)) | (1L << (TRUNCATE - 522)) | (1L << (TRUSTED - 522)) | (1L << (TYPE - 522)) | (1L << (UNBOUNDED - 522)) | (1L << (UNDER - 522)) | (1L << (UNLIMITED - 522)) | (1L << (UNTIL - 522)) | (1L << (UPDATED - 522)) | (1L << (UPSERT - 522)) | (1L << (UROWID - 522)) | (1L << (USE - 522)) | (1L << (VALIDATE - 522)) | (1L << (VALUE - 522)) | (1L << (VARCHAR - 522)) | (1L << (VARCHAR2 - 522)) | (1L << (VARIABLE - 522)) | (1L << (VARRAY - 522)) | (1L << (VARYING - 522)) | (1L << (VERBOSE - 522)) | (1L << (VERSION - 522)) | (1L << (VERSIONS - 522)) | (1L << (VIEW - 522)) | (1L << (WAIT - 522)) | (1L << (WARNING - 522)) | (1L << (WELLFORMED - 522)) | (1L << (WHENEVER - 522)) | (1L << (WHILE - 522)) | (1L << (WITHOUT - 522)) | (1L << (WITHIN - 522)) | (1L << (WORK - 522)) | (1L << (WRITE - 522)) | (1L << (XML - 522)) | (1L << (XMLAGG - 522)) | (1L << (XMLATTRIBUTES - 522)))) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & ((1L << (XMLCAST - 586)) | (1L << (XMLCOLATTVAL - 586)) | (1L << (XMLELEMENT - 586)) | (1L << (XMLEXISTS - 586)) | (1L << (XMLFOREST - 586)) | (1L << (XMLNAMESPACES - 586)) | (1L << (XMLPARSE - 586)) | (1L << (XMLPI - 586)) | (1L << (XMLQUERY - 586)) | (1L << (XMLROOT - 586)) | (1L << (XMLSERIALIZE - 586)) | (1L << (XMLTABLE - 586)) | (1L << (YEAR - 586)) | (1L << (YES - 586)) | (1L << (YMINTERVAL_UNCONSTRAINED - 586)) | (1L << (ZONE - 586)) | (1L << (PREDICTION - 586)) | (1L << (PREDICTION_BOUNDS - 586)) | (1L << (PREDICTION_COST - 586)) | (1L << (PREDICTION_DETAILS - 586)) | (1L << (PREDICTION_PROBABILITY - 586)) | (1L << (PREDICTION_SET - 586)) | (1L << (CUME_DIST - 586)) | (1L << (DENSE_RANK - 586)) | (1L << (LISTAGG - 586)) | (1L << (PERCENT_RANK - 586)) | (1L << (PERCENTILE_CONT - 586)) | (1L << (PERCENTILE_DISC - 586)) | (1L << (RANK - 586)) | (1L << (AVG - 586)) | (1L << (CORR - 586)) | (1L << (LAG - 586)) | (1L << (LEAD - 586)) | (1L << (MAX - 586)) | (1L << (MEDIAN - 586)) | (1L << (MIN - 586)) | (1L << (NTILE - 586)) | (1L << (RATIO_TO_REPORT - 586)) | (1L << (ROW_NUMBER - 586)) | (1L << (SUM - 586)) | (1L << (VARIANCE - 586)) | (1L << (REGR_ - 586)) | (1L << (STDDEV - 586)) | (1L << (VAR_ - 586)) | (1L << (COVAR_ - 586)) | (1L << (NATIONAL_CHAR_STRING_LIT - 586)) | (1L << (CHAR_STRING - 586)) | (1L << (DELIMITED_ID - 586)))) != 0) || _la==REGULAR_ID) {
				{
				setState(7699);
				column_alias();
				}
			}

			{
			setState(7702);
			match(COMMA);
			setState(7703);
			expression(0);
			setState(7705);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1128,_ctx) ) {
			case 1:
				{
				setState(7704);
				column_alias();
				}
				break;
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_attributes_clauseContext extends ParserRuleContext {
		public TerminalNode XMLATTRIBUTES() { return getToken(PLSQLParser.XMLATTRIBUTES, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PLSQLParser.LEFT_PAREN, 0); }
		public List<Xml_multiuse_expression_elementContext> xml_multiuse_expression_element() {
			return getRuleContexts(Xml_multiuse_expression_elementContext.class);
		}
		public Xml_multiuse_expression_elementContext xml_multiuse_expression_element(int i) {
			return getRuleContext(Xml_multiuse_expression_elementContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PLSQLParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PLSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLSQLParser.COMMA, i);
		}
		public TerminalNode ENTITYESCAPING() { return getToken(PLSQLParser.ENTITYESCAPING, 0); }
		public TerminalNode NOENTITYESCAPING() { return getToken(PLSQLParser.NOENTITYESCAPING, 0); }
		public TerminalNode SCHEMACHECK() { return getToken(PLSQLParser.SCHEMACHECK, 0); }
		public TerminalNode NOSCHEMACHECK() { return getToken(PLSQLParser.NOSCHEMACHECK, 0); }
		public Xml_attributes_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_attributes_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterXml_attributes_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitXml_attributes_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitXml_attributes_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xml_attributes_clauseContext xml_attributes_clause() throws RecognitionException {
		Xml_attributes_clauseContext _localctx = new Xml_attributes_clauseContext(_ctx, getState());
		enterRule(_localctx, 922, RULE_xml_attributes_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7707);
			match(XMLATTRIBUTES);
			setState(7708);
			match(LEFT_PAREN);
			setState(7710);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1129,_ctx) ) {
			case 1:
				{
				setState(7709);
				_la = _input.LA(1);
				if ( !(_la==ENTITYESCAPING || _la==NOENTITYESCAPING) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(7713);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1130,_ctx) ) {
			case 1:
				{
				setState(7712);
				_la = _input.LA(1);
				if ( !(_la==NOSCHEMACHECK || _la==SCHEMACHECK) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(7715);
			xml_multiuse_expression_element();
			setState(7720);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(7716);
				match(COMMA);
				setState(7717);
				xml_multiuse_expression_element();
				}
				}
				setState(7722);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(7723);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_namespaces_clauseContext extends ParserRuleContext {
		public TerminalNode XMLNAMESPACES() { return getToken(PLSQLParser.XMLNAMESPACES, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PLSQLParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PLSQLParser.RIGHT_PAREN, 0); }
		public List<ConcatenationContext> concatenation() {
			return getRuleContexts(ConcatenationContext.class);
		}
		public ConcatenationContext concatenation(int i) {
			return getRuleContext(ConcatenationContext.class,i);
		}
		public List<Column_aliasContext> column_alias() {
			return getRuleContexts(Column_aliasContext.class);
		}
		public Column_aliasContext column_alias(int i) {
			return getRuleContext(Column_aliasContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLSQLParser.COMMA, i);
		}
		public Xml_general_default_partContext xml_general_default_part() {
			return getRuleContext(Xml_general_default_partContext.class,0);
		}
		public Xml_namespaces_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_namespaces_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterXml_namespaces_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitXml_namespaces_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitXml_namespaces_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xml_namespaces_clauseContext xml_namespaces_clause() throws RecognitionException {
		Xml_namespaces_clauseContext _localctx = new Xml_namespaces_clauseContext(_ctx, getState());
		enterRule(_localctx, 924, RULE_xml_namespaces_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7725);
			match(XMLNAMESPACES);
			setState(7726);
			match(LEFT_PAREN);
			setState(7730);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1132,_ctx) ) {
			case 1:
				{
				setState(7727);
				concatenation();
				setState(7728);
				column_alias();
				}
				break;
			}
			setState(7738);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(7732);
				match(COMMA);
				setState(7733);
				concatenation();
				setState(7734);
				column_alias();
				}
				}
				setState(7740);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(7742);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFAULT) {
				{
				setState(7741);
				xml_general_default_part();
				}
			}

			setState(7744);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_table_columnContext extends ParserRuleContext {
		public Xml_column_nameContext xml_column_name() {
			return getRuleContext(Xml_column_nameContext.class,0);
		}
		public TerminalNode FOR() { return getToken(PLSQLParser.FOR, 0); }
		public TerminalNode ORDINALITY() { return getToken(PLSQLParser.ORDINALITY, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode PATH() { return getToken(PLSQLParser.PATH, 0); }
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		public Xml_general_default_partContext xml_general_default_part() {
			return getRuleContext(Xml_general_default_partContext.class,0);
		}
		public Xml_table_columnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_table_column; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterXml_table_column(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitXml_table_column(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitXml_table_column(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xml_table_columnContext xml_table_column() throws RecognitionException {
		Xml_table_columnContext _localctx = new Xml_table_columnContext(_ctx, getState());
		enterRule(_localctx, 926, RULE_xml_table_column);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7746);
			xml_column_name();
			setState(7757);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FOR:
				{
				setState(7747);
				match(FOR);
				setState(7748);
				match(ORDINALITY);
				}
				break;
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BUILD:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPLETE:
			case COMPOUND:
			case CONCAT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECODE:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DEMAND:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case EDITIONING:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENFORCED:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FAST:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LIST:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MASTER:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEVER:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NVL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case MATERIALIZED:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PREBUILT:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PUBLIC:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REDUCED:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REFRESH:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case REWRITE:
			case RIGHT:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SIZE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBSTRING:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TABLES:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TO_CHAR:
			case TO_DATE:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TRUSTED:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERBOSE:
			case VERSION:
			case VERSIONS:
			case VIEW:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHOUT:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case REGULAR_ID:
				{
				setState(7749);
				type_spec();
				setState(7752);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PATH) {
					{
					setState(7750);
					match(PATH);
					setState(7751);
					concatenation();
					}
				}

				setState(7755);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEFAULT) {
					{
					setState(7754);
					xml_general_default_part();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_general_default_partContext extends ParserRuleContext {
		public TerminalNode DEFAULT() { return getToken(PLSQLParser.DEFAULT, 0); }
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		public Xml_general_default_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_general_default_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterXml_general_default_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitXml_general_default_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitXml_general_default_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xml_general_default_partContext xml_general_default_part() throws RecognitionException {
		Xml_general_default_partContext _localctx = new Xml_general_default_partContext(_ctx, getState());
		enterRule(_localctx, 928, RULE_xml_general_default_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7759);
			match(DEFAULT);
			setState(7760);
			concatenation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_multiuse_expression_elementContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode AS() { return getToken(PLSQLParser.AS, 0); }
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public TerminalNode EVALNAME() { return getToken(PLSQLParser.EVALNAME, 0); }
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		public Xml_multiuse_expression_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_multiuse_expression_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterXml_multiuse_expression_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitXml_multiuse_expression_element(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitXml_multiuse_expression_element(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xml_multiuse_expression_elementContext xml_multiuse_expression_element() throws RecognitionException {
		Xml_multiuse_expression_elementContext _localctx = new Xml_multiuse_expression_elementContext(_ctx, getState());
		enterRule(_localctx, 930, RULE_xml_multiuse_expression_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7762);
			expression(0);
			setState(7769);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(7763);
				match(AS);
				setState(7767);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1138,_ctx) ) {
				case 1:
					{
					setState(7764);
					id_expression();
					}
					break;
				case 2:
					{
					setState(7765);
					match(EVALNAME);
					setState(7766);
					concatenation();
					}
					break;
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xmlroot_param_version_partContext extends ParserRuleContext {
		public TerminalNode VERSION() { return getToken(PLSQLParser.VERSION, 0); }
		public TerminalNode NO() { return getToken(PLSQLParser.NO, 0); }
		public TerminalNode VALUE() { return getToken(PLSQLParser.VALUE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Xmlroot_param_version_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlroot_param_version_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterXmlroot_param_version_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitXmlroot_param_version_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitXmlroot_param_version_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xmlroot_param_version_partContext xmlroot_param_version_part() throws RecognitionException {
		Xmlroot_param_version_partContext _localctx = new Xmlroot_param_version_partContext(_ctx, getState());
		enterRule(_localctx, 932, RULE_xmlroot_param_version_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7771);
			match(VERSION);
			setState(7775);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1140,_ctx) ) {
			case 1:
				{
				setState(7772);
				match(NO);
				setState(7773);
				match(VALUE);
				}
				break;
			case 2:
				{
				setState(7774);
				expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xmlroot_param_standalone_partContext extends ParserRuleContext {
		public TerminalNode STANDALONE() { return getToken(PLSQLParser.STANDALONE, 0); }
		public TerminalNode YES() { return getToken(PLSQLParser.YES, 0); }
		public TerminalNode NO() { return getToken(PLSQLParser.NO, 0); }
		public TerminalNode VALUE() { return getToken(PLSQLParser.VALUE, 0); }
		public Xmlroot_param_standalone_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlroot_param_standalone_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterXmlroot_param_standalone_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitXmlroot_param_standalone_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitXmlroot_param_standalone_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xmlroot_param_standalone_partContext xmlroot_param_standalone_part() throws RecognitionException {
		Xmlroot_param_standalone_partContext _localctx = new Xmlroot_param_standalone_partContext(_ctx, getState());
		enterRule(_localctx, 934, RULE_xmlroot_param_standalone_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7777);
			match(STANDALONE);
			setState(7783);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case YES:
				{
				setState(7778);
				match(YES);
				}
				break;
			case NO:
				{
				setState(7779);
				match(NO);
				setState(7781);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==VALUE) {
					{
					setState(7780);
					match(VALUE);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xmlserialize_param_enconding_partContext extends ParserRuleContext {
		public TerminalNode ENCODING() { return getToken(PLSQLParser.ENCODING, 0); }
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		public Xmlserialize_param_enconding_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlserialize_param_enconding_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterXmlserialize_param_enconding_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitXmlserialize_param_enconding_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitXmlserialize_param_enconding_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xmlserialize_param_enconding_partContext xmlserialize_param_enconding_part() throws RecognitionException {
		Xmlserialize_param_enconding_partContext _localctx = new Xmlserialize_param_enconding_partContext(_ctx, getState());
		enterRule(_localctx, 936, RULE_xmlserialize_param_enconding_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7785);
			match(ENCODING);
			setState(7786);
			concatenation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xmlserialize_param_version_partContext extends ParserRuleContext {
		public TerminalNode VERSION() { return getToken(PLSQLParser.VERSION, 0); }
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		public Xmlserialize_param_version_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlserialize_param_version_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterXmlserialize_param_version_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitXmlserialize_param_version_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitXmlserialize_param_version_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xmlserialize_param_version_partContext xmlserialize_param_version_part() throws RecognitionException {
		Xmlserialize_param_version_partContext _localctx = new Xmlserialize_param_version_partContext(_ctx, getState());
		enterRule(_localctx, 938, RULE_xmlserialize_param_version_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7788);
			match(VERSION);
			setState(7789);
			concatenation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xmlserialize_param_ident_partContext extends ParserRuleContext {
		public TerminalNode NO() { return getToken(PLSQLParser.NO, 0); }
		public TerminalNode INDENT() { return getToken(PLSQLParser.INDENT, 0); }
		public TerminalNode SIZE() { return getToken(PLSQLParser.SIZE, 0); }
		public TerminalNode EQUALS_OP() { return getToken(PLSQLParser.EQUALS_OP, 0); }
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		public Xmlserialize_param_ident_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlserialize_param_ident_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterXmlserialize_param_ident_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitXmlserialize_param_ident_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitXmlserialize_param_ident_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xmlserialize_param_ident_partContext xmlserialize_param_ident_part() throws RecognitionException {
		Xmlserialize_param_ident_partContext _localctx = new Xmlserialize_param_ident_partContext(_ctx, getState());
		enterRule(_localctx, 940, RULE_xmlserialize_param_ident_part);
		int _la;
		try {
			setState(7799);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NO:
				enterOuterAlt(_localctx, 1);
				{
				setState(7791);
				match(NO);
				setState(7792);
				match(INDENT);
				}
				break;
			case INDENT:
				enterOuterAlt(_localctx, 2);
				{
				setState(7793);
				match(INDENT);
				setState(7797);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SIZE) {
					{
					setState(7794);
					match(SIZE);
					setState(7795);
					match(EQUALS_OP);
					setState(7796);
					concatenation();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sql_plus_commandContext extends ParserRuleContext {
		public TerminalNode SOLIDUS() { return getToken(PLSQLParser.SOLIDUS, 0); }
		public Whenever_commandContext whenever_command() {
			return getRuleContext(Whenever_commandContext.class,0);
		}
		public Exit_commandContext exit_command() {
			return getRuleContext(Exit_commandContext.class,0);
		}
		public Prompt_commandContext prompt_command() {
			return getRuleContext(Prompt_commandContext.class,0);
		}
		public Set_commandContext set_command() {
			return getRuleContext(Set_commandContext.class,0);
		}
		public Show_errors_commandContext show_errors_command() {
			return getRuleContext(Show_errors_commandContext.class,0);
		}
		public Sql_plus_commandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sql_plus_command; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterSql_plus_command(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitSql_plus_command(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitSql_plus_command(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sql_plus_commandContext sql_plus_command() throws RecognitionException {
		Sql_plus_commandContext _localctx = new Sql_plus_commandContext(_ctx, getState());
		enterRule(_localctx, 942, RULE_sql_plus_command);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7807);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SOLIDUS:
				{
				setState(7801);
				match(SOLIDUS);
				}
				break;
			case WHENEVER:
				{
				setState(7802);
				whenever_command();
				}
				break;
			case EXIT:
				{
				setState(7803);
				exit_command();
				}
				break;
			case PROMPT:
				{
				setState(7804);
				prompt_command();
				}
				break;
			case SET:
				{
				setState(7805);
				set_command();
				}
				break;
			case SHOW:
				{
				setState(7806);
				show_errors_command();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Whenever_commandContext extends ParserRuleContext {
		public TerminalNode WHENEVER() { return getToken(PLSQLParser.WHENEVER, 0); }
		public TerminalNode SQLERROR() { return getToken(PLSQLParser.SQLERROR, 0); }
		public TerminalNode OSERROR() { return getToken(PLSQLParser.OSERROR, 0); }
		public TerminalNode EXIT() { return getToken(PLSQLParser.EXIT, 0); }
		public TerminalNode CONTINUE() { return getToken(PLSQLParser.CONTINUE, 0); }
		public TerminalNode SUCCESS() { return getToken(PLSQLParser.SUCCESS, 0); }
		public TerminalNode FAILURE() { return getToken(PLSQLParser.FAILURE, 0); }
		public TerminalNode WARNING() { return getToken(PLSQLParser.WARNING, 0); }
		public TerminalNode COMMIT() { return getToken(PLSQLParser.COMMIT, 0); }
		public TerminalNode ROLLBACK() { return getToken(PLSQLParser.ROLLBACK, 0); }
		public TerminalNode NONE() { return getToken(PLSQLParser.NONE, 0); }
		public Whenever_commandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_whenever_command; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterWhenever_command(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitWhenever_command(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitWhenever_command(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Whenever_commandContext whenever_command() throws RecognitionException {
		Whenever_commandContext _localctx = new Whenever_commandContext(_ctx, getState());
		enterRule(_localctx, 944, RULE_whenever_command);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7809);
			match(WHENEVER);
			setState(7810);
			_la = _input.LA(1);
			if ( !(_la==OSERROR || _la==SQLERROR) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(7816);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case EXIT:
				{
				setState(7811);
				match(EXIT);
				setState(7812);
				_la = _input.LA(1);
				if ( !(_la==FAILURE || _la==SUCCESS || _la==WARNING) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7813);
				_la = _input.LA(1);
				if ( !(_la==COMMIT || _la==ROLLBACK) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case CONTINUE:
				{
				setState(7814);
				match(CONTINUE);
				setState(7815);
				_la = _input.LA(1);
				if ( !(_la==COMMIT || _la==NONE || _la==ROLLBACK) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_commandContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(PLSQLParser.SET, 0); }
		public List<Regular_idContext> regular_id() {
			return getRuleContexts(Regular_idContext.class);
		}
		public Regular_idContext regular_id(int i) {
			return getRuleContext(Regular_idContext.class,i);
		}
		public TerminalNode CHAR_STRING() { return getToken(PLSQLParser.CHAR_STRING, 0); }
		public TerminalNode ON() { return getToken(PLSQLParser.ON, 0); }
		public TerminalNode OFF() { return getToken(PLSQLParser.OFF, 0); }
		public NumericContext numeric() {
			return getRuleContext(NumericContext.class,0);
		}
		public Set_commandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_command; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterSet_command(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitSet_command(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitSet_command(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_commandContext set_command() throws RecognitionException {
		Set_commandContext _localctx = new Set_commandContext(_ctx, getState());
		enterRule(_localctx, 946, RULE_set_command);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7818);
			match(SET);
			setState(7819);
			regular_id();
			setState(7825);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1147,_ctx) ) {
			case 1:
				{
				setState(7820);
				match(CHAR_STRING);
				}
				break;
			case 2:
				{
				setState(7821);
				match(ON);
				}
				break;
			case 3:
				{
				setState(7822);
				match(OFF);
				}
				break;
			case 4:
				{
				setState(7823);
				numeric();
				}
				break;
			case 5:
				{
				setState(7824);
				regular_id();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Exit_commandContext extends ParserRuleContext {
		public TerminalNode EXIT() { return getToken(PLSQLParser.EXIT, 0); }
		public Exit_commandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exit_command; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterExit_command(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitExit_command(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitExit_command(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Exit_commandContext exit_command() throws RecognitionException {
		Exit_commandContext _localctx = new Exit_commandContext(_ctx, getState());
		enterRule(_localctx, 948, RULE_exit_command);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7827);
			match(EXIT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Prompt_commandContext extends ParserRuleContext {
		public TerminalNode PROMPT() { return getToken(PLSQLParser.PROMPT, 0); }
		public Prompt_commandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_prompt_command; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterPrompt_command(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitPrompt_command(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitPrompt_command(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Prompt_commandContext prompt_command() throws RecognitionException {
		Prompt_commandContext _localctx = new Prompt_commandContext(_ctx, getState());
		enterRule(_localctx, 950, RULE_prompt_command);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7829);
			match(PROMPT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Show_errors_commandContext extends ParserRuleContext {
		public TerminalNode SHOW() { return getToken(PLSQLParser.SHOW, 0); }
		public TerminalNode ERR() { return getToken(PLSQLParser.ERR, 0); }
		public TerminalNode ERRORS() { return getToken(PLSQLParser.ERRORS, 0); }
		public Show_errors_commandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_show_errors_command; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterShow_errors_command(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitShow_errors_command(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitShow_errors_command(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Show_errors_commandContext show_errors_command() throws RecognitionException {
		Show_errors_commandContext _localctx = new Show_errors_commandContext(_ctx, getState());
		enterRule(_localctx, 952, RULE_show_errors_command);
		try {
			setState(7835);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1148,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7831);
				match(SHOW);
				setState(7832);
				match(ERR);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7833);
				match(SHOW);
				setState(7834);
				match(ERRORS);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Partition_extension_clauseContext extends ParserRuleContext {
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public TerminalNode SUBPARTITION() { return getToken(PLSQLParser.SUBPARTITION, 0); }
		public TerminalNode PARTITION() { return getToken(PLSQLParser.PARTITION, 0); }
		public TerminalNode FOR() { return getToken(PLSQLParser.FOR, 0); }
		public Partition_extension_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partition_extension_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterPartition_extension_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitPartition_extension_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitPartition_extension_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Partition_extension_clauseContext partition_extension_clause() throws RecognitionException {
		Partition_extension_clauseContext _localctx = new Partition_extension_clauseContext(_ctx, getState());
		enterRule(_localctx, 954, RULE_partition_extension_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7837);
			_la = _input.LA(1);
			if ( !(_la==PARTITION || _la==SUBPARTITION) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(7839);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(7838);
				match(FOR);
				}
			}

			setState(7841);
			expression_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_aliasContext extends ParserRuleContext {
		public R_idContext r_id() {
			return getRuleContext(R_idContext.class,0);
		}
		public Alias_quoted_stringContext alias_quoted_string() {
			return getRuleContext(Alias_quoted_stringContext.class,0);
		}
		public TerminalNode AS() { return getToken(PLSQLParser.AS, 0); }
		public Column_aliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_alias; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterColumn_alias(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitColumn_alias(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitColumn_alias(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Column_aliasContext column_alias() throws RecognitionException {
		Column_aliasContext _localctx = new Column_aliasContext(_ctx, getState());
		enterRule(_localctx, 956, RULE_column_alias);
		int _la;
		try {
			setState(7851);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1152,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7844);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(7843);
					match(AS);
					}
				}

				setState(7848);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case A_LETTER:
				case ADD:
				case AFTER:
				case AGENT:
				case AGGREGATE:
				case ANALYZE:
				case ARRAY:
				case ASSOCIATE:
				case AT:
				case ATTRIBUTE:
				case AUDIT:
				case AUTHID:
				case AUTO:
				case AUTOMATIC:
				case AUTONOMOUS_TRANSACTION:
				case BATCH:
				case BEFORE:
				case BFILE:
				case BINARY_DOUBLE:
				case BINARY_FLOAT:
				case BINARY_INTEGER:
				case BUILD:
				case BLOB:
				case BLOCK:
				case BODY:
				case BOOLEAN:
				case BOTH:
				case BULK:
				case BYTE:
				case C_LETTER:
				case CALL:
				case CANONICAL:
				case CASCADE:
				case CAST:
				case CHAR:
				case CHAR_CS:
				case CHARACTER:
				case CHR:
				case CLOB:
				case CLOSE:
				case CLUSTER:
				case COALESCE:
				case COLLECT:
				case COLUMNS:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case COMPATIBILITY:
				case COMPILE:
				case COMPLETE:
				case COMPOUND:
				case CONCAT:
				case CONSTANT:
				case CONSTRAINT:
				case CONSTRAINTS:
				case CONSTRUCTOR:
				case CONTENT:
				case CONTEXT:
				case CONTINUE:
				case CONVERT:
				case CORRUPT_XID:
				case CORRUPT_XID_ALL:
				case COST:
				case COUNT:
				case CROSS:
				case CUBE:
				case CURRENT_USER:
				case CURSOR:
				case CUSTOMDATUM:
				case CYCLE:
				case DATA:
				case DATABASE:
				case DATE:
				case DAY:
				case DB_ROLE_CHANGE:
				case DBTIMEZONE:
				case DDL:
				case DEBUG:
				case DEC:
				case DECIMAL:
				case DECODE:
				case DECOMPOSE:
				case DECREMENT:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DEMAND:
				case DETERMINISTIC:
				case DIMENSION:
				case DISABLE:
				case DISASSOCIATE:
				case DOCUMENT:
				case DOUBLE:
				case DSINTERVAL_UNCONSTRAINED:
				case EACH:
				case EDITIONING:
				case ELEMENT:
				case EMPTY:
				case ENABLE:
				case ENCODING:
				case ENFORCED:
				case ENTITYESCAPING:
				case ERR:
				case ERRORS:
				case ESCAPE:
				case EVALNAME:
				case EXCEPTION:
				case EXCEPTION_INIT:
				case EXCEPTIONS:
				case EXCLUDE:
				case EXECUTE:
				case EXIT:
				case EXPLAIN:
				case EXTERNAL:
				case EXTRACT:
				case FAILURE:
				case FAST:
				case FINAL:
				case FIRST:
				case FIRST_VALUE:
				case FLOAT:
				case FOLLOWING:
				case FOLLOWS:
				case FORALL:
				case FORCE:
				case FULL:
				case FUNCTION:
				case GROUPING:
				case HASH:
				case HIDE:
				case HOUR:
				case IGNORE:
				case IMMEDIATE:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDENT:
				case INDEXED:
				case INDICATOR:
				case INDICES:
				case INFINITE:
				case INLINE:
				case INNER:
				case INOUT:
				case INSTANTIABLE:
				case INSTEAD:
				case INT:
				case INTEGER:
				case INTERVAL:
				case INVALIDATE:
				case ISOLATION:
				case ITERATE:
				case JAVA:
				case JOIN:
				case KEEP:
				case LANGUAGE:
				case LAST:
				case LAST_VALUE:
				case LEADING:
				case LEFT:
				case LEVEL:
				case LIBRARY:
				case LIKE2:
				case LIKE4:
				case LIKEC:
				case LIMIT:
				case LIST:
				case LOCAL:
				case LOCKED:
				case LOG:
				case LOGOFF:
				case LOGON:
				case LONG:
				case LOOP:
				case MAIN:
				case MAP:
				case MASTER:
				case MATCHED:
				case MAXVALUE:
				case MEASURES:
				case MEMBER:
				case MERGE:
				case MINUTE:
				case MINVALUE:
				case MLSLABEL:
				case MODEL:
				case MODIFY:
				case MONTH:
				case MULTISET:
				case NAME:
				case NAN:
				case NATURAL:
				case NATURALN:
				case NAV:
				case NCHAR:
				case NCHAR_CS:
				case NCLOB:
				case NESTED:
				case NEVER:
				case NEW:
				case NO:
				case NOAUDIT:
				case NOCOPY:
				case NOCYCLE:
				case NOENTITYESCAPING:
				case NONE:
				case NOSCHEMACHECK:
				case NVL:
				case NULLS:
				case NUMBER:
				case NUMERIC:
				case NVARCHAR2:
				case MATERIALIZED:
				case OBJECT:
				case OFF:
				case OID:
				case OLD:
				case ONLY:
				case OPEN:
				case ORADATA:
				case ORDINALITY:
				case OSERROR:
				case OUT:
				case OUTER:
				case OVER:
				case OVERRIDING:
				case PACKAGE:
				case PARALLEL_ENABLE:
				case PARAMETERS:
				case PARENT:
				case PARTITION:
				case PASSING:
				case PATH:
				case PIPELINED:
				case PLAN:
				case PLS_INTEGER:
				case POSITIVE:
				case POSITIVEN:
				case PRAGMA:
				case PREBUILT:
				case PRECEDING:
				case PRECISION:
				case PRESENT:
				case PUBLIC:
				case RAISE:
				case RANGE:
				case RAW:
				case READ:
				case REAL:
				case RECORD:
				case REDUCED:
				case REF:
				case REFERENCE:
				case REFERENCING:
				case REFRESH:
				case REJECT:
				case RELIES_ON:
				case RENAME:
				case REPLACE:
				case RESPECT:
				case RESTRICT_REFERENCES:
				case RESULT:
				case RESULT_CACHE:
				case RETURN:
				case RETURNING:
				case REUSE:
				case REVERSE:
				case REWRITE:
				case RIGHT:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROW:
				case ROWID:
				case ROWS:
				case RULES:
				case SAMPLE:
				case SAVE:
				case SAVEPOINT:
				case SCHEMA:
				case SCHEMACHECK:
				case SCN:
				case SECOND:
				case SEED:
				case SEGMENT:
				case SELF:
				case SEQUENTIAL:
				case SERIALIZABLE:
				case SERIALLY_REUSABLE:
				case SERVERERROR:
				case SESSIONTIMEZONE:
				case SET:
				case SETS:
				case SETTINGS:
				case SHOW:
				case SHUTDOWN:
				case SIBLINGS:
				case SIGNTYPE:
				case SIMPLE_INTEGER:
				case SINGLE:
				case SIZE:
				case SKIP_:
				case SMALLINT:
				case SNAPSHOT:
				case SOME:
				case SPECIFICATION:
				case SQLDATA:
				case SQLERROR:
				case STANDALONE:
				case STARTUP:
				case STATEMENT:
				case STATEMENT_ID:
				case STATIC:
				case STATISTICS:
				case STRING:
				case SUBMULTISET:
				case SUBPARTITION:
				case SUBSTITUTABLE:
				case SUBSTRING:
				case SUBTYPE:
				case SUCCESS:
				case SUSPEND:
				case TABLES:
				case TIME:
				case TIMESTAMP:
				case TIMESTAMP_LTZ_UNCONSTRAINED:
				case TIMESTAMP_TZ_UNCONSTRAINED:
				case TIMESTAMP_UNCONSTRAINED:
				case TIMEZONE_ABBR:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TIMEZONE_REGION:
				case TO_CHAR:
				case TO_DATE:
				case TRAILING:
				case TRANSACTION:
				case TRANSLATE:
				case TREAT:
				case TRIGGER:
				case TRIM:
				case TRUNCATE:
				case TRUSTED:
				case TYPE:
				case UNBOUNDED:
				case UNDER:
				case UNLIMITED:
				case UNTIL:
				case UPDATED:
				case UPSERT:
				case UROWID:
				case USE:
				case VALIDATE:
				case VALUE:
				case VARCHAR:
				case VARCHAR2:
				case VARIABLE:
				case VARRAY:
				case VARYING:
				case VERBOSE:
				case VERSION:
				case VERSIONS:
				case VIEW:
				case WAIT:
				case WARNING:
				case WELLFORMED:
				case WHENEVER:
				case WHILE:
				case WITHOUT:
				case WITHIN:
				case WORK:
				case WRITE:
				case XML:
				case XMLAGG:
				case XMLATTRIBUTES:
				case XMLCAST:
				case XMLCOLATTVAL:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLQUERY:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case YEAR:
				case YES:
				case YMINTERVAL_UNCONSTRAINED:
				case ZONE:
				case PREDICTION:
				case PREDICTION_BOUNDS:
				case PREDICTION_COST:
				case PREDICTION_DETAILS:
				case PREDICTION_PROBABILITY:
				case PREDICTION_SET:
				case CUME_DIST:
				case DENSE_RANK:
				case LISTAGG:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case RANK:
				case AVG:
				case CORR:
				case LAG:
				case LEAD:
				case MAX:
				case MEDIAN:
				case MIN:
				case NTILE:
				case RATIO_TO_REPORT:
				case ROW_NUMBER:
				case SUM:
				case VARIANCE:
				case REGR_:
				case STDDEV:
				case VAR_:
				case COVAR_:
				case DELIMITED_ID:
				case REGULAR_ID:
					{
					setState(7846);
					r_id();
					}
					break;
				case NATIONAL_CHAR_STRING_LIT:
				case CHAR_STRING:
					{
					setState(7847);
					alias_quoted_string();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7850);
				match(AS);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_aliasContext extends ParserRuleContext {
		public R_idContext r_id() {
			return getRuleContext(R_idContext.class,0);
		}
		public Alias_quoted_stringContext alias_quoted_string() {
			return getRuleContext(Alias_quoted_stringContext.class,0);
		}
		public TerminalNode AS() { return getToken(PLSQLParser.AS, 0); }
		public Table_aliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_alias; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterTable_alias(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitTable_alias(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitTable_alias(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_aliasContext table_alias() throws RecognitionException {
		Table_aliasContext _localctx = new Table_aliasContext(_ctx, getState());
		enterRule(_localctx, 958, RULE_table_alias);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7854);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(7853);
				match(AS);
				}
			}

			setState(7858);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BUILD:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPLETE:
			case COMPOUND:
			case CONCAT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECODE:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DEMAND:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case EDITIONING:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENFORCED:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FAST:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LIST:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MASTER:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEVER:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NVL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case MATERIALIZED:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PREBUILT:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PUBLIC:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REDUCED:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REFRESH:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case REWRITE:
			case RIGHT:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SIZE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBSTRING:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TABLES:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TO_CHAR:
			case TO_DATE:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TRUSTED:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERBOSE:
			case VERSION:
			case VERSIONS:
			case VIEW:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHOUT:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case REGULAR_ID:
				{
				setState(7856);
				r_id();
				}
				break;
			case NATIONAL_CHAR_STRING_LIT:
			case CHAR_STRING:
				{
				setState(7857);
				alias_quoted_string();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alias_quoted_stringContext extends ParserRuleContext {
		public Quoted_stringContext quoted_string() {
			return getRuleContext(Quoted_stringContext.class,0);
		}
		public Alias_quoted_stringContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alias_quoted_string; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterAlias_quoted_string(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitAlias_quoted_string(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitAlias_quoted_string(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alias_quoted_stringContext alias_quoted_string() throws RecognitionException {
		Alias_quoted_stringContext _localctx = new Alias_quoted_stringContext(_ctx, getState());
		enterRule(_localctx, 960, RULE_alias_quoted_string);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7860);
			quoted_string();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Where_clauseContext extends ParserRuleContext {
		public TerminalNode WHERE() { return getToken(PLSQLParser.WHERE, 0); }
		public Current_of_clauseContext current_of_clause() {
			return getRuleContext(Current_of_clauseContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Where_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_where_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterWhere_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitWhere_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitWhere_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Where_clauseContext where_clause() throws RecognitionException {
		Where_clauseContext _localctx = new Where_clauseContext(_ctx, getState());
		enterRule(_localctx, 962, RULE_where_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7862);
			match(WHERE);
			setState(7865);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CURRENT:
				{
				setState(7863);
				current_of_clause();
				}
				break;
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ALL:
			case ANALYZE:
			case ANY:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BUILD:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CASE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPLETE:
			case COMPOUND:
			case CONCAT:
			case CONNECT_BY_ROOT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECODE:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DEMAND:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DISTINCT:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case EDITIONING:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENFORCED:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FALSE:
			case FAST:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LIST:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MASTER:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEVER:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NOT:
			case NVL:
			case NULL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case MATERIALIZED:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITION:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PREBUILT:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIOR:
			case PUBLIC:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REDUCED:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REFRESH:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case REWRITE:
			case RIGHT:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELECT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SIZE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBSTRING:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TABLES:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TO_CHAR:
			case TO_DATE:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUE:
			case TRUNCATE:
			case TRUSTED:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERBOSE:
			case VERSION:
			case VERSIONS:
			case VIEW:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHOUT:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case NATIONAL_CHAR_STRING_LIT:
			case UNSIGNED_INTEGER:
			case APPROXIMATE_NUM_LIT:
			case CHAR_STRING:
			case DELIMITED_ID:
			case LEFT_PAREN:
			case PLUS_SIGN:
			case MINUS_SIGN:
			case BINDVAR:
			case COLON:
			case REGULAR_ID:
				{
				setState(7864);
				expression(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Current_of_clauseContext extends ParserRuleContext {
		public TerminalNode CURRENT() { return getToken(PLSQLParser.CURRENT, 0); }
		public TerminalNode OF() { return getToken(PLSQLParser.OF, 0); }
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public Current_of_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_current_of_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterCurrent_of_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitCurrent_of_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitCurrent_of_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Current_of_clauseContext current_of_clause() throws RecognitionException {
		Current_of_clauseContext _localctx = new Current_of_clauseContext(_ctx, getState());
		enterRule(_localctx, 964, RULE_current_of_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7867);
			match(CURRENT);
			setState(7868);
			match(OF);
			setState(7869);
			cursor_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Into_clauseContext extends ParserRuleContext {
		public TerminalNode INTO() { return getToken(PLSQLParser.INTO, 0); }
		public List<Variable_nameContext> variable_name() {
			return getRuleContexts(Variable_nameContext.class);
		}
		public Variable_nameContext variable_name(int i) {
			return getRuleContext(Variable_nameContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLSQLParser.COMMA, i);
		}
		public TerminalNode BULK() { return getToken(PLSQLParser.BULK, 0); }
		public TerminalNode COLLECT() { return getToken(PLSQLParser.COLLECT, 0); }
		public Into_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_into_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterInto_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitInto_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitInto_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Into_clauseContext into_clause() throws RecognitionException {
		Into_clauseContext _localctx = new Into_clauseContext(_ctx, getState());
		enterRule(_localctx, 966, RULE_into_clause);
		try {
			int _alt;
			setState(7891);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INTO:
				enterOuterAlt(_localctx, 1);
				{
				setState(7871);
				match(INTO);
				setState(7872);
				variable_name();
				setState(7877);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1156,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(7873);
						match(COMMA);
						setState(7874);
						variable_name();
						}
						} 
					}
					setState(7879);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,1156,_ctx);
				}
				}
				break;
			case BULK:
				enterOuterAlt(_localctx, 2);
				{
				setState(7880);
				match(BULK);
				setState(7881);
				match(COLLECT);
				setState(7882);
				match(INTO);
				setState(7883);
				variable_name();
				setState(7888);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1157,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(7884);
						match(COMMA);
						setState(7885);
						variable_name();
						}
						} 
					}
					setState(7890);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,1157,_ctx);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_column_nameContext extends ParserRuleContext {
		public R_idContext r_id() {
			return getRuleContext(R_idContext.class,0);
		}
		public Quoted_stringContext quoted_string() {
			return getRuleContext(Quoted_stringContext.class,0);
		}
		public Xml_column_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_column_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterXml_column_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitXml_column_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitXml_column_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xml_column_nameContext xml_column_name() throws RecognitionException {
		Xml_column_nameContext _localctx = new Xml_column_nameContext(_ctx, getState());
		enterRule(_localctx, 968, RULE_xml_column_name);
		try {
			setState(7895);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BUILD:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPLETE:
			case COMPOUND:
			case CONCAT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECODE:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DEMAND:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case EDITIONING:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENFORCED:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FAST:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LIST:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MASTER:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEVER:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NVL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case MATERIALIZED:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PREBUILT:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PUBLIC:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REDUCED:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REFRESH:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case REWRITE:
			case RIGHT:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SIZE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBSTRING:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TABLES:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TO_CHAR:
			case TO_DATE:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TRUSTED:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERBOSE:
			case VERSION:
			case VERSIONS:
			case VIEW:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHOUT:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(7893);
				r_id();
				}
				break;
			case NATIONAL_CHAR_STRING_LIT:
			case CHAR_STRING:
				enterOuterAlt(_localctx, 2);
				{
				setState(7894);
				quoted_string();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cost_class_nameContext extends ParserRuleContext {
		public R_idContext r_id() {
			return getRuleContext(R_idContext.class,0);
		}
		public Cost_class_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cost_class_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterCost_class_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitCost_class_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitCost_class_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cost_class_nameContext cost_class_name() throws RecognitionException {
		Cost_class_nameContext _localctx = new Cost_class_nameContext(_ctx, getState());
		enterRule(_localctx, 970, RULE_cost_class_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7897);
			r_id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Attribute_nameContext extends ParserRuleContext {
		public R_idContext r_id() {
			return getRuleContext(R_idContext.class,0);
		}
		public Attribute_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_attribute_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterAttribute_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitAttribute_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitAttribute_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Attribute_nameContext attribute_name() throws RecognitionException {
		Attribute_nameContext _localctx = new Attribute_nameContext(_ctx, getState());
		enterRule(_localctx, 972, RULE_attribute_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7899);
			r_id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Savepoint_nameContext extends ParserRuleContext {
		public R_idContext r_id() {
			return getRuleContext(R_idContext.class,0);
		}
		public Savepoint_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_savepoint_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterSavepoint_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitSavepoint_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitSavepoint_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Savepoint_nameContext savepoint_name() throws RecognitionException {
		Savepoint_nameContext _localctx = new Savepoint_nameContext(_ctx, getState());
		enterRule(_localctx, 974, RULE_savepoint_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7901);
			r_id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Rollback_segment_nameContext extends ParserRuleContext {
		public R_idContext r_id() {
			return getRuleContext(R_idContext.class,0);
		}
		public Rollback_segment_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rollback_segment_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterRollback_segment_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitRollback_segment_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitRollback_segment_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Rollback_segment_nameContext rollback_segment_name() throws RecognitionException {
		Rollback_segment_nameContext _localctx = new Rollback_segment_nameContext(_ctx, getState());
		enterRule(_localctx, 976, RULE_rollback_segment_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7903);
			r_id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_var_nameContext extends ParserRuleContext {
		public R_idContext r_id() {
			return getRuleContext(R_idContext.class,0);
		}
		public Table_var_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_var_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterTable_var_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitTable_var_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitTable_var_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_var_nameContext table_var_name() throws RecognitionException {
		Table_var_nameContext _localctx = new Table_var_nameContext(_ctx, getState());
		enterRule(_localctx, 978, RULE_table_var_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7905);
			r_id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Schema_nameContext extends ParserRuleContext {
		public R_idContext r_id() {
			return getRuleContext(R_idContext.class,0);
		}
		public Schema_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schema_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterSchema_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitSchema_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitSchema_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Schema_nameContext schema_name() throws RecognitionException {
		Schema_nameContext _localctx = new Schema_nameContext(_ctx, getState());
		enterRule(_localctx, 980, RULE_schema_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7907);
			r_id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Routine_nameContext extends ParserRuleContext {
		public R_idContext r_id() {
			return getRuleContext(R_idContext.class,0);
		}
		public List<TerminalNode> PERIOD() { return getTokens(PLSQLParser.PERIOD); }
		public TerminalNode PERIOD(int i) {
			return getToken(PLSQLParser.PERIOD, i);
		}
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public TerminalNode AT_SIGN() { return getToken(PLSQLParser.AT_SIGN, 0); }
		public Link_nameContext link_name() {
			return getRuleContext(Link_nameContext.class,0);
		}
		public Routine_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_routine_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterRoutine_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitRoutine_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitRoutine_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Routine_nameContext routine_name() throws RecognitionException {
		Routine_nameContext _localctx = new Routine_nameContext(_ctx, getState());
		enterRule(_localctx, 982, RULE_routine_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7909);
			r_id();
			setState(7914);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==PERIOD) {
				{
				{
				setState(7910);
				match(PERIOD);
				setState(7911);
				id_expression();
				}
				}
				setState(7916);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(7919);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AT_SIGN) {
				{
				setState(7917);
				match(AT_SIGN);
				setState(7918);
				link_name();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Package_nameContext extends ParserRuleContext {
		public R_idContext r_id() {
			return getRuleContext(R_idContext.class,0);
		}
		public Package_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_package_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterPackage_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitPackage_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitPackage_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Package_nameContext package_name() throws RecognitionException {
		Package_nameContext _localctx = new Package_nameContext(_ctx, getState());
		enterRule(_localctx, 984, RULE_package_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7921);
			r_id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Implementation_type_nameContext extends ParserRuleContext {
		public R_idContext r_id() {
			return getRuleContext(R_idContext.class,0);
		}
		public TerminalNode PERIOD() { return getToken(PLSQLParser.PERIOD, 0); }
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public Implementation_type_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_implementation_type_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterImplementation_type_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitImplementation_type_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitImplementation_type_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Implementation_type_nameContext implementation_type_name() throws RecognitionException {
		Implementation_type_nameContext _localctx = new Implementation_type_nameContext(_ctx, getState());
		enterRule(_localctx, 986, RULE_implementation_type_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7923);
			r_id();
			setState(7926);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PERIOD) {
				{
				setState(7924);
				match(PERIOD);
				setState(7925);
				id_expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Parameter_nameContext extends ParserRuleContext {
		public R_idContext r_id() {
			return getRuleContext(R_idContext.class,0);
		}
		public Parameter_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parameter_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterParameter_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitParameter_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitParameter_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Parameter_nameContext parameter_name() throws RecognitionException {
		Parameter_nameContext _localctx = new Parameter_nameContext(_ctx, getState());
		enterRule(_localctx, 988, RULE_parameter_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7928);
			r_id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Reference_model_nameContext extends ParserRuleContext {
		public R_idContext r_id() {
			return getRuleContext(R_idContext.class,0);
		}
		public Reference_model_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reference_model_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterReference_model_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitReference_model_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitReference_model_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Reference_model_nameContext reference_model_name() throws RecognitionException {
		Reference_model_nameContext _localctx = new Reference_model_nameContext(_ctx, getState());
		enterRule(_localctx, 990, RULE_reference_model_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7930);
			r_id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Main_model_nameContext extends ParserRuleContext {
		public R_idContext r_id() {
			return getRuleContext(R_idContext.class,0);
		}
		public Main_model_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_main_model_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterMain_model_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitMain_model_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitMain_model_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Main_model_nameContext main_model_name() throws RecognitionException {
		Main_model_nameContext _localctx = new Main_model_nameContext(_ctx, getState());
		enterRule(_localctx, 992, RULE_main_model_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7932);
			r_id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Aggregate_function_nameContext extends ParserRuleContext {
		public R_idContext r_id() {
			return getRuleContext(R_idContext.class,0);
		}
		public List<TerminalNode> PERIOD() { return getTokens(PLSQLParser.PERIOD); }
		public TerminalNode PERIOD(int i) {
			return getToken(PLSQLParser.PERIOD, i);
		}
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public Aggregate_function_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aggregate_function_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterAggregate_function_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitAggregate_function_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitAggregate_function_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Aggregate_function_nameContext aggregate_function_name() throws RecognitionException {
		Aggregate_function_nameContext _localctx = new Aggregate_function_nameContext(_ctx, getState());
		enterRule(_localctx, 994, RULE_aggregate_function_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7934);
			r_id();
			setState(7939);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==PERIOD) {
				{
				{
				setState(7935);
				match(PERIOD);
				setState(7936);
				id_expression();
				}
				}
				setState(7941);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Query_nameContext extends ParserRuleContext {
		public R_idContext r_id() {
			return getRuleContext(R_idContext.class,0);
		}
		public Query_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_query_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterQuery_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitQuery_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitQuery_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Query_nameContext query_name() throws RecognitionException {
		Query_nameContext _localctx = new Query_nameContext(_ctx, getState());
		enterRule(_localctx, 996, RULE_query_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7942);
			r_id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Constraint_nameContext extends ParserRuleContext {
		public R_idContext r_id() {
			return getRuleContext(R_idContext.class,0);
		}
		public List<TerminalNode> PERIOD() { return getTokens(PLSQLParser.PERIOD); }
		public TerminalNode PERIOD(int i) {
			return getToken(PLSQLParser.PERIOD, i);
		}
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public TerminalNode AT_SIGN() { return getToken(PLSQLParser.AT_SIGN, 0); }
		public Link_nameContext link_name() {
			return getRuleContext(Link_nameContext.class,0);
		}
		public Constraint_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraint_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterConstraint_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitConstraint_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitConstraint_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Constraint_nameContext constraint_name() throws RecognitionException {
		Constraint_nameContext _localctx = new Constraint_nameContext(_ctx, getState());
		enterRule(_localctx, 998, RULE_constraint_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7944);
			r_id();
			setState(7949);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==PERIOD) {
				{
				{
				setState(7945);
				match(PERIOD);
				setState(7946);
				id_expression();
				}
				}
				setState(7951);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(7954);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AT_SIGN) {
				{
				setState(7952);
				match(AT_SIGN);
				setState(7953);
				link_name();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Label_nameContext extends ParserRuleContext {
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public Label_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_label_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterLabel_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitLabel_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitLabel_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Label_nameContext label_name() throws RecognitionException {
		Label_nameContext _localctx = new Label_nameContext(_ctx, getState());
		enterRule(_localctx, 1000, RULE_label_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7956);
			id_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_nameContext extends ParserRuleContext {
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public List<TerminalNode> PERIOD() { return getTokens(PLSQLParser.PERIOD); }
		public TerminalNode PERIOD(int i) {
			return getToken(PLSQLParser.PERIOD, i);
		}
		public Type_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterType_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitType_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitType_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Type_nameContext type_name() throws RecognitionException {
		Type_nameContext _localctx = new Type_nameContext(_ctx, getState());
		enterRule(_localctx, 1002, RULE_type_name);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(7958);
			id_expression();
			setState(7963);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,1166,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(7959);
					match(PERIOD);
					setState(7960);
					id_expression();
					}
					} 
				}
				setState(7965);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1166,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sequence_nameContext extends ParserRuleContext {
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public List<TerminalNode> PERIOD() { return getTokens(PLSQLParser.PERIOD); }
		public TerminalNode PERIOD(int i) {
			return getToken(PLSQLParser.PERIOD, i);
		}
		public Sequence_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sequence_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterSequence_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitSequence_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitSequence_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sequence_nameContext sequence_name() throws RecognitionException {
		Sequence_nameContext _localctx = new Sequence_nameContext(_ctx, getState());
		enterRule(_localctx, 1004, RULE_sequence_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7966);
			id_expression();
			setState(7971);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==PERIOD) {
				{
				{
				setState(7967);
				match(PERIOD);
				setState(7968);
				id_expression();
				}
				}
				setState(7973);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Exception_nameContext extends ParserRuleContext {
		public R_idContext r_id() {
			return getRuleContext(R_idContext.class,0);
		}
		public List<TerminalNode> PERIOD() { return getTokens(PLSQLParser.PERIOD); }
		public TerminalNode PERIOD(int i) {
			return getToken(PLSQLParser.PERIOD, i);
		}
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public Exception_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exception_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterException_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitException_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitException_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Exception_nameContext exception_name() throws RecognitionException {
		Exception_nameContext _localctx = new Exception_nameContext(_ctx, getState());
		enterRule(_localctx, 1006, RULE_exception_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7974);
			r_id();
			setState(7979);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==PERIOD) {
				{
				{
				setState(7975);
				match(PERIOD);
				setState(7976);
				id_expression();
				}
				}
				setState(7981);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Function_nameContext extends ParserRuleContext {
		public R_idContext r_id() {
			return getRuleContext(R_idContext.class,0);
		}
		public TerminalNode PERIOD() { return getToken(PLSQLParser.PERIOD, 0); }
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public Function_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterFunction_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitFunction_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitFunction_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Function_nameContext function_name() throws RecognitionException {
		Function_nameContext _localctx = new Function_nameContext(_ctx, getState());
		enterRule(_localctx, 1008, RULE_function_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7982);
			r_id();
			setState(7985);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PERIOD) {
				{
				setState(7983);
				match(PERIOD);
				setState(7984);
				id_expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Procedure_nameContext extends ParserRuleContext {
		public R_idContext r_id() {
			return getRuleContext(R_idContext.class,0);
		}
		public TerminalNode PERIOD() { return getToken(PLSQLParser.PERIOD, 0); }
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public Procedure_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_procedure_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterProcedure_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitProcedure_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitProcedure_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Procedure_nameContext procedure_name() throws RecognitionException {
		Procedure_nameContext _localctx = new Procedure_nameContext(_ctx, getState());
		enterRule(_localctx, 1010, RULE_procedure_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7987);
			r_id();
			setState(7990);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PERIOD) {
				{
				setState(7988);
				match(PERIOD);
				setState(7989);
				id_expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Trigger_nameContext extends ParserRuleContext {
		public R_idContext r_id() {
			return getRuleContext(R_idContext.class,0);
		}
		public TerminalNode PERIOD() { return getToken(PLSQLParser.PERIOD, 0); }
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public Trigger_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_trigger_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterTrigger_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitTrigger_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitTrigger_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Trigger_nameContext trigger_name() throws RecognitionException {
		Trigger_nameContext _localctx = new Trigger_nameContext(_ctx, getState());
		enterRule(_localctx, 1012, RULE_trigger_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7992);
			r_id();
			setState(7995);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PERIOD) {
				{
				setState(7993);
				match(PERIOD);
				setState(7994);
				id_expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Variable_nameContext extends ParserRuleContext {
		public Dot_idContext dot_id() {
			return getRuleContext(Dot_idContext.class,0);
		}
		public Bind_variableContext bind_variable() {
			return getRuleContext(Bind_variableContext.class,0);
		}
		public Variable_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_variable_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterVariable_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitVariable_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitVariable_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Variable_nameContext variable_name() throws RecognitionException {
		Variable_nameContext _localctx = new Variable_nameContext(_ctx, getState());
		enterRule(_localctx, 1014, RULE_variable_name);
		try {
			setState(7999);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BUILD:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPLETE:
			case COMPOUND:
			case CONCAT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECODE:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DEMAND:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case EDITIONING:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENFORCED:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FAST:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LIST:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MASTER:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEVER:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NVL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case MATERIALIZED:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PREBUILT:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PUBLIC:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REDUCED:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REFRESH:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case REWRITE:
			case RIGHT:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SIZE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBSTRING:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TABLES:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TO_CHAR:
			case TO_DATE:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TRUSTED:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERBOSE:
			case VERSION:
			case VERSIONS:
			case VIEW:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHOUT:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(7997);
				dot_id();
				}
				break;
			case BINDVAR:
			case COLON:
				enterOuterAlt(_localctx, 2);
				{
				setState(7998);
				bind_variable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Index_nameContext extends ParserRuleContext {
		public R_idContext r_id() {
			return getRuleContext(R_idContext.class,0);
		}
		public Index_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_index_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterIndex_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitIndex_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitIndex_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Index_nameContext index_name() throws RecognitionException {
		Index_nameContext _localctx = new Index_nameContext(_ctx, getState());
		enterRule(_localctx, 1016, RULE_index_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8001);
			r_id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cursor_nameContext extends ParserRuleContext {
		public R_idContext r_id() {
			return getRuleContext(R_idContext.class,0);
		}
		public Bind_variableContext bind_variable() {
			return getRuleContext(Bind_variableContext.class,0);
		}
		public Cursor_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursor_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterCursor_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitCursor_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitCursor_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cursor_nameContext cursor_name() throws RecognitionException {
		Cursor_nameContext _localctx = new Cursor_nameContext(_ctx, getState());
		enterRule(_localctx, 1018, RULE_cursor_name);
		try {
			setState(8005);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BUILD:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPLETE:
			case COMPOUND:
			case CONCAT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECODE:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DEMAND:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case EDITIONING:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENFORCED:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FAST:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LIST:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MASTER:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEVER:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NVL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case MATERIALIZED:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PREBUILT:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PUBLIC:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REDUCED:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REFRESH:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case REWRITE:
			case RIGHT:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SIZE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBSTRING:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TABLES:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TO_CHAR:
			case TO_DATE:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TRUSTED:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERBOSE:
			case VERSION:
			case VERSIONS:
			case VIEW:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHOUT:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(8003);
				r_id();
				}
				break;
			case BINDVAR:
			case COLON:
				enterOuterAlt(_localctx, 2);
				{
				setState(8004);
				bind_variable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Record_nameContext extends ParserRuleContext {
		public R_idContext r_id() {
			return getRuleContext(R_idContext.class,0);
		}
		public Bind_variableContext bind_variable() {
			return getRuleContext(Bind_variableContext.class,0);
		}
		public Record_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_record_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterRecord_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitRecord_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitRecord_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Record_nameContext record_name() throws RecognitionException {
		Record_nameContext _localctx = new Record_nameContext(_ctx, getState());
		enterRule(_localctx, 1020, RULE_record_name);
		try {
			setState(8009);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BUILD:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPLETE:
			case COMPOUND:
			case CONCAT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECODE:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DEMAND:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case EDITIONING:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENFORCED:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FAST:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LIST:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MASTER:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEVER:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NVL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case MATERIALIZED:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PREBUILT:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PUBLIC:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REDUCED:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REFRESH:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case REWRITE:
			case RIGHT:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SIZE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBSTRING:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TABLES:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TO_CHAR:
			case TO_DATE:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TRUSTED:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERBOSE:
			case VERSION:
			case VERSIONS:
			case VIEW:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHOUT:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(8007);
				r_id();
				}
				break;
			case BINDVAR:
			case COLON:
				enterOuterAlt(_localctx, 2);
				{
				setState(8008);
				bind_variable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Collection_nameContext extends ParserRuleContext {
		public R_idContext r_id() {
			return getRuleContext(R_idContext.class,0);
		}
		public TerminalNode PERIOD() { return getToken(PLSQLParser.PERIOD, 0); }
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public Collection_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_collection_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterCollection_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitCollection_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitCollection_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Collection_nameContext collection_name() throws RecognitionException {
		Collection_nameContext _localctx = new Collection_nameContext(_ctx, getState());
		enterRule(_localctx, 1022, RULE_collection_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8011);
			r_id();
			setState(8014);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PERIOD) {
				{
				setState(8012);
				match(PERIOD);
				setState(8013);
				id_expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Link_nameContext extends ParserRuleContext {
		public R_idContext r_id() {
			return getRuleContext(R_idContext.class,0);
		}
		public Link_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_link_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterLink_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitLink_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitLink_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Link_nameContext link_name() throws RecognitionException {
		Link_nameContext _localctx = new Link_nameContext(_ctx, getState());
		enterRule(_localctx, 1024, RULE_link_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8016);
			r_id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_nameContext extends ParserRuleContext {
		public R_idContext r_id() {
			return getRuleContext(R_idContext.class,0);
		}
		public List<TerminalNode> PERIOD() { return getTokens(PLSQLParser.PERIOD); }
		public TerminalNode PERIOD(int i) {
			return getToken(PLSQLParser.PERIOD, i);
		}
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public Column_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterColumn_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitColumn_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitColumn_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Column_nameContext column_name() throws RecognitionException {
		Column_nameContext _localctx = new Column_nameContext(_ctx, getState());
		enterRule(_localctx, 1026, RULE_column_name);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(8018);
			r_id();
			setState(8023);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,1176,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(8019);
					match(PERIOD);
					setState(8020);
					id_expression();
					}
					} 
				}
				setState(8025);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1176,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Role_nameContext extends ParserRuleContext {
		public R_idContext r_id() {
			return getRuleContext(R_idContext.class,0);
		}
		public Role_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_role_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterRole_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitRole_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitRole_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Role_nameContext role_name() throws RecognitionException {
		Role_nameContext _localctx = new Role_nameContext(_ctx, getState());
		enterRule(_localctx, 1028, RULE_role_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8026);
			r_id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Tableview_nameContext extends ParserRuleContext {
		public Dot_idContext dot_id() {
			return getRuleContext(Dot_idContext.class,0);
		}
		public TerminalNode AT_SIGN() { return getToken(PLSQLParser.AT_SIGN, 0); }
		public Link_nameContext link_name() {
			return getRuleContext(Link_nameContext.class,0);
		}
		public Partition_extension_clauseContext partition_extension_clause() {
			return getRuleContext(Partition_extension_clauseContext.class,0);
		}
		public Tableview_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableview_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterTableview_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitTableview_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitTableview_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Tableview_nameContext tableview_name() throws RecognitionException {
		Tableview_nameContext _localctx = new Tableview_nameContext(_ctx, getState());
		enterRule(_localctx, 1030, RULE_tableview_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8028);
			dot_id();
			setState(8032);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1177,_ctx) ) {
			case 1:
				{
				setState(8029);
				match(AT_SIGN);
				setState(8030);
				link_name();
				}
				break;
			case 2:
				{
				setState(8031);
				partition_extension_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dot_idContext extends ParserRuleContext {
		public Id_expressionContext id_expression;
		public List<Id_expressionContext> fields = new ArrayList<Id_expressionContext>();
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public List<TerminalNode> PERIOD() { return getTokens(PLSQLParser.PERIOD); }
		public TerminalNode PERIOD(int i) {
			return getToken(PLSQLParser.PERIOD, i);
		}
		public Dot_idContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dot_id; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterDot_id(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitDot_id(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitDot_id(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Dot_idContext dot_id() throws RecognitionException {
		Dot_idContext _localctx = new Dot_idContext(_ctx, getState());
		enterRule(_localctx, 1032, RULE_dot_id);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(8034);
			((Dot_idContext)_localctx).id_expression = id_expression();
			((Dot_idContext)_localctx).fields.add(((Dot_idContext)_localctx).id_expression);
			setState(8039);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,1178,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(8035);
					match(PERIOD);
					setState(8036);
					((Dot_idContext)_localctx).id_expression = id_expression();
					((Dot_idContext)_localctx).fields.add(((Dot_idContext)_localctx).id_expression);
					}
					} 
				}
				setState(8041);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1178,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StarContext extends ParserRuleContext {
		public TerminalNode ASTERISK() { return getToken(PLSQLParser.ASTERISK, 0); }
		public StarContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_star; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterStar(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitStar(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitStar(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StarContext star() throws RecognitionException {
		StarContext _localctx = new StarContext(_ctx, getState());
		enterRule(_localctx, 1034, RULE_star);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8042);
			match(ASTERISK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Keep_clauseContext extends ParserRuleContext {
		public TerminalNode KEEP() { return getToken(PLSQLParser.KEEP, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PLSQLParser.LEFT_PAREN, 0); }
		public TerminalNode DENSE_RANK() { return getToken(PLSQLParser.DENSE_RANK, 0); }
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PLSQLParser.RIGHT_PAREN, 0); }
		public TerminalNode FIRST() { return getToken(PLSQLParser.FIRST, 0); }
		public TerminalNode LAST() { return getToken(PLSQLParser.LAST, 0); }
		public Over_clauseContext over_clause() {
			return getRuleContext(Over_clauseContext.class,0);
		}
		public Keep_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_keep_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterKeep_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitKeep_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitKeep_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Keep_clauseContext keep_clause() throws RecognitionException {
		Keep_clauseContext _localctx = new Keep_clauseContext(_ctx, getState());
		enterRule(_localctx, 1036, RULE_keep_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8044);
			match(KEEP);
			setState(8045);
			match(LEFT_PAREN);
			setState(8046);
			match(DENSE_RANK);
			setState(8047);
			_la = _input.LA(1);
			if ( !(_la==FIRST || _la==LAST) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(8048);
			order_by_clause();
			setState(8049);
			match(RIGHT_PAREN);
			setState(8051);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1179,_ctx) ) {
			case 1:
				{
				setState(8050);
				over_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Function_argumentContext extends ParserRuleContext {
		public ArgumentContext argument;
		public List<ArgumentContext> argument_list = new ArrayList<ArgumentContext>();
		public TerminalNode LEFT_PAREN() { return getToken(PLSQLParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PLSQLParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PLSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLSQLParser.COMMA, i);
		}
		public Keep_clauseContext keep_clause() {
			return getRuleContext(Keep_clauseContext.class,0);
		}
		public List<ArgumentContext> argument() {
			return getRuleContexts(ArgumentContext.class);
		}
		public ArgumentContext argument(int i) {
			return getRuleContext(ArgumentContext.class,i);
		}
		public Function_argumentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_argument; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterFunction_argument(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitFunction_argument(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitFunction_argument(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Function_argumentContext function_argument() throws RecognitionException {
		Function_argumentContext _localctx = new Function_argumentContext(_ctx, getState());
		enterRule(_localctx, 1038, RULE_function_argument);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8053);
			match(LEFT_PAREN);
			setState(8055);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BUILD) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (CHR - 65)) | (1L << (CLOB - 65)) | (1L << (CLOSE - 65)) | (1L << (CLUSTER - 65)) | (1L << (COALESCE - 65)) | (1L << (COLLECT - 65)) | (1L << (COLUMNS - 65)) | (1L << (COMMENT - 65)) | (1L << (COMMIT - 65)) | (1L << (COMMITTED - 65)) | (1L << (COMPATIBILITY - 65)) | (1L << (COMPILE - 65)) | (1L << (COMPLETE - 65)) | (1L << (COMPOUND - 65)) | (1L << (CONCAT - 65)) | (1L << (CONNECT_BY_ROOT - 65)) | (1L << (CONSTANT - 65)) | (1L << (CONSTRAINT - 65)) | (1L << (CONSTRAINTS - 65)) | (1L << (CONSTRUCTOR - 65)) | (1L << (CONTENT - 65)) | (1L << (CONTEXT - 65)) | (1L << (CONTINUE - 65)) | (1L << (CONVERT - 65)) | (1L << (CORRUPT_XID - 65)) | (1L << (CORRUPT_XID_ALL - 65)) | (1L << (COST - 65)) | (1L << (COUNT - 65)) | (1L << (CROSS - 65)) | (1L << (CUBE - 65)) | (1L << (CURRENT_USER - 65)) | (1L << (CURSOR - 65)) | (1L << (CUSTOMDATUM - 65)) | (1L << (CYCLE - 65)) | (1L << (DATA - 65)) | (1L << (DATABASE - 65)) | (1L << (DATE - 65)) | (1L << (DAY - 65)) | (1L << (DB_ROLE_CHANGE - 65)) | (1L << (DBTIMEZONE - 65)) | (1L << (DDL - 65)) | (1L << (DEBUG - 65)) | (1L << (DEC - 65)) | (1L << (DECIMAL - 65)) | (1L << (DECODE - 65)) | (1L << (DECOMPOSE - 65)) | (1L << (DECREMENT - 65)) | (1L << (DEFAULT - 65)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DEMAND - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DISTINCT - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (EDITIONING - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENFORCED - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXISTS - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FALSE - 129)) | (1L << (FAST - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)) | (1L << (FOLLOWING - 129)) | (1L << (FOLLOWS - 129)) | (1L << (FORALL - 129)) | (1L << (FORCE - 129)))) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & ((1L << (FULL - 197)) | (1L << (FUNCTION - 197)) | (1L << (GROUPING - 197)) | (1L << (HASH - 197)) | (1L << (HIDE - 197)) | (1L << (HOUR - 197)) | (1L << (IGNORE - 197)) | (1L << (IMMEDIATE - 197)) | (1L << (INCLUDE - 197)) | (1L << (INCLUDING - 197)) | (1L << (INCREMENT - 197)) | (1L << (INDENT - 197)) | (1L << (INDEXED - 197)) | (1L << (INDICATOR - 197)) | (1L << (INDICES - 197)) | (1L << (INFINITE - 197)) | (1L << (INLINE - 197)) | (1L << (INNER - 197)) | (1L << (INOUT - 197)) | (1L << (INSTANTIABLE - 197)) | (1L << (INSTEAD - 197)) | (1L << (INT - 197)) | (1L << (INTEGER - 197)) | (1L << (INTERVAL - 197)) | (1L << (INVALIDATE - 197)) | (1L << (ISOLATION - 197)) | (1L << (ITERATE - 197)) | (1L << (JAVA - 197)) | (1L << (JOIN - 197)) | (1L << (KEEP - 197)) | (1L << (LANGUAGE - 197)) | (1L << (LAST - 197)) | (1L << (LAST_VALUE - 197)) | (1L << (LEADING - 197)) | (1L << (LEFT - 197)) | (1L << (LEVEL - 197)))) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & ((1L << (LIBRARY - 261)) | (1L << (LIKE2 - 261)) | (1L << (LIKE4 - 261)) | (1L << (LIKEC - 261)) | (1L << (LIMIT - 261)) | (1L << (LIST - 261)) | (1L << (LOCAL - 261)) | (1L << (LOCKED - 261)) | (1L << (LOG - 261)) | (1L << (LOGOFF - 261)) | (1L << (LOGON - 261)) | (1L << (LONG - 261)) | (1L << (LOOP - 261)) | (1L << (MAIN - 261)) | (1L << (MAP - 261)) | (1L << (MASTER - 261)) | (1L << (MATCHED - 261)) | (1L << (MAXVALUE - 261)) | (1L << (MEASURES - 261)) | (1L << (MEMBER - 261)) | (1L << (MERGE - 261)) | (1L << (MINUTE - 261)) | (1L << (MINVALUE - 261)) | (1L << (MLSLABEL - 261)) | (1L << (MODEL - 261)) | (1L << (MODIFY - 261)) | (1L << (MONTH - 261)) | (1L << (MULTISET - 261)) | (1L << (NAME - 261)) | (1L << (NAN - 261)) | (1L << (NATURAL - 261)) | (1L << (NATURALN - 261)) | (1L << (NAV - 261)) | (1L << (NCHAR - 261)) | (1L << (NCHAR_CS - 261)) | (1L << (NCLOB - 261)) | (1L << (NESTED - 261)) | (1L << (NEVER - 261)) | (1L << (NEW - 261)) | (1L << (NO - 261)) | (1L << (NOAUDIT - 261)) | (1L << (NOCOPY - 261)) | (1L << (NOCYCLE - 261)) | (1L << (NOENTITYESCAPING - 261)))) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & ((1L << (NONE - 329)) | (1L << (NOSCHEMACHECK - 329)) | (1L << (NOT - 329)) | (1L << (NVL - 329)) | (1L << (NULL - 329)) | (1L << (NULLS - 329)) | (1L << (NUMBER - 329)) | (1L << (NUMERIC - 329)) | (1L << (NVARCHAR2 - 329)) | (1L << (MATERIALIZED - 329)) | (1L << (OBJECT - 329)) | (1L << (OFF - 329)) | (1L << (OID - 329)) | (1L << (OLD - 329)) | (1L << (ONLY - 329)) | (1L << (OPEN - 329)) | (1L << (ORADATA - 329)) | (1L << (ORDINALITY - 329)) | (1L << (OSERROR - 329)) | (1L << (OUT - 329)) | (1L << (OUTER - 329)) | (1L << (OVER - 329)) | (1L << (OVERRIDING - 329)) | (1L << (PACKAGE - 329)) | (1L << (PARALLEL_ENABLE - 329)) | (1L << (PARAMETERS - 329)) | (1L << (PARENT - 329)) | (1L << (PARTITION - 329)) | (1L << (PASSING - 329)) | (1L << (PATH - 329)) | (1L << (PIPELINED - 329)) | (1L << (PLAN - 329)) | (1L << (PLS_INTEGER - 329)) | (1L << (POSITION - 329)) | (1L << (POSITIVE - 329)) | (1L << (POSITIVEN - 329)) | (1L << (PRAGMA - 329)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (PREBUILT - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)) | (1L << (PRESENT - 393)) | (1L << (PRIOR - 393)) | (1L << (PUBLIC - 393)) | (1L << (RAISE - 393)) | (1L << (RANGE - 393)) | (1L << (RAW - 393)) | (1L << (READ - 393)) | (1L << (REAL - 393)) | (1L << (RECORD - 393)) | (1L << (REDUCED - 393)) | (1L << (REF - 393)) | (1L << (REFERENCE - 393)) | (1L << (REFERENCING - 393)) | (1L << (REFRESH - 393)) | (1L << (REJECT - 393)) | (1L << (RELIES_ON - 393)) | (1L << (RENAME - 393)) | (1L << (REPLACE - 393)) | (1L << (RESPECT - 393)) | (1L << (RESTRICT_REFERENCES - 393)) | (1L << (RESULT - 393)) | (1L << (RESULT_CACHE - 393)) | (1L << (RETURN - 393)) | (1L << (RETURNING - 393)) | (1L << (REUSE - 393)) | (1L << (REVERSE - 393)) | (1L << (REWRITE - 393)) | (1L << (RIGHT - 393)) | (1L << (ROLE - 393)) | (1L << (ROLLBACK - 393)) | (1L << (ROLLUP - 393)) | (1L << (ROW - 393)) | (1L << (ROWID - 393)) | (1L << (ROWS - 393)) | (1L << (RULES - 393)) | (1L << (SAMPLE - 393)) | (1L << (SAVE - 393)) | (1L << (SAVEPOINT - 393)) | (1L << (SCHEMA - 393)) | (1L << (SCHEMACHECK - 393)) | (1L << (SCN - 393)) | (1L << (SECOND - 393)))) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & ((1L << (SEED - 458)) | (1L << (SEGMENT - 458)) | (1L << (SELECT - 458)) | (1L << (SELF - 458)) | (1L << (SEQUENTIAL - 458)) | (1L << (SERIALIZABLE - 458)) | (1L << (SERIALLY_REUSABLE - 458)) | (1L << (SERVERERROR - 458)) | (1L << (SESSIONTIMEZONE - 458)) | (1L << (SET - 458)) | (1L << (SETS - 458)) | (1L << (SETTINGS - 458)) | (1L << (SHOW - 458)) | (1L << (SHUTDOWN - 458)) | (1L << (SIBLINGS - 458)) | (1L << (SIGNTYPE - 458)) | (1L << (SIMPLE_INTEGER - 458)) | (1L << (SINGLE - 458)) | (1L << (SIZE - 458)) | (1L << (SKIP_ - 458)) | (1L << (SMALLINT - 458)) | (1L << (SNAPSHOT - 458)) | (1L << (SOME - 458)) | (1L << (SPECIFICATION - 458)) | (1L << (SQLDATA - 458)) | (1L << (SQLERROR - 458)) | (1L << (STANDALONE - 458)) | (1L << (STARTUP - 458)) | (1L << (STATEMENT - 458)) | (1L << (STATEMENT_ID - 458)) | (1L << (STATIC - 458)) | (1L << (STATISTICS - 458)) | (1L << (STRING - 458)) | (1L << (SUBMULTISET - 458)) | (1L << (SUBPARTITION - 458)) | (1L << (SUBSTITUTABLE - 458)) | (1L << (SUBSTRING - 458)) | (1L << (SUBTYPE - 458)) | (1L << (SUCCESS - 458)) | (1L << (SUSPEND - 458)) | (1L << (TABLES - 458)) | (1L << (TIME - 458)) | (1L << (TIMESTAMP - 458)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 458)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 458)) | (1L << (TIMESTAMP_UNCONSTRAINED - 458)))) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & ((1L << (TIMEZONE_ABBR - 522)) | (1L << (TIMEZONE_HOUR - 522)) | (1L << (TIMEZONE_MINUTE - 522)) | (1L << (TIMEZONE_REGION - 522)) | (1L << (TO_CHAR - 522)) | (1L << (TO_DATE - 522)) | (1L << (TRAILING - 522)) | (1L << (TRANSACTION - 522)) | (1L << (TRANSLATE - 522)) | (1L << (TREAT - 522)) | (1L << (TRIGGER - 522)) | (1L << (TRIM - 522)) | (1L << (TRUE - 522)) | (1L << (TRUNCATE - 522)) | (1L << (TRUSTED - 522)) | (1L << (TYPE - 522)) | (1L << (UNBOUNDED - 522)) | (1L << (UNDER - 522)) | (1L << (UNLIMITED - 522)) | (1L << (UNTIL - 522)) | (1L << (UPDATED - 522)) | (1L << (UPSERT - 522)) | (1L << (UROWID - 522)) | (1L << (USE - 522)) | (1L << (VALIDATE - 522)) | (1L << (VALUE - 522)) | (1L << (VARCHAR - 522)) | (1L << (VARCHAR2 - 522)) | (1L << (VARIABLE - 522)) | (1L << (VARRAY - 522)) | (1L << (VARYING - 522)) | (1L << (VERBOSE - 522)) | (1L << (VERSION - 522)) | (1L << (VERSIONS - 522)) | (1L << (VIEW - 522)) | (1L << (WAIT - 522)) | (1L << (WARNING - 522)) | (1L << (WELLFORMED - 522)) | (1L << (WHENEVER - 522)) | (1L << (WHILE - 522)) | (1L << (WITHOUT - 522)) | (1L << (WITHIN - 522)) | (1L << (WORK - 522)) | (1L << (WRITE - 522)) | (1L << (XML - 522)) | (1L << (XMLAGG - 522)) | (1L << (XMLATTRIBUTES - 522)))) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & ((1L << (XMLCAST - 586)) | (1L << (XMLCOLATTVAL - 586)) | (1L << (XMLELEMENT - 586)) | (1L << (XMLEXISTS - 586)) | (1L << (XMLFOREST - 586)) | (1L << (XMLNAMESPACES - 586)) | (1L << (XMLPARSE - 586)) | (1L << (XMLPI - 586)) | (1L << (XMLQUERY - 586)) | (1L << (XMLROOT - 586)) | (1L << (XMLSERIALIZE - 586)) | (1L << (XMLTABLE - 586)) | (1L << (YEAR - 586)) | (1L << (YES - 586)) | (1L << (YMINTERVAL_UNCONSTRAINED - 586)) | (1L << (ZONE - 586)) | (1L << (PREDICTION - 586)) | (1L << (PREDICTION_BOUNDS - 586)) | (1L << (PREDICTION_COST - 586)) | (1L << (PREDICTION_DETAILS - 586)) | (1L << (PREDICTION_PROBABILITY - 586)) | (1L << (PREDICTION_SET - 586)) | (1L << (CUME_DIST - 586)) | (1L << (DENSE_RANK - 586)) | (1L << (LISTAGG - 586)) | (1L << (PERCENT_RANK - 586)) | (1L << (PERCENTILE_CONT - 586)) | (1L << (PERCENTILE_DISC - 586)) | (1L << (RANK - 586)) | (1L << (AVG - 586)) | (1L << (CORR - 586)) | (1L << (LAG - 586)) | (1L << (LEAD - 586)) | (1L << (MAX - 586)) | (1L << (MEDIAN - 586)) | (1L << (MIN - 586)) | (1L << (NTILE - 586)) | (1L << (RATIO_TO_REPORT - 586)) | (1L << (ROW_NUMBER - 586)) | (1L << (SUM - 586)) | (1L << (VARIANCE - 586)) | (1L << (REGR_ - 586)) | (1L << (STDDEV - 586)) | (1L << (VAR_ - 586)) | (1L << (COVAR_ - 586)) | (1L << (NATIONAL_CHAR_STRING_LIT - 586)) | (1L << (UNSIGNED_INTEGER - 586)) | (1L << (APPROXIMATE_NUM_LIT - 586)) | (1L << (CHAR_STRING - 586)) | (1L << (DELIMITED_ID - 586)) | (1L << (LEFT_PAREN - 586)) | (1L << (PLUS_SIGN - 586)))) != 0) || ((((_la - 650)) & ~0x3f) == 0 && ((1L << (_la - 650)) & ((1L << (MINUS_SIGN - 650)) | (1L << (BINDVAR - 650)) | (1L << (COLON - 650)) | (1L << (REGULAR_ID - 650)))) != 0)) {
				{
				setState(8054);
				((Function_argumentContext)_localctx).argument = argument();
				((Function_argumentContext)_localctx).argument_list.add(((Function_argumentContext)_localctx).argument);
				}
			}

			setState(8061);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(8057);
				match(COMMA);
				setState(8058);
				((Function_argumentContext)_localctx).argument = argument();
				((Function_argumentContext)_localctx).argument_list.add(((Function_argumentContext)_localctx).argument);
				}
				}
				setState(8063);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(8064);
			match(RIGHT_PAREN);
			setState(8066);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1182,_ctx) ) {
			case 1:
				{
				setState(8065);
				keep_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Function_argument_analyticContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(PLSQLParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PLSQLParser.RIGHT_PAREN, 0); }
		public List<ArgumentContext> argument() {
			return getRuleContexts(ArgumentContext.class);
		}
		public ArgumentContext argument(int i) {
			return getRuleContext(ArgumentContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLSQLParser.COMMA, i);
		}
		public Keep_clauseContext keep_clause() {
			return getRuleContext(Keep_clauseContext.class,0);
		}
		public List<Respect_or_ignore_nullsContext> respect_or_ignore_nulls() {
			return getRuleContexts(Respect_or_ignore_nullsContext.class);
		}
		public Respect_or_ignore_nullsContext respect_or_ignore_nulls(int i) {
			return getRuleContext(Respect_or_ignore_nullsContext.class,i);
		}
		public Function_argument_analyticContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_argument_analytic; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterFunction_argument_analytic(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitFunction_argument_analytic(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitFunction_argument_analytic(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Function_argument_analyticContext function_argument_analytic() throws RecognitionException {
		Function_argument_analyticContext _localctx = new Function_argument_analyticContext(_ctx, getState());
		enterRule(_localctx, 1040, RULE_function_argument_analytic);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8068);
			match(LEFT_PAREN);
			setState(8073);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BUILD) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (CHR - 65)) | (1L << (CLOB - 65)) | (1L << (CLOSE - 65)) | (1L << (CLUSTER - 65)) | (1L << (COALESCE - 65)) | (1L << (COLLECT - 65)) | (1L << (COLUMNS - 65)) | (1L << (COMMENT - 65)) | (1L << (COMMIT - 65)) | (1L << (COMMITTED - 65)) | (1L << (COMPATIBILITY - 65)) | (1L << (COMPILE - 65)) | (1L << (COMPLETE - 65)) | (1L << (COMPOUND - 65)) | (1L << (CONCAT - 65)) | (1L << (CONNECT_BY_ROOT - 65)) | (1L << (CONSTANT - 65)) | (1L << (CONSTRAINT - 65)) | (1L << (CONSTRAINTS - 65)) | (1L << (CONSTRUCTOR - 65)) | (1L << (CONTENT - 65)) | (1L << (CONTEXT - 65)) | (1L << (CONTINUE - 65)) | (1L << (CONVERT - 65)) | (1L << (CORRUPT_XID - 65)) | (1L << (CORRUPT_XID_ALL - 65)) | (1L << (COST - 65)) | (1L << (COUNT - 65)) | (1L << (CROSS - 65)) | (1L << (CUBE - 65)) | (1L << (CURRENT_USER - 65)) | (1L << (CURSOR - 65)) | (1L << (CUSTOMDATUM - 65)) | (1L << (CYCLE - 65)) | (1L << (DATA - 65)) | (1L << (DATABASE - 65)) | (1L << (DATE - 65)) | (1L << (DAY - 65)) | (1L << (DB_ROLE_CHANGE - 65)) | (1L << (DBTIMEZONE - 65)) | (1L << (DDL - 65)) | (1L << (DEBUG - 65)) | (1L << (DEC - 65)) | (1L << (DECIMAL - 65)) | (1L << (DECODE - 65)) | (1L << (DECOMPOSE - 65)) | (1L << (DECREMENT - 65)) | (1L << (DEFAULT - 65)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DEMAND - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DISTINCT - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (EDITIONING - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENFORCED - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXISTS - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FALSE - 129)) | (1L << (FAST - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)) | (1L << (FOLLOWING - 129)) | (1L << (FOLLOWS - 129)) | (1L << (FORALL - 129)) | (1L << (FORCE - 129)))) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & ((1L << (FULL - 197)) | (1L << (FUNCTION - 197)) | (1L << (GROUPING - 197)) | (1L << (HASH - 197)) | (1L << (HIDE - 197)) | (1L << (HOUR - 197)) | (1L << (IGNORE - 197)) | (1L << (IMMEDIATE - 197)) | (1L << (INCLUDE - 197)) | (1L << (INCLUDING - 197)) | (1L << (INCREMENT - 197)) | (1L << (INDENT - 197)) | (1L << (INDEXED - 197)) | (1L << (INDICATOR - 197)) | (1L << (INDICES - 197)) | (1L << (INFINITE - 197)) | (1L << (INLINE - 197)) | (1L << (INNER - 197)) | (1L << (INOUT - 197)) | (1L << (INSTANTIABLE - 197)) | (1L << (INSTEAD - 197)) | (1L << (INT - 197)) | (1L << (INTEGER - 197)) | (1L << (INTERVAL - 197)) | (1L << (INVALIDATE - 197)) | (1L << (ISOLATION - 197)) | (1L << (ITERATE - 197)) | (1L << (JAVA - 197)) | (1L << (JOIN - 197)) | (1L << (KEEP - 197)) | (1L << (LANGUAGE - 197)) | (1L << (LAST - 197)) | (1L << (LAST_VALUE - 197)) | (1L << (LEADING - 197)) | (1L << (LEFT - 197)) | (1L << (LEVEL - 197)))) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & ((1L << (LIBRARY - 261)) | (1L << (LIKE2 - 261)) | (1L << (LIKE4 - 261)) | (1L << (LIKEC - 261)) | (1L << (LIMIT - 261)) | (1L << (LIST - 261)) | (1L << (LOCAL - 261)) | (1L << (LOCKED - 261)) | (1L << (LOG - 261)) | (1L << (LOGOFF - 261)) | (1L << (LOGON - 261)) | (1L << (LONG - 261)) | (1L << (LOOP - 261)) | (1L << (MAIN - 261)) | (1L << (MAP - 261)) | (1L << (MASTER - 261)) | (1L << (MATCHED - 261)) | (1L << (MAXVALUE - 261)) | (1L << (MEASURES - 261)) | (1L << (MEMBER - 261)) | (1L << (MERGE - 261)) | (1L << (MINUTE - 261)) | (1L << (MINVALUE - 261)) | (1L << (MLSLABEL - 261)) | (1L << (MODEL - 261)) | (1L << (MODIFY - 261)) | (1L << (MONTH - 261)) | (1L << (MULTISET - 261)) | (1L << (NAME - 261)) | (1L << (NAN - 261)) | (1L << (NATURAL - 261)) | (1L << (NATURALN - 261)) | (1L << (NAV - 261)) | (1L << (NCHAR - 261)) | (1L << (NCHAR_CS - 261)) | (1L << (NCLOB - 261)) | (1L << (NESTED - 261)) | (1L << (NEVER - 261)) | (1L << (NEW - 261)) | (1L << (NO - 261)) | (1L << (NOAUDIT - 261)) | (1L << (NOCOPY - 261)) | (1L << (NOCYCLE - 261)) | (1L << (NOENTITYESCAPING - 261)))) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & ((1L << (NONE - 329)) | (1L << (NOSCHEMACHECK - 329)) | (1L << (NOT - 329)) | (1L << (NVL - 329)) | (1L << (NULL - 329)) | (1L << (NULLS - 329)) | (1L << (NUMBER - 329)) | (1L << (NUMERIC - 329)) | (1L << (NVARCHAR2 - 329)) | (1L << (MATERIALIZED - 329)) | (1L << (OBJECT - 329)) | (1L << (OFF - 329)) | (1L << (OID - 329)) | (1L << (OLD - 329)) | (1L << (ONLY - 329)) | (1L << (OPEN - 329)) | (1L << (ORADATA - 329)) | (1L << (ORDINALITY - 329)) | (1L << (OSERROR - 329)) | (1L << (OUT - 329)) | (1L << (OUTER - 329)) | (1L << (OVER - 329)) | (1L << (OVERRIDING - 329)) | (1L << (PACKAGE - 329)) | (1L << (PARALLEL_ENABLE - 329)) | (1L << (PARAMETERS - 329)) | (1L << (PARENT - 329)) | (1L << (PARTITION - 329)) | (1L << (PASSING - 329)) | (1L << (PATH - 329)) | (1L << (PIPELINED - 329)) | (1L << (PLAN - 329)) | (1L << (PLS_INTEGER - 329)) | (1L << (POSITION - 329)) | (1L << (POSITIVE - 329)) | (1L << (POSITIVEN - 329)) | (1L << (PRAGMA - 329)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (PREBUILT - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)) | (1L << (PRESENT - 393)) | (1L << (PRIOR - 393)) | (1L << (PUBLIC - 393)) | (1L << (RAISE - 393)) | (1L << (RANGE - 393)) | (1L << (RAW - 393)) | (1L << (READ - 393)) | (1L << (REAL - 393)) | (1L << (RECORD - 393)) | (1L << (REDUCED - 393)) | (1L << (REF - 393)) | (1L << (REFERENCE - 393)) | (1L << (REFERENCING - 393)) | (1L << (REFRESH - 393)) | (1L << (REJECT - 393)) | (1L << (RELIES_ON - 393)) | (1L << (RENAME - 393)) | (1L << (REPLACE - 393)) | (1L << (RESPECT - 393)) | (1L << (RESTRICT_REFERENCES - 393)) | (1L << (RESULT - 393)) | (1L << (RESULT_CACHE - 393)) | (1L << (RETURN - 393)) | (1L << (RETURNING - 393)) | (1L << (REUSE - 393)) | (1L << (REVERSE - 393)) | (1L << (REWRITE - 393)) | (1L << (RIGHT - 393)) | (1L << (ROLE - 393)) | (1L << (ROLLBACK - 393)) | (1L << (ROLLUP - 393)) | (1L << (ROW - 393)) | (1L << (ROWID - 393)) | (1L << (ROWS - 393)) | (1L << (RULES - 393)) | (1L << (SAMPLE - 393)) | (1L << (SAVE - 393)) | (1L << (SAVEPOINT - 393)) | (1L << (SCHEMA - 393)) | (1L << (SCHEMACHECK - 393)) | (1L << (SCN - 393)) | (1L << (SECOND - 393)))) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & ((1L << (SEED - 458)) | (1L << (SEGMENT - 458)) | (1L << (SELECT - 458)) | (1L << (SELF - 458)) | (1L << (SEQUENTIAL - 458)) | (1L << (SERIALIZABLE - 458)) | (1L << (SERIALLY_REUSABLE - 458)) | (1L << (SERVERERROR - 458)) | (1L << (SESSIONTIMEZONE - 458)) | (1L << (SET - 458)) | (1L << (SETS - 458)) | (1L << (SETTINGS - 458)) | (1L << (SHOW - 458)) | (1L << (SHUTDOWN - 458)) | (1L << (SIBLINGS - 458)) | (1L << (SIGNTYPE - 458)) | (1L << (SIMPLE_INTEGER - 458)) | (1L << (SINGLE - 458)) | (1L << (SIZE - 458)) | (1L << (SKIP_ - 458)) | (1L << (SMALLINT - 458)) | (1L << (SNAPSHOT - 458)) | (1L << (SOME - 458)) | (1L << (SPECIFICATION - 458)) | (1L << (SQLDATA - 458)) | (1L << (SQLERROR - 458)) | (1L << (STANDALONE - 458)) | (1L << (STARTUP - 458)) | (1L << (STATEMENT - 458)) | (1L << (STATEMENT_ID - 458)) | (1L << (STATIC - 458)) | (1L << (STATISTICS - 458)) | (1L << (STRING - 458)) | (1L << (SUBMULTISET - 458)) | (1L << (SUBPARTITION - 458)) | (1L << (SUBSTITUTABLE - 458)) | (1L << (SUBSTRING - 458)) | (1L << (SUBTYPE - 458)) | (1L << (SUCCESS - 458)) | (1L << (SUSPEND - 458)) | (1L << (TABLES - 458)) | (1L << (TIME - 458)) | (1L << (TIMESTAMP - 458)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 458)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 458)) | (1L << (TIMESTAMP_UNCONSTRAINED - 458)))) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & ((1L << (TIMEZONE_ABBR - 522)) | (1L << (TIMEZONE_HOUR - 522)) | (1L << (TIMEZONE_MINUTE - 522)) | (1L << (TIMEZONE_REGION - 522)) | (1L << (TO_CHAR - 522)) | (1L << (TO_DATE - 522)) | (1L << (TRAILING - 522)) | (1L << (TRANSACTION - 522)) | (1L << (TRANSLATE - 522)) | (1L << (TREAT - 522)) | (1L << (TRIGGER - 522)) | (1L << (TRIM - 522)) | (1L << (TRUE - 522)) | (1L << (TRUNCATE - 522)) | (1L << (TRUSTED - 522)) | (1L << (TYPE - 522)) | (1L << (UNBOUNDED - 522)) | (1L << (UNDER - 522)) | (1L << (UNLIMITED - 522)) | (1L << (UNTIL - 522)) | (1L << (UPDATED - 522)) | (1L << (UPSERT - 522)) | (1L << (UROWID - 522)) | (1L << (USE - 522)) | (1L << (VALIDATE - 522)) | (1L << (VALUE - 522)) | (1L << (VARCHAR - 522)) | (1L << (VARCHAR2 - 522)) | (1L << (VARIABLE - 522)) | (1L << (VARRAY - 522)) | (1L << (VARYING - 522)) | (1L << (VERBOSE - 522)) | (1L << (VERSION - 522)) | (1L << (VERSIONS - 522)) | (1L << (VIEW - 522)) | (1L << (WAIT - 522)) | (1L << (WARNING - 522)) | (1L << (WELLFORMED - 522)) | (1L << (WHENEVER - 522)) | (1L << (WHILE - 522)) | (1L << (WITHOUT - 522)) | (1L << (WITHIN - 522)) | (1L << (WORK - 522)) | (1L << (WRITE - 522)) | (1L << (XML - 522)) | (1L << (XMLAGG - 522)) | (1L << (XMLATTRIBUTES - 522)))) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & ((1L << (XMLCAST - 586)) | (1L << (XMLCOLATTVAL - 586)) | (1L << (XMLELEMENT - 586)) | (1L << (XMLEXISTS - 586)) | (1L << (XMLFOREST - 586)) | (1L << (XMLNAMESPACES - 586)) | (1L << (XMLPARSE - 586)) | (1L << (XMLPI - 586)) | (1L << (XMLQUERY - 586)) | (1L << (XMLROOT - 586)) | (1L << (XMLSERIALIZE - 586)) | (1L << (XMLTABLE - 586)) | (1L << (YEAR - 586)) | (1L << (YES - 586)) | (1L << (YMINTERVAL_UNCONSTRAINED - 586)) | (1L << (ZONE - 586)) | (1L << (PREDICTION - 586)) | (1L << (PREDICTION_BOUNDS - 586)) | (1L << (PREDICTION_COST - 586)) | (1L << (PREDICTION_DETAILS - 586)) | (1L << (PREDICTION_PROBABILITY - 586)) | (1L << (PREDICTION_SET - 586)) | (1L << (CUME_DIST - 586)) | (1L << (DENSE_RANK - 586)) | (1L << (LISTAGG - 586)) | (1L << (PERCENT_RANK - 586)) | (1L << (PERCENTILE_CONT - 586)) | (1L << (PERCENTILE_DISC - 586)) | (1L << (RANK - 586)) | (1L << (AVG - 586)) | (1L << (CORR - 586)) | (1L << (LAG - 586)) | (1L << (LEAD - 586)) | (1L << (MAX - 586)) | (1L << (MEDIAN - 586)) | (1L << (MIN - 586)) | (1L << (NTILE - 586)) | (1L << (RATIO_TO_REPORT - 586)) | (1L << (ROW_NUMBER - 586)) | (1L << (SUM - 586)) | (1L << (VARIANCE - 586)) | (1L << (REGR_ - 586)) | (1L << (STDDEV - 586)) | (1L << (VAR_ - 586)) | (1L << (COVAR_ - 586)) | (1L << (NATIONAL_CHAR_STRING_LIT - 586)) | (1L << (UNSIGNED_INTEGER - 586)) | (1L << (APPROXIMATE_NUM_LIT - 586)) | (1L << (CHAR_STRING - 586)) | (1L << (DELIMITED_ID - 586)) | (1L << (LEFT_PAREN - 586)) | (1L << (PLUS_SIGN - 586)))) != 0) || ((((_la - 650)) & ~0x3f) == 0 && ((1L << (_la - 650)) & ((1L << (MINUS_SIGN - 650)) | (1L << (BINDVAR - 650)) | (1L << (COLON - 650)) | (1L << (REGULAR_ID - 650)))) != 0)) {
				{
				setState(8069);
				argument();
				setState(8071);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IGNORE || _la==RESPECT) {
					{
					setState(8070);
					respect_or_ignore_nulls();
					}
				}

				}
			}

			setState(8082);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(8075);
				match(COMMA);
				setState(8076);
				argument();
				setState(8078);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IGNORE || _la==RESPECT) {
					{
					setState(8077);
					respect_or_ignore_nulls();
					}
				}

				}
				}
				setState(8084);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(8085);
			match(RIGHT_PAREN);
			setState(8087);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1187,_ctx) ) {
			case 1:
				{
				setState(8086);
				keep_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Function_argument_modelingContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(PLSQLParser.LEFT_PAREN, 0); }
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public TerminalNode USING() { return getToken(PLSQLParser.USING, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PLSQLParser.RIGHT_PAREN, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public TerminalNode PERIOD() { return getToken(PLSQLParser.PERIOD, 0); }
		public StarContext star() {
			return getRuleContext(StarContext.class,0);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PLSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PLSQLParser.COMMA, i);
		}
		public Keep_clauseContext keep_clause() {
			return getRuleContext(Keep_clauseContext.class,0);
		}
		public List<NumericContext> numeric() {
			return getRuleContexts(NumericContext.class);
		}
		public NumericContext numeric(int i) {
			return getRuleContext(NumericContext.class,i);
		}
		public List<TerminalNode> NULL() { return getTokens(PLSQLParser.NULL); }
		public TerminalNode NULL(int i) {
			return getToken(PLSQLParser.NULL, i);
		}
		public List<Column_aliasContext> column_alias() {
			return getRuleContexts(Column_aliasContext.class);
		}
		public Column_aliasContext column_alias(int i) {
			return getRuleContext(Column_aliasContext.class,i);
		}
		public Function_argument_modelingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_argument_modeling; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterFunction_argument_modeling(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitFunction_argument_modeling(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitFunction_argument_modeling(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Function_argument_modelingContext function_argument_modeling() throws RecognitionException {
		Function_argument_modelingContext _localctx = new Function_argument_modelingContext(_ctx, getState());
		enterRule(_localctx, 1042, RULE_function_argument_modeling);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8089);
			match(LEFT_PAREN);
			setState(8090);
			column_name();
			setState(8103);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(8091);
				match(COMMA);
				setState(8094);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case UNSIGNED_INTEGER:
				case APPROXIMATE_NUM_LIT:
					{
					setState(8092);
					numeric();
					}
					break;
				case NULL:
					{
					setState(8093);
					match(NULL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(8101);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(8096);
					match(COMMA);
					setState(8099);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case UNSIGNED_INTEGER:
					case APPROXIMATE_NUM_LIT:
						{
						setState(8097);
						numeric();
						}
						break;
					case NULL:
						{
						setState(8098);
						match(NULL);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				}
			}

			setState(8105);
			match(USING);
			setState(8125);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1195,_ctx) ) {
			case 1:
				{
				setState(8106);
				tableview_name();
				setState(8107);
				match(PERIOD);
				setState(8108);
				star();
				}
				break;
			case 2:
				{
				setState(8110);
				star();
				}
				break;
			case 3:
				{
				setState(8111);
				expression(0);
				setState(8113);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << AS) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BUILD) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (CHR - 65)) | (1L << (CLOB - 65)) | (1L << (CLOSE - 65)) | (1L << (CLUSTER - 65)) | (1L << (COALESCE - 65)) | (1L << (COLLECT - 65)) | (1L << (COLUMNS - 65)) | (1L << (COMMENT - 65)) | (1L << (COMMIT - 65)) | (1L << (COMMITTED - 65)) | (1L << (COMPATIBILITY - 65)) | (1L << (COMPILE - 65)) | (1L << (COMPLETE - 65)) | (1L << (COMPOUND - 65)) | (1L << (CONCAT - 65)) | (1L << (CONSTANT - 65)) | (1L << (CONSTRAINT - 65)) | (1L << (CONSTRAINTS - 65)) | (1L << (CONSTRUCTOR - 65)) | (1L << (CONTENT - 65)) | (1L << (CONTEXT - 65)) | (1L << (CONTINUE - 65)) | (1L << (CONVERT - 65)) | (1L << (CORRUPT_XID - 65)) | (1L << (CORRUPT_XID_ALL - 65)) | (1L << (COST - 65)) | (1L << (COUNT - 65)) | (1L << (CROSS - 65)) | (1L << (CUBE - 65)) | (1L << (CURRENT_USER - 65)) | (1L << (CURSOR - 65)) | (1L << (CUSTOMDATUM - 65)) | (1L << (CYCLE - 65)) | (1L << (DATA - 65)) | (1L << (DATABASE - 65)) | (1L << (DATE - 65)) | (1L << (DAY - 65)) | (1L << (DB_ROLE_CHANGE - 65)) | (1L << (DBTIMEZONE - 65)) | (1L << (DDL - 65)) | (1L << (DEBUG - 65)) | (1L << (DEC - 65)) | (1L << (DECIMAL - 65)) | (1L << (DECODE - 65)) | (1L << (DECOMPOSE - 65)) | (1L << (DECREMENT - 65)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DEMAND - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (EDITIONING - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENFORCED - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FAST - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)) | (1L << (FOLLOWING - 129)) | (1L << (FOLLOWS - 129)) | (1L << (FORALL - 129)) | (1L << (FORCE - 129)))) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & ((1L << (FULL - 197)) | (1L << (FUNCTION - 197)) | (1L << (GROUPING - 197)) | (1L << (HASH - 197)) | (1L << (HIDE - 197)) | (1L << (HOUR - 197)) | (1L << (IGNORE - 197)) | (1L << (IMMEDIATE - 197)) | (1L << (INCLUDE - 197)) | (1L << (INCLUDING - 197)) | (1L << (INCREMENT - 197)) | (1L << (INDENT - 197)) | (1L << (INDEXED - 197)) | (1L << (INDICATOR - 197)) | (1L << (INDICES - 197)) | (1L << (INFINITE - 197)) | (1L << (INLINE - 197)) | (1L << (INNER - 197)) | (1L << (INOUT - 197)) | (1L << (INSTANTIABLE - 197)) | (1L << (INSTEAD - 197)) | (1L << (INT - 197)) | (1L << (INTEGER - 197)) | (1L << (INTERVAL - 197)) | (1L << (INVALIDATE - 197)) | (1L << (ISOLATION - 197)) | (1L << (ITERATE - 197)) | (1L << (JAVA - 197)) | (1L << (JOIN - 197)) | (1L << (KEEP - 197)) | (1L << (LANGUAGE - 197)) | (1L << (LAST - 197)) | (1L << (LAST_VALUE - 197)) | (1L << (LEADING - 197)) | (1L << (LEFT - 197)) | (1L << (LEVEL - 197)))) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & ((1L << (LIBRARY - 261)) | (1L << (LIKE2 - 261)) | (1L << (LIKE4 - 261)) | (1L << (LIKEC - 261)) | (1L << (LIMIT - 261)) | (1L << (LIST - 261)) | (1L << (LOCAL - 261)) | (1L << (LOCKED - 261)) | (1L << (LOG - 261)) | (1L << (LOGOFF - 261)) | (1L << (LOGON - 261)) | (1L << (LONG - 261)) | (1L << (LOOP - 261)) | (1L << (MAIN - 261)) | (1L << (MAP - 261)) | (1L << (MASTER - 261)) | (1L << (MATCHED - 261)) | (1L << (MAXVALUE - 261)) | (1L << (MEASURES - 261)) | (1L << (MEMBER - 261)) | (1L << (MERGE - 261)) | (1L << (MINUTE - 261)) | (1L << (MINVALUE - 261)) | (1L << (MLSLABEL - 261)) | (1L << (MODEL - 261)) | (1L << (MODIFY - 261)) | (1L << (MONTH - 261)) | (1L << (MULTISET - 261)) | (1L << (NAME - 261)) | (1L << (NAN - 261)) | (1L << (NATURAL - 261)) | (1L << (NATURALN - 261)) | (1L << (NAV - 261)) | (1L << (NCHAR - 261)) | (1L << (NCHAR_CS - 261)) | (1L << (NCLOB - 261)) | (1L << (NESTED - 261)) | (1L << (NEVER - 261)) | (1L << (NEW - 261)) | (1L << (NO - 261)) | (1L << (NOAUDIT - 261)) | (1L << (NOCOPY - 261)) | (1L << (NOCYCLE - 261)) | (1L << (NOENTITYESCAPING - 261)))) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & ((1L << (NONE - 329)) | (1L << (NOSCHEMACHECK - 329)) | (1L << (NVL - 329)) | (1L << (NULLS - 329)) | (1L << (NUMBER - 329)) | (1L << (NUMERIC - 329)) | (1L << (NVARCHAR2 - 329)) | (1L << (MATERIALIZED - 329)) | (1L << (OBJECT - 329)) | (1L << (OFF - 329)) | (1L << (OID - 329)) | (1L << (OLD - 329)) | (1L << (ONLY - 329)) | (1L << (OPEN - 329)) | (1L << (ORADATA - 329)) | (1L << (ORDINALITY - 329)) | (1L << (OSERROR - 329)) | (1L << (OUT - 329)) | (1L << (OUTER - 329)) | (1L << (OVER - 329)) | (1L << (OVERRIDING - 329)) | (1L << (PACKAGE - 329)) | (1L << (PARALLEL_ENABLE - 329)) | (1L << (PARAMETERS - 329)) | (1L << (PARENT - 329)) | (1L << (PARTITION - 329)) | (1L << (PASSING - 329)) | (1L << (PATH - 329)) | (1L << (PIPELINED - 329)) | (1L << (PLAN - 329)) | (1L << (PLS_INTEGER - 329)) | (1L << (POSITIVE - 329)) | (1L << (POSITIVEN - 329)) | (1L << (PRAGMA - 329)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (PREBUILT - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)) | (1L << (PRESENT - 393)) | (1L << (PUBLIC - 393)) | (1L << (RAISE - 393)) | (1L << (RANGE - 393)) | (1L << (RAW - 393)) | (1L << (READ - 393)) | (1L << (REAL - 393)) | (1L << (RECORD - 393)) | (1L << (REDUCED - 393)) | (1L << (REF - 393)) | (1L << (REFERENCE - 393)) | (1L << (REFERENCING - 393)) | (1L << (REFRESH - 393)) | (1L << (REJECT - 393)) | (1L << (RELIES_ON - 393)) | (1L << (RENAME - 393)) | (1L << (REPLACE - 393)) | (1L << (RESPECT - 393)) | (1L << (RESTRICT_REFERENCES - 393)) | (1L << (RESULT - 393)) | (1L << (RESULT_CACHE - 393)) | (1L << (RETURN - 393)) | (1L << (RETURNING - 393)) | (1L << (REUSE - 393)) | (1L << (REVERSE - 393)) | (1L << (REWRITE - 393)) | (1L << (RIGHT - 393)) | (1L << (ROLE - 393)) | (1L << (ROLLBACK - 393)) | (1L << (ROLLUP - 393)) | (1L << (ROW - 393)) | (1L << (ROWID - 393)) | (1L << (ROWS - 393)) | (1L << (RULES - 393)) | (1L << (SAMPLE - 393)) | (1L << (SAVE - 393)) | (1L << (SAVEPOINT - 393)) | (1L << (SCHEMA - 393)) | (1L << (SCHEMACHECK - 393)) | (1L << (SCN - 393)) | (1L << (SECOND - 393)))) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & ((1L << (SEED - 458)) | (1L << (SEGMENT - 458)) | (1L << (SELF - 458)) | (1L << (SEQUENTIAL - 458)) | (1L << (SERIALIZABLE - 458)) | (1L << (SERIALLY_REUSABLE - 458)) | (1L << (SERVERERROR - 458)) | (1L << (SESSIONTIMEZONE - 458)) | (1L << (SET - 458)) | (1L << (SETS - 458)) | (1L << (SETTINGS - 458)) | (1L << (SHOW - 458)) | (1L << (SHUTDOWN - 458)) | (1L << (SIBLINGS - 458)) | (1L << (SIGNTYPE - 458)) | (1L << (SIMPLE_INTEGER - 458)) | (1L << (SINGLE - 458)) | (1L << (SIZE - 458)) | (1L << (SKIP_ - 458)) | (1L << (SMALLINT - 458)) | (1L << (SNAPSHOT - 458)) | (1L << (SOME - 458)) | (1L << (SPECIFICATION - 458)) | (1L << (SQLDATA - 458)) | (1L << (SQLERROR - 458)) | (1L << (STANDALONE - 458)) | (1L << (STARTUP - 458)) | (1L << (STATEMENT - 458)) | (1L << (STATEMENT_ID - 458)) | (1L << (STATIC - 458)) | (1L << (STATISTICS - 458)) | (1L << (STRING - 458)) | (1L << (SUBMULTISET - 458)) | (1L << (SUBPARTITION - 458)) | (1L << (SUBSTITUTABLE - 458)) | (1L << (SUBSTRING - 458)) | (1L << (SUBTYPE - 458)) | (1L << (SUCCESS - 458)) | (1L << (SUSPEND - 458)) | (1L << (TABLES - 458)) | (1L << (TIME - 458)) | (1L << (TIMESTAMP - 458)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 458)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 458)) | (1L << (TIMESTAMP_UNCONSTRAINED - 458)))) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & ((1L << (TIMEZONE_ABBR - 522)) | (1L << (TIMEZONE_HOUR - 522)) | (1L << (TIMEZONE_MINUTE - 522)) | (1L << (TIMEZONE_REGION - 522)) | (1L << (TO_CHAR - 522)) | (1L << (TO_DATE - 522)) | (1L << (TRAILING - 522)) | (1L << (TRANSACTION - 522)) | (1L << (TRANSLATE - 522)) | (1L << (TREAT - 522)) | (1L << (TRIGGER - 522)) | (1L << (TRIM - 522)) | (1L << (TRUNCATE - 522)) | (1L << (TRUSTED - 522)) | (1L << (TYPE - 522)) | (1L << (UNBOUNDED - 522)) | (1L << (UNDER - 522)) | (1L << (UNLIMITED - 522)) | (1L << (UNTIL - 522)) | (1L << (UPDATED - 522)) | (1L << (UPSERT - 522)) | (1L << (UROWID - 522)) | (1L << (USE - 522)) | (1L << (VALIDATE - 522)) | (1L << (VALUE - 522)) | (1L << (VARCHAR - 522)) | (1L << (VARCHAR2 - 522)) | (1L << (VARIABLE - 522)) | (1L << (VARRAY - 522)) | (1L << (VARYING - 522)) | (1L << (VERBOSE - 522)) | (1L << (VERSION - 522)) | (1L << (VERSIONS - 522)) | (1L << (VIEW - 522)) | (1L << (WAIT - 522)) | (1L << (WARNING - 522)) | (1L << (WELLFORMED - 522)) | (1L << (WHENEVER - 522)) | (1L << (WHILE - 522)) | (1L << (WITHOUT - 522)) | (1L << (WITHIN - 522)) | (1L << (WORK - 522)) | (1L << (WRITE - 522)) | (1L << (XML - 522)) | (1L << (XMLAGG - 522)) | (1L << (XMLATTRIBUTES - 522)))) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & ((1L << (XMLCAST - 586)) | (1L << (XMLCOLATTVAL - 586)) | (1L << (XMLELEMENT - 586)) | (1L << (XMLEXISTS - 586)) | (1L << (XMLFOREST - 586)) | (1L << (XMLNAMESPACES - 586)) | (1L << (XMLPARSE - 586)) | (1L << (XMLPI - 586)) | (1L << (XMLQUERY - 586)) | (1L << (XMLROOT - 586)) | (1L << (XMLSERIALIZE - 586)) | (1L << (XMLTABLE - 586)) | (1L << (YEAR - 586)) | (1L << (YES - 586)) | (1L << (YMINTERVAL_UNCONSTRAINED - 586)) | (1L << (ZONE - 586)) | (1L << (PREDICTION - 586)) | (1L << (PREDICTION_BOUNDS - 586)) | (1L << (PREDICTION_COST - 586)) | (1L << (PREDICTION_DETAILS - 586)) | (1L << (PREDICTION_PROBABILITY - 586)) | (1L << (PREDICTION_SET - 586)) | (1L << (CUME_DIST - 586)) | (1L << (DENSE_RANK - 586)) | (1L << (LISTAGG - 586)) | (1L << (PERCENT_RANK - 586)) | (1L << (PERCENTILE_CONT - 586)) | (1L << (PERCENTILE_DISC - 586)) | (1L << (RANK - 586)) | (1L << (AVG - 586)) | (1L << (CORR - 586)) | (1L << (LAG - 586)) | (1L << (LEAD - 586)) | (1L << (MAX - 586)) | (1L << (MEDIAN - 586)) | (1L << (MIN - 586)) | (1L << (NTILE - 586)) | (1L << (RATIO_TO_REPORT - 586)) | (1L << (ROW_NUMBER - 586)) | (1L << (SUM - 586)) | (1L << (VARIANCE - 586)) | (1L << (REGR_ - 586)) | (1L << (STDDEV - 586)) | (1L << (VAR_ - 586)) | (1L << (COVAR_ - 586)) | (1L << (NATIONAL_CHAR_STRING_LIT - 586)) | (1L << (CHAR_STRING - 586)) | (1L << (DELIMITED_ID - 586)))) != 0) || _la==REGULAR_ID) {
					{
					setState(8112);
					column_alias();
					}
				}

				setState(8122);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(8115);
					match(COMMA);
					setState(8116);
					expression(0);
					setState(8118);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << AS) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BUILD) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (CHR - 65)) | (1L << (CLOB - 65)) | (1L << (CLOSE - 65)) | (1L << (CLUSTER - 65)) | (1L << (COALESCE - 65)) | (1L << (COLLECT - 65)) | (1L << (COLUMNS - 65)) | (1L << (COMMENT - 65)) | (1L << (COMMIT - 65)) | (1L << (COMMITTED - 65)) | (1L << (COMPATIBILITY - 65)) | (1L << (COMPILE - 65)) | (1L << (COMPLETE - 65)) | (1L << (COMPOUND - 65)) | (1L << (CONCAT - 65)) | (1L << (CONSTANT - 65)) | (1L << (CONSTRAINT - 65)) | (1L << (CONSTRAINTS - 65)) | (1L << (CONSTRUCTOR - 65)) | (1L << (CONTENT - 65)) | (1L << (CONTEXT - 65)) | (1L << (CONTINUE - 65)) | (1L << (CONVERT - 65)) | (1L << (CORRUPT_XID - 65)) | (1L << (CORRUPT_XID_ALL - 65)) | (1L << (COST - 65)) | (1L << (COUNT - 65)) | (1L << (CROSS - 65)) | (1L << (CUBE - 65)) | (1L << (CURRENT_USER - 65)) | (1L << (CURSOR - 65)) | (1L << (CUSTOMDATUM - 65)) | (1L << (CYCLE - 65)) | (1L << (DATA - 65)) | (1L << (DATABASE - 65)) | (1L << (DATE - 65)) | (1L << (DAY - 65)) | (1L << (DB_ROLE_CHANGE - 65)) | (1L << (DBTIMEZONE - 65)) | (1L << (DDL - 65)) | (1L << (DEBUG - 65)) | (1L << (DEC - 65)) | (1L << (DECIMAL - 65)) | (1L << (DECODE - 65)) | (1L << (DECOMPOSE - 65)) | (1L << (DECREMENT - 65)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DEMAND - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (EDITIONING - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENFORCED - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FAST - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)) | (1L << (FOLLOWING - 129)) | (1L << (FOLLOWS - 129)) | (1L << (FORALL - 129)) | (1L << (FORCE - 129)))) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & ((1L << (FULL - 197)) | (1L << (FUNCTION - 197)) | (1L << (GROUPING - 197)) | (1L << (HASH - 197)) | (1L << (HIDE - 197)) | (1L << (HOUR - 197)) | (1L << (IGNORE - 197)) | (1L << (IMMEDIATE - 197)) | (1L << (INCLUDE - 197)) | (1L << (INCLUDING - 197)) | (1L << (INCREMENT - 197)) | (1L << (INDENT - 197)) | (1L << (INDEXED - 197)) | (1L << (INDICATOR - 197)) | (1L << (INDICES - 197)) | (1L << (INFINITE - 197)) | (1L << (INLINE - 197)) | (1L << (INNER - 197)) | (1L << (INOUT - 197)) | (1L << (INSTANTIABLE - 197)) | (1L << (INSTEAD - 197)) | (1L << (INT - 197)) | (1L << (INTEGER - 197)) | (1L << (INTERVAL - 197)) | (1L << (INVALIDATE - 197)) | (1L << (ISOLATION - 197)) | (1L << (ITERATE - 197)) | (1L << (JAVA - 197)) | (1L << (JOIN - 197)) | (1L << (KEEP - 197)) | (1L << (LANGUAGE - 197)) | (1L << (LAST - 197)) | (1L << (LAST_VALUE - 197)) | (1L << (LEADING - 197)) | (1L << (LEFT - 197)) | (1L << (LEVEL - 197)))) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & ((1L << (LIBRARY - 261)) | (1L << (LIKE2 - 261)) | (1L << (LIKE4 - 261)) | (1L << (LIKEC - 261)) | (1L << (LIMIT - 261)) | (1L << (LIST - 261)) | (1L << (LOCAL - 261)) | (1L << (LOCKED - 261)) | (1L << (LOG - 261)) | (1L << (LOGOFF - 261)) | (1L << (LOGON - 261)) | (1L << (LONG - 261)) | (1L << (LOOP - 261)) | (1L << (MAIN - 261)) | (1L << (MAP - 261)) | (1L << (MASTER - 261)) | (1L << (MATCHED - 261)) | (1L << (MAXVALUE - 261)) | (1L << (MEASURES - 261)) | (1L << (MEMBER - 261)) | (1L << (MERGE - 261)) | (1L << (MINUTE - 261)) | (1L << (MINVALUE - 261)) | (1L << (MLSLABEL - 261)) | (1L << (MODEL - 261)) | (1L << (MODIFY - 261)) | (1L << (MONTH - 261)) | (1L << (MULTISET - 261)) | (1L << (NAME - 261)) | (1L << (NAN - 261)) | (1L << (NATURAL - 261)) | (1L << (NATURALN - 261)) | (1L << (NAV - 261)) | (1L << (NCHAR - 261)) | (1L << (NCHAR_CS - 261)) | (1L << (NCLOB - 261)) | (1L << (NESTED - 261)) | (1L << (NEVER - 261)) | (1L << (NEW - 261)) | (1L << (NO - 261)) | (1L << (NOAUDIT - 261)) | (1L << (NOCOPY - 261)) | (1L << (NOCYCLE - 261)) | (1L << (NOENTITYESCAPING - 261)))) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & ((1L << (NONE - 329)) | (1L << (NOSCHEMACHECK - 329)) | (1L << (NVL - 329)) | (1L << (NULLS - 329)) | (1L << (NUMBER - 329)) | (1L << (NUMERIC - 329)) | (1L << (NVARCHAR2 - 329)) | (1L << (MATERIALIZED - 329)) | (1L << (OBJECT - 329)) | (1L << (OFF - 329)) | (1L << (OID - 329)) | (1L << (OLD - 329)) | (1L << (ONLY - 329)) | (1L << (OPEN - 329)) | (1L << (ORADATA - 329)) | (1L << (ORDINALITY - 329)) | (1L << (OSERROR - 329)) | (1L << (OUT - 329)) | (1L << (OUTER - 329)) | (1L << (OVER - 329)) | (1L << (OVERRIDING - 329)) | (1L << (PACKAGE - 329)) | (1L << (PARALLEL_ENABLE - 329)) | (1L << (PARAMETERS - 329)) | (1L << (PARENT - 329)) | (1L << (PARTITION - 329)) | (1L << (PASSING - 329)) | (1L << (PATH - 329)) | (1L << (PIPELINED - 329)) | (1L << (PLAN - 329)) | (1L << (PLS_INTEGER - 329)) | (1L << (POSITIVE - 329)) | (1L << (POSITIVEN - 329)) | (1L << (PRAGMA - 329)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (PREBUILT - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)) | (1L << (PRESENT - 393)) | (1L << (PUBLIC - 393)) | (1L << (RAISE - 393)) | (1L << (RANGE - 393)) | (1L << (RAW - 393)) | (1L << (READ - 393)) | (1L << (REAL - 393)) | (1L << (RECORD - 393)) | (1L << (REDUCED - 393)) | (1L << (REF - 393)) | (1L << (REFERENCE - 393)) | (1L << (REFERENCING - 393)) | (1L << (REFRESH - 393)) | (1L << (REJECT - 393)) | (1L << (RELIES_ON - 393)) | (1L << (RENAME - 393)) | (1L << (REPLACE - 393)) | (1L << (RESPECT - 393)) | (1L << (RESTRICT_REFERENCES - 393)) | (1L << (RESULT - 393)) | (1L << (RESULT_CACHE - 393)) | (1L << (RETURN - 393)) | (1L << (RETURNING - 393)) | (1L << (REUSE - 393)) | (1L << (REVERSE - 393)) | (1L << (REWRITE - 393)) | (1L << (RIGHT - 393)) | (1L << (ROLE - 393)) | (1L << (ROLLBACK - 393)) | (1L << (ROLLUP - 393)) | (1L << (ROW - 393)) | (1L << (ROWID - 393)) | (1L << (ROWS - 393)) | (1L << (RULES - 393)) | (1L << (SAMPLE - 393)) | (1L << (SAVE - 393)) | (1L << (SAVEPOINT - 393)) | (1L << (SCHEMA - 393)) | (1L << (SCHEMACHECK - 393)) | (1L << (SCN - 393)) | (1L << (SECOND - 393)))) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & ((1L << (SEED - 458)) | (1L << (SEGMENT - 458)) | (1L << (SELF - 458)) | (1L << (SEQUENTIAL - 458)) | (1L << (SERIALIZABLE - 458)) | (1L << (SERIALLY_REUSABLE - 458)) | (1L << (SERVERERROR - 458)) | (1L << (SESSIONTIMEZONE - 458)) | (1L << (SET - 458)) | (1L << (SETS - 458)) | (1L << (SETTINGS - 458)) | (1L << (SHOW - 458)) | (1L << (SHUTDOWN - 458)) | (1L << (SIBLINGS - 458)) | (1L << (SIGNTYPE - 458)) | (1L << (SIMPLE_INTEGER - 458)) | (1L << (SINGLE - 458)) | (1L << (SIZE - 458)) | (1L << (SKIP_ - 458)) | (1L << (SMALLINT - 458)) | (1L << (SNAPSHOT - 458)) | (1L << (SOME - 458)) | (1L << (SPECIFICATION - 458)) | (1L << (SQLDATA - 458)) | (1L << (SQLERROR - 458)) | (1L << (STANDALONE - 458)) | (1L << (STARTUP - 458)) | (1L << (STATEMENT - 458)) | (1L << (STATEMENT_ID - 458)) | (1L << (STATIC - 458)) | (1L << (STATISTICS - 458)) | (1L << (STRING - 458)) | (1L << (SUBMULTISET - 458)) | (1L << (SUBPARTITION - 458)) | (1L << (SUBSTITUTABLE - 458)) | (1L << (SUBSTRING - 458)) | (1L << (SUBTYPE - 458)) | (1L << (SUCCESS - 458)) | (1L << (SUSPEND - 458)) | (1L << (TABLES - 458)) | (1L << (TIME - 458)) | (1L << (TIMESTAMP - 458)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 458)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 458)) | (1L << (TIMESTAMP_UNCONSTRAINED - 458)))) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & ((1L << (TIMEZONE_ABBR - 522)) | (1L << (TIMEZONE_HOUR - 522)) | (1L << (TIMEZONE_MINUTE - 522)) | (1L << (TIMEZONE_REGION - 522)) | (1L << (TO_CHAR - 522)) | (1L << (TO_DATE - 522)) | (1L << (TRAILING - 522)) | (1L << (TRANSACTION - 522)) | (1L << (TRANSLATE - 522)) | (1L << (TREAT - 522)) | (1L << (TRIGGER - 522)) | (1L << (TRIM - 522)) | (1L << (TRUNCATE - 522)) | (1L << (TRUSTED - 522)) | (1L << (TYPE - 522)) | (1L << (UNBOUNDED - 522)) | (1L << (UNDER - 522)) | (1L << (UNLIMITED - 522)) | (1L << (UNTIL - 522)) | (1L << (UPDATED - 522)) | (1L << (UPSERT - 522)) | (1L << (UROWID - 522)) | (1L << (USE - 522)) | (1L << (VALIDATE - 522)) | (1L << (VALUE - 522)) | (1L << (VARCHAR - 522)) | (1L << (VARCHAR2 - 522)) | (1L << (VARIABLE - 522)) | (1L << (VARRAY - 522)) | (1L << (VARYING - 522)) | (1L << (VERBOSE - 522)) | (1L << (VERSION - 522)) | (1L << (VERSIONS - 522)) | (1L << (VIEW - 522)) | (1L << (WAIT - 522)) | (1L << (WARNING - 522)) | (1L << (WELLFORMED - 522)) | (1L << (WHENEVER - 522)) | (1L << (WHILE - 522)) | (1L << (WITHOUT - 522)) | (1L << (WITHIN - 522)) | (1L << (WORK - 522)) | (1L << (WRITE - 522)) | (1L << (XML - 522)) | (1L << (XMLAGG - 522)) | (1L << (XMLATTRIBUTES - 522)))) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & ((1L << (XMLCAST - 586)) | (1L << (XMLCOLATTVAL - 586)) | (1L << (XMLELEMENT - 586)) | (1L << (XMLEXISTS - 586)) | (1L << (XMLFOREST - 586)) | (1L << (XMLNAMESPACES - 586)) | (1L << (XMLPARSE - 586)) | (1L << (XMLPI - 586)) | (1L << (XMLQUERY - 586)) | (1L << (XMLROOT - 586)) | (1L << (XMLSERIALIZE - 586)) | (1L << (XMLTABLE - 586)) | (1L << (YEAR - 586)) | (1L << (YES - 586)) | (1L << (YMINTERVAL_UNCONSTRAINED - 586)) | (1L << (ZONE - 586)) | (1L << (PREDICTION - 586)) | (1L << (PREDICTION_BOUNDS - 586)) | (1L << (PREDICTION_COST - 586)) | (1L << (PREDICTION_DETAILS - 586)) | (1L << (PREDICTION_PROBABILITY - 586)) | (1L << (PREDICTION_SET - 586)) | (1L << (CUME_DIST - 586)) | (1L << (DENSE_RANK - 586)) | (1L << (LISTAGG - 586)) | (1L << (PERCENT_RANK - 586)) | (1L << (PERCENTILE_CONT - 586)) | (1L << (PERCENTILE_DISC - 586)) | (1L << (RANK - 586)) | (1L << (AVG - 586)) | (1L << (CORR - 586)) | (1L << (LAG - 586)) | (1L << (LEAD - 586)) | (1L << (MAX - 586)) | (1L << (MEDIAN - 586)) | (1L << (MIN - 586)) | (1L << (NTILE - 586)) | (1L << (RATIO_TO_REPORT - 586)) | (1L << (ROW_NUMBER - 586)) | (1L << (SUM - 586)) | (1L << (VARIANCE - 586)) | (1L << (REGR_ - 586)) | (1L << (STDDEV - 586)) | (1L << (VAR_ - 586)) | (1L << (COVAR_ - 586)) | (1L << (NATIONAL_CHAR_STRING_LIT - 586)) | (1L << (CHAR_STRING - 586)) | (1L << (DELIMITED_ID - 586)))) != 0) || _la==REGULAR_ID) {
						{
						setState(8117);
						column_alias();
						}
					}

					}
					}
					setState(8124);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
			setState(8127);
			match(RIGHT_PAREN);
			setState(8129);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1196,_ctx) ) {
			case 1:
				{
				setState(8128);
				keep_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Respect_or_ignore_nullsContext extends ParserRuleContext {
		public TerminalNode NULLS() { return getToken(PLSQLParser.NULLS, 0); }
		public TerminalNode RESPECT() { return getToken(PLSQLParser.RESPECT, 0); }
		public TerminalNode IGNORE() { return getToken(PLSQLParser.IGNORE, 0); }
		public Respect_or_ignore_nullsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_respect_or_ignore_nulls; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterRespect_or_ignore_nulls(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitRespect_or_ignore_nulls(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitRespect_or_ignore_nulls(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Respect_or_ignore_nullsContext respect_or_ignore_nulls() throws RecognitionException {
		Respect_or_ignore_nullsContext _localctx = new Respect_or_ignore_nullsContext(_ctx, getState());
		enterRule(_localctx, 1044, RULE_respect_or_ignore_nulls);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8131);
			_la = _input.LA(1);
			if ( !(_la==IGNORE || _la==RESPECT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(8132);
			match(NULLS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ArgumentContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public R_idContext r_id() {
			return getRuleContext(R_idContext.class,0);
		}
		public TerminalNode EQUALS_OP() { return getToken(PLSQLParser.EQUALS_OP, 0); }
		public TerminalNode GREATER_THAN_OP() { return getToken(PLSQLParser.GREATER_THAN_OP, 0); }
		public ArgumentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_argument; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterArgument(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitArgument(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitArgument(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ArgumentContext argument() throws RecognitionException {
		ArgumentContext _localctx = new ArgumentContext(_ctx, getState());
		enterRule(_localctx, 1046, RULE_argument);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8138);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1197,_ctx) ) {
			case 1:
				{
				setState(8134);
				r_id();
				setState(8135);
				match(EQUALS_OP);
				setState(8136);
				match(GREATER_THAN_OP);
				}
				break;
			}
			setState(8140);
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_specContext extends ParserRuleContext {
		public DatatypeContext datatype() {
			return getRuleContext(DatatypeContext.class,0);
		}
		public Type_nameContext type_name() {
			return getRuleContext(Type_nameContext.class,0);
		}
		public TerminalNode REF() { return getToken(PLSQLParser.REF, 0); }
		public TerminalNode PERCENT_ROWTYPE() { return getToken(PLSQLParser.PERCENT_ROWTYPE, 0); }
		public TerminalNode PERCENT_TYPE() { return getToken(PLSQLParser.PERCENT_TYPE, 0); }
		public Type_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterType_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitType_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitType_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Type_specContext type_spec() throws RecognitionException {
		Type_specContext _localctx = new Type_specContext(_ctx, getState());
		enterRule(_localctx, 1048, RULE_type_spec);
		int _la;
		try {
			setState(8150);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1200,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8142);
				datatype();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8144);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1198,_ctx) ) {
				case 1:
					{
					setState(8143);
					match(REF);
					}
					break;
				}
				setState(8146);
				type_name();
				setState(8148);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1199,_ctx) ) {
				case 1:
					{
					setState(8147);
					_la = _input.LA(1);
					if ( !(_la==PERCENT_ROWTYPE || _la==PERCENT_TYPE) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DatatypeContext extends ParserRuleContext {
		public Native_datatype_elementContext native_datatype_element() {
			return getRuleContext(Native_datatype_elementContext.class,0);
		}
		public Precision_partContext precision_part() {
			return getRuleContext(Precision_partContext.class,0);
		}
		public TerminalNode WITH() { return getToken(PLSQLParser.WITH, 0); }
		public TerminalNode TIME() { return getToken(PLSQLParser.TIME, 0); }
		public TerminalNode ZONE() { return getToken(PLSQLParser.ZONE, 0); }
		public TerminalNode LOCAL() { return getToken(PLSQLParser.LOCAL, 0); }
		public TerminalNode INTERVAL() { return getToken(PLSQLParser.INTERVAL, 0); }
		public TerminalNode TO() { return getToken(PLSQLParser.TO, 0); }
		public TerminalNode YEAR() { return getToken(PLSQLParser.YEAR, 0); }
		public TerminalNode DAY() { return getToken(PLSQLParser.DAY, 0); }
		public TerminalNode MONTH() { return getToken(PLSQLParser.MONTH, 0); }
		public TerminalNode SECOND() { return getToken(PLSQLParser.SECOND, 0); }
		public List<TerminalNode> LEFT_PAREN() { return getTokens(PLSQLParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(PLSQLParser.LEFT_PAREN, i);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(PLSQLParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(PLSQLParser.RIGHT_PAREN, i);
		}
		public DatatypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_datatype; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterDatatype(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitDatatype(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitDatatype(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DatatypeContext datatype() throws RecognitionException {
		DatatypeContext _localctx = new DatatypeContext(_ctx, getState());
		enterRule(_localctx, 1050, RULE_datatype);
		int _la;
		try {
			setState(8180);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BOOLEAN:
			case CHAR:
			case CHARACTER:
			case CLOB:
			case DATE:
			case DAY:
			case DEC:
			case DECIMAL:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case FLOAT:
			case HOUR:
			case INT:
			case INTEGER:
			case LONG:
			case MINUTE:
			case MLSLABEL:
			case MONTH:
			case NATURAL:
			case NATURALN:
			case NCHAR:
			case NCLOB:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case RAW:
			case REAL:
			case ROWID:
			case SECOND:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SMALLINT:
			case STRING:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case UROWID:
			case VARCHAR:
			case VARCHAR2:
			case YEAR:
			case YMINTERVAL_UNCONSTRAINED:
				enterOuterAlt(_localctx, 1);
				{
				setState(8152);
				native_datatype_element();
				setState(8154);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1201,_ctx) ) {
				case 1:
					{
					setState(8153);
					precision_part();
					}
					break;
				}
				setState(8162);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1203,_ctx) ) {
				case 1:
					{
					setState(8156);
					match(WITH);
					setState(8158);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==LOCAL) {
						{
						setState(8157);
						match(LOCAL);
						}
					}

					setState(8160);
					match(TIME);
					setState(8161);
					match(ZONE);
					}
					break;
				}
				}
				break;
			case INTERVAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(8164);
				match(INTERVAL);
				setState(8165);
				_la = _input.LA(1);
				if ( !(_la==DAY || _la==YEAR) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(8170);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEFT_PAREN) {
					{
					setState(8166);
					match(LEFT_PAREN);
					setState(8167);
					expression(0);
					setState(8168);
					match(RIGHT_PAREN);
					}
				}

				setState(8172);
				match(TO);
				setState(8173);
				_la = _input.LA(1);
				if ( !(_la==MONTH || _la==SECOND) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(8178);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1205,_ctx) ) {
				case 1:
					{
					setState(8174);
					match(LEFT_PAREN);
					setState(8175);
					expression(0);
					setState(8176);
					match(RIGHT_PAREN);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Precision_partContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(PLSQLParser.LEFT_PAREN, 0); }
		public List<NumericContext> numeric() {
			return getRuleContexts(NumericContext.class);
		}
		public NumericContext numeric(int i) {
			return getRuleContext(NumericContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PLSQLParser.RIGHT_PAREN, 0); }
		public TerminalNode COMMA() { return getToken(PLSQLParser.COMMA, 0); }
		public TerminalNode CHAR() { return getToken(PLSQLParser.CHAR, 0); }
		public TerminalNode BYTE() { return getToken(PLSQLParser.BYTE, 0); }
		public Precision_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_precision_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterPrecision_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitPrecision_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitPrecision_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Precision_partContext precision_part() throws RecognitionException {
		Precision_partContext _localctx = new Precision_partContext(_ctx, getState());
		enterRule(_localctx, 1052, RULE_precision_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8182);
			match(LEFT_PAREN);
			setState(8183);
			numeric();
			setState(8186);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(8184);
				match(COMMA);
				setState(8185);
				numeric();
				}
			}

			setState(8189);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==BYTE || _la==CHAR) {
				{
				setState(8188);
				_la = _input.LA(1);
				if ( !(_la==BYTE || _la==CHAR) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(8191);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Native_datatype_elementContext extends ParserRuleContext {
		public TerminalNode BINARY_INTEGER() { return getToken(PLSQLParser.BINARY_INTEGER, 0); }
		public TerminalNode PLS_INTEGER() { return getToken(PLSQLParser.PLS_INTEGER, 0); }
		public TerminalNode NATURAL() { return getToken(PLSQLParser.NATURAL, 0); }
		public TerminalNode BINARY_FLOAT() { return getToken(PLSQLParser.BINARY_FLOAT, 0); }
		public TerminalNode BINARY_DOUBLE() { return getToken(PLSQLParser.BINARY_DOUBLE, 0); }
		public TerminalNode NATURALN() { return getToken(PLSQLParser.NATURALN, 0); }
		public TerminalNode POSITIVE() { return getToken(PLSQLParser.POSITIVE, 0); }
		public TerminalNode POSITIVEN() { return getToken(PLSQLParser.POSITIVEN, 0); }
		public TerminalNode SIGNTYPE() { return getToken(PLSQLParser.SIGNTYPE, 0); }
		public TerminalNode SIMPLE_INTEGER() { return getToken(PLSQLParser.SIMPLE_INTEGER, 0); }
		public TerminalNode NVARCHAR2() { return getToken(PLSQLParser.NVARCHAR2, 0); }
		public TerminalNode DEC() { return getToken(PLSQLParser.DEC, 0); }
		public TerminalNode INTEGER() { return getToken(PLSQLParser.INTEGER, 0); }
		public TerminalNode INT() { return getToken(PLSQLParser.INT, 0); }
		public TerminalNode NUMERIC() { return getToken(PLSQLParser.NUMERIC, 0); }
		public TerminalNode SMALLINT() { return getToken(PLSQLParser.SMALLINT, 0); }
		public TerminalNode NUMBER() { return getToken(PLSQLParser.NUMBER, 0); }
		public TerminalNode DECIMAL() { return getToken(PLSQLParser.DECIMAL, 0); }
		public TerminalNode DOUBLE() { return getToken(PLSQLParser.DOUBLE, 0); }
		public TerminalNode PRECISION() { return getToken(PLSQLParser.PRECISION, 0); }
		public TerminalNode FLOAT() { return getToken(PLSQLParser.FLOAT, 0); }
		public TerminalNode REAL() { return getToken(PLSQLParser.REAL, 0); }
		public TerminalNode NCHAR() { return getToken(PLSQLParser.NCHAR, 0); }
		public TerminalNode LONG() { return getToken(PLSQLParser.LONG, 0); }
		public TerminalNode RAW() { return getToken(PLSQLParser.RAW, 0); }
		public TerminalNode CHAR() { return getToken(PLSQLParser.CHAR, 0); }
		public TerminalNode CHARACTER() { return getToken(PLSQLParser.CHARACTER, 0); }
		public TerminalNode VARCHAR2() { return getToken(PLSQLParser.VARCHAR2, 0); }
		public TerminalNode VARCHAR() { return getToken(PLSQLParser.VARCHAR, 0); }
		public TerminalNode STRING() { return getToken(PLSQLParser.STRING, 0); }
		public TerminalNode BOOLEAN() { return getToken(PLSQLParser.BOOLEAN, 0); }
		public TerminalNode DATE() { return getToken(PLSQLParser.DATE, 0); }
		public TerminalNode ROWID() { return getToken(PLSQLParser.ROWID, 0); }
		public TerminalNode UROWID() { return getToken(PLSQLParser.UROWID, 0); }
		public TerminalNode YEAR() { return getToken(PLSQLParser.YEAR, 0); }
		public TerminalNode MONTH() { return getToken(PLSQLParser.MONTH, 0); }
		public TerminalNode DAY() { return getToken(PLSQLParser.DAY, 0); }
		public TerminalNode HOUR() { return getToken(PLSQLParser.HOUR, 0); }
		public TerminalNode MINUTE() { return getToken(PLSQLParser.MINUTE, 0); }
		public TerminalNode SECOND() { return getToken(PLSQLParser.SECOND, 0); }
		public TerminalNode TIMEZONE_HOUR() { return getToken(PLSQLParser.TIMEZONE_HOUR, 0); }
		public TerminalNode TIMEZONE_MINUTE() { return getToken(PLSQLParser.TIMEZONE_MINUTE, 0); }
		public TerminalNode TIMEZONE_REGION() { return getToken(PLSQLParser.TIMEZONE_REGION, 0); }
		public TerminalNode TIMEZONE_ABBR() { return getToken(PLSQLParser.TIMEZONE_ABBR, 0); }
		public TerminalNode TIMESTAMP() { return getToken(PLSQLParser.TIMESTAMP, 0); }
		public TerminalNode TIMESTAMP_UNCONSTRAINED() { return getToken(PLSQLParser.TIMESTAMP_UNCONSTRAINED, 0); }
		public TerminalNode TIMESTAMP_TZ_UNCONSTRAINED() { return getToken(PLSQLParser.TIMESTAMP_TZ_UNCONSTRAINED, 0); }
		public TerminalNode TIMESTAMP_LTZ_UNCONSTRAINED() { return getToken(PLSQLParser.TIMESTAMP_LTZ_UNCONSTRAINED, 0); }
		public TerminalNode YMINTERVAL_UNCONSTRAINED() { return getToken(PLSQLParser.YMINTERVAL_UNCONSTRAINED, 0); }
		public TerminalNode DSINTERVAL_UNCONSTRAINED() { return getToken(PLSQLParser.DSINTERVAL_UNCONSTRAINED, 0); }
		public TerminalNode BFILE() { return getToken(PLSQLParser.BFILE, 0); }
		public TerminalNode BLOB() { return getToken(PLSQLParser.BLOB, 0); }
		public TerminalNode CLOB() { return getToken(PLSQLParser.CLOB, 0); }
		public TerminalNode NCLOB() { return getToken(PLSQLParser.NCLOB, 0); }
		public TerminalNode MLSLABEL() { return getToken(PLSQLParser.MLSLABEL, 0); }
		public Native_datatype_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_native_datatype_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterNative_datatype_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitNative_datatype_element(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitNative_datatype_element(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Native_datatype_elementContext native_datatype_element() throws RecognitionException {
		Native_datatype_elementContext _localctx = new Native_datatype_elementContext(_ctx, getState());
		enterRule(_localctx, 1054, RULE_native_datatype_element);
		try {
			setState(8253);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BINARY_INTEGER:
				enterOuterAlt(_localctx, 1);
				{
				setState(8193);
				match(BINARY_INTEGER);
				}
				break;
			case PLS_INTEGER:
				enterOuterAlt(_localctx, 2);
				{
				setState(8194);
				match(PLS_INTEGER);
				}
				break;
			case NATURAL:
				enterOuterAlt(_localctx, 3);
				{
				setState(8195);
				match(NATURAL);
				}
				break;
			case BINARY_FLOAT:
				enterOuterAlt(_localctx, 4);
				{
				setState(8196);
				match(BINARY_FLOAT);
				}
				break;
			case BINARY_DOUBLE:
				enterOuterAlt(_localctx, 5);
				{
				setState(8197);
				match(BINARY_DOUBLE);
				}
				break;
			case NATURALN:
				enterOuterAlt(_localctx, 6);
				{
				setState(8198);
				match(NATURALN);
				}
				break;
			case POSITIVE:
				enterOuterAlt(_localctx, 7);
				{
				setState(8199);
				match(POSITIVE);
				}
				break;
			case POSITIVEN:
				enterOuterAlt(_localctx, 8);
				{
				setState(8200);
				match(POSITIVEN);
				}
				break;
			case SIGNTYPE:
				enterOuterAlt(_localctx, 9);
				{
				setState(8201);
				match(SIGNTYPE);
				}
				break;
			case SIMPLE_INTEGER:
				enterOuterAlt(_localctx, 10);
				{
				setState(8202);
				match(SIMPLE_INTEGER);
				}
				break;
			case NVARCHAR2:
				enterOuterAlt(_localctx, 11);
				{
				setState(8203);
				match(NVARCHAR2);
				}
				break;
			case DEC:
				enterOuterAlt(_localctx, 12);
				{
				setState(8204);
				match(DEC);
				}
				break;
			case INTEGER:
				enterOuterAlt(_localctx, 13);
				{
				setState(8205);
				match(INTEGER);
				}
				break;
			case INT:
				enterOuterAlt(_localctx, 14);
				{
				setState(8206);
				match(INT);
				}
				break;
			case NUMERIC:
				enterOuterAlt(_localctx, 15);
				{
				setState(8207);
				match(NUMERIC);
				}
				break;
			case SMALLINT:
				enterOuterAlt(_localctx, 16);
				{
				setState(8208);
				match(SMALLINT);
				}
				break;
			case NUMBER:
				enterOuterAlt(_localctx, 17);
				{
				setState(8209);
				match(NUMBER);
				}
				break;
			case DECIMAL:
				enterOuterAlt(_localctx, 18);
				{
				setState(8210);
				match(DECIMAL);
				}
				break;
			case DOUBLE:
				enterOuterAlt(_localctx, 19);
				{
				setState(8211);
				match(DOUBLE);
				setState(8213);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1209,_ctx) ) {
				case 1:
					{
					setState(8212);
					match(PRECISION);
					}
					break;
				}
				}
				break;
			case FLOAT:
				enterOuterAlt(_localctx, 20);
				{
				setState(8215);
				match(FLOAT);
				}
				break;
			case REAL:
				enterOuterAlt(_localctx, 21);
				{
				setState(8216);
				match(REAL);
				}
				break;
			case NCHAR:
				enterOuterAlt(_localctx, 22);
				{
				setState(8217);
				match(NCHAR);
				}
				break;
			case LONG:
				enterOuterAlt(_localctx, 23);
				{
				setState(8218);
				match(LONG);
				setState(8220);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1210,_ctx) ) {
				case 1:
					{
					setState(8219);
					match(RAW);
					}
					break;
				}
				}
				break;
			case CHAR:
				enterOuterAlt(_localctx, 24);
				{
				setState(8222);
				match(CHAR);
				}
				break;
			case CHARACTER:
				enterOuterAlt(_localctx, 25);
				{
				setState(8223);
				match(CHARACTER);
				}
				break;
			case VARCHAR2:
				enterOuterAlt(_localctx, 26);
				{
				setState(8224);
				match(VARCHAR2);
				}
				break;
			case VARCHAR:
				enterOuterAlt(_localctx, 27);
				{
				setState(8225);
				match(VARCHAR);
				}
				break;
			case STRING:
				enterOuterAlt(_localctx, 28);
				{
				setState(8226);
				match(STRING);
				}
				break;
			case RAW:
				enterOuterAlt(_localctx, 29);
				{
				setState(8227);
				match(RAW);
				}
				break;
			case BOOLEAN:
				enterOuterAlt(_localctx, 30);
				{
				setState(8228);
				match(BOOLEAN);
				}
				break;
			case DATE:
				enterOuterAlt(_localctx, 31);
				{
				setState(8229);
				match(DATE);
				}
				break;
			case ROWID:
				enterOuterAlt(_localctx, 32);
				{
				setState(8230);
				match(ROWID);
				}
				break;
			case UROWID:
				enterOuterAlt(_localctx, 33);
				{
				setState(8231);
				match(UROWID);
				}
				break;
			case YEAR:
				enterOuterAlt(_localctx, 34);
				{
				setState(8232);
				match(YEAR);
				}
				break;
			case MONTH:
				enterOuterAlt(_localctx, 35);
				{
				setState(8233);
				match(MONTH);
				}
				break;
			case DAY:
				enterOuterAlt(_localctx, 36);
				{
				setState(8234);
				match(DAY);
				}
				break;
			case HOUR:
				enterOuterAlt(_localctx, 37);
				{
				setState(8235);
				match(HOUR);
				}
				break;
			case MINUTE:
				enterOuterAlt(_localctx, 38);
				{
				setState(8236);
				match(MINUTE);
				}
				break;
			case SECOND:
				enterOuterAlt(_localctx, 39);
				{
				setState(8237);
				match(SECOND);
				}
				break;
			case TIMEZONE_HOUR:
				enterOuterAlt(_localctx, 40);
				{
				setState(8238);
				match(TIMEZONE_HOUR);
				}
				break;
			case TIMEZONE_MINUTE:
				enterOuterAlt(_localctx, 41);
				{
				setState(8239);
				match(TIMEZONE_MINUTE);
				}
				break;
			case TIMEZONE_REGION:
				enterOuterAlt(_localctx, 42);
				{
				setState(8240);
				match(TIMEZONE_REGION);
				}
				break;
			case TIMEZONE_ABBR:
				enterOuterAlt(_localctx, 43);
				{
				setState(8241);
				match(TIMEZONE_ABBR);
				}
				break;
			case TIMESTAMP:
				enterOuterAlt(_localctx, 44);
				{
				setState(8242);
				match(TIMESTAMP);
				}
				break;
			case TIMESTAMP_UNCONSTRAINED:
				enterOuterAlt(_localctx, 45);
				{
				setState(8243);
				match(TIMESTAMP_UNCONSTRAINED);
				}
				break;
			case TIMESTAMP_TZ_UNCONSTRAINED:
				enterOuterAlt(_localctx, 46);
				{
				setState(8244);
				match(TIMESTAMP_TZ_UNCONSTRAINED);
				}
				break;
			case TIMESTAMP_LTZ_UNCONSTRAINED:
				enterOuterAlt(_localctx, 47);
				{
				setState(8245);
				match(TIMESTAMP_LTZ_UNCONSTRAINED);
				}
				break;
			case YMINTERVAL_UNCONSTRAINED:
				enterOuterAlt(_localctx, 48);
				{
				setState(8246);
				match(YMINTERVAL_UNCONSTRAINED);
				}
				break;
			case DSINTERVAL_UNCONSTRAINED:
				enterOuterAlt(_localctx, 49);
				{
				setState(8247);
				match(DSINTERVAL_UNCONSTRAINED);
				}
				break;
			case BFILE:
				enterOuterAlt(_localctx, 50);
				{
				setState(8248);
				match(BFILE);
				}
				break;
			case BLOB:
				enterOuterAlt(_localctx, 51);
				{
				setState(8249);
				match(BLOB);
				}
				break;
			case CLOB:
				enterOuterAlt(_localctx, 52);
				{
				setState(8250);
				match(CLOB);
				}
				break;
			case NCLOB:
				enterOuterAlt(_localctx, 53);
				{
				setState(8251);
				match(NCLOB);
				}
				break;
			case MLSLABEL:
				enterOuterAlt(_localctx, 54);
				{
				setState(8252);
				match(MLSLABEL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Bind_variableContext extends ParserRuleContext {
		public List<TerminalNode> BINDVAR() { return getTokens(PLSQLParser.BINDVAR); }
		public TerminalNode BINDVAR(int i) {
			return getToken(PLSQLParser.BINDVAR, i);
		}
		public List<TerminalNode> COLON() { return getTokens(PLSQLParser.COLON); }
		public TerminalNode COLON(int i) {
			return getToken(PLSQLParser.COLON, i);
		}
		public List<TerminalNode> UNSIGNED_INTEGER() { return getTokens(PLSQLParser.UNSIGNED_INTEGER); }
		public TerminalNode UNSIGNED_INTEGER(int i) {
			return getToken(PLSQLParser.UNSIGNED_INTEGER, i);
		}
		public List<TerminalNode> PERIOD() { return getTokens(PLSQLParser.PERIOD); }
		public TerminalNode PERIOD(int i) {
			return getToken(PLSQLParser.PERIOD, i);
		}
		public List<General_elementContext> general_element() {
			return getRuleContexts(General_elementContext.class);
		}
		public General_elementContext general_element(int i) {
			return getRuleContext(General_elementContext.class,i);
		}
		public TerminalNode INDICATOR() { return getToken(PLSQLParser.INDICATOR, 0); }
		public Bind_variableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bind_variable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterBind_variable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitBind_variable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitBind_variable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Bind_variableContext bind_variable() throws RecognitionException {
		Bind_variableContext _localctx = new Bind_variableContext(_ctx, getState());
		enterRule(_localctx, 1056, RULE_bind_variable);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(8258);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BINDVAR:
				{
				setState(8255);
				match(BINDVAR);
				}
				break;
			case COLON:
				{
				setState(8256);
				match(COLON);
				setState(8257);
				match(UNSIGNED_INTEGER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(8268);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1215,_ctx) ) {
			case 1:
				{
				setState(8261);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INDICATOR) {
					{
					setState(8260);
					match(INDICATOR);
					}
				}

				setState(8266);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case BINDVAR:
					{
					setState(8263);
					match(BINDVAR);
					}
					break;
				case COLON:
					{
					setState(8264);
					match(COLON);
					setState(8265);
					match(UNSIGNED_INTEGER);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			setState(8274);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,1216,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(8270);
					match(PERIOD);
					setState(8271);
					general_element();
					}
					} 
				}
				setState(8276);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1216,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class General_elementContext extends ParserRuleContext {
		public General_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_general_element; }
	 
		public General_elementContext() { }
		public void copyFrom(General_elementContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class FuncCallContext extends General_elementContext {
		public Dot_idContext dot_id() {
			return getRuleContext(Dot_idContext.class,0);
		}
		public Function_argumentContext function_argument() {
			return getRuleContext(Function_argumentContext.class,0);
		}
		public FuncCallContext(General_elementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterFuncCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitFuncCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitFuncCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class IdentifierContext extends General_elementContext {
		public Dot_idContext dot_id() {
			return getRuleContext(Dot_idContext.class,0);
		}
		public IdentifierContext(General_elementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterIdentifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitIdentifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitIdentifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final General_elementContext general_element() throws RecognitionException {
		General_elementContext _localctx = new General_elementContext(_ctx, getState());
		enterRule(_localctx, 1058, RULE_general_element);
		try {
			setState(8281);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1217,_ctx) ) {
			case 1:
				_localctx = new FuncCallContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(8277);
				dot_id();
				setState(8278);
				function_argument();
				}
				break;
			case 2:
				_localctx = new IdentifierContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(8280);
				dot_id();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_elementContext extends ParserRuleContext {
		public Dot_idContext dot_id() {
			return getRuleContext(Dot_idContext.class,0);
		}
		public Table_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterTable_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitTable_element(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitTable_element(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_elementContext table_element() throws RecognitionException {
		Table_elementContext _localctx = new Table_elementContext(_ctx, getState());
		enterRule(_localctx, 1060, RULE_table_element);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8283);
			dot_id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstantContext extends ParserRuleContext {
		public TerminalNode TIMESTAMP() { return getToken(PLSQLParser.TIMESTAMP, 0); }
		public List<Quoted_stringContext> quoted_string() {
			return getRuleContexts(Quoted_stringContext.class);
		}
		public Quoted_stringContext quoted_string(int i) {
			return getRuleContext(Quoted_stringContext.class,i);
		}
		public List<Bind_variableContext> bind_variable() {
			return getRuleContexts(Bind_variableContext.class);
		}
		public Bind_variableContext bind_variable(int i) {
			return getRuleContext(Bind_variableContext.class,i);
		}
		public TerminalNode AT() { return getToken(PLSQLParser.AT, 0); }
		public TerminalNode TIME() { return getToken(PLSQLParser.TIME, 0); }
		public TerminalNode ZONE() { return getToken(PLSQLParser.ZONE, 0); }
		public TerminalNode INTERVAL() { return getToken(PLSQLParser.INTERVAL, 0); }
		public List<TerminalNode> DAY() { return getTokens(PLSQLParser.DAY); }
		public TerminalNode DAY(int i) {
			return getToken(PLSQLParser.DAY, i);
		}
		public List<TerminalNode> HOUR() { return getTokens(PLSQLParser.HOUR); }
		public TerminalNode HOUR(int i) {
			return getToken(PLSQLParser.HOUR, i);
		}
		public List<TerminalNode> MINUTE() { return getTokens(PLSQLParser.MINUTE); }
		public TerminalNode MINUTE(int i) {
			return getToken(PLSQLParser.MINUTE, i);
		}
		public List<TerminalNode> SECOND() { return getTokens(PLSQLParser.SECOND); }
		public TerminalNode SECOND(int i) {
			return getToken(PLSQLParser.SECOND, i);
		}
		public General_elementContext general_element() {
			return getRuleContext(General_elementContext.class,0);
		}
		public List<TerminalNode> LEFT_PAREN() { return getTokens(PLSQLParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(PLSQLParser.LEFT_PAREN, i);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(PLSQLParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(PLSQLParser.RIGHT_PAREN, i);
		}
		public TerminalNode TO() { return getToken(PLSQLParser.TO, 0); }
		public List<TerminalNode> UNSIGNED_INTEGER() { return getTokens(PLSQLParser.UNSIGNED_INTEGER); }
		public TerminalNode UNSIGNED_INTEGER(int i) {
			return getToken(PLSQLParser.UNSIGNED_INTEGER, i);
		}
		public TerminalNode COMMA() { return getToken(PLSQLParser.COMMA, 0); }
		public NumericContext numeric() {
			return getRuleContext(NumericContext.class,0);
		}
		public TerminalNode DATE() { return getToken(PLSQLParser.DATE, 0); }
		public TerminalNode NULL() { return getToken(PLSQLParser.NULL, 0); }
		public TerminalNode TRUE() { return getToken(PLSQLParser.TRUE, 0); }
		public TerminalNode FALSE() { return getToken(PLSQLParser.FALSE, 0); }
		public TerminalNode DBTIMEZONE() { return getToken(PLSQLParser.DBTIMEZONE, 0); }
		public TerminalNode SESSIONTIMEZONE() { return getToken(PLSQLParser.SESSIONTIMEZONE, 0); }
		public TerminalNode MINVALUE() { return getToken(PLSQLParser.MINVALUE, 0); }
		public TerminalNode MAXVALUE() { return getToken(PLSQLParser.MAXVALUE, 0); }
		public TerminalNode DEFAULT() { return getToken(PLSQLParser.DEFAULT, 0); }
		public ConstantContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constant; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterConstant(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitConstant(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitConstant(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstantContext constant() throws RecognitionException {
		ConstantContext _localctx = new ConstantContext(_ctx, getState());
		enterRule(_localctx, 1062, RULE_constant);
		int _la;
		try {
			setState(8347);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TIMESTAMP:
				enterOuterAlt(_localctx, 1);
				{
				setState(8285);
				match(TIMESTAMP);
				setState(8288);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case NATIONAL_CHAR_STRING_LIT:
				case CHAR_STRING:
					{
					setState(8286);
					quoted_string();
					}
					break;
				case BINDVAR:
				case COLON:
					{
					setState(8287);
					bind_variable();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(8294);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1219,_ctx) ) {
				case 1:
					{
					setState(8290);
					match(AT);
					setState(8291);
					match(TIME);
					setState(8292);
					match(ZONE);
					setState(8293);
					quoted_string();
					}
					break;
				}
				}
				break;
			case INTERVAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(8296);
				match(INTERVAL);
				setState(8300);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case NATIONAL_CHAR_STRING_LIT:
				case CHAR_STRING:
					{
					setState(8297);
					quoted_string();
					}
					break;
				case BINDVAR:
				case COLON:
					{
					setState(8298);
					bind_variable();
					}
					break;
				case A_LETTER:
				case ADD:
				case AFTER:
				case AGENT:
				case AGGREGATE:
				case ANALYZE:
				case ARRAY:
				case ASSOCIATE:
				case AT:
				case ATTRIBUTE:
				case AUDIT:
				case AUTHID:
				case AUTO:
				case AUTOMATIC:
				case AUTONOMOUS_TRANSACTION:
				case BATCH:
				case BEFORE:
				case BFILE:
				case BINARY_DOUBLE:
				case BINARY_FLOAT:
				case BINARY_INTEGER:
				case BUILD:
				case BLOB:
				case BLOCK:
				case BODY:
				case BOOLEAN:
				case BOTH:
				case BULK:
				case BYTE:
				case C_LETTER:
				case CALL:
				case CANONICAL:
				case CASCADE:
				case CAST:
				case CHAR:
				case CHAR_CS:
				case CHARACTER:
				case CHR:
				case CLOB:
				case CLOSE:
				case CLUSTER:
				case COALESCE:
				case COLLECT:
				case COLUMNS:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case COMPATIBILITY:
				case COMPILE:
				case COMPLETE:
				case COMPOUND:
				case CONCAT:
				case CONSTANT:
				case CONSTRAINT:
				case CONSTRAINTS:
				case CONSTRUCTOR:
				case CONTENT:
				case CONTEXT:
				case CONTINUE:
				case CONVERT:
				case CORRUPT_XID:
				case CORRUPT_XID_ALL:
				case COST:
				case COUNT:
				case CROSS:
				case CUBE:
				case CURRENT_USER:
				case CURSOR:
				case CUSTOMDATUM:
				case CYCLE:
				case DATA:
				case DATABASE:
				case DATE:
				case DAY:
				case DB_ROLE_CHANGE:
				case DBTIMEZONE:
				case DDL:
				case DEBUG:
				case DEC:
				case DECIMAL:
				case DECODE:
				case DECOMPOSE:
				case DECREMENT:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DEMAND:
				case DETERMINISTIC:
				case DIMENSION:
				case DISABLE:
				case DISASSOCIATE:
				case DOCUMENT:
				case DOUBLE:
				case DSINTERVAL_UNCONSTRAINED:
				case EACH:
				case EDITIONING:
				case ELEMENT:
				case EMPTY:
				case ENABLE:
				case ENCODING:
				case ENFORCED:
				case ENTITYESCAPING:
				case ERR:
				case ERRORS:
				case ESCAPE:
				case EVALNAME:
				case EXCEPTION:
				case EXCEPTION_INIT:
				case EXCEPTIONS:
				case EXCLUDE:
				case EXECUTE:
				case EXIT:
				case EXPLAIN:
				case EXTERNAL:
				case EXTRACT:
				case FAILURE:
				case FAST:
				case FINAL:
				case FIRST:
				case FIRST_VALUE:
				case FLOAT:
				case FOLLOWING:
				case FOLLOWS:
				case FORALL:
				case FORCE:
				case FULL:
				case FUNCTION:
				case GROUPING:
				case HASH:
				case HIDE:
				case HOUR:
				case IGNORE:
				case IMMEDIATE:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDENT:
				case INDEXED:
				case INDICATOR:
				case INDICES:
				case INFINITE:
				case INLINE:
				case INNER:
				case INOUT:
				case INSTANTIABLE:
				case INSTEAD:
				case INT:
				case INTEGER:
				case INTERVAL:
				case INVALIDATE:
				case ISOLATION:
				case ITERATE:
				case JAVA:
				case JOIN:
				case KEEP:
				case LANGUAGE:
				case LAST:
				case LAST_VALUE:
				case LEADING:
				case LEFT:
				case LEVEL:
				case LIBRARY:
				case LIKE2:
				case LIKE4:
				case LIKEC:
				case LIMIT:
				case LIST:
				case LOCAL:
				case LOCKED:
				case LOG:
				case LOGOFF:
				case LOGON:
				case LONG:
				case LOOP:
				case MAIN:
				case MAP:
				case MASTER:
				case MATCHED:
				case MAXVALUE:
				case MEASURES:
				case MEMBER:
				case MERGE:
				case MINUTE:
				case MINVALUE:
				case MLSLABEL:
				case MODEL:
				case MODIFY:
				case MONTH:
				case MULTISET:
				case NAME:
				case NAN:
				case NATURAL:
				case NATURALN:
				case NAV:
				case NCHAR:
				case NCHAR_CS:
				case NCLOB:
				case NESTED:
				case NEVER:
				case NEW:
				case NO:
				case NOAUDIT:
				case NOCOPY:
				case NOCYCLE:
				case NOENTITYESCAPING:
				case NONE:
				case NOSCHEMACHECK:
				case NVL:
				case NULLS:
				case NUMBER:
				case NUMERIC:
				case NVARCHAR2:
				case MATERIALIZED:
				case OBJECT:
				case OFF:
				case OID:
				case OLD:
				case ONLY:
				case OPEN:
				case ORADATA:
				case ORDINALITY:
				case OSERROR:
				case OUT:
				case OUTER:
				case OVER:
				case OVERRIDING:
				case PACKAGE:
				case PARALLEL_ENABLE:
				case PARAMETERS:
				case PARENT:
				case PARTITION:
				case PASSING:
				case PATH:
				case PIPELINED:
				case PLAN:
				case PLS_INTEGER:
				case POSITIVE:
				case POSITIVEN:
				case PRAGMA:
				case PREBUILT:
				case PRECEDING:
				case PRECISION:
				case PRESENT:
				case PUBLIC:
				case RAISE:
				case RANGE:
				case RAW:
				case READ:
				case REAL:
				case RECORD:
				case REDUCED:
				case REF:
				case REFERENCE:
				case REFERENCING:
				case REFRESH:
				case REJECT:
				case RELIES_ON:
				case RENAME:
				case REPLACE:
				case RESPECT:
				case RESTRICT_REFERENCES:
				case RESULT:
				case RESULT_CACHE:
				case RETURN:
				case RETURNING:
				case REUSE:
				case REVERSE:
				case REWRITE:
				case RIGHT:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROW:
				case ROWID:
				case ROWS:
				case RULES:
				case SAMPLE:
				case SAVE:
				case SAVEPOINT:
				case SCHEMA:
				case SCHEMACHECK:
				case SCN:
				case SECOND:
				case SEED:
				case SEGMENT:
				case SELF:
				case SEQUENTIAL:
				case SERIALIZABLE:
				case SERIALLY_REUSABLE:
				case SERVERERROR:
				case SESSIONTIMEZONE:
				case SET:
				case SETS:
				case SETTINGS:
				case SHOW:
				case SHUTDOWN:
				case SIBLINGS:
				case SIGNTYPE:
				case SIMPLE_INTEGER:
				case SINGLE:
				case SIZE:
				case SKIP_:
				case SMALLINT:
				case SNAPSHOT:
				case SOME:
				case SPECIFICATION:
				case SQLDATA:
				case SQLERROR:
				case STANDALONE:
				case STARTUP:
				case STATEMENT:
				case STATEMENT_ID:
				case STATIC:
				case STATISTICS:
				case STRING:
				case SUBMULTISET:
				case SUBPARTITION:
				case SUBSTITUTABLE:
				case SUBSTRING:
				case SUBTYPE:
				case SUCCESS:
				case SUSPEND:
				case TABLES:
				case TIME:
				case TIMESTAMP:
				case TIMESTAMP_LTZ_UNCONSTRAINED:
				case TIMESTAMP_TZ_UNCONSTRAINED:
				case TIMESTAMP_UNCONSTRAINED:
				case TIMEZONE_ABBR:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TIMEZONE_REGION:
				case TO_CHAR:
				case TO_DATE:
				case TRAILING:
				case TRANSACTION:
				case TRANSLATE:
				case TREAT:
				case TRIGGER:
				case TRIM:
				case TRUNCATE:
				case TRUSTED:
				case TYPE:
				case UNBOUNDED:
				case UNDER:
				case UNLIMITED:
				case UNTIL:
				case UPDATED:
				case UPSERT:
				case UROWID:
				case USE:
				case VALIDATE:
				case VALUE:
				case VARCHAR:
				case VARCHAR2:
				case VARIABLE:
				case VARRAY:
				case VARYING:
				case VERBOSE:
				case VERSION:
				case VERSIONS:
				case VIEW:
				case WAIT:
				case WARNING:
				case WELLFORMED:
				case WHENEVER:
				case WHILE:
				case WITHOUT:
				case WITHIN:
				case WORK:
				case WRITE:
				case XML:
				case XMLAGG:
				case XMLATTRIBUTES:
				case XMLCAST:
				case XMLCOLATTVAL:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLQUERY:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case YEAR:
				case YES:
				case YMINTERVAL_UNCONSTRAINED:
				case ZONE:
				case PREDICTION:
				case PREDICTION_BOUNDS:
				case PREDICTION_COST:
				case PREDICTION_DETAILS:
				case PREDICTION_PROBABILITY:
				case PREDICTION_SET:
				case CUME_DIST:
				case DENSE_RANK:
				case LISTAGG:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case RANK:
				case AVG:
				case CORR:
				case LAG:
				case LEAD:
				case MAX:
				case MEDIAN:
				case MIN:
				case NTILE:
				case RATIO_TO_REPORT:
				case ROW_NUMBER:
				case SUM:
				case VARIANCE:
				case REGR_:
				case STDDEV:
				case VAR_:
				case COVAR_:
				case DELIMITED_ID:
				case REGULAR_ID:
					{
					setState(8299);
					general_element();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(8302);
				_la = _input.LA(1);
				if ( !(_la==DAY || _la==HOUR || _la==MINUTE || _la==SECOND) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(8316);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1224,_ctx) ) {
				case 1:
					{
					setState(8303);
					match(LEFT_PAREN);
					setState(8306);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case UNSIGNED_INTEGER:
						{
						setState(8304);
						match(UNSIGNED_INTEGER);
						}
						break;
					case BINDVAR:
					case COLON:
						{
						setState(8305);
						bind_variable();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(8313);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(8308);
						match(COMMA);
						setState(8311);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case UNSIGNED_INTEGER:
							{
							setState(8309);
							match(UNSIGNED_INTEGER);
							}
							break;
						case BINDVAR:
						case COLON:
							{
							setState(8310);
							bind_variable();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
					}

					setState(8315);
					match(RIGHT_PAREN);
					}
					break;
				}
				setState(8333);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1228,_ctx) ) {
				case 1:
					{
					setState(8318);
					match(TO);
					setState(8331);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case DAY:
						{
						setState(8319);
						match(DAY);
						}
						break;
					case HOUR:
						{
						setState(8320);
						match(HOUR);
						}
						break;
					case MINUTE:
						{
						setState(8321);
						match(MINUTE);
						}
						break;
					case SECOND:
						{
						setState(8322);
						match(SECOND);
						setState(8329);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,1226,_ctx) ) {
						case 1:
							{
							setState(8323);
							match(LEFT_PAREN);
							setState(8326);
							_errHandler.sync(this);
							switch (_input.LA(1)) {
							case UNSIGNED_INTEGER:
								{
								setState(8324);
								match(UNSIGNED_INTEGER);
								}
								break;
							case BINDVAR:
							case COLON:
								{
								setState(8325);
								bind_variable();
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							setState(8328);
							match(RIGHT_PAREN);
							}
							break;
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				}
				}
				break;
			case UNSIGNED_INTEGER:
			case APPROXIMATE_NUM_LIT:
				enterOuterAlt(_localctx, 3);
				{
				setState(8335);
				numeric();
				}
				break;
			case DATE:
				enterOuterAlt(_localctx, 4);
				{
				setState(8336);
				match(DATE);
				setState(8337);
				quoted_string();
				}
				break;
			case NATIONAL_CHAR_STRING_LIT:
			case CHAR_STRING:
				enterOuterAlt(_localctx, 5);
				{
				setState(8338);
				quoted_string();
				}
				break;
			case NULL:
				enterOuterAlt(_localctx, 6);
				{
				setState(8339);
				match(NULL);
				}
				break;
			case TRUE:
				enterOuterAlt(_localctx, 7);
				{
				setState(8340);
				match(TRUE);
				}
				break;
			case FALSE:
				enterOuterAlt(_localctx, 8);
				{
				setState(8341);
				match(FALSE);
				}
				break;
			case DBTIMEZONE:
				enterOuterAlt(_localctx, 9);
				{
				setState(8342);
				match(DBTIMEZONE);
				}
				break;
			case SESSIONTIMEZONE:
				enterOuterAlt(_localctx, 10);
				{
				setState(8343);
				match(SESSIONTIMEZONE);
				}
				break;
			case MINVALUE:
				enterOuterAlt(_localctx, 11);
				{
				setState(8344);
				match(MINVALUE);
				}
				break;
			case MAXVALUE:
				enterOuterAlt(_localctx, 12);
				{
				setState(8345);
				match(MAXVALUE);
				}
				break;
			case DEFAULT:
				enterOuterAlt(_localctx, 13);
				{
				setState(8346);
				match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NumericContext extends ParserRuleContext {
		public TerminalNode UNSIGNED_INTEGER() { return getToken(PLSQLParser.UNSIGNED_INTEGER, 0); }
		public TerminalNode APPROXIMATE_NUM_LIT() { return getToken(PLSQLParser.APPROXIMATE_NUM_LIT, 0); }
		public NumericContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_numeric; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterNumeric(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitNumeric(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitNumeric(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NumericContext numeric() throws RecognitionException {
		NumericContext _localctx = new NumericContext(_ctx, getState());
		enterRule(_localctx, 1064, RULE_numeric);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8349);
			_la = _input.LA(1);
			if ( !(_la==UNSIGNED_INTEGER || _la==APPROXIMATE_NUM_LIT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Numeric_negativeContext extends ParserRuleContext {
		public TerminalNode MINUS_SIGN() { return getToken(PLSQLParser.MINUS_SIGN, 0); }
		public NumericContext numeric() {
			return getRuleContext(NumericContext.class,0);
		}
		public Numeric_negativeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_numeric_negative; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterNumeric_negative(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitNumeric_negative(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitNumeric_negative(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Numeric_negativeContext numeric_negative() throws RecognitionException {
		Numeric_negativeContext _localctx = new Numeric_negativeContext(_ctx, getState());
		enterRule(_localctx, 1066, RULE_numeric_negative);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8351);
			match(MINUS_SIGN);
			setState(8352);
			numeric();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Quoted_stringContext extends ParserRuleContext {
		public TerminalNode CHAR_STRING() { return getToken(PLSQLParser.CHAR_STRING, 0); }
		public TerminalNode NATIONAL_CHAR_STRING_LIT() { return getToken(PLSQLParser.NATIONAL_CHAR_STRING_LIT, 0); }
		public Quoted_stringContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_quoted_string; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterQuoted_string(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitQuoted_string(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitQuoted_string(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Quoted_stringContext quoted_string() throws RecognitionException {
		Quoted_stringContext _localctx = new Quoted_stringContext(_ctx, getState());
		enterRule(_localctx, 1068, RULE_quoted_string);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8354);
			_la = _input.LA(1);
			if ( !(_la==NATIONAL_CHAR_STRING_LIT || _la==CHAR_STRING) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class R_idContext extends ParserRuleContext {
		public Dot_idContext dot_id() {
			return getRuleContext(Dot_idContext.class,0);
		}
		public R_idContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_r_id; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterR_id(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitR_id(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitR_id(this);
			else return visitor.visitChildren(this);
		}
	}

	public final R_idContext r_id() throws RecognitionException {
		R_idContext _localctx = new R_idContext(_ctx, getState());
		enterRule(_localctx, 1070, RULE_r_id);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8356);
			dot_id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Id_expressionContext extends ParserRuleContext {
		public Regular_idContext regular_id() {
			return getRuleContext(Regular_idContext.class,0);
		}
		public TerminalNode DELIMITED_ID() { return getToken(PLSQLParser.DELIMITED_ID, 0); }
		public Id_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_id_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterId_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitId_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitId_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Id_expressionContext id_expression() throws RecognitionException {
		Id_expressionContext _localctx = new Id_expressionContext(_ctx, getState());
		enterRule(_localctx, 1072, RULE_id_expression);
		try {
			setState(8360);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BUILD:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPLETE:
			case COMPOUND:
			case CONCAT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECODE:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DEMAND:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case EDITIONING:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENFORCED:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FAST:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LIST:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MASTER:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEVER:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NVL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case MATERIALIZED:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PREBUILT:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PUBLIC:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REDUCED:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REFRESH:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case REWRITE:
			case RIGHT:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SIZE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBSTRING:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TABLES:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TO_CHAR:
			case TO_DATE:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TRUSTED:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERBOSE:
			case VERSION:
			case VERSIONS:
			case VIEW:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHOUT:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(8358);
				regular_id();
				}
				break;
			case DELIMITED_ID:
				enterOuterAlt(_localctx, 2);
				{
				setState(8359);
				match(DELIMITED_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Not_equal_opContext extends ParserRuleContext {
		public TerminalNode NOT_EQUAL_OP() { return getToken(PLSQLParser.NOT_EQUAL_OP, 0); }
		public TerminalNode LESS_THAN_OP() { return getToken(PLSQLParser.LESS_THAN_OP, 0); }
		public TerminalNode GREATER_THAN_OP() { return getToken(PLSQLParser.GREATER_THAN_OP, 0); }
		public TerminalNode EXCLAMATION_OPERATOR_PART() { return getToken(PLSQLParser.EXCLAMATION_OPERATOR_PART, 0); }
		public TerminalNode EQUALS_OP() { return getToken(PLSQLParser.EQUALS_OP, 0); }
		public TerminalNode CARRET_OPERATOR_PART() { return getToken(PLSQLParser.CARRET_OPERATOR_PART, 0); }
		public Not_equal_opContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_not_equal_op; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterNot_equal_op(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitNot_equal_op(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitNot_equal_op(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Not_equal_opContext not_equal_op() throws RecognitionException {
		Not_equal_opContext _localctx = new Not_equal_opContext(_ctx, getState());
		enterRule(_localctx, 1074, RULE_not_equal_op);
		try {
			setState(8369);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NOT_EQUAL_OP:
				enterOuterAlt(_localctx, 1);
				{
				setState(8362);
				match(NOT_EQUAL_OP);
				}
				break;
			case LESS_THAN_OP:
				enterOuterAlt(_localctx, 2);
				{
				setState(8363);
				match(LESS_THAN_OP);
				setState(8364);
				match(GREATER_THAN_OP);
				}
				break;
			case EXCLAMATION_OPERATOR_PART:
				enterOuterAlt(_localctx, 3);
				{
				setState(8365);
				match(EXCLAMATION_OPERATOR_PART);
				setState(8366);
				match(EQUALS_OP);
				}
				break;
			case CARRET_OPERATOR_PART:
				enterOuterAlt(_localctx, 4);
				{
				setState(8367);
				match(CARRET_OPERATOR_PART);
				setState(8368);
				match(EQUALS_OP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Greater_than_or_equals_opContext extends ParserRuleContext {
		public TerminalNode GREATER_THAN_OR_EQUALS_OP() { return getToken(PLSQLParser.GREATER_THAN_OR_EQUALS_OP, 0); }
		public TerminalNode GREATER_THAN_OP() { return getToken(PLSQLParser.GREATER_THAN_OP, 0); }
		public TerminalNode EQUALS_OP() { return getToken(PLSQLParser.EQUALS_OP, 0); }
		public Greater_than_or_equals_opContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_greater_than_or_equals_op; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterGreater_than_or_equals_op(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitGreater_than_or_equals_op(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitGreater_than_or_equals_op(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Greater_than_or_equals_opContext greater_than_or_equals_op() throws RecognitionException {
		Greater_than_or_equals_opContext _localctx = new Greater_than_or_equals_opContext(_ctx, getState());
		enterRule(_localctx, 1076, RULE_greater_than_or_equals_op);
		try {
			setState(8374);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case GREATER_THAN_OR_EQUALS_OP:
				enterOuterAlt(_localctx, 1);
				{
				setState(8371);
				match(GREATER_THAN_OR_EQUALS_OP);
				}
				break;
			case GREATER_THAN_OP:
				enterOuterAlt(_localctx, 2);
				{
				setState(8372);
				match(GREATER_THAN_OP);
				setState(8373);
				match(EQUALS_OP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Less_than_or_equals_opContext extends ParserRuleContext {
		public TerminalNode LESS_THAN_OR_EQUALS_OP() { return getToken(PLSQLParser.LESS_THAN_OR_EQUALS_OP, 0); }
		public TerminalNode LESS_THAN_OP() { return getToken(PLSQLParser.LESS_THAN_OP, 0); }
		public TerminalNode EQUALS_OP() { return getToken(PLSQLParser.EQUALS_OP, 0); }
		public Less_than_or_equals_opContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_less_than_or_equals_op; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterLess_than_or_equals_op(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitLess_than_or_equals_op(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitLess_than_or_equals_op(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Less_than_or_equals_opContext less_than_or_equals_op() throws RecognitionException {
		Less_than_or_equals_opContext _localctx = new Less_than_or_equals_opContext(_ctx, getState());
		enterRule(_localctx, 1078, RULE_less_than_or_equals_op);
		try {
			setState(8379);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LESS_THAN_OR_EQUALS_OP:
				enterOuterAlt(_localctx, 1);
				{
				setState(8376);
				match(LESS_THAN_OR_EQUALS_OP);
				}
				break;
			case LESS_THAN_OP:
				enterOuterAlt(_localctx, 2);
				{
				setState(8377);
				match(LESS_THAN_OP);
				setState(8378);
				match(EQUALS_OP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Concatenation_opContext extends ParserRuleContext {
		public TerminalNode CONCATENATION_OP() { return getToken(PLSQLParser.CONCATENATION_OP, 0); }
		public List<TerminalNode> VERTICAL_BAR() { return getTokens(PLSQLParser.VERTICAL_BAR); }
		public TerminalNode VERTICAL_BAR(int i) {
			return getToken(PLSQLParser.VERTICAL_BAR, i);
		}
		public Concatenation_opContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_concatenation_op; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterConcatenation_op(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitConcatenation_op(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitConcatenation_op(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Concatenation_opContext concatenation_op() throws RecognitionException {
		Concatenation_opContext _localctx = new Concatenation_opContext(_ctx, getState());
		enterRule(_localctx, 1080, RULE_concatenation_op);
		try {
			setState(8384);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CONCATENATION_OP:
				enterOuterAlt(_localctx, 1);
				{
				setState(8381);
				match(CONCATENATION_OP);
				}
				break;
			case VERTICAL_BAR:
				enterOuterAlt(_localctx, 2);
				{
				setState(8382);
				match(VERTICAL_BAR);
				setState(8383);
				match(VERTICAL_BAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Outer_join_signContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(PLSQLParser.LEFT_PAREN, 0); }
		public TerminalNode PLUS_SIGN() { return getToken(PLSQLParser.PLUS_SIGN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PLSQLParser.RIGHT_PAREN, 0); }
		public Outer_join_signContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_outer_join_sign; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterOuter_join_sign(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitOuter_join_sign(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitOuter_join_sign(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Outer_join_signContext outer_join_sign() throws RecognitionException {
		Outer_join_signContext _localctx = new Outer_join_signContext(_ctx, getState());
		enterRule(_localctx, 1082, RULE_outer_join_sign);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8386);
			match(LEFT_PAREN);
			setState(8387);
			match(PLUS_SIGN);
			setState(8388);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Regular_idContext extends ParserRuleContext {
		public TerminalNode REGULAR_ID() { return getToken(PLSQLParser.REGULAR_ID, 0); }
		public TerminalNode A_LETTER() { return getToken(PLSQLParser.A_LETTER, 0); }
		public TerminalNode ADD() { return getToken(PLSQLParser.ADD, 0); }
		public TerminalNode AFTER() { return getToken(PLSQLParser.AFTER, 0); }
		public TerminalNode AGENT() { return getToken(PLSQLParser.AGENT, 0); }
		public TerminalNode AGGREGATE() { return getToken(PLSQLParser.AGGREGATE, 0); }
		public TerminalNode ANALYZE() { return getToken(PLSQLParser.ANALYZE, 0); }
		public TerminalNode ARRAY() { return getToken(PLSQLParser.ARRAY, 0); }
		public TerminalNode ASSOCIATE() { return getToken(PLSQLParser.ASSOCIATE, 0); }
		public TerminalNode AT() { return getToken(PLSQLParser.AT, 0); }
		public TerminalNode ATTRIBUTE() { return getToken(PLSQLParser.ATTRIBUTE, 0); }
		public TerminalNode AUDIT() { return getToken(PLSQLParser.AUDIT, 0); }
		public TerminalNode AUTHID() { return getToken(PLSQLParser.AUTHID, 0); }
		public TerminalNode AUTO() { return getToken(PLSQLParser.AUTO, 0); }
		public TerminalNode AUTOMATIC() { return getToken(PLSQLParser.AUTOMATIC, 0); }
		public TerminalNode AUTONOMOUS_TRANSACTION() { return getToken(PLSQLParser.AUTONOMOUS_TRANSACTION, 0); }
		public TerminalNode BATCH() { return getToken(PLSQLParser.BATCH, 0); }
		public TerminalNode BEFORE() { return getToken(PLSQLParser.BEFORE, 0); }
		public TerminalNode BFILE() { return getToken(PLSQLParser.BFILE, 0); }
		public TerminalNode BINARY_DOUBLE() { return getToken(PLSQLParser.BINARY_DOUBLE, 0); }
		public TerminalNode BINARY_FLOAT() { return getToken(PLSQLParser.BINARY_FLOAT, 0); }
		public TerminalNode BINARY_INTEGER() { return getToken(PLSQLParser.BINARY_INTEGER, 0); }
		public TerminalNode BLOB() { return getToken(PLSQLParser.BLOB, 0); }
		public TerminalNode BLOCK() { return getToken(PLSQLParser.BLOCK, 0); }
		public TerminalNode BODY() { return getToken(PLSQLParser.BODY, 0); }
		public TerminalNode BOOLEAN() { return getToken(PLSQLParser.BOOLEAN, 0); }
		public TerminalNode BOTH() { return getToken(PLSQLParser.BOTH, 0); }
		public TerminalNode BULK() { return getToken(PLSQLParser.BULK, 0); }
		public TerminalNode BUILD() { return getToken(PLSQLParser.BUILD, 0); }
		public TerminalNode BYTE() { return getToken(PLSQLParser.BYTE, 0); }
		public TerminalNode C_LETTER() { return getToken(PLSQLParser.C_LETTER, 0); }
		public TerminalNode CALL() { return getToken(PLSQLParser.CALL, 0); }
		public TerminalNode CANONICAL() { return getToken(PLSQLParser.CANONICAL, 0); }
		public TerminalNode CASCADE() { return getToken(PLSQLParser.CASCADE, 0); }
		public TerminalNode CAST() { return getToken(PLSQLParser.CAST, 0); }
		public TerminalNode CHAR() { return getToken(PLSQLParser.CHAR, 0); }
		public TerminalNode CHAR_CS() { return getToken(PLSQLParser.CHAR_CS, 0); }
		public TerminalNode CHARACTER() { return getToken(PLSQLParser.CHARACTER, 0); }
		public TerminalNode CHR() { return getToken(PLSQLParser.CHR, 0); }
		public TerminalNode CLOB() { return getToken(PLSQLParser.CLOB, 0); }
		public TerminalNode CLOSE() { return getToken(PLSQLParser.CLOSE, 0); }
		public TerminalNode CLUSTER() { return getToken(PLSQLParser.CLUSTER, 0); }
		public TerminalNode COALESCE() { return getToken(PLSQLParser.COALESCE, 0); }
		public TerminalNode COLLECT() { return getToken(PLSQLParser.COLLECT, 0); }
		public TerminalNode COLUMNS() { return getToken(PLSQLParser.COLUMNS, 0); }
		public TerminalNode COMMENT() { return getToken(PLSQLParser.COMMENT, 0); }
		public TerminalNode COMMIT() { return getToken(PLSQLParser.COMMIT, 0); }
		public TerminalNode COMMITTED() { return getToken(PLSQLParser.COMMITTED, 0); }
		public TerminalNode COMPATIBILITY() { return getToken(PLSQLParser.COMPATIBILITY, 0); }
		public TerminalNode COMPILE() { return getToken(PLSQLParser.COMPILE, 0); }
		public TerminalNode COMPLETE() { return getToken(PLSQLParser.COMPLETE, 0); }
		public TerminalNode COMPOUND() { return getToken(PLSQLParser.COMPOUND, 0); }
		public TerminalNode CONCAT() { return getToken(PLSQLParser.CONCAT, 0); }
		public TerminalNode CONSTANT() { return getToken(PLSQLParser.CONSTANT, 0); }
		public TerminalNode CONSTRAINT() { return getToken(PLSQLParser.CONSTRAINT, 0); }
		public TerminalNode CONSTRAINTS() { return getToken(PLSQLParser.CONSTRAINTS, 0); }
		public TerminalNode CONSTRUCTOR() { return getToken(PLSQLParser.CONSTRUCTOR, 0); }
		public TerminalNode CONTENT() { return getToken(PLSQLParser.CONTENT, 0); }
		public TerminalNode CONTEXT() { return getToken(PLSQLParser.CONTEXT, 0); }
		public TerminalNode CONTINUE() { return getToken(PLSQLParser.CONTINUE, 0); }
		public TerminalNode CONVERT() { return getToken(PLSQLParser.CONVERT, 0); }
		public TerminalNode CORRUPT_XID() { return getToken(PLSQLParser.CORRUPT_XID, 0); }
		public TerminalNode CORRUPT_XID_ALL() { return getToken(PLSQLParser.CORRUPT_XID_ALL, 0); }
		public TerminalNode COST() { return getToken(PLSQLParser.COST, 0); }
		public TerminalNode COUNT() { return getToken(PLSQLParser.COUNT, 0); }
		public TerminalNode CROSS() { return getToken(PLSQLParser.CROSS, 0); }
		public TerminalNode CUBE() { return getToken(PLSQLParser.CUBE, 0); }
		public TerminalNode CURRENT_USER() { return getToken(PLSQLParser.CURRENT_USER, 0); }
		public TerminalNode CURSOR() { return getToken(PLSQLParser.CURSOR, 0); }
		public TerminalNode CUSTOMDATUM() { return getToken(PLSQLParser.CUSTOMDATUM, 0); }
		public TerminalNode CYCLE() { return getToken(PLSQLParser.CYCLE, 0); }
		public TerminalNode DATA() { return getToken(PLSQLParser.DATA, 0); }
		public TerminalNode DATABASE() { return getToken(PLSQLParser.DATABASE, 0); }
		public TerminalNode DATE() { return getToken(PLSQLParser.DATE, 0); }
		public TerminalNode DAY() { return getToken(PLSQLParser.DAY, 0); }
		public TerminalNode DB_ROLE_CHANGE() { return getToken(PLSQLParser.DB_ROLE_CHANGE, 0); }
		public TerminalNode DBTIMEZONE() { return getToken(PLSQLParser.DBTIMEZONE, 0); }
		public TerminalNode DDL() { return getToken(PLSQLParser.DDL, 0); }
		public TerminalNode DEBUG() { return getToken(PLSQLParser.DEBUG, 0); }
		public TerminalNode DEC() { return getToken(PLSQLParser.DEC, 0); }
		public TerminalNode DECIMAL() { return getToken(PLSQLParser.DECIMAL, 0); }
		public TerminalNode DECODE() { return getToken(PLSQLParser.DECODE, 0); }
		public TerminalNode DECOMPOSE() { return getToken(PLSQLParser.DECOMPOSE, 0); }
		public TerminalNode DECREMENT() { return getToken(PLSQLParser.DECREMENT, 0); }
		public TerminalNode DEFAULTS() { return getToken(PLSQLParser.DEFAULTS, 0); }
		public TerminalNode DEFERRED() { return getToken(PLSQLParser.DEFERRED, 0); }
		public TerminalNode DEFINER() { return getToken(PLSQLParser.DEFINER, 0); }
		public TerminalNode DEMAND() { return getToken(PLSQLParser.DEMAND, 0); }
		public TerminalNode DETERMINISTIC() { return getToken(PLSQLParser.DETERMINISTIC, 0); }
		public TerminalNode DIMENSION() { return getToken(PLSQLParser.DIMENSION, 0); }
		public TerminalNode DISABLE() { return getToken(PLSQLParser.DISABLE, 0); }
		public TerminalNode DISASSOCIATE() { return getToken(PLSQLParser.DISASSOCIATE, 0); }
		public TerminalNode DOCUMENT() { return getToken(PLSQLParser.DOCUMENT, 0); }
		public TerminalNode DOUBLE() { return getToken(PLSQLParser.DOUBLE, 0); }
		public TerminalNode DSINTERVAL_UNCONSTRAINED() { return getToken(PLSQLParser.DSINTERVAL_UNCONSTRAINED, 0); }
		public TerminalNode EACH() { return getToken(PLSQLParser.EACH, 0); }
		public TerminalNode EDITIONING() { return getToken(PLSQLParser.EDITIONING, 0); }
		public TerminalNode ELEMENT() { return getToken(PLSQLParser.ELEMENT, 0); }
		public TerminalNode EMPTY() { return getToken(PLSQLParser.EMPTY, 0); }
		public TerminalNode ENABLE() { return getToken(PLSQLParser.ENABLE, 0); }
		public TerminalNode ENCODING() { return getToken(PLSQLParser.ENCODING, 0); }
		public TerminalNode ENFORCED() { return getToken(PLSQLParser.ENFORCED, 0); }
		public TerminalNode ENTITYESCAPING() { return getToken(PLSQLParser.ENTITYESCAPING, 0); }
		public TerminalNode ERR() { return getToken(PLSQLParser.ERR, 0); }
		public TerminalNode ERRORS() { return getToken(PLSQLParser.ERRORS, 0); }
		public TerminalNode ESCAPE() { return getToken(PLSQLParser.ESCAPE, 0); }
		public TerminalNode EVALNAME() { return getToken(PLSQLParser.EVALNAME, 0); }
		public TerminalNode EXCEPTION() { return getToken(PLSQLParser.EXCEPTION, 0); }
		public TerminalNode EXCEPTION_INIT() { return getToken(PLSQLParser.EXCEPTION_INIT, 0); }
		public TerminalNode EXCEPTIONS() { return getToken(PLSQLParser.EXCEPTIONS, 0); }
		public TerminalNode EXCLUDE() { return getToken(PLSQLParser.EXCLUDE, 0); }
		public TerminalNode EXECUTE() { return getToken(PLSQLParser.EXECUTE, 0); }
		public TerminalNode EXIT() { return getToken(PLSQLParser.EXIT, 0); }
		public TerminalNode EXPLAIN() { return getToken(PLSQLParser.EXPLAIN, 0); }
		public TerminalNode EXTERNAL() { return getToken(PLSQLParser.EXTERNAL, 0); }
		public TerminalNode EXTRACT() { return getToken(PLSQLParser.EXTRACT, 0); }
		public TerminalNode FAILURE() { return getToken(PLSQLParser.FAILURE, 0); }
		public TerminalNode FAST() { return getToken(PLSQLParser.FAST, 0); }
		public TerminalNode FINAL() { return getToken(PLSQLParser.FINAL, 0); }
		public TerminalNode FIRST() { return getToken(PLSQLParser.FIRST, 0); }
		public TerminalNode FIRST_VALUE() { return getToken(PLSQLParser.FIRST_VALUE, 0); }
		public TerminalNode FLOAT() { return getToken(PLSQLParser.FLOAT, 0); }
		public TerminalNode FOLLOWING() { return getToken(PLSQLParser.FOLLOWING, 0); }
		public TerminalNode FOLLOWS() { return getToken(PLSQLParser.FOLLOWS, 0); }
		public TerminalNode FORALL() { return getToken(PLSQLParser.FORALL, 0); }
		public TerminalNode FORCE() { return getToken(PLSQLParser.FORCE, 0); }
		public TerminalNode FULL() { return getToken(PLSQLParser.FULL, 0); }
		public TerminalNode FUNCTION() { return getToken(PLSQLParser.FUNCTION, 0); }
		public TerminalNode GROUPING() { return getToken(PLSQLParser.GROUPING, 0); }
		public TerminalNode HASH() { return getToken(PLSQLParser.HASH, 0); }
		public TerminalNode HIDE() { return getToken(PLSQLParser.HIDE, 0); }
		public TerminalNode HOUR() { return getToken(PLSQLParser.HOUR, 0); }
		public TerminalNode IGNORE() { return getToken(PLSQLParser.IGNORE, 0); }
		public TerminalNode IMMEDIATE() { return getToken(PLSQLParser.IMMEDIATE, 0); }
		public TerminalNode INCLUDE() { return getToken(PLSQLParser.INCLUDE, 0); }
		public TerminalNode INCLUDING() { return getToken(PLSQLParser.INCLUDING, 0); }
		public TerminalNode INCREMENT() { return getToken(PLSQLParser.INCREMENT, 0); }
		public TerminalNode INDENT() { return getToken(PLSQLParser.INDENT, 0); }
		public TerminalNode INDEXED() { return getToken(PLSQLParser.INDEXED, 0); }
		public TerminalNode INDICATOR() { return getToken(PLSQLParser.INDICATOR, 0); }
		public TerminalNode INDICES() { return getToken(PLSQLParser.INDICES, 0); }
		public TerminalNode INFINITE() { return getToken(PLSQLParser.INFINITE, 0); }
		public TerminalNode INLINE() { return getToken(PLSQLParser.INLINE, 0); }
		public TerminalNode INNER() { return getToken(PLSQLParser.INNER, 0); }
		public TerminalNode INOUT() { return getToken(PLSQLParser.INOUT, 0); }
		public TerminalNode INSTANTIABLE() { return getToken(PLSQLParser.INSTANTIABLE, 0); }
		public TerminalNode INSTEAD() { return getToken(PLSQLParser.INSTEAD, 0); }
		public TerminalNode INT() { return getToken(PLSQLParser.INT, 0); }
		public TerminalNode INTEGER() { return getToken(PLSQLParser.INTEGER, 0); }
		public TerminalNode INTERVAL() { return getToken(PLSQLParser.INTERVAL, 0); }
		public TerminalNode INVALIDATE() { return getToken(PLSQLParser.INVALIDATE, 0); }
		public TerminalNode ISOLATION() { return getToken(PLSQLParser.ISOLATION, 0); }
		public TerminalNode ITERATE() { return getToken(PLSQLParser.ITERATE, 0); }
		public TerminalNode JAVA() { return getToken(PLSQLParser.JAVA, 0); }
		public TerminalNode JOIN() { return getToken(PLSQLParser.JOIN, 0); }
		public TerminalNode KEEP() { return getToken(PLSQLParser.KEEP, 0); }
		public TerminalNode LANGUAGE() { return getToken(PLSQLParser.LANGUAGE, 0); }
		public TerminalNode LAST() { return getToken(PLSQLParser.LAST, 0); }
		public TerminalNode LAST_VALUE() { return getToken(PLSQLParser.LAST_VALUE, 0); }
		public TerminalNode LEADING() { return getToken(PLSQLParser.LEADING, 0); }
		public TerminalNode LEFT() { return getToken(PLSQLParser.LEFT, 0); }
		public TerminalNode LEVEL() { return getToken(PLSQLParser.LEVEL, 0); }
		public TerminalNode LIBRARY() { return getToken(PLSQLParser.LIBRARY, 0); }
		public TerminalNode LIKE2() { return getToken(PLSQLParser.LIKE2, 0); }
		public TerminalNode LIKE4() { return getToken(PLSQLParser.LIKE4, 0); }
		public TerminalNode LIKEC() { return getToken(PLSQLParser.LIKEC, 0); }
		public TerminalNode LIMIT() { return getToken(PLSQLParser.LIMIT, 0); }
		public TerminalNode LIST() { return getToken(PLSQLParser.LIST, 0); }
		public TerminalNode LOCAL() { return getToken(PLSQLParser.LOCAL, 0); }
		public TerminalNode LOCKED() { return getToken(PLSQLParser.LOCKED, 0); }
		public TerminalNode LOG() { return getToken(PLSQLParser.LOG, 0); }
		public TerminalNode LOGOFF() { return getToken(PLSQLParser.LOGOFF, 0); }
		public TerminalNode LOGON() { return getToken(PLSQLParser.LOGON, 0); }
		public TerminalNode LONG() { return getToken(PLSQLParser.LONG, 0); }
		public TerminalNode LOOP() { return getToken(PLSQLParser.LOOP, 0); }
		public TerminalNode MAIN() { return getToken(PLSQLParser.MAIN, 0); }
		public TerminalNode MAP() { return getToken(PLSQLParser.MAP, 0); }
		public TerminalNode MASTER() { return getToken(PLSQLParser.MASTER, 0); }
		public TerminalNode MATCHED() { return getToken(PLSQLParser.MATCHED, 0); }
		public TerminalNode MAXVALUE() { return getToken(PLSQLParser.MAXVALUE, 0); }
		public TerminalNode MEASURES() { return getToken(PLSQLParser.MEASURES, 0); }
		public TerminalNode MEMBER() { return getToken(PLSQLParser.MEMBER, 0); }
		public TerminalNode MERGE() { return getToken(PLSQLParser.MERGE, 0); }
		public TerminalNode MINUTE() { return getToken(PLSQLParser.MINUTE, 0); }
		public TerminalNode MINVALUE() { return getToken(PLSQLParser.MINVALUE, 0); }
		public TerminalNode MLSLABEL() { return getToken(PLSQLParser.MLSLABEL, 0); }
		public TerminalNode MODEL() { return getToken(PLSQLParser.MODEL, 0); }
		public TerminalNode MODIFY() { return getToken(PLSQLParser.MODIFY, 0); }
		public TerminalNode MONTH() { return getToken(PLSQLParser.MONTH, 0); }
		public TerminalNode MULTISET() { return getToken(PLSQLParser.MULTISET, 0); }
		public TerminalNode NAME() { return getToken(PLSQLParser.NAME, 0); }
		public TerminalNode NAN() { return getToken(PLSQLParser.NAN, 0); }
		public TerminalNode NATURAL() { return getToken(PLSQLParser.NATURAL, 0); }
		public TerminalNode NATURALN() { return getToken(PLSQLParser.NATURALN, 0); }
		public TerminalNode NAV() { return getToken(PLSQLParser.NAV, 0); }
		public TerminalNode NCHAR() { return getToken(PLSQLParser.NCHAR, 0); }
		public TerminalNode NCHAR_CS() { return getToken(PLSQLParser.NCHAR_CS, 0); }
		public TerminalNode NCLOB() { return getToken(PLSQLParser.NCLOB, 0); }
		public TerminalNode NESTED() { return getToken(PLSQLParser.NESTED, 0); }
		public TerminalNode NEVER() { return getToken(PLSQLParser.NEVER, 0); }
		public TerminalNode NEW() { return getToken(PLSQLParser.NEW, 0); }
		public TerminalNode NO() { return getToken(PLSQLParser.NO, 0); }
		public TerminalNode NOAUDIT() { return getToken(PLSQLParser.NOAUDIT, 0); }
		public TerminalNode NOCOPY() { return getToken(PLSQLParser.NOCOPY, 0); }
		public TerminalNode NOCYCLE() { return getToken(PLSQLParser.NOCYCLE, 0); }
		public TerminalNode NOENTITYESCAPING() { return getToken(PLSQLParser.NOENTITYESCAPING, 0); }
		public TerminalNode NONE() { return getToken(PLSQLParser.NONE, 0); }
		public TerminalNode NOSCHEMACHECK() { return getToken(PLSQLParser.NOSCHEMACHECK, 0); }
		public TerminalNode NULLS() { return getToken(PLSQLParser.NULLS, 0); }
		public TerminalNode NUMBER() { return getToken(PLSQLParser.NUMBER, 0); }
		public TerminalNode NUMERIC() { return getToken(PLSQLParser.NUMERIC, 0); }
		public TerminalNode NVARCHAR2() { return getToken(PLSQLParser.NVARCHAR2, 0); }
		public TerminalNode NVL() { return getToken(PLSQLParser.NVL, 0); }
		public TerminalNode MATERIALIZED() { return getToken(PLSQLParser.MATERIALIZED, 0); }
		public TerminalNode OBJECT() { return getToken(PLSQLParser.OBJECT, 0); }
		public TerminalNode OFF() { return getToken(PLSQLParser.OFF, 0); }
		public TerminalNode OID() { return getToken(PLSQLParser.OID, 0); }
		public TerminalNode OLD() { return getToken(PLSQLParser.OLD, 0); }
		public TerminalNode ONLY() { return getToken(PLSQLParser.ONLY, 0); }
		public TerminalNode OPEN() { return getToken(PLSQLParser.OPEN, 0); }
		public TerminalNode ORADATA() { return getToken(PLSQLParser.ORADATA, 0); }
		public TerminalNode ORDINALITY() { return getToken(PLSQLParser.ORDINALITY, 0); }
		public TerminalNode OSERROR() { return getToken(PLSQLParser.OSERROR, 0); }
		public TerminalNode OUT() { return getToken(PLSQLParser.OUT, 0); }
		public TerminalNode OUTER() { return getToken(PLSQLParser.OUTER, 0); }
		public TerminalNode OVER() { return getToken(PLSQLParser.OVER, 0); }
		public TerminalNode OVERRIDING() { return getToken(PLSQLParser.OVERRIDING, 0); }
		public TerminalNode PACKAGE() { return getToken(PLSQLParser.PACKAGE, 0); }
		public TerminalNode PARALLEL_ENABLE() { return getToken(PLSQLParser.PARALLEL_ENABLE, 0); }
		public TerminalNode PARAMETERS() { return getToken(PLSQLParser.PARAMETERS, 0); }
		public TerminalNode PARENT() { return getToken(PLSQLParser.PARENT, 0); }
		public TerminalNode PARTITION() { return getToken(PLSQLParser.PARTITION, 0); }
		public TerminalNode PASSING() { return getToken(PLSQLParser.PASSING, 0); }
		public TerminalNode PATH() { return getToken(PLSQLParser.PATH, 0); }
		public TerminalNode PIPELINED() { return getToken(PLSQLParser.PIPELINED, 0); }
		public TerminalNode PLAN() { return getToken(PLSQLParser.PLAN, 0); }
		public TerminalNode PLS_INTEGER() { return getToken(PLSQLParser.PLS_INTEGER, 0); }
		public TerminalNode POSITIVE() { return getToken(PLSQLParser.POSITIVE, 0); }
		public TerminalNode POSITIVEN() { return getToken(PLSQLParser.POSITIVEN, 0); }
		public TerminalNode PRAGMA() { return getToken(PLSQLParser.PRAGMA, 0); }
		public TerminalNode PREBUILT() { return getToken(PLSQLParser.PREBUILT, 0); }
		public TerminalNode PRECEDING() { return getToken(PLSQLParser.PRECEDING, 0); }
		public TerminalNode PRECISION() { return getToken(PLSQLParser.PRECISION, 0); }
		public TerminalNode PRESENT() { return getToken(PLSQLParser.PRESENT, 0); }
		public TerminalNode RAISE() { return getToken(PLSQLParser.RAISE, 0); }
		public TerminalNode RANGE() { return getToken(PLSQLParser.RANGE, 0); }
		public TerminalNode RAW() { return getToken(PLSQLParser.RAW, 0); }
		public TerminalNode READ() { return getToken(PLSQLParser.READ, 0); }
		public TerminalNode REAL() { return getToken(PLSQLParser.REAL, 0); }
		public TerminalNode RECORD() { return getToken(PLSQLParser.RECORD, 0); }
		public TerminalNode REDUCED() { return getToken(PLSQLParser.REDUCED, 0); }
		public TerminalNode REF() { return getToken(PLSQLParser.REF, 0); }
		public TerminalNode REFERENCE() { return getToken(PLSQLParser.REFERENCE, 0); }
		public TerminalNode REFERENCING() { return getToken(PLSQLParser.REFERENCING, 0); }
		public TerminalNode REFRESH() { return getToken(PLSQLParser.REFRESH, 0); }
		public TerminalNode REJECT() { return getToken(PLSQLParser.REJECT, 0); }
		public TerminalNode RELIES_ON() { return getToken(PLSQLParser.RELIES_ON, 0); }
		public TerminalNode RENAME() { return getToken(PLSQLParser.RENAME, 0); }
		public TerminalNode REPLACE() { return getToken(PLSQLParser.REPLACE, 0); }
		public TerminalNode RESPECT() { return getToken(PLSQLParser.RESPECT, 0); }
		public TerminalNode RESTRICT_REFERENCES() { return getToken(PLSQLParser.RESTRICT_REFERENCES, 0); }
		public TerminalNode RESULT() { return getToken(PLSQLParser.RESULT, 0); }
		public TerminalNode RESULT_CACHE() { return getToken(PLSQLParser.RESULT_CACHE, 0); }
		public TerminalNode RETURN() { return getToken(PLSQLParser.RETURN, 0); }
		public TerminalNode RETURNING() { return getToken(PLSQLParser.RETURNING, 0); }
		public TerminalNode REUSE() { return getToken(PLSQLParser.REUSE, 0); }
		public TerminalNode REVERSE() { return getToken(PLSQLParser.REVERSE, 0); }
		public TerminalNode REWRITE() { return getToken(PLSQLParser.REWRITE, 0); }
		public TerminalNode RIGHT() { return getToken(PLSQLParser.RIGHT, 0); }
		public TerminalNode ROLE() { return getToken(PLSQLParser.ROLE, 0); }
		public TerminalNode ROLLBACK() { return getToken(PLSQLParser.ROLLBACK, 0); }
		public TerminalNode ROLLUP() { return getToken(PLSQLParser.ROLLUP, 0); }
		public TerminalNode ROW() { return getToken(PLSQLParser.ROW, 0); }
		public TerminalNode ROWID() { return getToken(PLSQLParser.ROWID, 0); }
		public TerminalNode ROWS() { return getToken(PLSQLParser.ROWS, 0); }
		public TerminalNode RULES() { return getToken(PLSQLParser.RULES, 0); }
		public TerminalNode SAMPLE() { return getToken(PLSQLParser.SAMPLE, 0); }
		public TerminalNode SAVE() { return getToken(PLSQLParser.SAVE, 0); }
		public TerminalNode SAVEPOINT() { return getToken(PLSQLParser.SAVEPOINT, 0); }
		public TerminalNode SCHEMA() { return getToken(PLSQLParser.SCHEMA, 0); }
		public TerminalNode SCHEMACHECK() { return getToken(PLSQLParser.SCHEMACHECK, 0); }
		public TerminalNode SCN() { return getToken(PLSQLParser.SCN, 0); }
		public TerminalNode SECOND() { return getToken(PLSQLParser.SECOND, 0); }
		public TerminalNode SEED() { return getToken(PLSQLParser.SEED, 0); }
		public TerminalNode SEGMENT() { return getToken(PLSQLParser.SEGMENT, 0); }
		public TerminalNode SELF() { return getToken(PLSQLParser.SELF, 0); }
		public TerminalNode SEQUENTIAL() { return getToken(PLSQLParser.SEQUENTIAL, 0); }
		public TerminalNode SERIALIZABLE() { return getToken(PLSQLParser.SERIALIZABLE, 0); }
		public TerminalNode SERIALLY_REUSABLE() { return getToken(PLSQLParser.SERIALLY_REUSABLE, 0); }
		public TerminalNode SERVERERROR() { return getToken(PLSQLParser.SERVERERROR, 0); }
		public TerminalNode SESSIONTIMEZONE() { return getToken(PLSQLParser.SESSIONTIMEZONE, 0); }
		public TerminalNode SET() { return getToken(PLSQLParser.SET, 0); }
		public TerminalNode SETS() { return getToken(PLSQLParser.SETS, 0); }
		public TerminalNode SETTINGS() { return getToken(PLSQLParser.SETTINGS, 0); }
		public TerminalNode SHOW() { return getToken(PLSQLParser.SHOW, 0); }
		public TerminalNode SHUTDOWN() { return getToken(PLSQLParser.SHUTDOWN, 0); }
		public TerminalNode SIBLINGS() { return getToken(PLSQLParser.SIBLINGS, 0); }
		public TerminalNode SIGNTYPE() { return getToken(PLSQLParser.SIGNTYPE, 0); }
		public TerminalNode SIMPLE_INTEGER() { return getToken(PLSQLParser.SIMPLE_INTEGER, 0); }
		public TerminalNode SINGLE() { return getToken(PLSQLParser.SINGLE, 0); }
		public TerminalNode SIZE() { return getToken(PLSQLParser.SIZE, 0); }
		public TerminalNode SKIP_() { return getToken(PLSQLParser.SKIP_, 0); }
		public TerminalNode SMALLINT() { return getToken(PLSQLParser.SMALLINT, 0); }
		public TerminalNode SNAPSHOT() { return getToken(PLSQLParser.SNAPSHOT, 0); }
		public TerminalNode SOME() { return getToken(PLSQLParser.SOME, 0); }
		public TerminalNode SPECIFICATION() { return getToken(PLSQLParser.SPECIFICATION, 0); }
		public TerminalNode SQLDATA() { return getToken(PLSQLParser.SQLDATA, 0); }
		public TerminalNode SQLERROR() { return getToken(PLSQLParser.SQLERROR, 0); }
		public TerminalNode STANDALONE() { return getToken(PLSQLParser.STANDALONE, 0); }
		public TerminalNode STARTUP() { return getToken(PLSQLParser.STARTUP, 0); }
		public TerminalNode STATEMENT() { return getToken(PLSQLParser.STATEMENT, 0); }
		public TerminalNode STATEMENT_ID() { return getToken(PLSQLParser.STATEMENT_ID, 0); }
		public TerminalNode STATIC() { return getToken(PLSQLParser.STATIC, 0); }
		public TerminalNode STATISTICS() { return getToken(PLSQLParser.STATISTICS, 0); }
		public TerminalNode STRING() { return getToken(PLSQLParser.STRING, 0); }
		public TerminalNode SUBMULTISET() { return getToken(PLSQLParser.SUBMULTISET, 0); }
		public TerminalNode SUBPARTITION() { return getToken(PLSQLParser.SUBPARTITION, 0); }
		public TerminalNode SUBSTITUTABLE() { return getToken(PLSQLParser.SUBSTITUTABLE, 0); }
		public TerminalNode SUBSTRING() { return getToken(PLSQLParser.SUBSTRING, 0); }
		public TerminalNode SUBTYPE() { return getToken(PLSQLParser.SUBTYPE, 0); }
		public TerminalNode SUCCESS() { return getToken(PLSQLParser.SUCCESS, 0); }
		public TerminalNode SUSPEND() { return getToken(PLSQLParser.SUSPEND, 0); }
		public TerminalNode TABLES() { return getToken(PLSQLParser.TABLES, 0); }
		public TerminalNode TIME() { return getToken(PLSQLParser.TIME, 0); }
		public TerminalNode TIMESTAMP() { return getToken(PLSQLParser.TIMESTAMP, 0); }
		public TerminalNode TIMESTAMP_LTZ_UNCONSTRAINED() { return getToken(PLSQLParser.TIMESTAMP_LTZ_UNCONSTRAINED, 0); }
		public TerminalNode TIMESTAMP_TZ_UNCONSTRAINED() { return getToken(PLSQLParser.TIMESTAMP_TZ_UNCONSTRAINED, 0); }
		public TerminalNode TIMESTAMP_UNCONSTRAINED() { return getToken(PLSQLParser.TIMESTAMP_UNCONSTRAINED, 0); }
		public TerminalNode TIMEZONE_ABBR() { return getToken(PLSQLParser.TIMEZONE_ABBR, 0); }
		public TerminalNode TIMEZONE_HOUR() { return getToken(PLSQLParser.TIMEZONE_HOUR, 0); }
		public TerminalNode TIMEZONE_MINUTE() { return getToken(PLSQLParser.TIMEZONE_MINUTE, 0); }
		public TerminalNode TIMEZONE_REGION() { return getToken(PLSQLParser.TIMEZONE_REGION, 0); }
		public TerminalNode TO_CHAR() { return getToken(PLSQLParser.TO_CHAR, 0); }
		public TerminalNode TO_DATE() { return getToken(PLSQLParser.TO_DATE, 0); }
		public TerminalNode TRAILING() { return getToken(PLSQLParser.TRAILING, 0); }
		public TerminalNode TRANSACTION() { return getToken(PLSQLParser.TRANSACTION, 0); }
		public TerminalNode TRANSLATE() { return getToken(PLSQLParser.TRANSLATE, 0); }
		public TerminalNode TREAT() { return getToken(PLSQLParser.TREAT, 0); }
		public TerminalNode TRIGGER() { return getToken(PLSQLParser.TRIGGER, 0); }
		public TerminalNode TRIM() { return getToken(PLSQLParser.TRIM, 0); }
		public TerminalNode TRUNCATE() { return getToken(PLSQLParser.TRUNCATE, 0); }
		public TerminalNode TRUSTED() { return getToken(PLSQLParser.TRUSTED, 0); }
		public TerminalNode TYPE() { return getToken(PLSQLParser.TYPE, 0); }
		public TerminalNode UNBOUNDED() { return getToken(PLSQLParser.UNBOUNDED, 0); }
		public TerminalNode UNDER() { return getToken(PLSQLParser.UNDER, 0); }
		public TerminalNode UNLIMITED() { return getToken(PLSQLParser.UNLIMITED, 0); }
		public TerminalNode UNTIL() { return getToken(PLSQLParser.UNTIL, 0); }
		public TerminalNode UPDATED() { return getToken(PLSQLParser.UPDATED, 0); }
		public TerminalNode UPSERT() { return getToken(PLSQLParser.UPSERT, 0); }
		public TerminalNode UROWID() { return getToken(PLSQLParser.UROWID, 0); }
		public TerminalNode USE() { return getToken(PLSQLParser.USE, 0); }
		public TerminalNode VALIDATE() { return getToken(PLSQLParser.VALIDATE, 0); }
		public TerminalNode VALUE() { return getToken(PLSQLParser.VALUE, 0); }
		public TerminalNode VARCHAR() { return getToken(PLSQLParser.VARCHAR, 0); }
		public TerminalNode VARCHAR2() { return getToken(PLSQLParser.VARCHAR2, 0); }
		public TerminalNode VARIABLE() { return getToken(PLSQLParser.VARIABLE, 0); }
		public TerminalNode VARRAY() { return getToken(PLSQLParser.VARRAY, 0); }
		public TerminalNode VARYING() { return getToken(PLSQLParser.VARYING, 0); }
		public TerminalNode VERBOSE() { return getToken(PLSQLParser.VERBOSE, 0); }
		public TerminalNode VERSION() { return getToken(PLSQLParser.VERSION, 0); }
		public TerminalNode VERSIONS() { return getToken(PLSQLParser.VERSIONS, 0); }
		public TerminalNode VIEW() { return getToken(PLSQLParser.VIEW, 0); }
		public TerminalNode WAIT() { return getToken(PLSQLParser.WAIT, 0); }
		public TerminalNode WARNING() { return getToken(PLSQLParser.WARNING, 0); }
		public TerminalNode WELLFORMED() { return getToken(PLSQLParser.WELLFORMED, 0); }
		public TerminalNode WHENEVER() { return getToken(PLSQLParser.WHENEVER, 0); }
		public TerminalNode WHILE() { return getToken(PLSQLParser.WHILE, 0); }
		public TerminalNode WITHIN() { return getToken(PLSQLParser.WITHIN, 0); }
		public TerminalNode WITHOUT() { return getToken(PLSQLParser.WITHOUT, 0); }
		public TerminalNode WORK() { return getToken(PLSQLParser.WORK, 0); }
		public TerminalNode WRITE() { return getToken(PLSQLParser.WRITE, 0); }
		public TerminalNode XML() { return getToken(PLSQLParser.XML, 0); }
		public TerminalNode XMLAGG() { return getToken(PLSQLParser.XMLAGG, 0); }
		public TerminalNode XMLATTRIBUTES() { return getToken(PLSQLParser.XMLATTRIBUTES, 0); }
		public TerminalNode XMLCAST() { return getToken(PLSQLParser.XMLCAST, 0); }
		public TerminalNode XMLCOLATTVAL() { return getToken(PLSQLParser.XMLCOLATTVAL, 0); }
		public TerminalNode XMLELEMENT() { return getToken(PLSQLParser.XMLELEMENT, 0); }
		public TerminalNode XMLEXISTS() { return getToken(PLSQLParser.XMLEXISTS, 0); }
		public TerminalNode XMLFOREST() { return getToken(PLSQLParser.XMLFOREST, 0); }
		public TerminalNode XMLNAMESPACES() { return getToken(PLSQLParser.XMLNAMESPACES, 0); }
		public TerminalNode XMLPARSE() { return getToken(PLSQLParser.XMLPARSE, 0); }
		public TerminalNode XMLPI() { return getToken(PLSQLParser.XMLPI, 0); }
		public TerminalNode XMLQUERY() { return getToken(PLSQLParser.XMLQUERY, 0); }
		public TerminalNode XMLROOT() { return getToken(PLSQLParser.XMLROOT, 0); }
		public TerminalNode XMLSERIALIZE() { return getToken(PLSQLParser.XMLSERIALIZE, 0); }
		public TerminalNode XMLTABLE() { return getToken(PLSQLParser.XMLTABLE, 0); }
		public TerminalNode YEAR() { return getToken(PLSQLParser.YEAR, 0); }
		public TerminalNode YES() { return getToken(PLSQLParser.YES, 0); }
		public TerminalNode YMINTERVAL_UNCONSTRAINED() { return getToken(PLSQLParser.YMINTERVAL_UNCONSTRAINED, 0); }
		public TerminalNode ZONE() { return getToken(PLSQLParser.ZONE, 0); }
		public TerminalNode PREDICTION() { return getToken(PLSQLParser.PREDICTION, 0); }
		public TerminalNode PREDICTION_BOUNDS() { return getToken(PLSQLParser.PREDICTION_BOUNDS, 0); }
		public TerminalNode PREDICTION_COST() { return getToken(PLSQLParser.PREDICTION_COST, 0); }
		public TerminalNode PREDICTION_DETAILS() { return getToken(PLSQLParser.PREDICTION_DETAILS, 0); }
		public TerminalNode PREDICTION_PROBABILITY() { return getToken(PLSQLParser.PREDICTION_PROBABILITY, 0); }
		public TerminalNode PREDICTION_SET() { return getToken(PLSQLParser.PREDICTION_SET, 0); }
		public TerminalNode PUBLIC() { return getToken(PLSQLParser.PUBLIC, 0); }
		public TerminalNode CUME_DIST() { return getToken(PLSQLParser.CUME_DIST, 0); }
		public TerminalNode DENSE_RANK() { return getToken(PLSQLParser.DENSE_RANK, 0); }
		public TerminalNode LISTAGG() { return getToken(PLSQLParser.LISTAGG, 0); }
		public TerminalNode PERCENT_RANK() { return getToken(PLSQLParser.PERCENT_RANK, 0); }
		public TerminalNode PERCENTILE_CONT() { return getToken(PLSQLParser.PERCENTILE_CONT, 0); }
		public TerminalNode PERCENTILE_DISC() { return getToken(PLSQLParser.PERCENTILE_DISC, 0); }
		public TerminalNode RANK() { return getToken(PLSQLParser.RANK, 0); }
		public TerminalNode AVG() { return getToken(PLSQLParser.AVG, 0); }
		public TerminalNode CORR() { return getToken(PLSQLParser.CORR, 0); }
		public TerminalNode LAG() { return getToken(PLSQLParser.LAG, 0); }
		public TerminalNode LEAD() { return getToken(PLSQLParser.LEAD, 0); }
		public TerminalNode MAX() { return getToken(PLSQLParser.MAX, 0); }
		public TerminalNode MEDIAN() { return getToken(PLSQLParser.MEDIAN, 0); }
		public TerminalNode MIN() { return getToken(PLSQLParser.MIN, 0); }
		public TerminalNode NTILE() { return getToken(PLSQLParser.NTILE, 0); }
		public TerminalNode RATIO_TO_REPORT() { return getToken(PLSQLParser.RATIO_TO_REPORT, 0); }
		public TerminalNode ROW_NUMBER() { return getToken(PLSQLParser.ROW_NUMBER, 0); }
		public TerminalNode SUM() { return getToken(PLSQLParser.SUM, 0); }
		public TerminalNode VARIANCE() { return getToken(PLSQLParser.VARIANCE, 0); }
		public TerminalNode REGR_() { return getToken(PLSQLParser.REGR_, 0); }
		public TerminalNode STDDEV() { return getToken(PLSQLParser.STDDEV, 0); }
		public TerminalNode VAR_() { return getToken(PLSQLParser.VAR_, 0); }
		public TerminalNode COVAR_() { return getToken(PLSQLParser.COVAR_, 0); }
		public Regular_idContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_regular_id; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).enterRegular_id(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PLSQLListener ) ((PLSQLListener)listener).exitRegular_id(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PLSQLVisitor ) return ((PLSQLVisitor<? extends T>)visitor).visitRegular_id(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Regular_idContext regular_id() throws RecognitionException {
		Regular_idContext _localctx = new Regular_idContext(_ctx, getState());
		enterRule(_localctx, 1084, RULE_regular_id);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8390);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BUILD) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (CHR - 65)) | (1L << (CLOB - 65)) | (1L << (CLOSE - 65)) | (1L << (CLUSTER - 65)) | (1L << (COALESCE - 65)) | (1L << (COLLECT - 65)) | (1L << (COLUMNS - 65)) | (1L << (COMMENT - 65)) | (1L << (COMMIT - 65)) | (1L << (COMMITTED - 65)) | (1L << (COMPATIBILITY - 65)) | (1L << (COMPILE - 65)) | (1L << (COMPLETE - 65)) | (1L << (COMPOUND - 65)) | (1L << (CONCAT - 65)) | (1L << (CONSTANT - 65)) | (1L << (CONSTRAINT - 65)) | (1L << (CONSTRAINTS - 65)) | (1L << (CONSTRUCTOR - 65)) | (1L << (CONTENT - 65)) | (1L << (CONTEXT - 65)) | (1L << (CONTINUE - 65)) | (1L << (CONVERT - 65)) | (1L << (CORRUPT_XID - 65)) | (1L << (CORRUPT_XID_ALL - 65)) | (1L << (COST - 65)) | (1L << (COUNT - 65)) | (1L << (CROSS - 65)) | (1L << (CUBE - 65)) | (1L << (CURRENT_USER - 65)) | (1L << (CURSOR - 65)) | (1L << (CUSTOMDATUM - 65)) | (1L << (CYCLE - 65)) | (1L << (DATA - 65)) | (1L << (DATABASE - 65)) | (1L << (DATE - 65)) | (1L << (DAY - 65)) | (1L << (DB_ROLE_CHANGE - 65)) | (1L << (DBTIMEZONE - 65)) | (1L << (DDL - 65)) | (1L << (DEBUG - 65)) | (1L << (DEC - 65)) | (1L << (DECIMAL - 65)) | (1L << (DECODE - 65)) | (1L << (DECOMPOSE - 65)) | (1L << (DECREMENT - 65)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DEMAND - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (EDITIONING - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENFORCED - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FAST - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)) | (1L << (FOLLOWING - 129)) | (1L << (FOLLOWS - 129)) | (1L << (FORALL - 129)) | (1L << (FORCE - 129)))) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & ((1L << (FULL - 197)) | (1L << (FUNCTION - 197)) | (1L << (GROUPING - 197)) | (1L << (HASH - 197)) | (1L << (HIDE - 197)) | (1L << (HOUR - 197)) | (1L << (IGNORE - 197)) | (1L << (IMMEDIATE - 197)) | (1L << (INCLUDE - 197)) | (1L << (INCLUDING - 197)) | (1L << (INCREMENT - 197)) | (1L << (INDENT - 197)) | (1L << (INDEXED - 197)) | (1L << (INDICATOR - 197)) | (1L << (INDICES - 197)) | (1L << (INFINITE - 197)) | (1L << (INLINE - 197)) | (1L << (INNER - 197)) | (1L << (INOUT - 197)) | (1L << (INSTANTIABLE - 197)) | (1L << (INSTEAD - 197)) | (1L << (INT - 197)) | (1L << (INTEGER - 197)) | (1L << (INTERVAL - 197)) | (1L << (INVALIDATE - 197)) | (1L << (ISOLATION - 197)) | (1L << (ITERATE - 197)) | (1L << (JAVA - 197)) | (1L << (JOIN - 197)) | (1L << (KEEP - 197)) | (1L << (LANGUAGE - 197)) | (1L << (LAST - 197)) | (1L << (LAST_VALUE - 197)) | (1L << (LEADING - 197)) | (1L << (LEFT - 197)) | (1L << (LEVEL - 197)))) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & ((1L << (LIBRARY - 261)) | (1L << (LIKE2 - 261)) | (1L << (LIKE4 - 261)) | (1L << (LIKEC - 261)) | (1L << (LIMIT - 261)) | (1L << (LIST - 261)) | (1L << (LOCAL - 261)) | (1L << (LOCKED - 261)) | (1L << (LOG - 261)) | (1L << (LOGOFF - 261)) | (1L << (LOGON - 261)) | (1L << (LONG - 261)) | (1L << (LOOP - 261)) | (1L << (MAIN - 261)) | (1L << (MAP - 261)) | (1L << (MASTER - 261)) | (1L << (MATCHED - 261)) | (1L << (MAXVALUE - 261)) | (1L << (MEASURES - 261)) | (1L << (MEMBER - 261)) | (1L << (MERGE - 261)) | (1L << (MINUTE - 261)) | (1L << (MINVALUE - 261)) | (1L << (MLSLABEL - 261)) | (1L << (MODEL - 261)) | (1L << (MODIFY - 261)) | (1L << (MONTH - 261)) | (1L << (MULTISET - 261)) | (1L << (NAME - 261)) | (1L << (NAN - 261)) | (1L << (NATURAL - 261)) | (1L << (NATURALN - 261)) | (1L << (NAV - 261)) | (1L << (NCHAR - 261)) | (1L << (NCHAR_CS - 261)) | (1L << (NCLOB - 261)) | (1L << (NESTED - 261)) | (1L << (NEVER - 261)) | (1L << (NEW - 261)) | (1L << (NO - 261)) | (1L << (NOAUDIT - 261)) | (1L << (NOCOPY - 261)) | (1L << (NOCYCLE - 261)) | (1L << (NOENTITYESCAPING - 261)))) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & ((1L << (NONE - 329)) | (1L << (NOSCHEMACHECK - 329)) | (1L << (NVL - 329)) | (1L << (NULLS - 329)) | (1L << (NUMBER - 329)) | (1L << (NUMERIC - 329)) | (1L << (NVARCHAR2 - 329)) | (1L << (MATERIALIZED - 329)) | (1L << (OBJECT - 329)) | (1L << (OFF - 329)) | (1L << (OID - 329)) | (1L << (OLD - 329)) | (1L << (ONLY - 329)) | (1L << (OPEN - 329)) | (1L << (ORADATA - 329)) | (1L << (ORDINALITY - 329)) | (1L << (OSERROR - 329)) | (1L << (OUT - 329)) | (1L << (OUTER - 329)) | (1L << (OVER - 329)) | (1L << (OVERRIDING - 329)) | (1L << (PACKAGE - 329)) | (1L << (PARALLEL_ENABLE - 329)) | (1L << (PARAMETERS - 329)) | (1L << (PARENT - 329)) | (1L << (PARTITION - 329)) | (1L << (PASSING - 329)) | (1L << (PATH - 329)) | (1L << (PIPELINED - 329)) | (1L << (PLAN - 329)) | (1L << (PLS_INTEGER - 329)) | (1L << (POSITIVE - 329)) | (1L << (POSITIVEN - 329)) | (1L << (PRAGMA - 329)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (PREBUILT - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)) | (1L << (PRESENT - 393)) | (1L << (PUBLIC - 393)) | (1L << (RAISE - 393)) | (1L << (RANGE - 393)) | (1L << (RAW - 393)) | (1L << (READ - 393)) | (1L << (REAL - 393)) | (1L << (RECORD - 393)) | (1L << (REDUCED - 393)) | (1L << (REF - 393)) | (1L << (REFERENCE - 393)) | (1L << (REFERENCING - 393)) | (1L << (REFRESH - 393)) | (1L << (REJECT - 393)) | (1L << (RELIES_ON - 393)) | (1L << (RENAME - 393)) | (1L << (REPLACE - 393)) | (1L << (RESPECT - 393)) | (1L << (RESTRICT_REFERENCES - 393)) | (1L << (RESULT - 393)) | (1L << (RESULT_CACHE - 393)) | (1L << (RETURN - 393)) | (1L << (RETURNING - 393)) | (1L << (REUSE - 393)) | (1L << (REVERSE - 393)) | (1L << (REWRITE - 393)) | (1L << (RIGHT - 393)) | (1L << (ROLE - 393)) | (1L << (ROLLBACK - 393)) | (1L << (ROLLUP - 393)) | (1L << (ROW - 393)) | (1L << (ROWID - 393)) | (1L << (ROWS - 393)) | (1L << (RULES - 393)) | (1L << (SAMPLE - 393)) | (1L << (SAVE - 393)) | (1L << (SAVEPOINT - 393)) | (1L << (SCHEMA - 393)) | (1L << (SCHEMACHECK - 393)) | (1L << (SCN - 393)) | (1L << (SECOND - 393)))) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & ((1L << (SEED - 458)) | (1L << (SEGMENT - 458)) | (1L << (SELF - 458)) | (1L << (SEQUENTIAL - 458)) | (1L << (SERIALIZABLE - 458)) | (1L << (SERIALLY_REUSABLE - 458)) | (1L << (SERVERERROR - 458)) | (1L << (SESSIONTIMEZONE - 458)) | (1L << (SET - 458)) | (1L << (SETS - 458)) | (1L << (SETTINGS - 458)) | (1L << (SHOW - 458)) | (1L << (SHUTDOWN - 458)) | (1L << (SIBLINGS - 458)) | (1L << (SIGNTYPE - 458)) | (1L << (SIMPLE_INTEGER - 458)) | (1L << (SINGLE - 458)) | (1L << (SIZE - 458)) | (1L << (SKIP_ - 458)) | (1L << (SMALLINT - 458)) | (1L << (SNAPSHOT - 458)) | (1L << (SOME - 458)) | (1L << (SPECIFICATION - 458)) | (1L << (SQLDATA - 458)) | (1L << (SQLERROR - 458)) | (1L << (STANDALONE - 458)) | (1L << (STARTUP - 458)) | (1L << (STATEMENT - 458)) | (1L << (STATEMENT_ID - 458)) | (1L << (STATIC - 458)) | (1L << (STATISTICS - 458)) | (1L << (STRING - 458)) | (1L << (SUBMULTISET - 458)) | (1L << (SUBPARTITION - 458)) | (1L << (SUBSTITUTABLE - 458)) | (1L << (SUBSTRING - 458)) | (1L << (SUBTYPE - 458)) | (1L << (SUCCESS - 458)) | (1L << (SUSPEND - 458)) | (1L << (TABLES - 458)) | (1L << (TIME - 458)) | (1L << (TIMESTAMP - 458)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 458)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 458)) | (1L << (TIMESTAMP_UNCONSTRAINED - 458)))) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & ((1L << (TIMEZONE_ABBR - 522)) | (1L << (TIMEZONE_HOUR - 522)) | (1L << (TIMEZONE_MINUTE - 522)) | (1L << (TIMEZONE_REGION - 522)) | (1L << (TO_CHAR - 522)) | (1L << (TO_DATE - 522)) | (1L << (TRAILING - 522)) | (1L << (TRANSACTION - 522)) | (1L << (TRANSLATE - 522)) | (1L << (TREAT - 522)) | (1L << (TRIGGER - 522)) | (1L << (TRIM - 522)) | (1L << (TRUNCATE - 522)) | (1L << (TRUSTED - 522)) | (1L << (TYPE - 522)) | (1L << (UNBOUNDED - 522)) | (1L << (UNDER - 522)) | (1L << (UNLIMITED - 522)) | (1L << (UNTIL - 522)) | (1L << (UPDATED - 522)) | (1L << (UPSERT - 522)) | (1L << (UROWID - 522)) | (1L << (USE - 522)) | (1L << (VALIDATE - 522)) | (1L << (VALUE - 522)) | (1L << (VARCHAR - 522)) | (1L << (VARCHAR2 - 522)) | (1L << (VARIABLE - 522)) | (1L << (VARRAY - 522)) | (1L << (VARYING - 522)) | (1L << (VERBOSE - 522)) | (1L << (VERSION - 522)) | (1L << (VERSIONS - 522)) | (1L << (VIEW - 522)) | (1L << (WAIT - 522)) | (1L << (WARNING - 522)) | (1L << (WELLFORMED - 522)) | (1L << (WHENEVER - 522)) | (1L << (WHILE - 522)) | (1L << (WITHOUT - 522)) | (1L << (WITHIN - 522)) | (1L << (WORK - 522)) | (1L << (WRITE - 522)) | (1L << (XML - 522)) | (1L << (XMLAGG - 522)) | (1L << (XMLATTRIBUTES - 522)))) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & ((1L << (XMLCAST - 586)) | (1L << (XMLCOLATTVAL - 586)) | (1L << (XMLELEMENT - 586)) | (1L << (XMLEXISTS - 586)) | (1L << (XMLFOREST - 586)) | (1L << (XMLNAMESPACES - 586)) | (1L << (XMLPARSE - 586)) | (1L << (XMLPI - 586)) | (1L << (XMLQUERY - 586)) | (1L << (XMLROOT - 586)) | (1L << (XMLSERIALIZE - 586)) | (1L << (XMLTABLE - 586)) | (1L << (YEAR - 586)) | (1L << (YES - 586)) | (1L << (YMINTERVAL_UNCONSTRAINED - 586)) | (1L << (ZONE - 586)) | (1L << (PREDICTION - 586)) | (1L << (PREDICTION_BOUNDS - 586)) | (1L << (PREDICTION_COST - 586)) | (1L << (PREDICTION_DETAILS - 586)) | (1L << (PREDICTION_PROBABILITY - 586)) | (1L << (PREDICTION_SET - 586)) | (1L << (CUME_DIST - 586)) | (1L << (DENSE_RANK - 586)) | (1L << (LISTAGG - 586)) | (1L << (PERCENT_RANK - 586)) | (1L << (PERCENTILE_CONT - 586)) | (1L << (PERCENTILE_DISC - 586)) | (1L << (RANK - 586)) | (1L << (AVG - 586)) | (1L << (CORR - 586)) | (1L << (LAG - 586)) | (1L << (LEAD - 586)) | (1L << (MAX - 586)) | (1L << (MEDIAN - 586)) | (1L << (MIN - 586)) | (1L << (NTILE - 586)) | (1L << (RATIO_TO_REPORT - 586)) | (1L << (ROW_NUMBER - 586)) | (1L << (SUM - 586)) | (1L << (VARIANCE - 586)) | (1L << (REGR_ - 586)) | (1L << (STDDEV - 586)) | (1L << (VAR_ - 586)) | (1L << (COVAR_ - 586)))) != 0) || _la==REGULAR_ID) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public boolean sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 330:
			return subquery_sempred((SubqueryContext)_localctx, predIndex);
		case 336:
			return table_ref_sempred((Table_refContext)_localctx, predIndex);
		case 418:
			return expression_sempred((ExpressionContext)_localctx, predIndex);
		case 427:
			return binary_expression_sempred((Binary_expressionContext)_localctx, predIndex);
		case 435:
			return unary_expression_sempred((Unary_expressionContext)_localctx, predIndex);
		case 446:
			return standard_function_sempred((Standard_functionContext)_localctx, predIndex);
		}
		return true;
	}
	private boolean subquery_sempred(SubqueryContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean table_ref_sempred(Table_refContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1:
			return precpred(_ctx, 3);
		}
		return true;
	}
	private boolean expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2:
			return precpred(_ctx, 10);
		case 3:
			return precpred(_ctx, 8);
		case 4:
			return precpred(_ctx, 4);
		case 5:
			return precpred(_ctx, 3);
		case 6:
			return precpred(_ctx, 12);
		case 7:
			return precpred(_ctx, 11);
		case 8:
			return precpred(_ctx, 9);
		case 9:
			return precpred(_ctx, 7);
		}
		return true;
	}
	private boolean binary_expression_sempred(Binary_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 10:
			return precpred(_ctx, 6);
		case 11:
			return precpred(_ctx, 5);
		case 12:
			return precpred(_ctx, 4);
		case 13:
			return precpred(_ctx, 3);
		case 14:
			return precpred(_ctx, 7);
		}
		return true;
	}
	private boolean unary_expression_sempred(Unary_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 15:
			return precpred(_ctx, 11);
		}
		return true;
	}
	private boolean standard_function_sempred(Standard_functionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 16:
			return precpred(_ctx, 22);
		}
		return true;
	}

	private static final int _serializedATNSegments = 4;
	private static final String _serializedATNSegment0 =
		"\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u02a7\u20cb\4\2\t"+
		"\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13"+
		"\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22"+
		"\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31\t\31"+
		"\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t \4!"+
		"\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4"+
		",\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t"+
		"\64\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t;\4<\t<\4=\t="+
		"\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\tD\4E\tE\4F\tF\4G\tG\4H\tH\4I"+
		"\tI\4J\tJ\4K\tK\4L\tL\4M\tM\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT"+
		"\4U\tU\4V\tV\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4_\t_\4"+
		"`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4h\th\4i\ti\4j\tj\4k\t"+
		"k\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4"+
		"w\tw\4x\tx\4y\ty\4z\tz\4{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080"+
		"\4\u0081\t\u0081\4\u0082\t\u0082\4\u0083\t\u0083\4\u0084\t\u0084\4\u0085"+
		"\t\u0085\4\u0086\t\u0086\4\u0087\t\u0087\4\u0088\t\u0088\4\u0089\t\u0089"+
		"\4\u008a\t\u008a\4\u008b\t\u008b\4\u008c\t\u008c\4\u008d\t\u008d\4\u008e"+
		"\t\u008e\4\u008f\t\u008f\4\u0090\t\u0090\4\u0091\t\u0091\4\u0092\t\u0092"+
		"\4\u0093\t\u0093\4\u0094\t\u0094\4\u0095\t\u0095\4\u0096\t\u0096\4\u0097"+
		"\t\u0097\4\u0098\t\u0098\4\u0099\t\u0099\4\u009a\t\u009a\4\u009b\t\u009b"+
		"\4\u009c\t\u009c\4\u009d\t\u009d\4\u009e\t\u009e\4\u009f\t\u009f\4\u00a0"+
		"\t\u00a0\4\u00a1\t\u00a1\4\u00a2\t\u00a2\4\u00a3\t\u00a3\4\u00a4\t\u00a4"+
		"\4\u00a5\t\u00a5\4\u00a6\t\u00a6\4\u00a7\t\u00a7\4\u00a8\t\u00a8\4\u00a9"+
		"\t\u00a9\4\u00aa\t\u00aa\4\u00ab\t\u00ab\4\u00ac\t\u00ac\4\u00ad\t\u00ad"+
		"\4\u00ae\t\u00ae\4\u00af\t\u00af\4\u00b0\t\u00b0\4\u00b1\t\u00b1\4\u00b2"+
		"\t\u00b2\4\u00b3\t\u00b3\4\u00b4\t\u00b4\4\u00b5\t\u00b5\4\u00b6\t\u00b6"+
		"\4\u00b7\t\u00b7\4\u00b8\t\u00b8\4\u00b9\t\u00b9\4\u00ba\t\u00ba\4\u00bb"+
		"\t\u00bb\4\u00bc\t\u00bc\4\u00bd\t\u00bd\4\u00be\t\u00be\4\u00bf\t\u00bf"+
		"\4\u00c0\t\u00c0\4\u00c1\t\u00c1\4\u00c2\t\u00c2\4\u00c3\t\u00c3\4\u00c4"+
		"\t\u00c4\4\u00c5\t\u00c5\4\u00c6\t\u00c6\4\u00c7\t\u00c7\4\u00c8\t\u00c8"+
		"\4\u00c9\t\u00c9\4\u00ca\t\u00ca\4\u00cb\t\u00cb\4\u00cc\t\u00cc\4\u00cd"+
		"\t\u00cd\4\u00ce\t\u00ce\4\u00cf\t\u00cf\4\u00d0\t\u00d0\4\u00d1\t\u00d1"+
		"\4\u00d2\t\u00d2\4\u00d3\t\u00d3\4\u00d4\t\u00d4\4\u00d5\t\u00d5\4\u00d6"+
		"\t\u00d6\4\u00d7\t\u00d7\4\u00d8\t\u00d8\4\u00d9\t\u00d9\4\u00da\t\u00da"+
		"\4\u00db\t\u00db\4\u00dc\t\u00dc\4\u00dd\t\u00dd\4\u00de\t\u00de\4\u00df"+
		"\t\u00df\4\u00e0\t\u00e0\4\u00e1\t\u00e1\4\u00e2\t\u00e2\4\u00e3\t\u00e3"+
		"\4\u00e4\t\u00e4\4\u00e5\t\u00e5\4\u00e6\t\u00e6\4\u00e7\t\u00e7\4\u00e8"+
		"\t\u00e8\4\u00e9\t\u00e9\4\u00ea\t\u00ea\4\u00eb\t\u00eb\4\u00ec\t\u00ec"+
		"\4\u00ed\t\u00ed\4\u00ee\t\u00ee\4\u00ef\t\u00ef\4\u00f0\t\u00f0\4\u00f1"+
		"\t\u00f1\4\u00f2\t\u00f2\4\u00f3\t\u00f3\4\u00f4\t\u00f4\4\u00f5\t\u00f5"+
		"\4\u00f6\t\u00f6\4\u00f7\t\u00f7\4\u00f8\t\u00f8\4\u00f9\t\u00f9\4\u00fa"+
		"\t\u00fa\4\u00fb\t\u00fb\4\u00fc\t\u00fc\4\u00fd\t\u00fd\4\u00fe\t\u00fe"+
		"\4\u00ff\t\u00ff\4\u0100\t\u0100\4\u0101\t\u0101\4\u0102\t\u0102\4\u0103"+
		"\t\u0103\4\u0104\t\u0104\4\u0105\t\u0105\4\u0106\t\u0106\4\u0107\t\u0107"+
		"\4\u0108\t\u0108\4\u0109\t\u0109\4\u010a\t\u010a\4\u010b\t\u010b\4\u010c"+
		"\t\u010c\4\u010d\t\u010d\4\u010e\t\u010e\4\u010f\t\u010f\4\u0110\t\u0110"+
		"\4\u0111\t\u0111\4\u0112\t\u0112\4\u0113\t\u0113\4\u0114\t\u0114\4\u0115"+
		"\t\u0115\4\u0116\t\u0116\4\u0117\t\u0117\4\u0118\t\u0118\4\u0119\t\u0119"+
		"\4\u011a\t\u011a\4\u011b\t\u011b\4\u011c\t\u011c\4\u011d\t\u011d\4\u011e"+
		"\t\u011e\4\u011f\t\u011f\4\u0120\t\u0120\4\u0121\t\u0121\4\u0122\t\u0122"+
		"\4\u0123\t\u0123\4\u0124\t\u0124\4\u0125\t\u0125\4\u0126\t\u0126\4\u0127"+
		"\t\u0127\4\u0128\t\u0128\4\u0129\t\u0129\4\u012a\t\u012a\4\u012b\t\u012b"+
		"\4\u012c\t\u012c\4\u012d\t\u012d\4\u012e\t\u012e\4\u012f\t\u012f\4\u0130"+
		"\t\u0130\4\u0131\t\u0131\4\u0132\t\u0132\4\u0133\t\u0133\4\u0134\t\u0134"+
		"\4\u0135\t\u0135\4\u0136\t\u0136\4\u0137\t\u0137\4\u0138\t\u0138\4\u0139"+
		"\t\u0139\4\u013a\t\u013a\4\u013b\t\u013b\4\u013c\t\u013c\4\u013d\t\u013d"+
		"\4\u013e\t\u013e\4\u013f\t\u013f\4\u0140\t\u0140\4\u0141\t\u0141\4\u0142"+
		"\t\u0142\4\u0143\t\u0143\4\u0144\t\u0144\4\u0145\t\u0145\4\u0146\t\u0146"+
		"\4\u0147\t\u0147\4\u0148\t\u0148\4\u0149\t\u0149\4\u014a\t\u014a\4\u014b"+
		"\t\u014b\4\u014c\t\u014c\4\u014d\t\u014d\4\u014e\t\u014e\4\u014f\t\u014f"+
		"\4\u0150\t\u0150\4\u0151\t\u0151\4\u0152\t\u0152\4\u0153\t\u0153\4\u0154"+
		"\t\u0154\4\u0155\t\u0155\4\u0156\t\u0156\4\u0157\t\u0157\4\u0158\t\u0158"+
		"\4\u0159\t\u0159\4\u015a\t\u015a\4\u015b\t\u015b\4\u015c\t\u015c\4\u015d"+
		"\t\u015d\4\u015e\t\u015e\4\u015f\t\u015f\4\u0160\t\u0160\4\u0161\t\u0161"+
		"\4\u0162\t\u0162\4\u0163\t\u0163\4\u0164\t\u0164\4\u0165\t\u0165\4\u0166"+
		"\t\u0166\4\u0167\t\u0167\4\u0168\t\u0168\4\u0169\t\u0169\4\u016a\t\u016a"+
		"\4\u016b\t\u016b\4\u016c\t\u016c\4\u016d\t\u016d\4\u016e\t\u016e\4\u016f"+
		"\t\u016f\4\u0170\t\u0170\4\u0171\t\u0171\4\u0172\t\u0172\4\u0173\t\u0173"+
		"\4\u0174\t\u0174\4\u0175\t\u0175\4\u0176\t\u0176\4\u0177\t\u0177\4\u0178"+
		"\t\u0178\4\u0179\t\u0179\4\u017a\t\u017a\4\u017b\t\u017b\4\u017c\t\u017c"+
		"\4\u017d\t\u017d\4\u017e\t\u017e\4\u017f\t\u017f\4\u0180\t\u0180\4\u0181"+
		"\t\u0181\4\u0182\t\u0182\4\u0183\t\u0183\4\u0184\t\u0184\4\u0185\t\u0185"+
		"\4\u0186\t\u0186\4\u0187\t\u0187\4\u0188\t\u0188\4\u0189\t\u0189\4\u018a"+
		"\t\u018a\4\u018b\t\u018b\4\u018c\t\u018c\4\u018d\t\u018d\4\u018e\t\u018e"+
		"\4\u018f\t\u018f\4\u0190\t\u0190\4\u0191\t\u0191\4\u0192\t\u0192\4\u0193"+
		"\t\u0193\4\u0194\t\u0194\4\u0195\t\u0195\4\u0196\t\u0196\4\u0197\t\u0197"+
		"\4\u0198\t\u0198\4\u0199\t\u0199\4\u019a\t\u019a\4\u019b\t\u019b\4\u019c"+
		"\t\u019c\4\u019d\t\u019d\4\u019e\t\u019e\4\u019f\t\u019f\4\u01a0\t\u01a0"+
		"\4\u01a1\t\u01a1\4\u01a2\t\u01a2\4\u01a3\t\u01a3\4\u01a4\t\u01a4\4\u01a5"+
		"\t\u01a5\4\u01a6\t\u01a6\4\u01a7\t\u01a7\4\u01a8\t\u01a8\4\u01a9\t\u01a9"+
		"\4\u01aa\t\u01aa\4\u01ab\t\u01ab\4\u01ac\t\u01ac\4\u01ad\t\u01ad\4\u01ae"+
		"\t\u01ae\4\u01af\t\u01af\4\u01b0\t\u01b0\4\u01b1\t\u01b1\4\u01b2\t\u01b2"+
		"\4\u01b3\t\u01b3\4\u01b4\t\u01b4\4\u01b5\t\u01b5\4\u01b6\t\u01b6\4\u01b7"+
		"\t\u01b7\4\u01b8\t\u01b8\4\u01b9\t\u01b9\4\u01ba\t\u01ba\4\u01bb\t\u01bb"+
		"\4\u01bc\t\u01bc\4\u01bd\t\u01bd\4\u01be\t\u01be\4\u01bf\t\u01bf\4\u01c0"+
		"\t\u01c0\4\u01c1\t\u01c1\4\u01c2\t\u01c2\4\u01c3\t\u01c3\4\u01c4\t\u01c4"+
		"\4\u01c5\t\u01c5\4\u01c6\t\u01c6\4\u01c7\t\u01c7\4\u01c8\t\u01c8\4\u01c9"+
		"\t\u01c9\4\u01ca\t\u01ca\4\u01cb\t\u01cb\4\u01cc\t\u01cc\4\u01cd\t\u01cd"+
		"\4\u01ce\t\u01ce\4\u01cf\t\u01cf\4\u01d0\t\u01d0\4\u01d1\t\u01d1\4\u01d2"+
		"\t\u01d2\4\u01d3\t\u01d3\4\u01d4\t\u01d4\4\u01d5\t\u01d5\4\u01d6\t\u01d6"+
		"\4\u01d7\t\u01d7\4\u01d8\t\u01d8\4\u01d9\t\u01d9\4\u01da\t\u01da\4\u01db"+
		"\t\u01db\4\u01dc\t\u01dc\4\u01dd\t\u01dd\4\u01de\t\u01de\4\u01df\t\u01df"+
		"\4\u01e0\t\u01e0\4\u01e1\t\u01e1\4\u01e2\t\u01e2\4\u01e3\t\u01e3\4\u01e4"+
		"\t\u01e4\4\u01e5\t\u01e5\4\u01e6\t\u01e6\4\u01e7\t\u01e7\4\u01e8\t\u01e8"+
		"\4\u01e9\t\u01e9\4\u01ea\t\u01ea\4\u01eb\t\u01eb\4\u01ec\t\u01ec\4\u01ed"+
		"\t\u01ed\4\u01ee\t\u01ee\4\u01ef\t\u01ef\4\u01f0\t\u01f0\4\u01f1\t\u01f1"+
		"\4\u01f2\t\u01f2\4\u01f3\t\u01f3\4\u01f4\t\u01f4\4\u01f5\t\u01f5\4\u01f6"+
		"\t\u01f6\4\u01f7\t\u01f7\4\u01f8\t\u01f8\4\u01f9\t\u01f9\4\u01fa\t\u01fa"+
		"\4\u01fb\t\u01fb\4\u01fc\t\u01fc\4\u01fd\t\u01fd\4\u01fe\t\u01fe\4\u01ff"+
		"\t\u01ff\4\u0200\t\u0200\4\u0201\t\u0201\4\u0202\t\u0202\4\u0203\t\u0203"+
		"\4\u0204\t\u0204\4\u0205\t\u0205\4\u0206\t\u0206\4\u0207\t\u0207\4\u0208"+
		"\t\u0208\4\u0209\t\u0209\4\u020a\t\u020a\4\u020b\t\u020b\4\u020c\t\u020c"+
		"\4\u020d\t\u020d\4\u020e\t\u020e\4\u020f\t\u020f\4\u0210\t\u0210\4\u0211"+
		"\t\u0211\4\u0212\t\u0212\4\u0213\t\u0213\4\u0214\t\u0214\4\u0215\t\u0215"+
		"\4\u0216\t\u0216\4\u0217\t\u0217\4\u0218\t\u0218\4\u0219\t\u0219\4\u021a"+
		"\t\u021a\4\u021b\t\u021b\4\u021c\t\u021c\4\u021d\t\u021d\4\u021e\t\u021e"+
		"\4\u021f\t\u021f\4\u0220\t\u0220\3\2\6\2\u0442\n\2\r\2\16\2\u0443\3\3"+
		"\7\3\u0447\n\3\f\3\16\3\u044a\13\3\3\3\3\3\3\4\3\4\5\4\u0450\n\4\3\4\3"+
		"\4\3\4\5\4\u0455\n\4\7\4\u0457\n\4\f\4\16\4\u045a\13\4\3\4\5\4\u045d\n"+
		"\4\5\4\u045f\n\4\3\4\3\4\3\5\3\5\5\5\u0465\n\5\3\5\5\5\u0468\n\5\3\6\5"+
		"\6\u046b\n\6\3\6\3\6\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3"+
		"\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\5\7\u048b"+
		"\n\7\3\b\3\b\3\b\3\b\5\b\u0491\n\b\3\b\6\b\u0494\n\b\r\b\16\b\u0495\5"+
		"\b\u0498\n\b\3\t\3\t\3\n\3\n\3\n\3\n\3\n\3\13\3\13\3\13\3\13\3\13\3\13"+
		"\5\13\u04a7\n\13\3\13\3\13\3\13\3\13\3\13\3\13\5\13\u04af\n\13\3\13\5"+
		"\13\u04b2\n\13\3\13\5\13\u04b5\n\13\3\13\5\13\u04b8\n\13\3\13\5\13\u04bb"+
		"\n\13\5\13\u04bd\n\13\3\13\3\13\3\13\3\13\3\13\6\13\u04c4\n\13\r\13\16"+
		"\13\u04c5\7\13\u04c8\n\13\f\13\16\13\u04cb\13\13\3\13\3\13\3\13\5\13\u04d0"+
		"\n\13\3\13\5\13\u04d3\n\13\3\13\3\13\5\13\u04d7\n\13\3\13\3\13\3\13\5"+
		"\13\u04dc\n\13\3\13\3\13\3\13\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\5\f"+
		"\u04ea\n\f\3\f\3\f\3\f\3\f\5\f\u04f0\n\f\3\f\3\f\3\f\5\f\u04f5\n\f\3\f"+
		"\3\f\3\f\5\f\u04fa\n\f\3\f\3\f\3\f\5\f\u04ff\n\f\3\f\3\f\3\f\6\f\u0504"+
		"\n\f\r\f\16\f\u0505\5\f\u0508\n\f\3\r\3\r\3\r\3\16\3\16\3\16\3\16\5\16"+
		"\u0511\n\16\3\16\3\16\3\16\5\16\u0516\n\16\3\16\3\16\5\16\u051a\n\16\3"+
		"\16\3\16\3\16\3\16\5\16\u0520\n\16\3\16\3\16\3\16\5\16\u0525\n\16\3\16"+
		"\3\16\5\16\u0529\n\16\3\16\3\16\3\16\3\16\7\16\u052f\n\16\f\16\16\16\u0532"+
		"\13\16\3\16\3\16\3\16\3\16\7\16\u0538\n\16\f\16\16\16\u053b\13\16\3\16"+
		"\3\16\3\16\3\16\7\16\u0541\n\16\f\16\16\16\u0544\13\16\3\16\3\16\3\16"+
		"\3\16\7\16\u054a\n\16\f\16\16\16\u054d\13\16\5\16\u054f\n\16\3\17\5\17"+
		"\u0552\n\17\3\17\6\17\u0555\n\17\r\17\16\17\u0556\3\20\3\20\3\20\5\20"+
		"\u055c\n\20\3\20\5\20\u055f\n\20\3\20\5\20\u0562\n\20\3\20\5\20\u0565"+
		"\n\20\3\20\3\20\3\20\5\20\u056a\n\20\3\20\3\20\3\20\5\20\u056f\n\20\3"+
		"\21\3\21\3\22\3\22\5\22\u0575\n\22\3\22\3\22\7\22\u0579\n\22\f\22\16\22"+
		"\u057c\13\22\3\22\5\22\u057f\n\22\6\22\u0581\n\22\r\22\16\22\u0582\3\22"+
		"\3\22\3\23\3\23\5\23\u0589\n\23\3\23\3\23\3\23\3\23\3\23\3\23\5\23\u0591"+
		"\n\23\3\23\5\23\u0594\n\23\3\24\3\24\3\24\5\24\u0599\n\24\3\25\3\25\3"+
		"\25\5\25\u059e\n\25\3\25\3\25\3\26\3\26\3\26\3\26\3\26\5\26\u05a7\n\26"+
		"\3\26\3\26\3\26\3\26\3\26\6\26\u05ae\n\26\r\26\16\26\u05af\3\27\3\27\3"+
		"\30\3\30\3\30\5\30\u05b7\n\30\3\31\3\31\3\32\3\32\3\33\3\33\3\33\5\33"+
		"\u05c0\n\33\5\33\u05c2\n\33\3\34\3\34\5\34\u05c6\n\34\3\34\3\34\5\34\u05ca"+
		"\n\34\3\34\3\34\5\34\u05ce\n\34\6\34\u05d0\n\34\r\34\16\34\u05d1\3\34"+
		"\3\34\5\34\u05d6\n\34\3\35\3\35\5\35\u05da\n\35\3\36\3\36\3\36\6\36\u05df"+
		"\n\36\r\36\16\36\u05e0\3\36\3\36\3\36\3\36\5\36\u05e7\n\36\5\36\u05e9"+
		"\n\36\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37"+
		"\5\37\u05f8\n\37\5\37\u05fa\n\37\3 \3 \5 \u05fe\n \3 \3 \3 \3 \3 \5 \u0605"+
		"\n \3 \6 \u0608\n \r \16 \u0609\3 \3 \5 \u060e\n \3!\3!\3\"\3\"\3\"\3"+
		"\"\5\"\u0616\n\"\3#\3#\3#\3#\3#\3#\3#\5#\u061f\n#\3#\3#\3#\3#\3#\3#\3"+
		"#\5#\u0628\n#\3#\3#\5#\u062c\n#\3#\3#\3#\3#\3#\3#\3#\5#\u0635\n#\3#\3"+
		"#\5#\u0639\n#\3#\3#\5#\u063d\n#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3"+
		"#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\5#\u0657\n#\3#\5#\u065a\n#\3#\5#\u065d"+
		"\n#\3#\3#\3#\3#\3#\3#\3#\3#\5#\u0667\n#\3#\3#\3#\3#\3#\3#\5#\u066f\n#"+
		"\3#\3#\6#\u0673\n#\r#\16#\u0674\3#\3#\5#\u0679\n#\3#\3#\5#\u067d\n#\3"+
		"$\3$\3$\7$\u0682\n$\f$\16$\u0685\13$\3%\3%\5%\u0689\n%\3%\3%\5%\u068d"+
		"\n%\3%\5%\u0690\n%\6%\u0692\n%\r%\16%\u0693\3%\3%\3&\3&\3&\3&\3&\5&\u069d"+
		"\n&\3&\3&\3&\3&\3&\3&\3&\3&\5&\u06a7\n&\3&\3&\3&\6&\u06ac\n&\r&\16&\u06ad"+
		"\3\'\3\'\3\'\3\'\3\'\3\'\5\'\u06b6\n\'\5\'\u06b8\n\'\5\'\u06ba\n\'\3\'"+
		"\5\'\u06bd\n\'\3(\3(\3(\3(\3(\3(\3(\5(\u06c6\n(\3(\3(\3(\3(\3(\3(\5(\u06ce"+
		"\n(\3(\3(\3(\3(\3(\5(\u06d5\n(\3)\3)\3*\3*\3+\3+\3+\5+\u06de\n+\3+\3+"+
		"\3+\5+\u06e3\n+\3+\3+\3,\3,\3,\3,\3,\3,\5,\u06ed\n,\3,\6,\u06f0\n,\r,"+
		"\16,\u06f1\3,\3,\5,\u06f6\n,\3,\3,\5,\u06fa\n,\3,\3,\3,\3,\3,\5,\u0701"+
		"\n,\3,\6,\u0704\n,\r,\16,\u0705\3,\3,\5,\u070a\n,\3-\3-\3.\3.\3.\3.\3"+
		".\5.\u0713\n.\3/\3/\5/\u0717\n/\3/\3/\5/\u071b\n/\3/\3/\6/\u071f\n/\r"+
		"/\16/\u0720\5/\u0723\n/\3/\5/\u0726\n/\6/\u0728\n/\r/\16/\u0729\3/\3/"+
		"\3\60\3\60\5\60\u0730\n\60\3\60\3\60\5\60\u0734\n\60\3\60\3\60\6\60\u0738"+
		"\n\60\r\60\16\60\u0739\5\60\u073c\n\60\3\60\5\60\u073f\n\60\6\60\u0741"+
		"\n\60\r\60\16\60\u0742\3\60\3\60\3\61\3\61\3\61\3\61\5\61\u074b\n\61\3"+
		"\61\6\61\u074e\n\61\r\61\16\61\u074f\3\61\3\61\3\61\3\61\5\61\u0756\n"+
		"\61\3\61\3\61\5\61\u075a\n\61\3\61\3\61\5\61\u075e\n\61\3\61\5\61\u0761"+
		"\n\61\3\61\5\61\u0764\n\61\6\61\u0766\n\61\r\61\16\61\u0767\3\61\5\61"+
		"\u076b\n\61\3\62\3\62\3\62\3\62\5\62\u0771\n\62\3\62\6\62\u0774\n\62\r"+
		"\62\16\62\u0775\3\62\3\62\5\62\u077a\n\62\3\62\3\62\5\62\u077e\n\62\3"+
		"\62\3\62\5\62\u0782\n\62\3\62\3\62\6\62\u0786\n\62\r\62\16\62\u0787\5"+
		"\62\u078a\n\62\3\62\3\62\5\62\u078e\n\62\6\62\u0790\n\62\r\62\16\62\u0791"+
		"\3\62\3\62\3\63\3\63\3\63\3\63\5\63\u079a\n\63\3\63\6\63\u079d\n\63\r"+
		"\63\16\63\u079e\3\63\3\63\3\63\3\63\5\63\u07a5\n\63\3\63\3\63\5\63\u07a9"+
		"\n\63\3\63\3\63\5\63\u07ad\n\63\3\63\5\63\u07b0\n\63\3\63\5\63\u07b3\n"+
		"\63\6\63\u07b5\n\63\r\63\16\63\u07b6\3\63\5\63\u07ba\n\63\3\64\3\64\3"+
		"\65\3\65\5\65\u07c0\n\65\3\65\5\65\u07c3\n\65\3\65\3\65\3\65\3\65\3\65"+
		"\5\65\u07ca\n\65\3\66\3\66\3\66\5\66\u07cf\n\66\3\66\3\66\3\67\3\67\3"+
		"8\38\38\58\u07d8\n8\38\38\38\38\38\38\38\58\u07e1\n8\68\u07e3\n8\r8\16"+
		"8\u07e4\38\38\58\u07e9\n8\39\39\59\u07ed\n9\39\39\59\u07f1\n9\39\59\u07f4"+
		"\n9\3:\3:\3:\5:\u07f9\n:\3:\3:\6:\u07fd\n:\r:\16:\u07fe\3:\3:\5:\u0803"+
		"\n:\3;\3;\3;\5;\u0808\n;\3;\3;\5;\u080c\n;\3;\3;\5;\u0810\n;\6;\u0812"+
		"\n;\r;\16;\u0813\3;\3;\3;\5;\u0819\n;\3;\3;\3;\6;\u081e\n;\r;\16;\u081f"+
		"\3;\3;\5;\u0824\n;\3;\5;\u0827\n;\3<\3<\5<\u082b\n<\3<\5<\u082e\n<\3<"+
		"\3<\3<\3<\3<\5<\u0835\n<\3<\3<\5<\u0839\n<\3<\3<\3<\3<\3<\3<\3<\3<\3<"+
		"\3<\7<\u0845\n<\f<\16<\u0848\13<\3<\3<\3<\5<\u084d\n<\5<\u084f\n<\3=\3"+
		"=\3=\3=\5=\u0855\n=\3=\3=\3=\3=\5=\u085b\n=\3=\5=\u085e\n=\3=\5=\u0861"+
		"\n=\3=\5=\u0864\n=\3=\5=\u0867\n=\3=\3=\3=\3=\3=\5=\u086e\n=\3=\5=\u0871"+
		"\n=\3=\5=\u0874\n=\3=\6=\u0877\n=\r=\16=\u0878\5=\u087b\n=\3=\5=\u087e"+
		"\n=\3=\5=\u0881\n=\3>\5>\u0884\n>\3>\3>\3>\3>\3>\5>\u088b\n>\6>\u088d"+
		"\n>\r>\16>\u088e\3?\3?\3?\5?\u0894\n?\3?\5?\u0897\n?\3?\3?\5?\u089b\n"+
		"?\3?\3?\3?\5?\u08a0\n?\3?\3?\3?\5?\u08a5\n?\3?\5?\u08a8\n?\3?\5?\u08ab"+
		"\n?\3?\5?\u08ae\n?\5?\u08b0\n?\3?\7?\u08b3\n?\f?\16?\u08b6\13?\3?\5?\u08b9"+
		"\n?\3?\3?\5?\u08bd\n?\3@\3@\3@\3@\3@\3@\3@\5@\u08c6\n@\3@\3@\5@\u08ca"+
		"\n@\5@\u08cc\n@\3A\3A\5A\u08d0\nA\3A\3A\5A\u08d4\nA\3A\3A\3A\3A\3A\5A"+
		"\u08db\nA\3A\7A\u08de\nA\fA\16A\u08e1\13A\3B\3B\5B\u08e5\nB\3B\3B\3B\3"+
		"B\3B\3B\3B\3B\3B\3B\3B\5B\u08f2\nB\3B\5B\u08f5\nB\3C\3C\3C\3C\3C\5C\u08fc"+
		"\nC\3D\3D\3D\3D\3D\5D\u0903\nD\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E"+
		"\3E\3E\3E\3E\5E\u0916\nE\3E\3E\3E\3E\5E\u091c\nE\3E\6E\u091f\nE\rE\16"+
		"E\u0920\3E\3E\3E\5E\u0926\nE\5E\u0928\nE\3F\3F\3F\3F\5F\u092e\nF\3G\3"+
		"G\3G\3G\5G\u0934\nG\3G\3G\3G\5G\u0939\nG\6G\u093b\nG\rG\16G\u093c\3G\3"+
		"G\5G\u0941\nG\3H\3H\3I\3I\3I\5I\u0948\nI\3I\3I\3I\3I\3I\3I\5I\u0950\n"+
		"I\6I\u0952\nI\rI\16I\u0953\3I\3I\3I\3J\5J\u095a\nJ\3J\3J\5J\u095e\nJ\3"+
		"K\3K\3K\3K\3L\3L\3L\3L\6L\u0968\nL\rL\16L\u0969\3M\3M\3M\3M\3M\3M\3M\6"+
		"M\u0973\nM\rM\16M\u0974\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3"+
		"N\3N\3N\3N\3N\5N\u098b\nN\3N\3N\3N\3N\3N\6N\u0992\nN\rN\16N\u0993\3N\3"+
		"N\3O\3O\5O\u099a\nO\3P\3P\3Q\3Q\3Q\3Q\5Q\u09a2\nQ\3Q\5Q\u09a5\nQ\3R\3"+
		"R\3R\3R\3S\5S\u09ac\nS\3S\3S\3S\5S\u09b1\nS\3S\3S\3S\3S\3S\5S\u09b8\n"+
		"S\3S\3S\3S\3S\5S\u09be\nS\3T\3T\3T\3T\5T\u09c4\nT\3T\5T\u09c7\nT\3T\5"+
		"T\u09ca\nT\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\6T\u09d6\nT\rT\16T\u09d7\3T\3"+
		"T\5T\u09dc\nT\3T\3T\5T\u09e0\nT\3T\5T\u09e3\nT\3U\3U\3V\3V\5V\u09e9\n"+
		"V\3V\3V\5V\u09ed\nV\3V\5V\u09f0\nV\3V\6V\u09f3\nV\rV\16V\u09f4\3V\5V\u09f8"+
		"\nV\3V\3V\3V\5V\u09fd\nV\3W\3W\5W\u0a01\nW\3W\5W\u0a04\nW\3W\3W\3W\3W"+
		"\3W\3W\5W\u0a0c\nW\3W\5W\u0a0f\nW\3X\3X\3X\3X\3Y\3Y\3Y\3Y\3Z\5Z\u0a1a"+
		"\nZ\3Z\6Z\u0a1d\nZ\rZ\16Z\u0a1e\3[\3[\3[\3[\3[\5[\u0a26\n[\3\\\5\\\u0a29"+
		"\n\\\3\\\3\\\3\\\3\\\3\\\3\\\3\\\6\\\u0a32\n\\\r\\\16\\\u0a33\3]\3]\3"+
		"]\3]\3]\3]\3]\3]\5]\u0a3e\n]\3^\3^\3^\5^\u0a43\n^\3^\3^\5^\u0a47\n^\3"+
		"_\3_\3_\5_\u0a4c\n_\3_\3_\5_\u0a50\n_\3_\3_\3_\3_\3_\5_\u0a57\n_\3`\3"+
		"`\3`\3`\5`\u0a5d\n`\3`\5`\u0a60\n`\3a\3a\3a\3a\3a\3a\3a\3a\3a\3a\3a\3"+
		"a\3a\3a\3a\3a\3a\3a\3a\3a\5a\u0a76\na\3a\5a\u0a79\na\6a\u0a7b\na\ra\16"+
		"a\u0a7c\3b\3b\3b\3b\3b\3b\5b\u0a85\nb\3c\3c\3d\3d\3d\5d\u0a8c\nd\5d\u0a8e"+
		"\nd\3e\3e\5e\u0a92\ne\3e\3e\3e\5e\u0a97\ne\3e\5e\u0a9a\ne\3e\5e\u0a9d"+
		"\ne\3e\5e\u0aa0\ne\3f\3f\3f\5f\u0aa5\nf\3f\6f\u0aa8\nf\rf\16f\u0aa9\3"+
		"f\3f\3f\3f\3f\3f\3f\3f\6f\u0ab4\nf\rf\16f\u0ab5\3f\3f\3f\3f\3f\3f\3f\3"+
		"f\3f\3f\3f\6f\u0ac3\nf\rf\16f\u0ac4\5f\u0ac7\nf\3g\3g\5g\u0acb\ng\3g\3"+
		"g\5g\u0acf\ng\3g\5g\u0ad2\ng\3h\3h\3h\3h\3h\5h\u0ad9\nh\3h\3h\3h\5h\u0ade"+
		"\nh\3h\3h\3h\3h\3h\5h\u0ae5\nh\3h\3h\3h\3h\5h\u0aeb\nh\5h\u0aed\nh\3h"+
		"\3h\3h\3h\5h\u0af3\nh\3i\3i\5i\u0af7\ni\3i\3i\3i\3i\3i\5i\u0afe\ni\3i"+
		"\3i\3i\5i\u0b03\ni\3j\3j\3k\3k\3k\3k\3k\3k\3k\3k\5k\u0b0f\nk\3l\3l\3l"+
		"\3l\3l\3l\3l\3l\3l\3l\3l\3l\5l\u0b1d\nl\3l\6l\u0b20\nl\rl\16l\u0b21\3"+
		"l\3l\5l\u0b26\nl\5l\u0b28\nl\3l\3l\5l\u0b2c\nl\3l\3l\5l\u0b30\nl\3l\3"+
		"l\3l\6l\u0b35\nl\rl\16l\u0b36\3l\3l\3m\3m\3m\3m\3m\5m\u0b40\nm\3m\6m\u0b43"+
		"\nm\rm\16m\u0b44\3m\3m\3n\5n\u0b4a\nn\3n\5n\u0b4d\nn\3n\3n\5n\u0b51\n"+
		"n\3n\3n\5n\u0b55\nn\5n\u0b57\nn\3n\3n\3n\5n\u0b5c\nn\3o\3o\3o\3o\3o\3"+
		"o\3o\3o\5o\u0b66\no\3o\3o\5o\u0b6a\no\3o\3o\3o\6o\u0b6f\no\ro\16o\u0b70"+
		"\3o\3o\5o\u0b75\no\3p\3p\3p\5p\u0b7a\np\3p\6p\u0b7d\np\rp\16p\u0b7e\3"+
		"p\5p\u0b82\np\3p\3p\3q\3q\3q\3q\3q\3q\5q\u0b8c\nq\3r\3r\3r\3r\3r\3r\3"+
		"r\3r\3r\3r\3r\3r\5r\u0b9a\nr\3r\6r\u0b9d\nr\rr\16r\u0b9e\3r\3r\5r\u0ba3"+
		"\nr\5r\u0ba5\nr\3r\3r\3r\5r\u0baa\nr\3r\3r\5r\u0bae\nr\3r\6r\u0bb1\nr"+
		"\rr\16r\u0bb2\3r\3r\3s\3s\3s\3s\3s\5s\u0bbc\ns\3t\3t\3t\3t\3t\3t\3t\5"+
		"t\u0bc5\nt\3u\3u\3u\3u\5u\u0bcb\nu\3u\6u\u0bce\nu\ru\16u\u0bcf\3u\5u\u0bd3"+
		"\nu\3u\6u\u0bd6\nu\ru\16u\u0bd7\3u\5u\u0bdb\nu\3u\6u\u0bde\nu\ru\16u\u0bdf"+
		"\5u\u0be2\nu\3u\3u\3u\5u\u0be7\nu\3v\3v\5v\u0beb\nv\3v\3v\5v\u0bef\nv"+
		"\3w\3w\5w\u0bf3\nw\3w\3w\5w\u0bf7\nw\3x\3x\5x\u0bfb\nx\3x\5x\u0bfe\nx"+
		"\3y\3y\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\5z\u0c0c\nz\3z\6z\u0c0f\nz\rz\16"+
		"z\u0c10\3z\3z\5z\u0c15\nz\3z\5z\u0c18\nz\3{\3{\5{\u0c1c\n{\3{\3{\3{\3"+
		"{\5{\u0c22\n{\3{\6{\u0c25\n{\r{\16{\u0c26\3{\5{\u0c2a\n{\3{\6{\u0c2d\n"+
		"{\r{\16{\u0c2e\3{\5{\u0c32\n{\3{\6{\u0c35\n{\r{\16{\u0c36\5{\u0c39\n{"+
		"\3{\3{\3{\5{\u0c3e\n{\5{\u0c40\n{\3|\3|\3|\3|\3|\3|\5|\u0c48\n|\3|\6|"+
		"\u0c4b\n|\r|\16|\u0c4c\3|\3|\5|\u0c51\n|\3}\3}\3}\3}\3}\3}\3}\3}\3}\5"+
		"}\u0c5c\n}\3}\3}\5}\u0c60\n}\3}\6}\u0c63\n}\r}\16}\u0c64\3}\3}\3~\3~\5"+
		"~\u0c6b\n~\3~\3~\3~\3~\5~\u0c71\n~\3~\6~\u0c74\n~\r~\16~\u0c75\3~\5~\u0c79"+
		"\n~\3~\6~\u0c7c\n~\r~\16~\u0c7d\3~\5~\u0c81\n~\3~\6~\u0c84\n~\r~\16~\u0c85"+
		"\5~\u0c88\n~\3~\3~\3~\5~\u0c8d\n~\5~\u0c8f\n~\3\177\3\177\3\177\3\177"+
		"\3\177\3\177\6\177\u0c97\n\177\r\177\16\177\u0c98\3\177\3\177\3\177\3"+
		"\177\5\177\u0c9f\n\177\3\177\3\177\5\177\u0ca3\n\177\3\u0080\3\u0080\3"+
		"\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\5\u0080\u0cad\n\u0080\3"+
		"\u0080\6\u0080\u0cb0\n\u0080\r\u0080\16\u0080\u0cb1\3\u0080\3\u0080\5"+
		"\u0080\u0cb6\n\u0080\3\u0081\3\u0081\5\u0081\u0cba\n\u0081\3\u0081\3\u0081"+
		"\3\u0082\3\u0082\3\u0082\3\u0082\3\u0082\3\u0082\5\u0082\u0cc4\n\u0082"+
		"\3\u0082\6\u0082\u0cc7\n\u0082\r\u0082\16\u0082\u0cc8\5\u0082\u0ccb\n"+
		"\u0082\3\u0083\3\u0083\5\u0083\u0ccf\n\u0083\3\u0083\3\u0083\3\u0083\3"+
		"\u0083\3\u0083\3\u0083\5\u0083\u0cd7\n\u0083\3\u0083\5\u0083\u0cda\n\u0083"+
		"\3\u0083\5\u0083\u0cdd\n\u0083\3\u0083\5\u0083\u0ce0\n\u0083\3\u0083\3"+
		"\u0083\5\u0083\u0ce4\n\u0083\3\u0084\3\u0084\3\u0084\3\u0084\3\u0085\5"+
		"\u0085\u0ceb\n\u0085\3\u0085\3\u0085\3\u0085\3\u0086\3\u0086\3\u0086\3"+
		"\u0086\3\u0086\3\u0086\5\u0086\u0cf6\n\u0086\3\u0087\3\u0087\3\u0087\5"+
		"\u0087\u0cfb\n\u0087\3\u0087\3\u0087\5\u0087\u0cff\n\u0087\3\u0087\6\u0087"+
		"\u0d02\n\u0087\r\u0087\16\u0087\u0d03\3\u0087\3\u0087\5\u0087\u0d08\n"+
		"\u0087\3\u0087\3\u0087\3\u0087\3\u0087\5\u0087\u0d0e\n\u0087\3\u0087\5"+
		"\u0087\u0d11\n\u0087\3\u0087\5\u0087\u0d14\n\u0087\3\u0087\5\u0087\u0d17"+
		"\n\u0087\3\u0087\5\u0087\u0d1a\n\u0087\3\u0087\5\u0087\u0d1d\n\u0087\3"+
		"\u0087\5\u0087\u0d20\n\u0087\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087\5"+
		"\u0087\u0d27\n\u0087\3\u0087\5\u0087\u0d2a\n\u0087\3\u0087\5\u0087\u0d2d"+
		"\n\u0087\3\u0087\6\u0087\u0d30\n\u0087\r\u0087\16\u0087\u0d31\5\u0087"+
		"\u0d34\n\u0087\3\u0087\5\u0087\u0d37\n\u0087\3\u0087\5\u0087\u0d3a\n\u0087"+
		"\3\u0088\5\u0088\u0d3d\n\u0088\3\u0088\3\u0088\3\u0088\3\u0088\3\u0088"+
		"\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089\5\u0089\u0d4b"+
		"\n\u0089\3\u008a\3\u008a\5\u008a\u0d4f\n\u008a\3\u008a\3\u008a\3\u008a"+
		"\3\u008a\6\u008a\u0d55\n\u008a\r\u008a\16\u008a\u0d56\3\u008a\3\u008a"+
		"\3\u008b\3\u008b\3\u008b\3\u008b\3\u008b\3\u008b\5\u008b\u0d61\n\u008b"+
		"\3\u008b\3\u008b\5\u008b\u0d65\n\u008b\3\u008b\5\u008b\u0d68\n\u008b\3"+
		"\u008b\5\u008b\u0d6b\n\u008b\3\u008b\3\u008b\3\u008b\3\u008b\5\u008b\u0d71"+
		"\n\u008b\3\u008b\5\u008b\u0d74\n\u008b\3\u008b\5\u008b\u0d77\n\u008b\3"+
		"\u008b\5\u008b\u0d7a\n\u008b\3\u008b\5\u008b\u0d7d\n\u008b\3\u008b\5\u008b"+
		"\u0d80\n\u008b\3\u008b\5\u008b\u0d83\n\u008b\3\u008b\3\u008b\3\u008b\3"+
		"\u008b\3\u008b\5\u008b\u0d8a\n\u008b\3\u008b\5\u008b\u0d8d\n\u008b\3\u008b"+
		"\5\u008b\u0d90\n\u008b\3\u008b\6\u008b\u0d93\n\u008b\r\u008b\16\u008b"+
		"\u0d94\5\u008b\u0d97\n\u008b\3\u008b\5\u008b\u0d9a\n\u008b\3\u008b\5\u008b"+
		"\u0d9d\n\u008b\3\u008c\3\u008c\3\u008c\3\u008c\5\u008c\u0da3\n\u008c\3"+
		"\u008c\3\u008c\3\u008c\3\u008c\3\u008c\3\u008c\6\u008c\u0dab\n\u008c\r"+
		"\u008c\16\u008c\u0dac\3\u008c\3\u008c\3\u008d\3\u008d\3\u008d\3\u008d"+
		"\5\u008d\u0db5\n\u008d\3\u008d\3\u008d\5\u008d\u0db9\n\u008d\3\u008e\3"+
		"\u008e\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\5\u008e\u0dc2\n\u008e\3"+
		"\u008f\3\u008f\3\u008f\3\u008f\3\u008f\3\u008f\3\u008f\3\u008f\3\u008f"+
		"\3\u008f\3\u008f\5\u008f\u0dcf\n\u008f\3\u0090\3\u0090\3\u0090\3\u0090"+
		"\3\u0090\3\u0090\3\u0090\3\u0090\3\u0090\3\u0090\3\u0090\3\u0090\3\u0090"+
		"\3\u0090\3\u0090\3\u0090\3\u0090\6\u0090\u0de2\n\u0090\r\u0090\16\u0090"+
		"\u0de3\3\u0090\5\u0090\u0de7\n\u0090\3\u0091\3\u0091\5\u0091\u0deb\n\u0091"+
		"\3\u0091\3\u0091\3\u0091\3\u0091\5\u0091\u0df1\n\u0091\7\u0091\u0df3\n"+
		"\u0091\f\u0091\16\u0091\u0df6\13\u0091\3\u0091\3\u0091\5\u0091\u0dfa\n"+
		"\u0091\3\u0091\3\u0091\3\u0091\3\u0091\3\u0091\5\u0091\u0e01\n\u0091\7"+
		"\u0091\u0e03\n\u0091\f\u0091\16\u0091\u0e06\13\u0091\5\u0091\u0e08\n\u0091"+
		"\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092"+
		"\6\u0092\u0e13\n\u0092\r\u0092\16\u0092\u0e14\3\u0092\5\u0092\u0e18\n"+
		"\u0092\3\u0093\3\u0093\3\u0093\3\u0093\5\u0093\u0e1e\n\u0093\3\u0094\3"+
		"\u0094\5\u0094\u0e22\n\u0094\3\u0094\3\u0094\3\u0094\3\u0094\3\u0094\3"+
		"\u0095\5\u0095\u0e2a\n\u0095\3\u0095\3\u0095\3\u0096\3\u0096\3\u0096\3"+
		"\u0096\5\u0096\u0e32\n\u0096\3\u0097\3\u0097\3\u0097\3\u0097\5\u0097\u0e38"+
		"\n\u0097\3\u0097\5\u0097\u0e3b\n\u0097\3\u0098\3\u0098\3\u0098\5\u0098"+
		"\u0e40\n\u0098\3\u0099\3\u0099\5\u0099\u0e44\n\u0099\3\u0099\3\u0099\5"+
		"\u0099\u0e48\n\u0099\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\6"+
		"\u009a\u0e50\n\u009a\r\u009a\16\u009a\u0e51\5\u009a\u0e54\n\u009a\3\u009b"+
		"\3\u009b\3\u009b\5\u009b\u0e59\n\u009b\3\u009b\3\u009b\5\u009b\u0e5d\n"+
		"\u009b\3\u009b\3\u009b\5\u009b\u0e61\n\u009b\6\u009b\u0e63\n\u009b\r\u009b"+
		"\16\u009b\u0e64\3\u009b\5\u009b\u0e68\n\u009b\3\u009c\3\u009c\3\u009c"+
		"\5\u009c\u0e6d\n\u009c\3\u009c\5\u009c\u0e70\n\u009c\3\u009d\3\u009d\3"+
		"\u009d\3\u009d\5\u009d\u0e76\n\u009d\3\u009e\3\u009e\3\u009e\7\u009e\u0e7b"+
		"\n\u009e\f\u009e\16\u009e\u0e7e\13\u009e\3\u009e\5\u009e\u0e81\n\u009e"+
		"\3\u009e\3\u009e\3\u009e\7\u009e\u0e86\n\u009e\f\u009e\16\u009e\u0e89"+
		"\13\u009e\3\u009e\5\u009e\u0e8c\n\u009e\3\u009e\3\u009e\3\u009e\3\u009e"+
		"\3\u009e\3\u009e\3\u009e\5\u009e\u0e95\n\u009e\3\u009e\3\u009e\5\u009e"+
		"\u0e99\n\u009e\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e"+
		"\6\u009e\u0ea2\n\u009e\r\u009e\16\u009e\u0ea3\5\u009e\u0ea6\n\u009e\3"+
		"\u009f\3\u009f\3\u00a0\3\u00a0\3\u00a1\3\u00a1\3\u00a1\3\u00a2\3\u00a2"+
		"\3\u00a2\3\u00a2\5\u00a2\u0eb3\n\u00a2\3\u00a2\5\u00a2\u0eb6\n\u00a2\3"+
		"\u00a2\5\u00a2\u0eb9\n\u00a2\3\u00a2\3\u00a2\3\u00a2\5\u00a2\u0ebe\n\u00a2"+
		"\5\u00a2\u0ec0\n\u00a2\3\u00a3\3\u00a3\3\u00a3\3\u00a3\5\u00a3\u0ec6\n"+
		"\u00a3\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\7\u00a4\u0ece\n"+
		"\u00a4\f\u00a4\16\u00a4\u0ed1\13\u00a4\6\u00a4\u0ed3\n\u00a4\r\u00a4\16"+
		"\u00a4\u0ed4\3\u00a5\3\u00a5\5\u00a5\u0ed9\n\u00a5\3\u00a5\3\u00a5\5\u00a5"+
		"\u0edd\n\u00a5\3\u00a5\3\u00a5\5\u00a5\u0ee1\n\u00a5\3\u00a5\6\u00a5\u0ee4"+
		"\n\u00a5\r\u00a5\16\u00a5\u0ee5\3\u00a5\3\u00a5\3\u00a5\3\u00a5\5\u00a5"+
		"\u0eec\n\u00a5\5\u00a5\u0eee\n\u00a5\3\u00a5\5\u00a5\u0ef1\n\u00a5\3\u00a6"+
		"\3\u00a6\3\u00a6\5\u00a6\u0ef6\n\u00a6\3\u00a6\6\u00a6\u0ef9\n\u00a6\r"+
		"\u00a6\16\u00a6\u0efa\3\u00a6\3\u00a6\3\u00a6\3\u00a6\5\u00a6\u0f01\n"+
		"\u00a6\3\u00a7\3\u00a7\5\u00a7\u0f05\n\u00a7\3\u00a7\3\u00a7\3\u00a7\3"+
		"\u00a7\3\u00a7\3\u00a7\3\u00a7\3\u00a7\5\u00a7\u0f0f\n\u00a7\5\u00a7\u0f11"+
		"\n\u00a7\3\u00a8\3\u00a8\5\u00a8\u0f15\n\u00a8\3\u00a8\3\u00a8\5\u00a8"+
		"\u0f19\n\u00a8\3\u00a8\3\u00a8\3\u00a8\5\u00a8\u0f1e\n\u00a8\3\u00a8\7"+
		"\u00a8\u0f21\n\u00a8\f\u00a8\16\u00a8\u0f24\13\u00a8\3\u00a8\5\u00a8\u0f27"+
		"\n\u00a8\3\u00a9\3\u00a9\3\u00a9\5\u00a9\u0f2c\n\u00a9\3\u00a9\3\u00a9"+
		"\3\u00a9\3\u00a9\3\u00a9\5\u00a9\u0f33\n\u00a9\3\u00aa\3\u00aa\3\u00aa"+
		"\3\u00aa\3\u00aa\3\u00aa\5\u00aa\u0f3b\n\u00aa\3\u00aa\6\u00aa\u0f3e\n"+
		"\u00aa\r\u00aa\16\u00aa\u0f3f\3\u00aa\3\u00aa\5\u00aa\u0f44\n\u00aa\3"+
		"\u00aa\3\u00aa\3\u00aa\7\u00aa\u0f49\n\u00aa\f\u00aa\16\u00aa\u0f4c\13"+
		"\u00aa\3\u00aa\3\u00aa\3\u00aa\3\u00aa\3\u00aa\5\u00aa\u0f53\n\u00aa\3"+
		"\u00aa\6\u00aa\u0f56\n\u00aa\r\u00aa\16\u00aa\u0f57\3\u00aa\3\u00aa\5"+
		"\u00aa\u0f5c\n\u00aa\3\u00aa\3\u00aa\3\u00aa\7\u00aa\u0f61\n\u00aa\f\u00aa"+
		"\16\u00aa\u0f64\13\u00aa\3\u00aa\3\u00aa\5\u00aa\u0f68\n\u00aa\3\u00aa"+
		"\3\u00aa\3\u00aa\3\u00aa\3\u00aa\5\u00aa\u0f6f\n\u00aa\3\u00aa\3\u00aa"+
		"\5\u00aa\u0f73\n\u00aa\3\u00ab\3\u00ab\5\u00ab\u0f77\n\u00ab\3\u00ab\3"+
		"\u00ab\3\u00ab\3\u00ab\3\u00ac\3\u00ac\3\u00ad\3\u00ad\3\u00ae\3\u00ae"+
		"\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00af\3\u00af\3\u00b0"+
		"\3\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b1"+
		"\3\u00b1\3\u00b1\3\u00b1\3\u00b1\3\u00b1\3\u00b1\3\u00b1\3\u00b1\3\u00b1"+
		"\3\u00b1\3\u00b1\3\u00b1\3\u00b1\3\u00b1\3\u00b1\5\u00b1\u0fa4\n\u00b1"+
		"\3\u00b1\5\u00b1\u0fa7\n\u00b1\3\u00b1\3\u00b1\3\u00b1\6\u00b1\u0fac\n"+
		"\u00b1\r\u00b1\16\u00b1\u0fad\3\u00b2\3\u00b2\3\u00b2\3\u00b2\3\u00b3"+
		"\3\u00b3\3\u00b3\3\u00b3\3\u00b3\5\u00b3\u0fb9\n\u00b3\3\u00b3\7\u00b3"+
		"\u0fbc\n\u00b3\f\u00b3\16\u00b3\u0fbf\13\u00b3\3\u00b3\3\u00b3\5\u00b3"+
		"\u0fc3\n\u00b3\3\u00b4\3\u00b4\3\u00b4\5\u00b4\u0fc8\n\u00b4\5\u00b4\u0fca"+
		"\n\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b4\7\u00b4\u0fd2"+
		"\n\u00b4\f\u00b4\16\u00b4\u0fd5\13\u00b4\3\u00b4\3\u00b4\5\u00b4\u0fd9"+
		"\n\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b4\7\u00b4\u0fe1"+
		"\n\u00b4\f\u00b4\16\u00b4\u0fe4\13\u00b4\3\u00b4\5\u00b4\u0fe7\n\u00b4"+
		"\3\u00b4\3\u00b4\5\u00b4\u0feb\n\u00b4\3\u00b4\7\u00b4\u0fee\n\u00b4\f"+
		"\u00b4\16\u00b4\u0ff1\13\u00b4\3\u00b4\3\u00b4\5\u00b4\u0ff5\n\u00b4\3"+
		"\u00b4\3\u00b4\3\u00b4\5\u00b4\u0ffa\n\u00b4\3\u00b5\3\u00b5\5\u00b5\u0ffe"+
		"\n\u00b5\3\u00b6\3\u00b6\3\u00b6\3\u00b6\3\u00b6\3\u00b6\3\u00b6\3\u00b6"+
		"\3\u00b6\3\u00b6\7\u00b6\u100a\n\u00b6\f\u00b6\16\u00b6\u100d\13\u00b6"+
		"\3\u00b6\3\u00b6\5\u00b6\u1011\n\u00b6\3\u00b6\5\u00b6\u1014\n\u00b6\3"+
		"\u00b6\3\u00b6\3\u00b7\3\u00b7\5\u00b7\u101a\n\u00b7\3\u00b8\3\u00b8\3"+
		"\u00b8\3\u00b8\3\u00b8\7\u00b8\u1021\n\u00b8\f\u00b8\16\u00b8\u1024\13"+
		"\u00b8\3\u00b8\3\u00b8\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9"+
		"\3\u00b9\7\u00b9\u102f\n\u00b9\f\u00b9\16\u00b9\u1032\13\u00b9\3\u00b9"+
		"\3\u00b9\3\u00ba\3\u00ba\3\u00ba\5\u00ba\u1039\n\u00ba\3\u00ba\3\u00ba"+
		"\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\5\u00bb\u1042\n\u00bb\3\u00bb"+
		"\5\u00bb\u1045\n\u00bb\3\u00bb\7\u00bb\u1048\n\u00bb\f\u00bb\16\u00bb"+
		"\u104b\13\u00bb\3\u00bb\3\u00bb\5\u00bb\u104f\n\u00bb\3\u00bc\3\u00bc"+
		"\3\u00bc\5\u00bc\u1054\n\u00bc\3\u00bc\3\u00bc\3\u00bc\5\u00bc\u1059\n"+
		"\u00bc\3\u00bd\3\u00bd\3\u00bd\3\u00bd\7\u00bd\u105f\n\u00bd\f\u00bd\16"+
		"\u00bd\u1062\13\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd\5\u00bd\u1068\n"+
		"\u00bd\5\u00bd\u106a\n\u00bd\3\u00be\3\u00be\5\u00be\u106e\n\u00be\3\u00be"+
		"\3\u00be\7\u00be\u1072\n\u00be\f\u00be\16\u00be\u1075\13\u00be\3\u00be"+
		"\3\u00be\5\u00be\u1079\n\u00be\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf"+
		"\3\u00bf\3\u00bf\3\u00bf\3\u00bf\5\u00bf\u1084\n\u00bf\3\u00c0\3\u00c0"+
		"\3\u00c0\3\u00c0\3\u00c0\3\u00c0\7\u00c0\u108c\n\u00c0\f\u00c0\16\u00c0"+
		"\u108f\13\u00c0\3\u00c0\3\u00c0\5\u00c0\u1093\n\u00c0\3\u00c0\3\u00c0"+
		"\3\u00c1\3\u00c1\3\u00c1\3\u00c1\3\u00c1\3\u00c1\7\u00c1\u109d\n\u00c1"+
		"\f\u00c1\16\u00c1\u10a0\13\u00c1\3\u00c1\3\u00c1\5\u00c1\u10a4\n\u00c1"+
		"\3\u00c1\3\u00c1\3\u00c1\5\u00c1\u10a9\n\u00c1\3\u00c1\5\u00c1\u10ac\n"+
		"\u00c1\3\u00c1\3\u00c1\3\u00c2\3\u00c2\3\u00c2\3\u00c2\3\u00c2\3\u00c2"+
		"\3\u00c2\3\u00c2\3\u00c2\3\u00c2\5\u00c2\u10ba\n\u00c2\3\u00c3\3\u00c3"+
		"\3\u00c3\3\u00c3\3\u00c4\3\u00c4\3\u00c4\3\u00c4\3\u00c4\5\u00c4\u10c5"+
		"\n\u00c4\3\u00c4\7\u00c4\u10c8\n\u00c4\f\u00c4\16\u00c4\u10cb\13\u00c4"+
		"\3\u00c4\3\u00c4\5\u00c4\u10cf\n\u00c4\3\u00c5\3\u00c5\3\u00c5\5\u00c5"+
		"\u10d4\n\u00c5\5\u00c5\u10d6\n\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3"+
		"\u00c5\3\u00c5\7\u00c5\u10de\n\u00c5\f\u00c5\16\u00c5\u10e1\13\u00c5\3"+
		"\u00c5\3\u00c5\5\u00c5\u10e5\n\u00c5\3\u00c5\5\u00c5\u10e8\n\u00c5\3\u00c5"+
		"\3\u00c5\5\u00c5\u10ec\n\u00c5\3\u00c5\7\u00c5\u10ef\n\u00c5\f\u00c5\16"+
		"\u00c5\u10f2\13\u00c5\3\u00c5\3\u00c5\3\u00c5\5\u00c5\u10f7\n\u00c5\3"+
		"\u00c6\3\u00c6\3\u00c6\3\u00c6\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7"+
		"\3\u00c7\3\u00c7\3\u00c7\3\u00c7\5\u00c7\u1106\n\u00c7\3\u00c7\7\u00c7"+
		"\u1109\n\u00c7\f\u00c7\16\u00c7\u110c\13\u00c7\3\u00c7\3\u00c7\5\u00c7"+
		"\u1110\n\u00c7\5\u00c7\u1112\n\u00c7\3\u00c8\3\u00c8\3\u00c8\5\u00c8\u1117"+
		"\n\u00c8\3\u00c8\3\u00c8\3\u00c8\3\u00c8\3\u00c8\5\u00c8\u111e\n\u00c8"+
		"\3\u00c8\5\u00c8\u1121\n\u00c8\3\u00c8\5\u00c8\u1124\n\u00c8\3\u00c8\5"+
		"\u00c8\u1127\n\u00c8\3\u00c8\3\u00c8\3\u00c9\3\u00c9\3\u00c9\3\u00c9\7"+
		"\u00c9\u112f\n\u00c9\f\u00c9\16\u00c9\u1132\13\u00c9\3\u00ca\3\u00ca\3"+
		"\u00ca\3\u00ca\3\u00ca\3\u00cb\3\u00cb\3\u00cb\3\u00cb\5\u00cb\u113d\n"+
		"\u00cb\3\u00cb\3\u00cb\5\u00cb\u1141\n\u00cb\3\u00cb\5\u00cb\u1144\n\u00cb"+
		"\3\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cd\3\u00cd\3\u00cd\5\u00cd\u114d"+
		"\n\u00cd\3\u00ce\3\u00ce\3\u00ce\3\u00ce\7\u00ce\u1153\n\u00ce\f\u00ce"+
		"\16\u00ce\u1156\13\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00ce\5\u00ce"+
		"\u115d\n\u00ce\3\u00ce\5\u00ce\u1160\n\u00ce\3\u00cf\3\u00cf\3\u00cf\3"+
		"\u00cf\3\u00cf\5\u00cf\u1167\n\u00cf\3\u00d0\3\u00d0\5\u00d0\u116b\n\u00d0"+
		"\3\u00d1\3\u00d1\3\u00d1\7\u00d1\u1170\n\u00d1\f\u00d1\16\u00d1\u1173"+
		"\13\u00d1\3\u00d1\6\u00d1\u1176\n\u00d1\r\u00d1\16\u00d1\u1177\3\u00d1"+
		"\3\u00d1\3\u00d1\3\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2"+
		"\3\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2"+
		"\3\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2"+
		"\3\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2"+
		"\3\u00d2\3\u00d2\5\u00d2\u11a1\n\u00d2\3\u00d3\3\u00d3\3\u00d3\3\u00d3"+
		"\3\u00d3\3\u00d3\3\u00d3\3\u00d3\3\u00d3\3\u00d3\3\u00d3\3\u00d3\3\u00d3"+
		"\3\u00d3\3\u00d3\3\u00d3\3\u00d3\3\u00d3\3\u00d3\3\u00d3\3\u00d3\3\u00d3"+
		"\3\u00d3\3\u00d3\3\u00d3\3\u00d3\5\u00d3\u11bd\n\u00d3\3\u00d4\3\u00d4"+
		"\3\u00d4\7\u00d4\u11c2\n\u00d4\f\u00d4\16\u00d4\u11c5\13\u00d4\3\u00d4"+
		"\3\u00d4\5\u00d4\u11c9\n\u00d4\3\u00d4\3\u00d4\3\u00d5\3\u00d5\3\u00d5"+
		"\3\u00d5\3\u00d5\7\u00d5\u11d2\n\u00d5\f\u00d5\16\u00d5\u11d5\13\u00d5"+
		"\5\u00d5\u11d7\n\u00d5\3\u00d6\3\u00d6\3\u00d6\3\u00d6\3\u00d6\3\u00d7"+
		"\3\u00d7\6\u00d7\u11e0\n\u00d7\r\u00d7\16\u00d7\u11e1\3\u00d8\3\u00d8"+
		"\3\u00d8\3\u00d9\3\u00d9\3\u00d9\5\u00d9\u11ea\n\u00d9\3\u00d9\3\u00d9"+
		"\5\u00d9\u11ee\n\u00d9\3\u00da\3\u00da\3\u00da\3\u00da\3\u00da\3\u00da"+
		"\3\u00da\3\u00da\5\u00da\u11f8\n\u00da\3\u00da\5\u00da\u11fb\n\u00da\3"+
		"\u00db\3\u00db\5\u00db\u11ff\n\u00db\3\u00db\5\u00db\u1202\n\u00db\3\u00db"+
		"\7\u00db\u1205\n\u00db\f\u00db\16\u00db\u1208\13\u00db\3\u00db\3\u00db"+
		"\5\u00db\u120c\n\u00db\3\u00dc\3\u00dc\5\u00dc\u1210\n\u00dc\3\u00dc\3"+
		"\u00dc\3\u00dc\3\u00dc\3\u00dc\3\u00dc\7\u00dc\u1218\n\u00dc\f\u00dc\16"+
		"\u00dc\u121b\13\u00dc\3\u00dc\3\u00dc\3\u00dd\3\u00dd\3\u00dd\7\u00dd"+
		"\u1222\n\u00dd\f\u00dd\16\u00dd\u1225\13\u00dd\3\u00de\3\u00de\3\u00de"+
		"\5\u00de\u122a\n\u00de\3\u00df\3\u00df\3\u00df\3\u00df\3\u00df\3\u00df"+
		"\3\u00df\7\u00df\u1233\n\u00df\f\u00df\16\u00df\u1236\13\u00df\3\u00df"+
		"\3\u00df\5\u00df\u123a\n\u00df\3\u00e0\3\u00e0\5\u00e0\u123e\n\u00e0\3"+
		"\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1\5\u00e1\u1246\n\u00e1\3"+
		"\u00e2\3\u00e2\3\u00e2\3\u00e2\3\u00e2\3\u00e2\5\u00e2\u124e\n\u00e2\3"+
		"\u00e2\3\u00e2\3\u00e2\5\u00e2\u1253\n\u00e2\3\u00e2\5\u00e2\u1256\n\u00e2"+
		"\5\u00e2\u1258\n\u00e2\3\u00e3\5\u00e3\u125b\n\u00e3\3\u00e3\3\u00e3\3"+
		"\u00e3\3\u00e3\3\u00e4\3\u00e4\3\u00e4\5\u00e4\u1264\n\u00e4\3\u00e4\3"+
		"\u00e4\3\u00e4\5\u00e4\u1269\n\u00e4\3\u00e5\3\u00e5\3\u00e5\5\u00e5\u126e"+
		"\n\u00e5\3\u00e5\5\u00e5\u1271\n\u00e5\3\u00e6\5\u00e6\u1274\n\u00e6\3"+
		"\u00e6\3\u00e6\5\u00e6\u1278\n\u00e6\3\u00e6\5\u00e6\u127b\n\u00e6\3\u00e6"+
		"\3\u00e6\3\u00e6\3\u00e6\7\u00e6\u1281\n\u00e6\f\u00e6\16\u00e6\u1284"+
		"\13\u00e6\3\u00e6\3\u00e6\5\u00e6\u1288\n\u00e6\3\u00e6\7\u00e6\u128b"+
		"\n\u00e6\f\u00e6\16\u00e6\u128e\13\u00e6\3\u00e7\3\u00e7\3\u00e7\3\u00e7"+
		"\5\u00e7\u1294\n\u00e7\3\u00e8\3\u00e8\3\u00e8\3\u00e9\3\u00e9\3\u00e9"+
		"\3\u00e9\3\u00e9\5\u00e9\u129e\n\u00e9\3\u00ea\3\u00ea\3\u00ea\3\u00ea"+
		"\3\u00ea\3\u00ea\3\u00ea\3\u00ea\3\u00eb\3\u00eb\3\u00eb\3\u00eb\6\u00eb"+
		"\u12ac\n\u00eb\r\u00eb\16\u00eb\u12ad\3\u00eb\3\u00eb\3\u00ec\3\u00ec"+
		"\5\u00ec\u12b4\n\u00ec\3\u00ed\3\u00ed\3\u00ed\3\u00ed\3\u00ee\3\u00ee"+
		"\3\u00ee\3\u00ee\5\u00ee\u12be\n\u00ee\3\u00ef\3\u00ef\3\u00ef\3\u00ef"+
		"\3\u00ef\3\u00ef\7\u00ef\u12c6\n\u00ef\f\u00ef\16\u00ef\u12c9\13\u00ef"+
		"\3\u00ef\3\u00ef\3\u00ef\3\u00ef\5\u00ef\u12cf\n\u00ef\3\u00ef\7\u00ef"+
		"\u12d2\n\u00ef\f\u00ef\16\u00ef\u12d5\13\u00ef\3\u00ef\3\u00ef\3\u00ef"+
		"\5\u00ef\u12da\n\u00ef\3\u00f0\3\u00f0\3\u00f0\3\u00f0\3\u00f0\3\u00f0"+
		"\7\u00f0\u12e2\n\u00f0\f\u00f0\16\u00f0\u12e5\13\u00f0\3\u00f0\3\u00f0"+
		"\5\u00f0\u12e9\n\u00f0\3\u00f0\3\u00f0\3\u00f0\3\u00f0\3\u00f0\5\u00f0"+
		"\u12f0\n\u00f0\3\u00f0\7\u00f0\u12f3\n\u00f0\f\u00f0\16\u00f0\u12f6\13"+
		"\u00f0\3\u00f0\3\u00f0\3\u00f0\5\u00f0\u12fb\n\u00f0\3\u00f1\5\u00f1\u12fe"+
		"\n\u00f1\3\u00f1\5\u00f1\u1301\n\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1"+
		"\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1"+
		"\7\u00f1\u1310\n\u00f1\f\u00f1\16\u00f1\u1313\13\u00f1\3\u00f1\3\u00f1"+
		"\5\u00f1\u1317\n\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1"+
		"\3\u00f1\5\u00f1\u1320\n\u00f1\3\u00f1\7\u00f1\u1323\n\u00f1\f\u00f1\16"+
		"\u00f1\u1326\13\u00f1\3\u00f1\3\u00f1\3\u00f1\5\u00f1\u132b\n\u00f1\3"+
		"\u00f2\5\u00f2\u132e\n\u00f2\3\u00f2\3\u00f2\3\u00f3\3\u00f3\3\u00f3\5"+
		"\u00f3\u1335\n\u00f3\3\u00f3\5\u00f3\u1338\n\u00f3\3\u00f4\3\u00f4\3\u00f4"+
		"\3\u00f4\3\u00f5\5\u00f5\u133f\n\u00f5\3\u00f5\6\u00f5\u1342\n\u00f5\r"+
		"\u00f5\16\u00f5\u1343\3\u00f5\3\u00f5\5\u00f5\u1348\n\u00f5\3\u00f6\3"+
		"\u00f6\3\u00f6\5\u00f6\u134d\n\u00f6\3\u00f7\3\u00f7\3\u00f7\5\u00f7\u1352"+
		"\n\u00f7\3\u00f8\3\u00f8\3\u00f8\3\u00f8\3\u00f8\3\u00f8\7\u00f8\u135a"+
		"\n\u00f8\f\u00f8\16\u00f8\u135d\13\u00f8\3\u00f8\3\u00f8\3\u00f8\5\u00f8"+
		"\u1362\n\u00f8\3\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9\7\u00f9"+
		"\u136a\n\u00f9\f\u00f9\16\u00f9\u136d\13\u00f9\3\u00f9\3\u00f9\5\u00f9"+
		"\u1371\n\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9\5\u00f9\u1378\n"+
		"\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9\5\u00f9\u137e\n\u00f9\3\u00f9\3"+
		"\u00f9\5\u00f9\u1382\n\u00f9\3\u00fa\5\u00fa\u1385\n\u00fa\3\u00fa\5\u00fa"+
		"\u1388\n\u00fa\3\u00fa\3\u00fa\3\u00fa\3\u00fa\3\u00fa\3\u00fa\3\u00fa"+
		"\3\u00fa\3\u00fa\3\u00fa\3\u00fa\3\u00fa\3\u00fa\7\u00fa\u1397\n\u00fa"+
		"\f\u00fa\16\u00fa\u139a\13\u00fa\3\u00fa\3\u00fa\5\u00fa\u139e\n\u00fa"+
		"\3\u00fa\3\u00fa\3\u00fa\3\u00fa\3\u00fa\3\u00fa\5\u00fa\u13a6\n\u00fa"+
		"\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fc\3\u00fc\3\u00fc\3\u00fc\3\u00fc"+
		"\3\u00fc\7\u00fc\u13b2\n\u00fc\f\u00fc\16\u00fc\u13b5\13\u00fc\3\u00fc"+
		"\3\u00fc\3\u00fd\3\u00fd\5\u00fd\u13bb\n\u00fd\3\u00fe\3\u00fe\3\u00fe"+
		"\3\u00ff\3\u00ff\3\u00ff\3\u00ff\3\u0100\3\u0100\3\u0100\3\u0100\6\u0100"+
		"\u13c8\n\u0100\r\u0100\16\u0100\u13c9\3\u0101\3\u0101\3\u0101\3\u0101"+
		"\3\u0101\7\u0101\u13d1\n\u0101\f\u0101\16\u0101\u13d4\13\u0101\3\u0102"+
		"\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102"+
		"\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102\5\u0102\u13e6\n\u0102"+
		"\3\u0103\3\u0103\3\u0103\3\u0103\3\u0104\3\u0104\3\u0104\3\u0105\3\u0105"+
		"\3\u0105\3\u0105\3\u0106\3\u0106\3\u0106\5\u0106\u13f6\n\u0106\3\u0107"+
		"\3\u0107\3\u0107\3\u0107\3\u0108\3\u0108\3\u0108\5\u0108\u13ff\n\u0108"+
		"\3\u0108\3\u0108\3\u0108\5\u0108\u1404\n\u0108\3\u0108\3\u0108\5\u0108"+
		"\u1408\n\u0108\3\u0108\5\u0108\u140b\n\u0108\3\u0109\3\u0109\3\u0109\3"+
		"\u0109\3\u0109\3\u0109\7\u0109\u1413\n\u0109\f\u0109\16\u0109\u1416\13"+
		"\u0109\3\u0109\3\u0109\3\u010a\3\u010a\3\u010a\3\u010a\3\u010a\7\u010a"+
		"\u141f\n\u010a\f\u010a\16\u010a\u1422\13\u010a\3\u010a\3\u010a\3\u010a"+
		"\5\u010a\u1427\n\u010a\3\u010a\3\u010a\3\u010b\3\u010b\7\u010b\u142d\n"+
		"\u010b\f\u010b\16\u010b\u1430\13\u010b\3\u010b\5\u010b\u1433\n\u010b\3"+
		"\u010b\5\u010b\u1436\n\u010b\3\u010c\3\u010c\3\u010c\3\u010d\3\u010d\3"+
		"\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\5\u010d\u1444\n"+
		"\u010d\3\u010e\3\u010e\5\u010e\u1448\n\u010e\3\u010e\3\u010e\3\u010e\5"+
		"\u010e\u144d\n\u010e\3\u010e\5\u010e\u1450\n\u010e\3\u010e\3\u010e\3\u010f"+
		"\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\5\u010f"+
		"\u145d\n\u010f\3\u010f\3\u010f\5\u010f\u1461\n\u010f\3\u010f\3\u010f\3"+
		"\u0110\3\u0110\3\u0110\3\u0110\3\u0110\3\u0110\7\u0110\u146b\n\u0110\f"+
		"\u0110\16\u0110\u146e\13\u0110\3\u0110\3\u0110\5\u0110\u1472\n\u0110\3"+
		"\u0110\3\u0110\5\u0110\u1476\n\u0110\3\u0110\3\u0110\5\u0110\u147a\n\u0110"+
		"\3\u0110\3\u0110\3\u0111\3\u0111\5\u0111\u1480\n\u0111\3\u0111\5\u0111"+
		"\u1483\n\u0111\3\u0111\5\u0111\u1486\n\u0111\3\u0112\3\u0112\3\u0112\3"+
		"\u0112\3\u0113\3\u0113\3\u0113\3\u0113\3\u0113\3\u0113\3\u0113\3\u0113"+
		"\3\u0113\3\u0113\3\u0113\3\u0113\3\u0113\3\u0113\3\u0113\3\u0113\3\u0113"+
		"\3\u0113\3\u0113\3\u0113\3\u0113\5\u0113\u14a1\n\u0113\3\u0113\3\u0113"+
		"\6\u0113\u14a5\n\u0113\r\u0113\16\u0113\u14a6\3\u0113\3\u0113\5\u0113"+
		"\u14ab\n\u0113\3\u0113\3\u0113\3\u0114\3\u0114\5\u0114\u14b1\n\u0114\3"+
		"\u0115\3\u0115\3\u0115\3\u0115\3\u0115\3\u0115\3\u0115\3\u0115\7\u0115"+
		"\u14bb\n\u0115\f\u0115\16\u0115\u14be\13\u0115\3\u0115\3\u0115\3\u0115"+
		"\3\u0115\3\u0115\3\u0115\5\u0115\u14c6\n\u0115\5\u0115\u14c8\n\u0115\3"+
		"\u0115\3\u0115\3\u0116\3\u0116\5\u0116\u14ce\n\u0116\3\u0116\3\u0116\5"+
		"\u0116\u14d2\n\u0116\3\u0116\5\u0116\u14d5\n\u0116\3\u0117\3\u0117\3\u0117"+
		"\3\u0117\3\u0117\3\u0118\3\u0118\5\u0118\u14de\n\u0118\3\u0118\3\u0118"+
		"\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119\5\u0119\u14e9"+
		"\n\u0119\3\u0119\3\u0119\5\u0119\u14ed\n\u0119\3\u0119\5\u0119\u14f0\n"+
		"\u0119\3\u011a\3\u011a\5\u011a\u14f4\n\u011a\3\u011a\3\u011a\3\u011a\3"+
		"\u011b\3\u011b\3\u011b\5\u011b\u14fc\n\u011b\3\u011b\3\u011b\3\u011b\3"+
		"\u011b\3\u011b\3\u011b\3\u011b\5\u011b\u1505\n\u011b\3\u011c\3\u011c\3"+
		"\u011c\3\u011d\3\u011d\3\u011d\3\u011d\6\u011d\u150e\n\u011d\r\u011d\16"+
		"\u011d\u150f\3\u011e\3\u011e\3\u011e\3\u011e\3\u011e\3\u011e\3\u011f\3"+
		"\u011f\3\u011f\3\u011f\3\u011f\3\u011f\5\u011f\u151e\n\u011f\3\u011f\3"+
		"\u011f\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f"+
		"\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f\5\u011f"+
		"\u1532\n\u011f\3\u0120\3\u0120\5\u0120\u1536\n\u0120\3\u0120\3\u0120\3"+
		"\u0120\3\u0121\3\u0121\5\u0121\u153d\n\u0121\3\u0121\3\u0121\5\u0121\u1541"+
		"\n\u0121\3\u0122\3\u0122\5\u0122\u1545\n\u0122\3\u0122\3\u0122\5\u0122"+
		"\u1549\n\u0122\3\u0123\3\u0123\3\u0123\3\u0124\3\u0124\3\u0124\3\u0124"+
		"\3\u0124\7\u0124\u1553\n\u0124\f\u0124\16\u0124\u1556\13\u0124\3\u0124"+
		"\5\u0124\u1559\n\u0124\3\u0124\3\u0124\3\u0124\3\u0125\3\u0125\3\u0125"+
		"\3\u0125\3\u0125\3\u0126\3\u0126\3\u0126\3\u0127\5\u0127\u1567\n\u0127"+
		"\3\u0127\3\u0127\3\u0127\3\u0127\5\u0127\u156d\n\u0127\3\u0127\3\u0127"+
		"\3\u0127\3\u0127\3\u0127\5\u0127\u1574\n\u0127\3\u0128\3\u0128\3\u0128"+
		"\5\u0128\u1579\n\u0128\3\u0128\3\u0128\3\u0128\3\u0128\3\u0128\3\u0128"+
		"\3\u0128\3\u0128\5\u0128\u1583\n\u0128\3\u0128\3\u0128\3\u0128\3\u0128"+
		"\5\u0128\u1589\n\u0128\5\u0128\u158b\n\u0128\3\u0129\3\u0129\3\u0129\3"+
		"\u0129\3\u0129\3\u0129\3\u0129\5\u0129\u1594\n\u0129\3\u012a\3\u012a\3"+
		"\u012a\3\u012a\3\u012a\3\u012a\3\u012a\3\u012a\5\u012a\u159e\n\u012a\3"+
		"\u012a\3\u012a\3\u012a\5\u012a\u15a3\n\u012a\3\u012b\3\u012b\3\u012b\3"+
		"\u012b\3\u012b\3\u012c\3\u012c\3\u012d\3\u012d\3\u012e\3\u012e\3\u012f"+
		"\3\u012f\5\u012f\u15b2\n\u012f\3\u0130\3\u0130\5\u0130\u15b6\n\u0130\3"+
		"\u0131\5\u0131\u15b9\n\u0131\3\u0131\3\u0131\5\u0131\u15bd\n\u0131\3\u0132"+
		"\3\u0132\3\u0132\3\u0132\6\u0132\u15c3\n\u0132\r\u0132\16\u0132\u15c4"+
		"\5\u0132\u15c7\n\u0132\3\u0132\3\u0132\5\u0132\u15cb\n\u0132\3\u0133\3"+
		"\u0133\3\u0133\3\u0133\7\u0133\u15d1\n\u0133\f\u0133\16\u0133\u15d4\13"+
		"\u0133\3\u0133\3\u0133\3\u0133\3\u0134\5\u0134\u15da\n\u0134\3\u0134\6"+
		"\u0134\u15dd\n\u0134\r\u0134\16\u0134\u15de\5\u0134\u15e1\n\u0134\3\u0134"+
		"\3\u0134\3\u0135\5\u0135\u15e6\n\u0135\3\u0135\6\u0135\u15e9\n\u0135\r"+
		"\u0135\16\u0135\u15ea\3\u0135\3\u0135\3\u0136\3\u0136\3\u0136\3\u0136"+
		"\5\u0136\u15f3\n\u0136\3\u0137\3\u0137\3\u0137\3\u0137\3\u0137\5\u0137"+
		"\u15fa\n\u0137\3\u0137\3\u0137\5\u0137\u15fe\n\u0137\3\u0137\5\u0137\u1601"+
		"\n\u0137\3\u0138\3\u0138\3\u0138\3\u0139\3\u0139\3\u0139\3\u0139\3\u0139"+
		"\3\u0139\3\u0139\5\u0139\u160d\n\u0139\3\u013a\3\u013a\3\u013a\3\u013a"+
		"\5\u013a\u1613\n\u013a\3\u013b\3\u013b\3\u013b\3\u013c\3\u013c\3\u013c"+
		"\5\u013c\u161b\n\u013c\3\u013d\3\u013d\3\u013d\3\u013d\3\u013d\3\u013d"+
		"\7\u013d\u1623\n\u013d\f\u013d\16\u013d\u1626\13\u013d\3\u013d\3\u013d"+
		"\3\u013d\3\u013d\3\u013d\3\u013d\7\u013d\u162e\n\u013d\f\u013d\16\u013d"+
		"\u1631\13\u013d\5\u013d\u1633\n\u013d\3\u013e\3\u013e\3\u013e\3\u013e"+
		"\3\u013e\5\u013e\u163a\n\u013e\3\u013e\5\u013e\u163d\n\u013e\3\u013f\3"+
		"\u013f\3\u013f\3\u013f\3\u013f\5\u013f\u1644\n\u013f\3\u0140\3\u0140\3"+
		"\u0140\3\u0140\3\u0140\3\u0140\3\u0140\3\u0140\3\u0140\5\u0140\u164f\n"+
		"\u0140\3\u0140\3\u0140\3\u0140\3\u0140\5\u0140\u1655\n\u0140\3\u0140\3"+
		"\u0140\5\u0140\u1659\n\u0140\3\u0141\3\u0141\3\u0141\3\u0141\3\u0141\3"+
		"\u0141\7\u0141\u1661\n\u0141\f\u0141\16\u0141\u1664\13\u0141\5\u0141\u1666"+
		"\n\u0141\3\u0141\3\u0141\3\u0142\3\u0142\5\u0142\u166c\n\u0142\3\u0142"+
		"\3\u0142\3\u0142\3\u0142\3\u0142\3\u0142\3\u0142\3\u0142\3\u0142\5\u0142"+
		"\u1677\n\u0142\5\u0142\u1679\n\u0142\5\u0142\u167b\n\u0142\3\u0142\5\u0142"+
		"\u167e\n\u0142\3\u0143\3\u0143\5\u0143\u1682\n\u0143\3\u0143\5\u0143\u1685"+
		"\n\u0143\3\u0144\3\u0144\5\u0144\u1689\n\u0144\3\u0144\3\u0144\5\u0144"+
		"\u168d\n\u0144\3\u0144\3\u0144\3\u0144\5\u0144\u1692\n\u0144\3\u0145\3"+
		"\u0145\3\u0145\3\u0146\3\u0146\3\u0146\3\u0146\3\u0146\3\u0146\5\u0146"+
		"\u169d\n\u0146\3\u0146\3\u0146\5\u0146\u16a1\n\u0146\3\u0146\3\u0146\3"+
		"\u0146\3\u0146\3\u0146\3\u0146\5\u0146\u16a9\n\u0146\3\u0147\5\u0147\u16ac"+
		"\n\u0147\3\u0147\3\u0147\3\u0148\3\u0148\3\u0148\3\u0148\7\u0148\u16b4"+
		"\n\u0148\f\u0148\16\u0148\u16b7\13\u0148\3\u0149\3\u0149\5\u0149\u16bb"+
		"\n\u0149\3\u0149\3\u0149\3\u0149\3\u0149\5\u0149\u16c1\n\u0149\3\u0149"+
		"\3\u0149\5\u0149\u16c5\n\u0149\3\u0149\5\u0149\u16c8\n\u0149\3\u014a\3"+
		"\u014a\3\u014a\3\u014a\3\u014a\3\u014a\5\u014a\u16d0\n\u014a\3\u014a\5"+
		"\u014a\u16d3\n\u014a\3\u014a\3\u014a\5\u014a\u16d7\n\u014a\3\u014a\3\u014a"+
		"\5\u014a\u16db\n\u014a\3\u014a\3\u014a\3\u014a\5\u014a\u16e0\n\u014a\3"+
		"\u014a\5\u014a\u16e3\n\u014a\3\u014a\3\u014a\5\u014a\u16e7\n\u014a\3\u014a"+
		"\3\u014a\5\u014a\u16eb\n\u014a\7\u014a\u16ed\n\u014a\f\u014a\16\u014a"+
		"\u16f0\13\u014a\3\u014a\3\u014a\3\u014a\3\u014b\3\u014b\3\u014b\3\u014b"+
		"\7\u014b\u16f9\n\u014b\f\u014b\16\u014b\u16fc\13\u014b\3\u014b\3\u014b"+
		"\3\u014b\3\u014b\3\u014b\3\u014b\3\u014b\3\u014c\3\u014c\3\u014c\3\u014c"+
		"\3\u014c\3\u014c\5\u014c\u170b\n\u014c\3\u014c\3\u014c\3\u014c\3\u014c"+
		"\5\u014c\u1711\n\u014c\7\u014c\u1713\n\u014c\f\u014c\16\u014c\u1716\13"+
		"\u014c\3\u014d\3\u014d\5\u014d\u171a\n\u014d\3\u014e\3\u014e\5\u014e\u171e"+
		"\n\u014e\3\u014e\3\u014e\3\u014e\7\u014e\u1723\n\u014e\f\u014e\16\u014e"+
		"\u1726\13\u014e\3\u014e\5\u014e\u1729\n\u014e\3\u014e\5\u014e\u172c\n"+
		"\u014e\3\u014e\5\u014e\u172f\n\u014e\3\u014e\5\u014e\u1732\n\u014e\3\u014e"+
		"\3\u014e\7\u014e\u1736\n\u014e\f\u014e\16\u014e\u1739\13\u014e\3\u014e"+
		"\5\u014e\u173c\n\u014e\3\u014e\3\u014e\3\u014e\7\u014e\u1741\n\u014e\f"+
		"\u014e\16\u014e\u1744\13\u014e\3\u014f\3\u014f\3\u014f\3\u014f\3\u014f"+
		"\3\u014f\3\u014f\3\u014f\5\u014f\u174e\n\u014f\5\u014f\u1750\n\u014f\3"+
		"\u0150\3\u0150\3\u0150\3\u0150\7\u0150\u1756\n\u0150\f\u0150\16\u0150"+
		"\u1759\13\u0150\3\u0151\3\u0151\3\u0151\5\u0151\u175e\n\u0151\3\u0152"+
		"\3\u0152\3\u0152\7\u0152\u1763\n\u0152\f\u0152\16\u0152\u1766\13\u0152"+
		"\3\u0152\3\u0152\7\u0152\u176a\n\u0152\f\u0152\16\u0152\u176d\13\u0152"+
		"\3\u0152\5\u0152\u1770\n\u0152\5\u0152\u1772\n\u0152\3\u0152\3\u0152\7"+
		"\u0152\u1776\n\u0152\f\u0152\16\u0152\u1779\13\u0152\3\u0153\3\u0153\3"+
		"\u0153\5\u0153\u177e\n\u0153\3\u0153\3\u0153\3\u0153\3\u0153\3\u0153\5"+
		"\u0153\u1785\n\u0153\3\u0154\5\u0154\u1788\n\u0154\3\u0154\5\u0154\u178b"+
		"\n\u0154\3\u0154\3\u0154\3\u0154\5\u0154\u1790\n\u0154\3\u0154\3\u0154"+
		"\5\u0154\u1794\n\u0154\3\u0155\3\u0155\3\u0155\3\u0156\3\u0156\3\u0156"+
		"\3\u0156\3\u0156\7\u0156\u179e\n\u0156\f\u0156\16\u0156\u17a1\13\u0156"+
		"\3\u0156\3\u0156\3\u0157\3\u0157\5\u0157\u17a7\n\u0157\3\u0157\3\u0157"+
		"\3\u0157\5\u0157\u17ac\n\u0157\5\u0157\u17ae\n\u0157\5\u0157\u17b0\n\u0157"+
		"\3\u0158\3\u0158\3\u0158\3\u0158\3\u0158\3\u0158\3\u0158\3\u0158\3\u0158"+
		"\3\u0158\7\u0158\u17bc\n\u0158\f\u0158\16\u0158\u17bf\13\u0158\5\u0158"+
		"\u17c1\n\u0158\3\u0159\3\u0159\3\u0159\3\u0159\3\u0159\3\u0159\3\u0159"+
		"\3\u0159\5\u0159\u17cb\n\u0159\3\u015a\3\u015a\5\u015a\u17cf\n\u015a\3"+
		"\u015a\3\u015a\3\u015a\3\u015a\7\u015a\u17d5\n\u015a\f\u015a\16\u015a"+
		"\u17d8\13\u015a\3\u015a\3\u015a\3\u015a\3\u015a\3\u015b\3\u015b\3\u015b"+
		"\3\u015b\3\u015b\5\u015b\u17e3\n\u015b\3\u015c\3\u015c\3\u015c\3\u015c"+
		"\3\u015c\3\u015c\7\u015c\u17eb\n\u015c\f\u015c\16\u015c\u17ee\13\u015c"+
		"\3\u015c\3\u015c\5\u015c\u17f2\n\u015c\3\u015d\3\u015d\3\u015d\3\u015d"+
		"\3\u015d\3\u015d\7\u015d\u17fa\n\u015d\f\u015d\16\u015d\u17fd\13\u015d"+
		"\3\u015d\3\u015d\3\u015d\7\u015d\u1802\n\u015d\f\u015d\16\u015d\u1805"+
		"\13\u015d\5\u015d\u1807\n\u015d\3\u015d\3\u015d\3\u015e\3\u015e\5\u015e"+
		"\u180d\n\u015e\3\u015f\3\u015f\5\u015f\u1811\n\u015f\3\u0160\3\u0160\3"+
		"\u0160\5\u0160\u1816\n\u0160\3\u0160\3\u0160\3\u0160\3\u0160\3\u0160\3"+
		"\u0160\7\u0160\u181e\n\u0160\f\u0160\16\u0160\u1821\13\u0160\3\u0160\3"+
		"\u0160\5\u0160\u1825\n\u0160\3\u0160\3\u0160\3\u0160\3\u0160\3\u0161\3"+
		"\u0161\3\u0161\3\u0161\3\u0161\7\u0161\u1830\n\u0161\f\u0161\16\u0161"+
		"\u1833\13\u0161\3\u0161\3\u0161\3\u0162\3\u0162\3\u0162\3\u0162\3\u0162"+
		"\7\u0162\u183c\n\u0162\f\u0162\16\u0162\u183f\13\u0162\3\u0162\3\u0162"+
		"\5\u0162\u1843\n\u0162\3\u0162\3\u0162\3\u0162\3\u0162\3\u0162\3\u0162"+
		"\7\u0162\u184b\n\u0162\f\u0162\16\u0162\u184e\13\u0162\3\u0162\3\u0162"+
		"\5\u0162\u1852\n\u0162\5\u0162\u1854\n\u0162\3\u0163\3\u0163\3\u0163\5"+
		"\u0163\u1859\n\u0163\3\u0163\3\u0163\5\u0163\u185d\n\u0163\3\u0163\3\u0163"+
		"\3\u0163\3\u0163\5\u0163\u1863\n\u0163\3\u0163\3\u0163\5\u0163\u1867\n"+
		"\u0163\3\u0164\3\u0164\3\u0164\3\u0164\3\u0165\3\u0165\3\u0165\3\u0165"+
		"\3\u0165\7\u0165\u1872\n\u0165\f\u0165\16\u0165\u1875\13\u0165\3\u0166"+
		"\3\u0166\3\u0166\5\u0166\u187a\n\u0166\3\u0167\3\u0167\3\u0167\3\u0167"+
		"\3\u0167\7\u0167\u1881\n\u0167\f\u0167\16\u0167\u1884\13\u0167\3\u0167"+
		"\3\u0167\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\7\u0168\u188e"+
		"\n\u0168\f\u0168\16\u0168\u1891\13\u0168\3\u0168\3\u0168\3\u0169\3\u0169"+
		"\3\u0169\5\u0169\u1898\n\u0169\3\u016a\3\u016a\3\u016a\3\u016b\3\u016b"+
		"\7\u016b\u189f\n\u016b\f\u016b\16\u016b\u18a2\13\u016b\3\u016b\5\u016b"+
		"\u18a5\n\u016b\3\u016b\7\u016b\u18a8\n\u016b\f\u016b\16\u016b\u18ab\13"+
		"\u016b\3\u016b\3\u016b\3\u016c\3\u016c\3\u016c\3\u016c\3\u016c\3\u016c"+
		"\5\u016c\u18b5\n\u016c\5\u016c\u18b7\n\u016c\3\u016d\3\u016d\3\u016d\3"+
		"\u016d\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e"+
		"\7\u016e\u18c5\n\u016e\f\u016e\16\u016e\u18c8\13\u016e\3\u016f\3\u016f"+
		"\5\u016f\u18cc\n\u016f\3\u016f\3\u016f\7\u016f\u18d0\n\u016f\f\u016f\16"+
		"\u016f\u18d3\13\u016f\3\u016f\3\u016f\3\u0170\5\u0170\u18d8\n\u0170\3"+
		"\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0171\3\u0171\3\u0171"+
		"\3\u0171\3\u0172\3\u0172\3\u0172\3\u0172\7\u0172\u18e8\n\u0172\f\u0172"+
		"\16\u0172\u18eb\13\u0172\3\u0172\3\u0172\3\u0173\3\u0173\5\u0173\u18f1"+
		"\n\u0173\3\u0174\5\u0174\u18f4\n\u0174\3\u0174\3\u0174\3\u0174\3\u0174"+
		"\7\u0174\u18fa\n\u0174\f\u0174\16\u0174\u18fd\13\u0174\3\u0174\3\u0174"+
		"\3\u0175\3\u0175\3\u0175\3\u0175\5\u0175\u1905\n\u0175\5\u0175\u1907\n"+
		"\u0175\3\u0175\3\u0175\5\u0175\u190b\n\u0175\3\u0175\5\u0175\u190e\n\u0175"+
		"\3\u0176\3\u0176\3\u0176\5\u0176\u1913\n\u0176\5\u0176\u1915\n\u0176\3"+
		"\u0176\3\u0176\5\u0176\u1919\n\u0176\3\u0176\3\u0176\3\u0176\3\u0177\3"+
		"\u0177\3\u0178\3\u0178\3\u0178\3\u0178\3\u0178\5\u0178\u1925\n\u0178\3"+
		"\u0179\3\u0179\3\u0179\3\u0179\3\u0179\3\u017a\3\u017a\5\u017a\u192e\n"+
		"\u017a\3\u017a\3\u017a\3\u017a\3\u017a\7\u017a\u1934\n\u017a\f\u017a\16"+
		"\u017a\u1937\13\u017a\3\u017b\3\u017b\5\u017b\u193b\n\u017b\3\u017b\3"+
		"\u017b\5\u017b\u193f\n\u017b\3\u017c\3\u017c\3\u017c\5\u017c\u1944\n\u017c"+
		"\3\u017c\5\u017c\u1947\n\u017c\3\u017d\3\u017d\3\u017d\3\u017d\7\u017d"+
		"\u194d\n\u017d\f\u017d\16\u017d\u1950\13\u017d\3\u017e\3\u017e\3\u017e"+
		"\3\u017e\3\u017e\5\u017e\u1957\n\u017e\3\u017f\3\u017f\3\u017f\3\u0180"+
		"\3\u0180\3\u0180\3\u0180\5\u0180\u1960\n\u0180\3\u0180\5\u0180\u1963\n"+
		"\u0180\3\u0180\5\u0180\u1966\n\u0180\3\u0180\5\u0180\u1969\n\u0180\3\u0181"+
		"\3\u0181\3\u0181\3\u0181\7\u0181\u196f\n\u0181\f\u0181\16\u0181\u1972"+
		"\13\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\5\u0181"+
		"\u197b\n\u0181\3\u0182\3\u0182\3\u0182\3\u0182\3\u0182\3\u0182\3\u0182"+
		"\3\u0182\5\u0182\u1985\n\u0182\3\u0183\3\u0183\5\u0183\u1989\n\u0183\3"+
		"\u0183\3\u0183\5\u0183\u198d\n\u0183\3\u0183\5\u0183\u1990\n\u0183\3\u0183"+
		"\5\u0183\u1993\n\u0183\3\u0184\3\u0184\3\u0184\5\u0184\u1998\n\u0184\3"+
		"\u0185\3\u0185\3\u0185\5\u0185\u199d\n\u0185\3\u0185\5\u0185\u19a0\n\u0185"+
		"\3\u0185\5\u0185\u19a3\n\u0185\3\u0186\3\u0186\6\u0186\u19a7\n\u0186\r"+
		"\u0186\16\u0186\u19a8\3\u0186\5\u0186\u19ac\n\u0186\3\u0186\3\u0186\3"+
		"\u0187\3\u0187\5\u0187\u19b2\n\u0187\3\u0187\5\u0187\u19b5\n\u0187\3\u0188"+
		"\5\u0188\u19b8\n\u0188\3\u0188\6\u0188\u19bb\n\u0188\r\u0188\16\u0188"+
		"\u19bc\3\u0188\5\u0188\u19c0\n\u0188\3\u0189\3\u0189\3\u0189\3\u0189\6"+
		"\u0189\u19c6\n\u0189\r\u0189\16\u0189\u19c7\3\u018a\3\u018a\6\u018a\u19cc"+
		"\n\u018a\r\u018a\16\u018a\u19cd\3\u018b\3\u018b\3\u018b\5\u018b\u19d3"+
		"\n\u018b\3\u018c\3\u018c\3\u018c\3\u018c\7\u018c\u19d9\n\u018c\f\u018c"+
		"\16\u018c\u19dc\13\u018c\3\u018d\3\u018d\3\u018d\3\u018d\5\u018d\u19e2"+
		"\n\u018d\3\u018d\3\u018d\3\u018d\3\u018d\3\u018d\3\u018d\3\u018d\3\u018d"+
		"\5\u018d\u19ec\n\u018d\3\u018d\3\u018d\5\u018d\u19f0\n\u018d\5\u018d\u19f2"+
		"\n\u018d\3\u018d\5\u018d\u19f5\n\u018d\3\u018e\3\u018e\3\u018e\3\u018e"+
		"\3\u018e\3\u018e\3\u018e\3\u018e\7\u018e\u19ff\n\u018e\f\u018e\16\u018e"+
		"\u1a02\13\u018e\3\u018e\5\u018e\u1a05\n\u018e\3\u018e\5\u018e\u1a08\n"+
		"\u018e\3\u018f\3\u018f\3\u018f\3\u018f\3\u0190\3\u0190\3\u0190\3\u0191"+
		"\3\u0191\3\u0191\3\u0191\3\u0191\3\u0191\5\u0191\u1a17\n\u0191\3\u0191"+
		"\3\u0191\3\u0191\5\u0191\u1a1c\n\u0191\3\u0192\3\u0192\3\u0192\3\u0192"+
		"\3\u0192\5\u0192\u1a23\n\u0192\3\u0192\5\u0192\u1a26\n\u0192\3\u0193\3"+
		"\u0193\3\u0193\3\u0193\3\u0193\7\u0193\u1a2d\n\u0193\f\u0193\16\u0193"+
		"\u1a30\13\u0193\3\u0193\3\u0193\3\u0193\3\u0193\5\u0193\u1a36\n\u0193"+
		"\3\u0194\3\u0194\3\u0194\5\u0194\u1a3b\n\u0194\3\u0195\3\u0195\5\u0195"+
		"\u1a3f\n\u0195\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\5\u0196"+
		"\u1a47\n\u0196\3\u0196\3\u0196\3\u0196\3\u0196\5\u0196\u1a4d\n\u0196\3"+
		"\u0197\3\u0197\3\u0197\3\u0197\3\u0197\3\u0197\5\u0197\u1a55\n\u0197\3"+
		"\u0197\5\u0197\u1a58\n\u0197\3\u0198\3\u0198\3\u0198\3\u0198\7\u0198\u1a5e"+
		"\n\u0198\f\u0198\16\u0198\u1a61\13\u0198\3\u0198\3\u0198\3\u0199\3\u0199"+
		"\3\u0199\5\u0199\u1a68\n\u0199\3\u0199\5\u0199\u1a6b\n\u0199\3\u0199\5"+
		"\u0199\u1a6e\n\u0199\3\u019a\3\u019a\3\u019a\3\u019b\3\u019b\3\u019b\3"+
		"\u019b\5\u019b\u1a77\n\u019b\3\u019c\3\u019c\3\u019c\3\u019c\5\u019c\u1a7d"+
		"\n\u019c\3\u019c\3\u019c\3\u019c\3\u019c\5\u019c\u1a83\n\u019c\5\u019c"+
		"\u1a85\n\u019c\3\u019d\3\u019d\3\u019d\3\u019d\3\u019d\3\u019d\3\u019d"+
		"\3\u019d\3\u019d\3\u019d\3\u019d\5\u019d\u1a92\n\u019d\5\u019d\u1a94\n"+
		"\u019d\3\u019e\3\u019e\3\u019e\3\u019e\3\u019e\3\u019e\3\u019e\5\u019e"+
		"\u1a9d\n\u019e\5\u019e\u1a9f\n\u019e\3\u019f\3\u019f\5\u019f\u1aa3\n\u019f"+
		"\3\u019f\3\u019f\3\u019f\3\u019f\5\u019f\u1aa9\n\u019f\3\u019f\3\u019f"+
		"\5\u019f\u1aad\n\u019f\3\u01a0\3\u01a0\3\u01a0\3\u01a0\3\u01a0\3\u01a1"+
		"\3\u01a1\3\u01a1\3\u01a1\3\u01a1\3\u01a2\3\u01a2\5\u01a2\u1abb\n\u01a2"+
		"\3\u01a2\3\u01a2\7\u01a2\u1abf\n\u01a2\f\u01a2\16\u01a2\u1ac2\13\u01a2"+
		"\3\u01a2\3\u01a2\3\u01a3\3\u01a3\3\u01a4\3\u01a4\3\u01a4\3\u01a4\3\u01a4"+
		"\3\u01a4\3\u01a4\3\u01a4\3\u01a4\3\u01a4\5\u01a4\u1ad2\n\u01a4\3\u01a4"+
		"\3\u01a4\5\u01a4\u1ad6\n\u01a4\3\u01a4\3\u01a4\3\u01a4\3\u01a4\3\u01a4"+
		"\3\u01a4\3\u01a4\3\u01a4\3\u01a4\3\u01a4\3\u01a4\3\u01a4\3\u01a4\3\u01a4"+
		"\3\u01a4\3\u01a4\3\u01a4\3\u01a4\3\u01a4\3\u01a4\5\u01a4\u1aec\n\u01a4"+
		"\3\u01a4\3\u01a4\3\u01a4\3\u01a4\3\u01a4\3\u01a4\5\u01a4\u1af4\n\u01a4"+
		"\3\u01a4\3\u01a4\5\u01a4\u1af8\n\u01a4\3\u01a4\3\u01a4\3\u01a4\3\u01a4"+
		"\5\u01a4\u1afe\n\u01a4\3\u01a4\3\u01a4\3\u01a4\5\u01a4\u1b03\n\u01a4\3"+
		"\u01a4\7\u01a4\u1b06\n\u01a4\f\u01a4\16\u01a4\u1b09\13\u01a4\3\u01a5\5"+
		"\u01a5\u1b0c\n\u01a5\3\u01a5\3\u01a5\3\u01a5\3\u01a5\3\u01a5\3\u01a5\3"+
		"\u01a5\3\u01a5\3\u01a5\5\u01a5\u1b17\n\u01a5\3\u01a5\3\u01a5\5\u01a5\u1b1b"+
		"\n\u01a5\3\u01a5\3\u01a5\3\u01a5\7\u01a5\u1b20\n\u01a5\f\u01a5\16\u01a5"+
		"\u1b23\13\u01a5\3\u01a5\3\u01a5\5\u01a5\u1b27\n\u01a5\3\u01a6\3\u01a6"+
		"\3\u01a6\3\u01a6\3\u01a7\3\u01a7\3\u01a8\3\u01a8\3\u01a8\3\u01a8\3\u01a8"+
		"\3\u01a8\5\u01a8\u1b35\n\u01a8\3\u01a9\3\u01a9\3\u01aa\3\u01aa\3\u01aa"+
		"\3\u01ab\3\u01ab\3\u01ab\3\u01ab\3\u01ac\3\u01ac\3\u01ad\3\u01ad\3\u01ad"+
		"\3\u01ad\3\u01ad\3\u01ad\5\u01ad\u1b48\n\u01ad\3\u01ad\3\u01ad\3\u01ad"+
		"\3\u01ad\3\u01ad\3\u01ad\3\u01ad\3\u01ad\3\u01ad\3\u01ad\3\u01ad\3\u01ad"+
		"\3\u01ad\3\u01ad\3\u01ad\3\u01ad\3\u01ad\3\u01ad\5\u01ad\u1b5c\n\u01ad"+
		"\3\u01ad\5\u01ad\u1b5f\n\u01ad\7\u01ad\u1b61\n\u01ad\f\u01ad\16\u01ad"+
		"\u1b64\13\u01ad\3\u01ae\3\u01ae\3\u01ae\3\u01ae\3\u01ae\5\u01ae\u1b6b"+
		"\n\u01ae\3\u01ae\3\u01ae\3\u01ae\3\u01ae\3\u01ae\3\u01ae\5\u01ae\u1b73"+
		"\n\u01ae\3\u01ae\3\u01ae\3\u01ae\3\u01ae\3\u01ae\5\u01ae\u1b7a\n\u01ae"+
		"\3\u01ae\3\u01ae\5\u01ae\u1b7e\n\u01ae\3\u01af\3\u01af\3\u01af\3\u01af"+
		"\3\u01af\3\u01b0\3\u01b0\5\u01b0\u1b87\n\u01b0\3\u01b0\3\u01b0\3\u01b0"+
		"\5\u01b0\u1b8c\n\u01b0\7\u01b0\u1b8e\n\u01b0\f\u01b0\16\u01b0\u1b91\13"+
		"\u01b0\3\u01b0\3\u01b0\3\u01b0\7\u01b0\u1b96\n\u01b0\f\u01b0\16\u01b0"+
		"\u1b99\13\u01b0\3\u01b0\5\u01b0\u1b9c\n\u01b0\3\u01b1\3\u01b1\3\u01b1"+
		"\3\u01b1\3\u01b1\5\u01b1\u1ba3\n\u01b1\3\u01b1\3\u01b1\3\u01b1\3\u01b1"+
		"\3\u01b1\3\u01b1\3\u01b1\5\u01b1\u1bac\n\u01b1\3\u01b2\3\u01b2\3\u01b2"+
		"\3\u01b3\3\u01b3\3\u01b4\3\u01b4\3\u01b4\3\u01b4\3\u01b4\7\u01b4\u1bb8"+
		"\n\u01b4\f\u01b4\16\u01b4\u1bbb\13\u01b4\3\u01b4\3\u01b4\3\u01b4\3\u01b4"+
		"\3\u01b4\3\u01b4\3\u01b4\3\u01b4\7\u01b4\u1bc5\n\u01b4\f\u01b4\16\u01b4"+
		"\u1bc8\13\u01b4\3\u01b4\3\u01b4\5\u01b4\u1bcc\n\u01b4\3\u01b4\3\u01b4"+
		"\3\u01b5\3\u01b5\3\u01b5\3\u01b5\3\u01b5\3\u01b5\3\u01b5\3\u01b5\3\u01b5"+
		"\3\u01b5\3\u01b5\3\u01b5\3\u01b5\3\u01b5\3\u01b5\3\u01b5\3\u01b5\5\u01b5"+
		"\u1be1\n\u01b5\3\u01b5\3\u01b5\3\u01b5\3\u01b5\3\u01b5\7\u01b5\u1be8\n"+
		"\u01b5\f\u01b5\16\u01b5\u1beb\13\u01b5\3\u01b6\3\u01b6\5\u01b6\u1bef\n"+
		"\u01b6\3\u01b7\5\u01b7\u1bf2\n\u01b7\3\u01b7\3\u01b7\3\u01b7\6\u01b7\u1bf7"+
		"\n\u01b7\r\u01b7\16\u01b7\u1bf8\3\u01b7\5\u01b7\u1bfc\n\u01b7\3\u01b7"+
		"\3\u01b7\5\u01b7\u1c00\n\u01b7\3\u01b7\5\u01b7\u1c03\n\u01b7\3\u01b8\3"+
		"\u01b8\3\u01b8\3\u01b8\3\u01b8\5\u01b8\u1c0a\n\u01b8\3\u01b9\5\u01b9\u1c0d"+
		"\n\u01b9\3\u01b9\3\u01b9\6\u01b9\u1c11\n\u01b9\r\u01b9\16\u01b9\u1c12"+
		"\3\u01b9\5\u01b9\u1c16\n\u01b9\3\u01b9\3\u01b9\5\u01b9\u1c1a\n\u01b9\3"+
		"\u01b9\5\u01b9\u1c1d\n\u01b9\3\u01ba\3\u01ba\3\u01ba\3\u01ba\3\u01ba\5"+
		"\u01ba\u1c24\n\u01ba\3\u01bb\3\u01bb\3\u01bb\5\u01bb\u1c29\n\u01bb\3\u01bc"+
		"\3\u01bc\3\u01bc\3\u01bc\3\u01bc\3\u01bc\3\u01bc\3\u01bc\3\u01bc\3\u01bc"+
		"\3\u01bc\3\u01bc\3\u01bc\3\u01bc\3\u01bc\3\u01bc\5\u01bc\u1c3b\n\u01bc"+
		"\5\u01bc\u1c3d\n\u01bc\3\u01bd\3\u01bd\5\u01bd\u1c41\n\u01bd\3\u01be\3"+
		"\u01be\3\u01be\3\u01be\7\u01be\u1c47\n\u01be\f\u01be\16\u01be\u1c4a\13"+
		"\u01be\3\u01bf\3\u01bf\3\u01bf\3\u01bf\3\u01bf\3\u01bf\3\u01bf\3\u01bf"+
		"\3\u01bf\5\u01bf\u1c55\n\u01bf\3\u01c0\3\u01c0\3\u01c0\3\u01c0\3\u01c0"+
		"\5\u01c0\u1c5c\n\u01c0\3\u01c0\3\u01c0\3\u01c0\3\u01c0\3\u01c0\3\u01c0"+
		"\3\u01c0\3\u01c0\3\u01c0\5\u01c0\u1c67\n\u01c0\3\u01c0\3\u01c0\3\u01c0"+
		"\3\u01c0\3\u01c0\3\u01c0\5\u01c0\u1c6f\n\u01c0\3\u01c0\3\u01c0\3\u01c0"+
		"\3\u01c0\3\u01c0\3\u01c0\3\u01c0\3\u01c0\3\u01c0\3\u01c0\3\u01c0\3\u01c0"+
		"\3\u01c0\5\u01c0\u1c7e\n\u01c0\3\u01c0\3\u01c0\5\u01c0\u1c82\n\u01c0\3"+
		"\u01c0\3\u01c0\3\u01c0\3\u01c0\3\u01c0\6\u01c0\u1c89\n\u01c0\r\u01c0\16"+
		"\u01c0\u1c8a\3\u01c0\3\u01c0\3\u01c0\3\u01c0\5\u01c0\u1c91\n\u01c0\3\u01c0"+
		"\3\u01c0\3\u01c0\3\u01c0\3\u01c0\3\u01c0\5\u01c0\u1c99\n\u01c0\3\u01c0"+
		"\3\u01c0\3\u01c0\3\u01c0\3\u01c0\3\u01c0\3\u01c0\5\u01c0\u1ca2\n\u01c0"+
		"\3\u01c0\3\u01c0\3\u01c0\3\u01c0\3\u01c0\3\u01c0\3\u01c0\7\u01c0\u1cab"+
		"\n\u01c0\f\u01c0\16\u01c0\u1cae\13\u01c0\3\u01c0\5\u01c0\u1cb1\n\u01c0"+
		"\3\u01c0\5\u01c0\u1cb4\n\u01c0\3\u01c0\3\u01c0\3\u01c0\3\u01c0\3\u01c0"+
		"\3\u01c0\3\u01c0\3\u01c0\3\u01c0\3\u01c0\3\u01c0\3\u01c0\3\u01c0\3\u01c0"+
		"\5\u01c0\u1cc4\n\u01c0\3\u01c0\3\u01c0\7\u01c0\u1cc8\n\u01c0\f\u01c0\16"+
		"\u01c0\u1ccb\13\u01c0\3\u01c0\3\u01c0\3\u01c0\3\u01c0\3\u01c0\3\u01c0"+
		"\3\u01c0\5\u01c0\u1cd4\n\u01c0\3\u01c0\3\u01c0\3\u01c0\3\u01c0\3\u01c0"+
		"\3\u01c0\5\u01c0\u1cdc\n\u01c0\3\u01c0\5\u01c0\u1cdf\n\u01c0\3\u01c0\5"+
		"\u01c0\u1ce2\n\u01c0\3\u01c0\3\u01c0\3\u01c0\3\u01c0\3\u01c0\3\u01c0\3"+
		"\u01c0\5\u01c0\u1ceb\n\u01c0\3\u01c0\3\u01c0\3\u01c0\5\u01c0\u1cf0\n\u01c0"+
		"\3\u01c0\3\u01c0\3\u01c0\3\u01c0\3\u01c0\7\u01c0\u1cf7\n\u01c0\f\u01c0"+
		"\16\u01c0\u1cfa\13\u01c0\3\u01c0\3\u01c0\3\u01c0\5\u01c0\u1cff\n\u01c0"+
		"\3\u01c0\3\u01c0\3\u01c0\5\u01c0\u1d04\n\u01c0\3\u01c0\5\u01c0\u1d07\n"+
		"\u01c0\3\u01c0\3\u01c0\3\u01c0\5\u01c0\u1d0c\n\u01c0\3\u01c0\3\u01c0\3"+
		"\u01c0\5\u01c0\u1d11\n\u01c0\7\u01c0\u1d13\n\u01c0\f\u01c0\16\u01c0\u1d16"+
		"\13\u01c0\3\u01c0\3\u01c0\3\u01c0\5\u01c0\u1d1b\n\u01c0\3\u01c0\3\u01c0"+
		"\3\u01c0\3\u01c0\5\u01c0\u1d21\n\u01c0\3\u01c0\3\u01c0\3\u01c0\3\u01c0"+
		"\3\u01c0\3\u01c0\3\u01c0\5\u01c0\u1d2a\n\u01c0\3\u01c0\3\u01c0\3\u01c0"+
		"\5\u01c0\u1d2f\n\u01c0\3\u01c0\3\u01c0\3\u01c0\3\u01c0\3\u01c0\3\u01c0"+
		"\5\u01c0\u1d37\n\u01c0\3\u01c0\3\u01c0\5\u01c0\u1d3b\n\u01c0\3\u01c0\3"+
		"\u01c0\3\u01c0\5\u01c0\u1d40\n\u01c0\3\u01c0\3\u01c0\3\u01c0\3\u01c0\5"+
		"\u01c0\u1d46\n\u01c0\3\u01c0\3\u01c0\3\u01c0\3\u01c0\3\u01c0\5\u01c0\u1d4d"+
		"\n\u01c0\3\u01c0\3\u01c0\3\u01c0\5\u01c0\u1d52\n\u01c0\3\u01c0\3\u01c0"+
		"\3\u01c0\3\u01c0\3\u01c0\5\u01c0\u1d59\n\u01c0\3\u01c0\3\u01c0\5\u01c0"+
		"\u1d5d\n\u01c0\3\u01c0\3\u01c0\3\u01c0\5\u01c0\u1d62\n\u01c0\3\u01c0\3"+
		"\u01c0\3\u01c0\3\u01c0\3\u01c0\3\u01c0\5\u01c0\u1d6a\n\u01c0\3\u01c0\5"+
		"\u01c0\u1d6d\n\u01c0\3\u01c0\5\u01c0\u1d70\n\u01c0\3\u01c0\5\u01c0\u1d73"+
		"\n\u01c0\3\u01c0\3\u01c0\5\u01c0\u1d77\n\u01c0\3\u01c0\3\u01c0\3\u01c0"+
		"\5\u01c0\u1d7c\n\u01c0\3\u01c0\3\u01c0\3\u01c0\5\u01c0\u1d81\n\u01c0\3"+
		"\u01c0\3\u01c0\5\u01c0\u1d85\n\u01c0\3\u01c0\3\u01c0\3\u01c0\3\u01c0\3"+
		"\u01c0\5\u01c0\u1d8c\n\u01c0\3\u01c0\3\u01c0\3\u01c0\5\u01c0\u1d91\n\u01c0"+
		"\5\u01c0\u1d93\n\u01c0\3\u01c0\3\u01c0\3\u01c0\7\u01c0\u1d98\n\u01c0\f"+
		"\u01c0\16\u01c0\u1d9b\13\u01c0\3\u01c1\3\u01c1\3\u01c1\5\u01c1\u1da0\n"+
		"\u01c1\3\u01c1\3\u01c1\3\u01c1\3\u01c1\5\u01c1\u1da6\n\u01c1\3\u01c1\5"+
		"\u01c1\u1da9\n\u01c1\3\u01c1\3\u01c1\5\u01c1\u1dad\n\u01c1\5\u01c1\u1daf"+
		"\n\u01c1\3\u01c2\3\u01c2\3\u01c3\3\u01c3\3\u01c4\3\u01c4\3\u01c5\3\u01c5"+
		"\3\u01c5\5\u01c5\u1dba\n\u01c5\3\u01c5\3\u01c5\5\u01c5\u1dbe\n\u01c5\5"+
		"\u01c5\u1dc0\n\u01c5\3\u01c5\3\u01c5\3\u01c6\3\u01c6\3\u01c6\3\u01c6\3"+
		"\u01c6\3\u01c6\3\u01c6\5\u01c6\u1dcb\n\u01c6\3\u01c7\3\u01c7\3\u01c8\3"+
		"\u01c8\3\u01c8\3\u01c8\3\u01c8\3\u01c8\3\u01c8\5\u01c8\u1dd6\n\u01c8\3"+
		"\u01c9\3\u01c9\3\u01c9\3\u01c9\3\u01c9\7\u01c9\u1ddd\n\u01c9\f\u01c9\16"+
		"\u01c9\u1de0\13\u01c9\5\u01c9\u1de2\n\u01c9\3\u01ca\3\u01ca\5\u01ca\u1de6"+
		"\n\u01ca\3\u01ca\5\u01ca\u1de9\n\u01ca\3\u01ca\3\u01ca\5\u01ca\u1ded\n"+
		"\u01ca\3\u01cb\3\u01cb\3\u01cb\3\u01cb\3\u01cc\3\u01cc\3\u01cc\3\u01cc"+
		"\3\u01cc\3\u01cc\3\u01cc\5\u01cc\u1dfa\n\u01cc\3\u01cd\3\u01cd\3\u01cd"+
		"\5\u01cd\u1dff\n\u01cd\3\u01cd\3\u01cd\3\u01cd\3\u01cd\7\u01cd\u1e05\n"+
		"\u01cd\f\u01cd\16\u01cd\u1e08\13\u01cd\3\u01cd\3\u01cd\3\u01cd\3\u01cd"+
		"\5\u01cd\u1e0e\n\u01cd\3\u01ce\3\u01ce\3\u01ce\5\u01ce\u1e13\n\u01ce\3"+
		"\u01ce\3\u01ce\5\u01ce\u1e17\n\u01ce\3\u01ce\3\u01ce\3\u01ce\5\u01ce\u1e1c"+
		"\n\u01ce\3\u01cf\3\u01cf\3\u01cf\5\u01cf\u1e21\n\u01cf\3\u01cf\5\u01cf"+
		"\u1e24\n\u01cf\3\u01cf\3\u01cf\3\u01cf\7\u01cf\u1e29\n\u01cf\f\u01cf\16"+
		"\u01cf\u1e2c\13\u01cf\3\u01cf\3\u01cf\3\u01d0\3\u01d0\3\u01d0\3\u01d0"+
		"\3\u01d0\5\u01d0\u1e35\n\u01d0\3\u01d0\3\u01d0\3\u01d0\3\u01d0\7\u01d0"+
		"\u1e3b\n\u01d0\f\u01d0\16\u01d0\u1e3e\13\u01d0\3\u01d0\5\u01d0\u1e41\n"+
		"\u01d0\3\u01d0\3\u01d0\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1"+
		"\5\u01d1\u1e4b\n\u01d1\3\u01d1\5\u01d1\u1e4e\n\u01d1\5\u01d1\u1e50\n\u01d1"+
		"\3\u01d2\3\u01d2\3\u01d2\3\u01d3\3\u01d3\3\u01d3\3\u01d3\3\u01d3\5\u01d3"+
		"\u1e5a\n\u01d3\5\u01d3\u1e5c\n\u01d3\3\u01d4\3\u01d4\3\u01d4\3\u01d4\5"+
		"\u01d4\u1e62\n\u01d4\3\u01d5\3\u01d5\3\u01d5\3\u01d5\5\u01d5\u1e68\n\u01d5"+
		"\5\u01d5\u1e6a\n\u01d5\3\u01d6\3\u01d6\3\u01d6\3\u01d7\3\u01d7\3\u01d7"+
		"\3\u01d8\3\u01d8\3\u01d8\3\u01d8\3\u01d8\3\u01d8\5\u01d8\u1e78\n\u01d8"+
		"\5\u01d8\u1e7a\n\u01d8\3\u01d9\3\u01d9\3\u01d9\3\u01d9\3\u01d9\3\u01d9"+
		"\5\u01d9\u1e82\n\u01d9\3\u01da\3\u01da\3\u01da\3\u01da\3\u01da\3\u01da"+
		"\3\u01da\5\u01da\u1e8b\n\u01da\3\u01db\3\u01db\3\u01db\3\u01db\3\u01db"+
		"\3\u01db\3\u01db\5\u01db\u1e94\n\u01db\3\u01dc\3\u01dc\3\u01dd\3\u01dd"+
		"\3\u01de\3\u01de\3\u01de\3\u01de\5\u01de\u1e9e\n\u01de\3\u01df\3\u01df"+
		"\5\u01df\u1ea2\n\u01df\3\u01df\3\u01df\3\u01e0\5\u01e0\u1ea7\n\u01e0\3"+
		"\u01e0\3\u01e0\5\u01e0\u1eab\n\u01e0\3\u01e0\5\u01e0\u1eae\n\u01e0\3\u01e1"+
		"\5\u01e1\u1eb1\n\u01e1\3\u01e1\3\u01e1\5\u01e1\u1eb5\n\u01e1\3\u01e2\3"+
		"\u01e2\3\u01e3\3\u01e3\3\u01e3\5\u01e3\u1ebc\n\u01e3\3\u01e4\3\u01e4\3"+
		"\u01e4\3\u01e4\3\u01e5\3\u01e5\3\u01e5\3\u01e5\7\u01e5\u1ec6\n\u01e5\f"+
		"\u01e5\16\u01e5\u1ec9\13\u01e5\3\u01e5\3\u01e5\3\u01e5\3\u01e5\3\u01e5"+
		"\3\u01e5\7\u01e5\u1ed1\n\u01e5\f\u01e5\16\u01e5\u1ed4\13\u01e5\5\u01e5"+
		"\u1ed6\n\u01e5\3\u01e6\3\u01e6\5\u01e6\u1eda\n\u01e6\3\u01e7\3\u01e7\3"+
		"\u01e8\3\u01e8\3\u01e9\3\u01e9\3\u01ea\3\u01ea\3\u01eb\3\u01eb\3\u01ec"+
		"\3\u01ec\3\u01ed\3\u01ed\3\u01ed\7\u01ed\u1eeb\n\u01ed\f\u01ed\16\u01ed"+
		"\u1eee\13\u01ed\3\u01ed\3\u01ed\5\u01ed\u1ef2\n\u01ed\3\u01ee\3\u01ee"+
		"\3\u01ef\3\u01ef\3\u01ef\5\u01ef\u1ef9\n\u01ef\3\u01f0\3\u01f0\3\u01f1"+
		"\3\u01f1\3\u01f2\3\u01f2\3\u01f3\3\u01f3\3\u01f3\7\u01f3\u1f04\n\u01f3"+
		"\f\u01f3\16\u01f3\u1f07\13\u01f3\3\u01f4\3\u01f4\3\u01f5\3\u01f5\3\u01f5"+
		"\7\u01f5\u1f0e\n\u01f5\f\u01f5\16\u01f5\u1f11\13\u01f5\3\u01f5\3\u01f5"+
		"\5\u01f5\u1f15\n\u01f5\3\u01f6\3\u01f6\3\u01f7\3\u01f7\3\u01f7\7\u01f7"+
		"\u1f1c\n\u01f7\f\u01f7\16\u01f7\u1f1f\13\u01f7\3\u01f8\3\u01f8\3\u01f8"+
		"\7\u01f8\u1f24\n\u01f8\f\u01f8\16\u01f8\u1f27\13\u01f8\3\u01f9\3\u01f9"+
		"\3\u01f9\7\u01f9\u1f2c\n\u01f9\f\u01f9\16\u01f9\u1f2f\13\u01f9\3\u01fa"+
		"\3\u01fa\3\u01fa\5\u01fa\u1f34\n\u01fa\3\u01fb\3\u01fb\3\u01fb\5\u01fb"+
		"\u1f39\n\u01fb\3\u01fc\3\u01fc\3\u01fc\5\u01fc\u1f3e\n\u01fc\3\u01fd\3"+
		"\u01fd\5\u01fd\u1f42\n\u01fd\3\u01fe\3\u01fe\3\u01ff\3\u01ff\5\u01ff\u1f48"+
		"\n\u01ff\3\u0200\3\u0200\5\u0200\u1f4c\n\u0200\3\u0201\3\u0201\3\u0201"+
		"\5\u0201\u1f51\n\u0201\3\u0202\3\u0202\3\u0203\3\u0203\3\u0203\7\u0203"+
		"\u1f58\n\u0203\f\u0203\16\u0203\u1f5b\13\u0203\3\u0204\3\u0204\3\u0205"+
		"\3\u0205\3\u0205\3\u0205\5\u0205\u1f63\n\u0205\3\u0206\3\u0206\3\u0206"+
		"\7\u0206\u1f68\n\u0206\f\u0206\16\u0206\u1f6b\13\u0206\3\u0207\3\u0207"+
		"\3\u0208\3\u0208\3\u0208\3\u0208\3\u0208\3\u0208\3\u0208\5\u0208\u1f76"+
		"\n\u0208\3\u0209\3\u0209\5\u0209\u1f7a\n\u0209\3\u0209\3\u0209\7\u0209"+
		"\u1f7e\n\u0209\f\u0209\16\u0209\u1f81\13\u0209\3\u0209\3\u0209\5\u0209"+
		"\u1f85\n\u0209\3\u020a\3\u020a\3\u020a\5\u020a\u1f8a\n\u020a\5\u020a\u1f8c"+
		"\n\u020a\3\u020a\3\u020a\3\u020a\5\u020a\u1f91\n\u020a\7\u020a\u1f93\n"+
		"\u020a\f\u020a\16\u020a\u1f96\13\u020a\3\u020a\3\u020a\5\u020a\u1f9a\n"+
		"\u020a\3\u020b\3\u020b\3\u020b\3\u020b\3\u020b\5\u020b\u1fa1\n\u020b\3"+
		"\u020b\3\u020b\3\u020b\5\u020b\u1fa6\n\u020b\5\u020b\u1fa8\n\u020b\5\u020b"+
		"\u1faa\n\u020b\3\u020b\3\u020b\3\u020b\3\u020b\3\u020b\3\u020b\3\u020b"+
		"\3\u020b\5\u020b\u1fb4\n\u020b\3\u020b\3\u020b\3\u020b\5\u020b\u1fb9\n"+
		"\u020b\7\u020b\u1fbb\n\u020b\f\u020b\16\u020b\u1fbe\13\u020b\5\u020b\u1fc0"+
		"\n\u020b\3\u020b\3\u020b\5\u020b\u1fc4\n\u020b\3\u020c\3\u020c\3\u020c"+
		"\3\u020d\3\u020d\3\u020d\3\u020d\5\u020d\u1fcd\n\u020d\3\u020d\3\u020d"+
		"\3\u020e\3\u020e\5\u020e\u1fd3\n\u020e\3\u020e\3\u020e\5\u020e\u1fd7\n"+
		"\u020e\5\u020e\u1fd9\n\u020e\3\u020f\3\u020f\5\u020f\u1fdd\n\u020f\3\u020f"+
		"\3\u020f\5\u020f\u1fe1\n\u020f\3\u020f\3\u020f\5\u020f\u1fe5\n\u020f\3"+
		"\u020f\3\u020f\3\u020f\3\u020f\3\u020f\3\u020f\5\u020f\u1fed\n\u020f\3"+
		"\u020f\3\u020f\3\u020f\3\u020f\3\u020f\3\u020f\5\u020f\u1ff5\n\u020f\5"+
		"\u020f\u1ff7\n\u020f\3\u0210\3\u0210\3\u0210\3\u0210\5\u0210\u1ffd\n\u0210"+
		"\3\u0210\5\u0210\u2000\n\u0210\3\u0210\3\u0210\3\u0211\3\u0211\3\u0211"+
		"\3\u0211\3\u0211\3\u0211\3\u0211\3\u0211\3\u0211\3\u0211\3\u0211\3\u0211"+
		"\3\u0211\3\u0211\3\u0211\3\u0211\3\u0211\3\u0211\3\u0211\3\u0211\5\u0211"+
		"\u2018\n\u0211\3\u0211\3\u0211\3\u0211\3\u0211\3\u0211\5\u0211\u201f\n"+
		"\u0211\3\u0211\3\u0211\3\u0211\3\u0211\3\u0211\3\u0211\3\u0211\3\u0211"+
		"\3\u0211\3\u0211\3\u0211\3\u0211\3\u0211\3\u0211\3\u0211\3\u0211\3\u0211"+
		"\3\u0211\3\u0211\3\u0211\3\u0211\3\u0211\3\u0211\3\u0211\3\u0211\3\u0211"+
		"\3\u0211\3\u0211\3\u0211\3\u0211\3\u0211\5\u0211\u2040\n\u0211\3\u0212"+
		"\3\u0212\3\u0212\5\u0212\u2045\n\u0212\3\u0212\5\u0212\u2048\n\u0212\3"+
		"\u0212\3\u0212\3\u0212\5\u0212\u204d\n\u0212\5\u0212\u204f\n\u0212\3\u0212"+
		"\3\u0212\7\u0212\u2053\n\u0212\f\u0212\16\u0212\u2056\13\u0212\3\u0213"+
		"\3\u0213\3\u0213\3\u0213\5\u0213\u205c\n\u0213\3\u0214\3\u0214\3\u0215"+
		"\3\u0215\3\u0215\5\u0215\u2063\n\u0215\3\u0215\3\u0215\3\u0215\3\u0215"+
		"\5\u0215\u2069\n\u0215\3\u0215\3\u0215\3\u0215\3\u0215\5\u0215\u206f\n"+
		"\u0215\3\u0215\3\u0215\3\u0215\3\u0215\5\u0215\u2075\n\u0215\3\u0215\3"+
		"\u0215\3\u0215\5\u0215\u207a\n\u0215\5\u0215\u207c\n\u0215\3\u0215\5\u0215"+
		"\u207f\n\u0215\3\u0215\3\u0215\3\u0215\3\u0215\3\u0215\3\u0215\3\u0215"+
		"\3\u0215\5\u0215\u2089\n\u0215\3\u0215\5\u0215\u208c\n\u0215\5\u0215\u208e"+
		"\n\u0215\5\u0215\u2090\n\u0215\3\u0215\3\u0215\3\u0215\3\u0215\3\u0215"+
		"\3\u0215\3\u0215\3\u0215\3\u0215\3\u0215\3\u0215\3\u0215\5\u0215\u209e"+
		"\n\u0215\3\u0216\3\u0216\3\u0217\3\u0217\3\u0217\3\u0218\3\u0218\3\u0219"+
		"\3\u0219\3\u021a\3\u021a\5\u021a\u20ab\n\u021a\3\u021b\3\u021b\3\u021b"+
		"\3\u021b\3\u021b\3\u021b\3\u021b\5\u021b\u20b4\n\u021b\3\u021c\3\u021c"+
		"\3\u021c\5\u021c\u20b9\n\u021c\3\u021d\3\u021d\3\u021d\5\u021d\u20be\n"+
		"\u021d\3\u021e\3\u021e\3\u021e\5\u021e\u20c3\n\u021e\3\u021f\3\u021f\3"+
		"\u021f\3\u021f\3\u0220\3\u0220\3\u0220\2\b\u0296\u02a2\u0346\u0358\u0368"+
		"\u037e\u0221\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36 \"$&(*,.\60\62\64"+
		"\668:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088"+
		"\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a\u009c\u009e\u00a0"+
		"\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8"+
		"\u00ba\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce\u00d0"+
		"\u00d2\u00d4\u00d6\u00d8\u00da\u00dc\u00de\u00e0\u00e2\u00e4\u00e6\u00e8"+
		"\u00ea\u00ec\u00ee\u00f0\u00f2\u00f4\u00f6\u00f8\u00fa\u00fc\u00fe\u0100"+
		"\u0102\u0104\u0106\u0108\u010a\u010c\u010e\u0110\u0112\u0114\u0116\u0118"+
		"\u011a\u011c\u011e\u0120\u0122\u0124\u0126\u0128\u012a\u012c\u012e\u0130"+
		"\u0132\u0134\u0136\u0138\u013a\u013c\u013e\u0140\u0142\u0144\u0146\u0148"+
		"\u014a\u014c\u014e\u0150\u0152\u0154\u0156\u0158\u015a\u015c\u015e\u0160"+
		"\u0162\u0164\u0166\u0168\u016a\u016c\u016e\u0170\u0172\u0174\u0176\u0178"+
		"\u017a\u017c\u017e\u0180\u0182\u0184\u0186\u0188\u018a\u018c\u018e\u0190"+
		"\u0192\u0194\u0196\u0198\u019a\u019c\u019e\u01a0\u01a2\u01a4\u01a6\u01a8"+
		"\u01aa\u01ac\u01ae\u01b0\u01b2\u01b4\u01b6\u01b8\u01ba\u01bc\u01be\u01c0"+
		"\u01c2\u01c4\u01c6\u01c8\u01ca\u01cc\u01ce\u01d0\u01d2\u01d4\u01d6\u01d8"+
		"\u01da\u01dc\u01de\u01e0\u01e2\u01e4\u01e6\u01e8\u01ea\u01ec\u01ee\u01f0"+
		"\u01f2\u01f4\u01f6\u01f8\u01fa\u01fc\u01fe\u0200\u0202\u0204\u0206\u0208"+
		"\u020a\u020c\u020e\u0210\u0212\u0214\u0216\u0218\u021a\u021c\u021e\u0220"+
		"\u0222\u0224\u0226\u0228\u022a\u022c\u022e\u0230\u0232\u0234\u0236\u0238"+
		"\u023a\u023c\u023e\u0240\u0242\u0244\u0246\u0248\u024a\u024c\u024e\u0250"+
		"\u0252\u0254\u0256\u0258\u025a\u025c\u025e\u0260\u0262\u0264\u0266\u0268"+
		"\u026a\u026c\u026e\u0270\u0272\u0274\u0276\u0278\u027a\u027c\u027e\u0280"+
		"\u0282\u0284\u0286\u0288\u028a\u028c\u028e\u0290\u0292\u0294\u0296\u0298"+
		"\u029a\u029c\u029e\u02a0\u02a2\u02a4\u02a6\u02a8\u02aa\u02ac\u02ae\u02b0"+
		"\u02b2\u02b4\u02b6\u02b8\u02ba\u02bc\u02be\u02c0\u02c2\u02c4\u02c6\u02c8"+
		"\u02ca\u02cc\u02ce\u02d0\u02d2\u02d4\u02d6\u02d8\u02da\u02dc\u02de\u02e0"+
		"\u02e2\u02e4\u02e6\u02e8\u02ea\u02ec\u02ee\u02f0\u02f2\u02f4\u02f6\u02f8"+
		"\u02fa\u02fc\u02fe\u0300\u0302\u0304\u0306\u0308\u030a\u030c\u030e\u0310"+
		"\u0312\u0314\u0316\u0318\u031a\u031c\u031e\u0320\u0322\u0324\u0326\u0328"+
		"\u032a\u032c\u032e\u0330\u0332\u0334\u0336\u0338\u033a\u033c\u033e\u0340"+
		"\u0342\u0344\u0346\u0348\u034a\u034c\u034e\u0350\u0352\u0354\u0356\u0358"+
		"\u035a\u035c\u035e\u0360\u0362\u0364\u0366\u0368\u036a\u036c\u036e\u0370"+
		"\u0372\u0374\u0376\u0378\u037a\u037c\u037e\u0380\u0382\u0384\u0386\u0388"+
		"\u038a\u038c\u038e\u0390\u0392\u0394\u0396\u0398\u039a\u039c\u039e\u03a0"+
		"\u03a2\u03a4\u03a6\u03a8\u03aa\u03ac\u03ae\u03b0\u03b2\u03b4\u03b6\u03b8"+
		"\u03ba\u03bc\u03be\u03c0\u03c2\u03c4\u03c6\u03c8\u03ca\u03cc\u03ce\u03d0"+
		"\u03d2\u03d4\u03d6\u03d8\u03da\u03dc\u03de\u03e0\u03e2\u03e4\u03e6\u03e8"+
		"\u03ea\u03ec\u03ee\u03f0\u03f2\u03f4\u03f6\u03f8\u03fa\u03fc\u03fe\u0400"+
		"\u0402\u0404\u0406\u0408\u040a\u040c\u040e\u0410\u0412\u0414\u0416\u0418"+
		"\u041a\u041c\u041e\u0420\u0422\u0424\u0426\u0428\u042a\u042c\u042e\u0430"+
		"\u0432\u0434\u0436\u0438\u043a\u043c\u043e\2s\3\2\u0293\u0293\4\2fg\u0117"+
		"\u0117\3\2\u0243\u0244\4\288\u0141\u0141\4\2\u008d\u008d\u009b\u009b\5"+
		"\2SS\u00b4\u00b4\u00c1\u00c1\4\2NN\u0088\u0088\4\2\u010e\u010e\u011f\u011f"+
		"\4\2\u009f\u009f\u021b\u021b\4\2\u0085\u0085\u00da\u00da\t\2\u0087\u0087"+
		"\u00ec\u00ec\u01a3\u01a3\u01ce\u01ce\u0217\u0217\u021a\u021a\u0226\u0226"+
		"\4\2++\u0220\u0220\4\2\u0152\u0152\u01e6\u01e6\4\2\u00f6\u00f6\u023b\u023b"+
		"\4\2\27\27\u008a\u008a\5\2\62\62\u0102\u0102\u0213\u0213\4\2!!\u01cb\u01cb"+
		"\4\2\24\24\u0195\u0195\4\2\u00d3\u00d3\u011b\u011b\4\2\u0087\u0087\u018f"+
		"\u018f\4\2\u0082\u0082\u00c1\u00c1\4\2\u0150\u0150\u01bd\u01bd\4\2\u0221"+
		"\u0221\u0281\u0281\5\2\u0082\u0082\u00fc\u00fc\u019f\u019f\5\2\u0082\u0082"+
		"\u00fc\u00fc\u014b\u014b\5\2\u00b6\u00b6\u0115\u0115\u0146\u0146\4\2\u00ca"+
		"\u00ca\u010e\u010e\4\2\u0111\u0111\u022e\u022e\4\2\u014f\u014f\u01aa\u01aa"+
		"\4\2\u0154\u0154\u022d\u022d\4\2\u0081\u0081\u00fd\u00fd\5\2\u00d3\u00d3"+
		"\u011b\u011b\u0124\u0124\4\2\u0110\u0110\u0200\u0200\4\2\r\r\u008e\u008e"+
		"\4\2\u0093\u0093\u00fc\u00fc\4\2\u0128\u0128\u0149\u0149\4\2\u0093\u0093"+
		"\u01d6\u01d6\4\2\u00c5\u00c5\u017f\u017f\4\2\26\26\u00f7\u00f7\4\2\n\n"+
		"\u0182\u0182\4\2\u00d0\u00d0\u0197\u0197\4\2GG\u016b\u016b\5\2\60\60\u0173"+
		"\u0173\u01e8\u01e8\4\2\b\b##\5\2\u0087\u0087\u00ec\u00ec\u0226\u0226\5"+
		"\2\u013d\u013d\u0162\u0162\u0177\u0177\4\2\u00c1\u00c1\u022d\u022d\4\2"+
		"\60\60\u01e8\u01e8\4\2\7\7\u0093\u0093\5\2\7\7\u0093\u0093\u012f\u012f"+
		"\5\2nn\u016a\u016a\u01e9\u01e9\4\2\u011d\u011d\u016b\u016b\4\2\u0125\u0125"+
		"\u01f0\u01f0\5\2\u00b7\u00b7\u00ee\u00ee\u0172\u0172\4\2ll\u0086\u0086"+
		"\6\2\u00db\u00db\u00eb\u00eb\u0143\u0143\u016e\u016e\4\2\u0082\u0082\u0290"+
		"\u0290\3\2\u0180\u0181\3\3\u0293\u0293\3\2\u01b2\u01b3\4\2\u0165\u0165"+
		"\u0247\u0247\3\2Z[\4\2\u0155\u0155\u023c\u023c\4\2\"\"\u00da\u00da\4\2"+
		"\63\63\u0089\u0089\6\2\u00a5\u00a5\u00f2\u00f2\u0129\u0129\u021f\u021f"+
		"\5\2\13\13\u0090\u0090\u0220\u0220\5\2\u00c7\u00c7\u0103\u0103\u01b8\u01b8"+
		"\4\2\u01c7\u01c7\u0208\u0208\5\2\u01c7\u01c7\u01e4\u01e4\u0208\u0208\4"+
		"\2\u00a9\u00a9\u00dc\u00dc\4\2jj\u01bb\u01bb\4\2\u00d8\u00d8\u00fc\u00fc"+
		"\4\2\13\13\u0227\u0227\4\2\36\36\u01d1\u01d1\4\2\u00b8\u00b8\u0100\u0100"+
		"\4\2\13\13\u00b8\u00b8\4\2\u01ff\u01ff\u0205\u0205\4\2\u0125\u0125\u01f5"+
		"\u01f5\4\2\u00d9\u00d9\u0108\u010b\5\2\u0285\u0285\u028a\u028a\u028e\u028e"+
		"\3\2\u028b\u028c\4\2\177\177\u00de\u00de\6\2\13\13\22\22\u00ac\u00ac\u01e5"+
		"\u01e5\4\2==\u024c\u024c\4\2\u0090\u0090\u0220\u0220\4\2::QQ\4\2\u00b9"+
		"\u00b9\u0101\u0101\4\2??\u0139\u0139\4\2\u024d\u024d\u0250\u0250\4\2\u00a0"+
		"\u00a0\u0145\u0145\4\2\u00a4\u00a4\u0133\u0133\4\2]]\u0091\u0091\4\2\u00d2"+
		"\u00d2\u01da\u01da\3\2\u026c\u027b\3\2\u0265\u026b\3\2\u025f\u0264\4\2"+
		"\u0197\u0197\u01bf\u01bf\4\2\u00bd\u00bd\u018c\u018c\4\2\u0151\u0151\u01c6"+
		"\u01c6\4\2\u016d\u016d\u01ea\u01ea\5\2\u00b2\u00b2\u01fb\u01fb\u023d\u023d"+
		"\4\2NN\u01ba\u01ba\5\2NN\u014b\u014b\u01ba\u01ba\4\2\u0178\u0178\u01f6"+
		"\u01f6\4\2\u00d8\u00d8\u01ad\u01ad\4\2tt\u025b\u025b\4\2\u0130\u0130\u01ca"+
		"\u01ca\4\2\66\66>>\6\2tt\u00d4\u00d4\u012a\u012a\u01ca\u01ca\3\2\u0281"+
		"\u0282\4\2\u027c\u027c\u0283\u0283\u0082\2\6\n\20\20\25\25\30\37\"#&&"+
		"(*-\62\64\64\66\679;=@CCEIKKMOQTVVYdijlqsxz{}\177\u0083\u0083\u0085\u0086"+
		"\u0088\u0088\u008b\u008d\u008f\u008f\u0091\u0092\u0094\u0097\u009a\u009c"+
		"\u009f\u00a4\u00a6\u00a9\u00ab\u00ab\u00ad\u00ae\u00b0\u00b2\u00b4\u00b4"+
		"\u00b7\u00b9\u00bc\u00be\u00c0\u00c1\u00c7\u00c8\u00cf\u00d0\u00d2\u00d2"+
		"\u00d4\u00d4\u00d8\u00d8\u00da\u00da\u00dc\u00df\u00e1\u00e1\u00e3\u00e5"+
		"\u00e9\u00eb\u00ee\u00f1\u00f3\u00f3\u00f5\u00f5\u00f8\u00fc\u00ff\u0103"+
		"\u0105\u0105\u0107\u0107\u0109\u010e\u0113\u0114\u0116\u0116\u0118\u011a"+
		"\u011c\u011d\u011f\u0120\u0122\u0123\u0125\u0126\u012a\u012c\u012e\u0130"+
		"\u0132\u013d\u013f\u0140\u0143\u0145\u014b\u014b\u0151\u0151\u0156\u0156"+
		"\u0158\u015d\u015f\u0160\u0162\u0162\u0165\u0166\u016a\u016a\u016c\u0170"+
		"\u0172\u0173\u0175\u017a\u0182\u0182\u0184\u0185\u0188\u018e\u0193\u0193"+
		"\u0196\u0199\u019b\u019b\u019d\u019d\u01a0\u01a2\u01a4\u01a6\u01a9\u01a9"+
		"\u01ab\u01b0\u01b2\u01b5\u01b7\u01bc\u01be\u01c0\u01c2\u01c7\u01ca\u01ca"+
		"\u01cc\u01cd\u01cf\u01cf\u01d1\u01d8\u01da\u01da\u01dc\u01e5\u01e8\u01eb"+
		"\u01ed\u01f1\u01f4\u01f6\u01f8\u01fb\u01fd\u01fd\u0200\u0200\u0207\u020f"+
		"\u0211\u0218\u021a\u021e\u0221\u0221\u0223\u0223\u0227\u0227\u0229\u022b"+
		"\u022d\u022e\u0230\u0233\u0235\u0239\u023c\u023e\u0240\u0240\u0242\u0242"+
		"\u0244\u0247\u0249\u0250\u0252\u0256\u0258\u0259\u025b\u027b\u02a6\u02a6"+
		"\2\u253d\2\u0441\3\2\2\2\4\u0448\3\2\2\2\6\u045e\3\2\2\2\b\u0462\3\2\2"+
		"\2\n\u046a\3\2\2\2\f\u048a\3\2\2\2\16\u048c\3\2\2\2\20\u0499\3\2\2\2\22"+
		"\u049b\3\2\2\2\24\u04a0\3\2\2\2\26\u0507\3\2\2\2\30\u0509\3\2\2\2\32\u054e"+
		"\3\2\2\2\34\u0554\3\2\2\2\36\u0558\3\2\2\2 \u0570\3\2\2\2\"\u0572\3\2"+
		"\2\2$\u0586\3\2\2\2&\u0595\3\2\2\2(\u059d\3\2\2\2*\u05ad\3\2\2\2,\u05b1"+
		"\3\2\2\2.\u05b6\3\2\2\2\60\u05b8\3\2\2\2\62\u05ba\3\2\2\2\64\u05c1\3\2"+
		"\2\2\66\u05c3\3\2\2\28\u05d9\3\2\2\2:\u05e8\3\2\2\2<\u05ea\3\2\2\2>\u05fb"+
		"\3\2\2\2@\u060f\3\2\2\2B\u0615\3\2\2\2D\u067c\3\2\2\2F\u067e\3\2\2\2H"+
		"\u0686\3\2\2\2J\u06ab\3\2\2\2L\u06bc\3\2\2\2N\u06be\3\2\2\2P\u06d6\3\2"+
		"\2\2R\u06d8\3\2\2\2T\u06dd\3\2\2\2V\u06e6\3\2\2\2X\u070b\3\2\2\2Z\u070d"+
		"\3\2\2\2\\\u0714\3\2\2\2^\u072d\3\2\2\2`\u076a\3\2\2\2b\u0779\3\2\2\2"+
		"d\u07b9\3\2\2\2f\u07bb\3\2\2\2h\u07bd\3\2\2\2j\u07ce\3\2\2\2l\u07d2\3"+
		"\2\2\2n\u07d4\3\2\2\2p\u07ec\3\2\2\2r\u07f5\3\2\2\2t\u0804\3\2\2\2v\u0828"+
		"\3\2\2\2x\u0854\3\2\2\2z\u088c\3\2\2\2|\u0890\3\2\2\2~\u08cb\3\2\2\2\u0080"+
		"\u08cd\3\2\2\2\u0082\u08e4\3\2\2\2\u0084\u08f6\3\2\2\2\u0086\u08fd\3\2"+
		"\2\2\u0088\u0927\3\2\2\2\u008a\u0929\3\2\2\2\u008c\u092f\3\2\2\2\u008e"+
		"\u0942\3\2\2\2\u0090\u0944\3\2\2\2\u0092\u0959\3\2\2\2\u0094\u095f\3\2"+
		"\2\2\u0096\u0967\3\2\2\2\u0098\u0972\3\2\2\2\u009a\u0976\3\2\2\2\u009c"+
		"\u0997\3\2\2\2\u009e\u099b\3\2\2\2\u00a0\u09a4\3\2\2\2\u00a2\u09a6\3\2"+
		"\2\2\u00a4\u09bd\3\2\2\2\u00a6\u09bf\3\2\2\2\u00a8\u09e4\3\2\2\2\u00aa"+
		"\u09fc\3\2\2\2\u00ac\u0a00\3\2\2\2\u00ae\u0a10\3\2\2\2\u00b0\u0a14\3\2"+
		"\2\2\u00b2\u0a1c\3\2\2\2\u00b4\u0a20\3\2\2\2\u00b6\u0a31\3\2\2\2\u00b8"+
		"\u0a35\3\2\2\2\u00ba\u0a3f\3\2\2\2\u00bc\u0a48\3\2\2\2\u00be\u0a5f\3\2"+
		"\2\2\u00c0\u0a7a\3\2\2\2\u00c2\u0a7e\3\2\2\2\u00c4\u0a86\3\2\2\2\u00c6"+
		"\u0a8d\3\2\2\2\u00c8\u0a91\3\2\2\2\u00ca\u0aa1\3\2\2\2\u00cc\u0ac8\3\2"+
		"\2\2\u00ce\u0af2\3\2\2\2\u00d0\u0af6\3\2\2\2\u00d2\u0b04\3\2\2\2\u00d4"+
		"\u0b0e\3\2\2\2\u00d6\u0b10\3\2\2\2\u00d8\u0b3a\3\2\2\2\u00da\u0b49\3\2"+
		"\2\2\u00dc\u0b5d\3\2\2\2\u00de\u0b76\3\2\2\2\u00e0\u0b85\3\2\2\2\u00e2"+
		"\u0b8d\3\2\2\2\u00e4\u0bb6\3\2\2\2\u00e6\u0bbd\3\2\2\2\u00e8\u0bc6\3\2"+
		"\2\2\u00ea\u0be8\3\2\2\2\u00ec\u0bf0\3\2\2\2\u00ee\u0bf8\3\2\2\2\u00f0"+
		"\u0bff\3\2\2\2\u00f2\u0c01\3\2\2\2\u00f4\u0c19\3\2\2\2\u00f6\u0c41\3\2"+
		"\2\2\u00f8\u0c52\3\2\2\2\u00fa\u0c68\3\2\2\2\u00fc\u0c90\3\2\2\2\u00fe"+
		"\u0ca4\3\2\2\2\u0100\u0cb7\3\2\2\2\u0102\u0cbd\3\2\2\2\u0104\u0ccc\3\2"+
		"\2\2\u0106\u0ce5\3\2\2\2\u0108\u0cea\3\2\2\2\u010a\u0cf5\3\2\2\2\u010c"+
		"\u0cf7\3\2\2\2\u010e\u0d3c\3\2\2\2\u0110\u0d43\3\2\2\2\u0112\u0d4c\3\2"+
		"\2\2\u0114\u0d5a\3\2\2\2\u0116\u0d9e\3\2\2\2\u0118\u0db0\3\2\2\2\u011a"+
		"\u0dba\3\2\2\2\u011c\u0dce\3\2\2\2\u011e\u0de1\3\2\2\2\u0120\u0e07\3\2"+
		"\2\2\u0122\u0e09\3\2\2\2\u0124\u0e19\3\2\2\2\u0126\u0e1f\3\2\2\2\u0128"+
		"\u0e29\3\2\2\2\u012a\u0e31\3\2\2\2\u012c\u0e37\3\2\2\2\u012e\u0e3f\3\2"+
		"\2\2\u0130\u0e43\3\2\2\2\u0132\u0e53\3\2\2\2\u0134\u0e55\3\2\2\2\u0136"+
		"\u0e69\3\2\2\2\u0138\u0e71\3\2\2\2\u013a\u0ea5\3\2\2\2\u013c\u0ea7\3\2"+
		"\2\2\u013e\u0ea9\3\2\2\2\u0140\u0eab\3\2\2\2\u0142\u0ebf\3\2\2\2\u0144"+
		"\u0ec5\3\2\2\2\u0146\u0ed2\3\2\2\2\u0148\u0ed6\3\2\2\2\u014a\u0ef2\3\2"+
		"\2\2\u014c\u0f02\3\2\2\2\u014e\u0f12\3\2\2\2\u0150\u0f28\3\2\2\2\u0152"+
		"\u0f72\3\2\2\2\u0154\u0f74\3\2\2\2\u0156\u0f7c\3\2\2\2\u0158\u0f7e\3\2"+
		"\2\2\u015a\u0f80\3\2\2\2\u015c\u0f88\3\2\2\2\u015e\u0f8a\3\2\2\2\u0160"+
		"\u0fab\3\2\2\2\u0162\u0faf\3\2\2\2\u0164\u0fb3\3\2\2\2\u0166\u0fc9\3\2"+
		"\2\2\u0168\u0ffb\3\2\2\2\u016a\u0fff\3\2\2\2\u016c\u1017\3\2\2\2\u016e"+
		"\u101b\3\2\2\2\u0170\u1027\3\2\2\2\u0172\u1035\3\2\2\2\u0174\u103c\3\2"+
		"\2\2\u0176\u1050\3\2\2\2\u0178\u105a\3\2\2\2\u017a\u106b\3\2\2\2\u017c"+
		"\u1083\3\2\2\2\u017e\u1085\3\2\2\2\u0180\u1096\3\2\2\2\u0182\u10b9\3\2"+
		"\2\2\u0184\u10bb\3\2\2\2\u0186\u10bf\3\2\2\2\u0188\u10d5\3\2\2\2\u018a"+
		"\u10f8\3\2\2\2\u018c\u10fc\3\2\2\2\u018e\u1113\3\2\2\2\u0190\u112a\3\2"+
		"\2\2\u0192\u1133\3\2\2\2\u0194\u113c\3\2\2\2\u0196\u1145\3\2\2\2\u0198"+
		"\u1149\3\2\2\2\u019a\u114e\3\2\2\2\u019c\u1166\3\2\2\2\u019e\u1168\3\2"+
		"\2\2\u01a0\u116c\3\2\2\2\u01a2\u11a0\3\2\2\2\u01a4\u11bc\3\2\2\2\u01a6"+
		"\u11be\3\2\2\2\u01a8\u11cc\3\2\2\2\u01aa\u11d8\3\2\2\2\u01ac\u11dd\3\2"+
		"\2\2\u01ae\u11e3\3\2\2\2\u01b0\u11e6\3\2\2\2\u01b2\u11ef\3\2\2\2\u01b4"+
		"\u11fc\3\2\2\2\u01b6\u120d\3\2\2\2\u01b8\u121e\3\2\2\2\u01ba\u1226\3\2"+
		"\2\2\u01bc\u122b\3\2\2\2\u01be\u123b\3\2\2\2\u01c0\u123f\3\2\2\2\u01c2"+
		"\u1257\3\2\2\2\u01c4\u125a\3\2\2\2\u01c6\u1260\3\2\2\2\u01c8\u126a\3\2"+
		"\2\2\u01ca\u1273\3\2\2\2\u01cc\u128f\3\2\2\2\u01ce\u1295\3\2\2\2\u01d0"+
		"\u1298\3\2\2\2\u01d2\u129f\3\2\2\2\u01d4\u12a7\3\2\2\2\u01d6\u12b3\3\2"+
		"\2\2\u01d8\u12b5\3\2\2\2\u01da\u12b9\3\2\2\2\u01dc\u12bf\3\2\2\2\u01de"+
		"\u12db\3\2\2\2\u01e0\u12fd\3\2\2\2\u01e2\u132d\3\2\2\2\u01e4\u1337\3\2"+
		"\2\2\u01e6\u1339\3\2\2\2\u01e8\u133e\3\2\2\2\u01ea\u134c\3\2\2\2\u01ec"+
		"\u134e\3\2\2\2\u01ee\u1353\3\2\2\2\u01f0\u1363\3\2\2\2\u01f2\u1384\3\2"+
		"\2\2\u01f4\u13a7\3\2\2\2\u01f6\u13ab\3\2\2\2\u01f8\u13ba\3\2\2\2\u01fa"+
		"\u13bc\3\2\2\2\u01fc\u13bf\3\2\2\2\u01fe\u13c3\3\2\2\2\u0200\u13cb\3\2"+
		"\2\2\u0202\u13e5\3\2\2\2\u0204\u13e7\3\2\2\2\u0206\u13eb\3\2\2\2\u0208"+
		"\u13ee\3\2\2\2\u020a\u13f2\3\2\2\2\u020c\u13f7\3\2\2\2\u020e\u13fb\3\2"+
		"\2\2\u0210\u140c\3\2\2\2\u0212\u1419\3\2\2\2\u0214\u142a\3\2\2\2\u0216"+
		"\u1437\3\2\2\2\u0218\u1443\3\2\2\2\u021a\u1445\3\2\2\2\u021c\u1453\3\2"+
		"\2\2\u021e\u1464\3\2\2\2\u0220\u147d\3\2\2\2\u0222\u1487\3\2\2\2\u0224"+
		"\u148b\3\2\2\2\u0226\u14b0\3\2\2\2\u0228\u14b2\3\2\2\2\u022a\u14cb\3\2"+
		"\2\2\u022c\u14d6\3\2\2\2\u022e\u14dd\3\2\2\2\u0230\u14e1\3\2\2\2\u0232"+
		"\u14f3\3\2\2\2\u0234\u14fb\3\2\2\2\u0236\u1506\3\2\2\2\u0238\u150d\3\2"+
		"\2\2\u023a\u1511\3\2\2\2\u023c\u1531\3\2\2\2\u023e\u1535\3\2\2\2\u0240"+
		"\u153a\3\2\2\2\u0242\u1542\3\2\2\2\u0244\u154a\3\2\2\2\u0246\u154d\3\2"+
		"\2\2\u0248\u155d\3\2\2\2\u024a\u1562\3\2\2\2\u024c\u1566\3\2\2\2\u024e"+
		"\u158a\3\2\2\2\u0250\u158c\3\2\2\2\u0252\u15a2\3\2\2\2\u0254\u15a4\3\2"+
		"\2\2\u0256\u15a9\3\2\2\2\u0258\u15ab\3\2\2\2\u025a\u15ad\3\2\2\2\u025c"+
		"\u15af\3\2\2\2\u025e\u15b3\3\2\2\2\u0260\u15b8\3\2\2\2\u0262\u15be\3\2"+
		"\2\2\u0264\u15cc\3\2\2\2\u0266\u15e0\3\2\2\2\u0268\u15e5\3\2\2\2\u026a"+
		"\u15f2\3\2\2\2\u026c\u15f4\3\2\2\2\u026e\u1602\3\2\2\2\u0270\u160c\3\2"+
		"\2\2\u0272\u1612\3\2\2\2\u0274\u1614\3\2\2\2\u0276\u1617\3\2\2\2\u0278"+
		"\u161c\3\2\2\2\u027a\u1634\3\2\2\2\u027c\u1643\3\2\2\2\u027e\u1645\3\2"+
		"\2\2\u0280\u165a\3\2\2\2\u0282\u1669\3\2\2\2\u0284\u167f\3\2\2\2\u0286"+
		"\u1686\3\2\2\2\u0288\u1693\3\2\2\2\u028a\u1696\3\2\2\2\u028c\u16ab\3\2"+
		"\2\2\u028e\u16af\3\2\2\2\u0290\u16b8\3\2\2\2\u0292\u16c9\3\2\2\2\u0294"+
		"\u16f4\3\2\2\2\u0296\u170a\3\2\2\2\u0298\u1717\3\2\2\2\u029a\u171b\3\2"+
		"\2\2\u029c\u174f\3\2\2\2\u029e\u1751\3\2\2\2\u02a0\u175a\3\2\2\2\u02a2"+
		"\u1771\3\2\2\2\u02a4\u1784\3\2\2\2\u02a6\u1787\3\2\2\2\u02a8\u1795\3\2"+
		"\2\2\u02aa\u1798\3\2\2\2\u02ac\u17af\3\2\2\2\u02ae\u17b1\3\2\2\2\u02b0"+
		"\u17ca\3\2\2\2\u02b2\u17cc\3\2\2\2\u02b4\u17dd\3\2\2\2\u02b6\u17e4\3";
	private static final String _serializedATNSegment1 =
		"\2\2\2\u02b8\u17f3\3\2\2\2\u02ba\u180a\3\2\2\2\u02bc\u1810\3\2\2\2\u02be"+
		"\u1812\3\2\2\2\u02c0\u182a\3\2\2\2\u02c2\u1842\3\2\2\2\u02c4\u1866\3\2"+
		"\2\2\u02c6\u1868\3\2\2\2\u02c8\u186c\3\2\2\2\u02ca\u1879\3\2\2\2\u02cc"+
		"\u187b\3\2\2\2\u02ce\u1887\3\2\2\2\u02d0\u1897\3\2\2\2\u02d2\u1899\3\2"+
		"\2\2\u02d4\u189c\3\2\2\2\u02d6\u18b6\3\2\2\2\u02d8\u18b8\3\2\2\2\u02da"+
		"\u18bc\3\2\2\2\u02dc\u18cb\3\2\2\2\u02de\u18d7\3\2\2\2\u02e0\u18df\3\2"+
		"\2\2\u02e2\u18e3\3\2\2\2\u02e4\u18ee\3\2\2\2\u02e6\u18f3\3\2\2\2\u02e8"+
		"\u1900\3\2\2\2\u02ea\u1914\3\2\2\2\u02ec\u191d\3\2\2\2\u02ee\u191f\3\2"+
		"\2\2\u02f0\u1926\3\2\2\2\u02f2\u192b\3\2\2\2\u02f4\u1938\3\2\2\2\u02f6"+
		"\u1940\3\2\2\2\u02f8\u1948\3\2\2\2\u02fa\u1956\3\2\2\2\u02fc\u1958\3\2"+
		"\2\2\u02fe\u195b\3\2\2\2\u0300\u196a\3\2\2\2\u0302\u1984\3\2\2\2\u0304"+
		"\u1986\3\2\2\2\u0306\u1994\3\2\2\2\u0308\u1999\3\2\2\2\u030a\u19ab\3\2"+
		"\2\2\u030c\u19af\3\2\2\2\u030e\u19b7\3\2\2\2\u0310\u19c1\3\2\2\2\u0312"+
		"\u19c9\3\2\2\2\u0314\u19cf\3\2\2\2\u0316\u19d4\3\2\2\2\u0318\u19dd\3\2"+
		"\2\2\u031a\u19f6\3\2\2\2\u031c\u1a09\3\2\2\2\u031e\u1a0d\3\2\2\2\u0320"+
		"\u1a10\3\2\2\2\u0322\u1a22\3\2\2\2\u0324\u1a27\3\2\2\2\u0326\u1a3a\3\2"+
		"\2\2\u0328\u1a3c\3\2\2\2\u032a\u1a4c\3\2\2\2\u032c\u1a54\3\2\2\2\u032e"+
		"\u1a59\3\2\2\2\u0330\u1a64\3\2\2\2\u0332\u1a6f\3\2\2\2\u0334\u1a72\3\2"+
		"\2\2\u0336\u1a84\3\2\2\2\u0338\u1a86\3\2\2\2\u033a\u1a95\3\2\2\2\u033c"+
		"\u1aa0\3\2\2\2\u033e\u1aae\3\2\2\2\u0340\u1ab3\3\2\2\2\u0342\u1ab8\3\2"+
		"\2\2\u0344\u1ac5\3\2\2\2\u0346\u1ad1\3\2\2\2\u0348\u1b0b\3\2\2\2\u034a"+
		"\u1b28\3\2\2\2\u034c\u1b2c\3\2\2\2\u034e\u1b34\3\2\2\2\u0350\u1b36\3\2"+
		"\2\2\u0352\u1b38\3\2\2\2\u0354\u1b3b\3\2\2\2\u0356\u1b3f\3\2\2\2\u0358"+
		"\u1b47\3\2\2\2\u035a\u1b7d\3\2\2\2\u035c\u1b7f\3\2\2\2\u035e\u1b9b\3\2"+
		"\2\2\u0360\u1b9d\3\2\2\2\u0362\u1bad\3\2\2\2\u0364\u1bb0\3\2\2\2\u0366"+
		"\u1bb2\3\2\2\2\u0368\u1be0\3\2\2\2\u036a\u1bee\3\2\2\2\u036c\u1bf1\3\2"+
		"\2\2\u036e\u1c04\3\2\2\2\u0370\u1c0c\3\2\2\2\u0372\u1c1e\3\2\2\2\u0374"+
		"\u1c25\3\2\2\2\u0376\u1c3c\3\2\2\2\u0378\u1c3e\3\2\2\2\u037a\u1c42\3\2"+
		"\2\2\u037c\u1c4b\3\2\2\2\u037e\u1d92\3\2\2\2\u0380\u1dae\3\2\2\2\u0382"+
		"\u1db0\3\2\2\2\u0384\u1db2\3\2\2\2\u0386\u1db4\3\2\2\2\u0388\u1db6\3\2"+
		"\2\2\u038a\u1dc3\3\2\2\2\u038c\u1dcc\3\2\2\2\u038e\u1dd5\3\2\2\2\u0390"+
		"\u1dd7\3\2\2\2\u0392\u1de8\3\2\2\2\u0394\u1dee\3\2\2\2\u0396\u1df9\3\2"+
		"\2\2\u0398\u1dfb\3\2\2\2\u039a\u1e0f\3\2\2\2\u039c\u1e1d\3\2\2\2\u039e"+
		"\u1e2f\3\2\2\2\u03a0\u1e44\3\2\2\2\u03a2\u1e51\3\2\2\2\u03a4\u1e54\3\2"+
		"\2\2\u03a6\u1e5d\3\2\2\2\u03a8\u1e63\3\2\2\2\u03aa\u1e6b\3\2\2\2\u03ac"+
		"\u1e6e\3\2\2\2\u03ae\u1e79\3\2\2\2\u03b0\u1e81\3\2\2\2\u03b2\u1e83\3\2"+
		"\2\2\u03b4\u1e8c\3\2\2\2\u03b6\u1e95\3\2\2\2\u03b8\u1e97\3\2\2\2\u03ba"+
		"\u1e9d\3\2\2\2\u03bc\u1e9f\3\2\2\2\u03be\u1ead\3\2\2\2\u03c0\u1eb0\3\2"+
		"\2\2\u03c2\u1eb6\3\2\2\2\u03c4\u1eb8\3\2\2\2\u03c6\u1ebd\3\2\2\2\u03c8"+
		"\u1ed5\3\2\2\2\u03ca\u1ed9\3\2\2\2\u03cc\u1edb\3\2\2\2\u03ce\u1edd\3\2"+
		"\2\2\u03d0\u1edf\3\2\2\2\u03d2\u1ee1\3\2\2\2\u03d4\u1ee3\3\2\2\2\u03d6"+
		"\u1ee5\3\2\2\2\u03d8\u1ee7\3\2\2\2\u03da\u1ef3\3\2\2\2\u03dc\u1ef5\3\2"+
		"\2\2\u03de\u1efa\3\2\2\2\u03e0\u1efc\3\2\2\2\u03e2\u1efe\3\2\2\2\u03e4"+
		"\u1f00\3\2\2\2\u03e6\u1f08\3\2\2\2\u03e8\u1f0a\3\2\2\2\u03ea\u1f16\3\2"+
		"\2\2\u03ec\u1f18\3\2\2\2\u03ee\u1f20\3\2\2\2\u03f0\u1f28\3\2\2\2\u03f2"+
		"\u1f30\3\2\2\2\u03f4\u1f35\3\2\2\2\u03f6\u1f3a\3\2\2\2\u03f8\u1f41\3\2"+
		"\2\2\u03fa\u1f43\3\2\2\2\u03fc\u1f47\3\2\2\2\u03fe\u1f4b\3\2\2\2\u0400"+
		"\u1f4d\3\2\2\2\u0402\u1f52\3\2\2\2\u0404\u1f54\3\2\2\2\u0406\u1f5c\3\2"+
		"\2\2\u0408\u1f5e\3\2\2\2\u040a\u1f64\3\2\2\2\u040c\u1f6c\3\2\2\2\u040e"+
		"\u1f6e\3\2\2\2\u0410\u1f77\3\2\2\2\u0412\u1f86\3\2\2\2\u0414\u1f9b\3\2"+
		"\2\2\u0416\u1fc5\3\2\2\2\u0418\u1fcc\3\2\2\2\u041a\u1fd8\3\2\2\2\u041c"+
		"\u1ff6\3\2\2\2\u041e\u1ff8\3\2\2\2\u0420\u203f\3\2\2\2\u0422\u2044\3\2"+
		"\2\2\u0424\u205b\3\2\2\2\u0426\u205d\3\2\2\2\u0428\u209d\3\2\2\2\u042a"+
		"\u209f\3\2\2\2\u042c\u20a1\3\2\2\2\u042e\u20a4\3\2\2\2\u0430\u20a6\3\2"+
		"\2\2\u0432\u20aa\3\2\2\2\u0434\u20b3\3\2\2\2\u0436\u20b8\3\2\2\2\u0438"+
		"\u20bd\3\2\2\2\u043a\u20c2\3\2\2\2\u043c\u20c4\3\2\2\2\u043e\u20c8\3\2"+
		"\2\2\u0440\u0442\n\2\2\2\u0441\u0440\3\2\2\2\u0442\u0443\3\2\2\2\u0443"+
		"\u0441\3\2\2\2\u0443\u0444\3\2\2\2\u0444\3\3\2\2\2\u0445\u0447\5\n\6\2"+
		"\u0446\u0445\3\2\2\2\u0447\u044a\3\2\2\2\u0448\u0446\3\2\2\2\u0448\u0449"+
		"\3\2\2\2\u0449\u044b\3\2\2\2\u044a\u0448\3\2\2\2\u044b\u044c\7\2\2\3\u044c"+
		"\5\3\2\2\2\u044d\u0450\5\n\6\2\u044e\u0450\5\u03b0\u01d9\2\u044f\u044d"+
		"\3\2\2\2\u044f\u044e\3\2\2\2\u0450\u0458\3\2\2\2\u0451\u0454\7\u0293\2"+
		"\2\u0452\u0455\5\n\6\2\u0453\u0455\5\u03b0\u01d9\2\u0454\u0452\3\2\2\2"+
		"\u0454\u0453\3\2\2\2\u0455\u0457\3\2\2\2\u0456\u0451\3\2\2\2\u0457\u045a"+
		"\3\2\2\2\u0458\u0456\3\2\2\2\u0458\u0459\3\2\2\2\u0459\u045c\3\2\2\2\u045a"+
		"\u0458\3\2\2\2\u045b\u045d\7\u0293\2\2\u045c\u045b\3\2\2\2\u045c\u045d"+
		"\3\2\2\2\u045d\u045f\3\2\2\2\u045e\u044f\3\2\2\2\u045e\u045f\3\2\2\2\u045f"+
		"\u0460\3\2\2\2\u0460\u0461\7\2\2\3\u0461\7\3\2\2\2\u0462\u0464\7\u00ae"+
		"\2\2\u0463\u0465\7\20\2\2\u0464\u0463\3\2\2\2\u0464\u0465\3\2\2\2\u0465"+
		"\u0467\3\2\2\2\u0466\u0468\7\u0236\2\2\u0467\u0466\3\2\2\2\u0467\u0468"+
		"\3\2\2\2\u0468\t\3\2\2\2\u0469\u046b\5\b\5\2\u046a\u0469\3\2\2\2\u046a"+
		"\u046b\3\2\2\2\u046b\u046c\3\2\2\2\u046c\u046d\5\f\7\2\u046d\13\3\2\2"+
		"\2\u046e\u048b\5\u0164\u00b3\2\u046f\u048b\5\u0174\u00bb\2\u0470\u048b"+
		"\5\u0186\u00c4\2\u0471\u048b\5\u01fe\u0100\2\u0472\u048b\5\u018c\u00c7"+
		"\2\u0473\u048b\5\u01b2\u00da\2\u0474\u048b\5\u011a\u008e\2\u0475\u048b"+
		"\5\32\16\2\u0476\u048b\5\u0166\u00b4\2\u0477\u048b\5\u0188\u00c5\2\u0478"+
		"\u048b\5\u0176\u00bc\2\u0479\u048b\5$\23\2\u047a\u048b\5v<\2\u047b\u048b"+
		"\5\36\20\2\u047c\u048b\5\24\13\2\u047d\u048b\5\22\n\2\u047e\u048b\5\u0200"+
		"\u0101\2\u047f\u048b\5\u018e\u00c8\2\u0480\u048b\5\u01c6\u00e4\2\u0481"+
		"\u048b\5\16\b\2\u0482\u048b\5\u0162\u00b2\2\u0483\u048b\5\u0172\u00ba"+
		"\2\u0484\u048b\5\u0184\u00c3\2\u0485\u048b\5\u01fc\u00ff\2\u0486\u048b"+
		"\5\u018a\u00c6\2\u0487\u048b\5\u01b0\u00d9\2\u0488\u048b\5\u0270\u0139"+
		"\2\u0489\u048b\5\u0118\u008d\2\u048a\u046e\3\2\2\2\u048a\u046f\3\2\2\2"+
		"\u048a\u0470\3\2\2\2\u048a\u0471\3\2\2\2\u048a\u0472\3\2\2\2\u048a\u0473"+
		"\3\2\2\2\u048a\u0474\3\2\2\2\u048a\u0475\3\2\2\2\u048a\u0476\3\2\2\2\u048a"+
		"\u0477\3\2\2\2\u048a\u0478\3\2\2\2\u048a\u0479\3\2\2\2\u048a\u047a\3\2"+
		"\2\2\u048a\u047b\3\2\2\2\u048a\u047c\3\2\2\2\u048a\u047d\3\2\2\2\u048a"+
		"\u047e\3\2\2\2\u048a\u047f\3\2\2\2\u048a\u0480\3\2\2\2\u048a\u0481\3\2"+
		"\2\2\u048a\u0482\3\2\2\2\u048a\u0483\3\2\2\2\u048a\u0484\3\2\2\2\u048a"+
		"\u0485\3\2\2\2\u048a\u0486\3\2\2\2\u048a\u0487\3\2\2\2\u048a\u0488\3\2"+
		"\2\2\u048a\u0489\3\2\2\2\u048b\r\3\2\2\2\u048c\u048d\7e\2\2\u048d\u048e"+
		"\7\u01b9\2\2\u048e\u0497\5\u0406\u0204\2\u048f\u0491\7\u0243\2\2\u0490"+
		"\u048f\3\2\2\2\u0490\u0491\3\2\2\2\u0491\u0493\3\2\2\2\u0492\u0494\5\20"+
		"\t\2\u0493\u0492\3\2\2\2\u0494\u0495\3\2\2\2\u0495\u0493\3\2\2\2\u0495"+
		"\u0496\3\2\2\2\u0496\u0498\3\2\2\2\u0497\u0490\3\2\2\2\u0497\u0498\3\2"+
		"\2\2\u0498\17\3\2\2\2\u0499\u049a\t\3\2\2\u049a\21\3\2\2\2\u049b\u049c"+
		"\7\u01a5\2\2\u049c\u049d\7\u015c\2\2\u049d\u049e\7\u0239\2\2\u049e\u049f"+
		"\5\u0408\u0205\2\u049f\23\3\2\2\2\u04a0\u04a1\7e\2\2\u04a1\u04a2\7\u015c"+
		"\2\2\u04a2\u04a3\7\u0239\2\2\u04a3\u04a6\5\u0408\u0205\2\u04a4\u04a5\7"+
		"\u015e\2\2\u04a5\u04a7\5\u03ec\u01f7\2\u04a6\u04a4\3\2\2\2\u04a6\u04a7"+
		"\3\2\2\2\u04a7\u04bc\3\2\2\2\u04a8\u04a9\7\u0164\2\2\u04a9\u04aa\7\u018b"+
		"\2\2\u04aa\u04ae\7\u01ff\2\2\u04ab\u04ac\t\4\2\2\u04ac\u04ad\7\u01a0\2"+
		"\2\u04ad\u04af\7\u018d\2\2\u04ae\u04ab\3\2\2\2\u04ae\u04af\3\2\2\2\u04af"+
		"\u04bd\3\2\2\2\u04b0\u04b2\5\u0092J\2\u04b1\u04b0\3\2\2\2\u04b1\u04b2"+
		"\3\2\2\2\u04b2\u04b4\3\2\2\2\u04b3\u04b5\t\5\2\2\u04b4\u04b3\3\2\2\2\u04b4"+
		"\u04b5\3\2\2\2\u04b5\u04b7\3\2\2\2\u04b6\u04b8\5\64\33\2\u04b7\u04b6\3"+
		"\2\2\2\u04b7\u04b8\3\2\2\2\u04b8\u04ba\3\2\2\2\u04b9\u04bb\5\30\r\2\u04ba"+
		"\u04b9\3\2\2\2\u04ba\u04bb\3\2\2\2\u04bb\u04bd\3\2\2\2\u04bc\u04a8\3\2"+
		"\2\2\u04bc\u04b1\3\2\2\2\u04bd\u04cf\3\2\2\2\u04be\u04bf\7\u022c\2\2\u04bf"+
		"\u04c9\7\u00e0\2\2\u04c0\u04c4\5\u0098M\2\u04c1\u04c2\7\u0201\2\2\u04c2"+
		"\u04c4\5\u0432\u021a\2\u04c3\u04c0\3\2\2\2\u04c3\u04c1\3\2\2\2\u04c4\u04c5"+
		"\3\2\2\2\u04c5\u04c3\3\2\2\2\u04c5\u04c6\3\2\2\2\u04c6\u04c8\3\2\2\2\u04c7"+
		"\u04c3\3\2\2\2\u04c8\u04cb\3\2\2\2\u04c9\u04c7\3\2\2\2\u04c9\u04ca\3\2"+
		"\2\2\u04ca\u04d0\3\2\2\2\u04cb\u04c9\3\2\2\2\u04cc\u04cd\7\u022c\2\2\u04cd"+
		"\u04ce\7\u013f\2\2\u04ce\u04d0\7\u00e0\2\2\u04cf\u04be\3\2\2\2\u04cf\u04cc"+
		"\3\2\2\2\u04cf\u04d0\3\2\2\2\u04d0\u04d2\3\2\2\2\u04d1\u04d3\5\26\f\2"+
		"\u04d2\u04d1\3\2\2\2\u04d2\u04d3\3\2\2\2\u04d3\u04d6\3\2\2\2\u04d4\u04d5"+
		"\7\u00bf\2\2\u04d5\u04d7\7\u0226\2\2\u04d6\u04d4\3\2\2\2\u04d6\u04d7\3"+
		"\2\2\2\u04d7\u04db\3\2\2\2\u04d8\u04d9\t\6\2\2\u04d9\u04da\7\u0195\2\2"+
		"\u04da\u04dc\7\u01b7\2\2\u04db\u04d8\3\2\2\2\u04db\u04dc\3\2\2\2\u04dc"+
		"\u04dd\3\2\2\2\u04dd\u04de\7\26\2\2\u04de\u04df\5\u0296\u014c\2\u04df"+
		"\25\3\2\2\2\u04e0\u04e1\7\u013c\2\2\u04e1\u0508\7\u01a5\2\2\u04e2\u0503"+
		"\7\u01a5\2\2\u04e3\u0504\t\7\2\2\u04e4\u04e5\7\u0164\2\2\u04e5\u0504\t"+
		"\b\2\2\u04e6\u04e7\7\u01ec\2\2\u04e7\u04ea\7\u0243\2\2\u04e8\u04ea\7\u013e"+
		"\2\2\u04e9\u04e6\3\2\2\2\u04e9\u04e8\3\2\2\2\u04ea\u0504\3\2\2\2\u04eb"+
		"\u04ef\7\u0243\2\2\u04ec\u04ed\7\u0190\2\2\u04ed\u04f0\7\u00fe\2\2\u04ee"+
		"\u04f0\7\u01be\2\2\u04ef\u04ec\3\2\2\2\u04ef\u04ee\3\2\2\2\u04f0\u0504"+
		"\3\2\2\2\u04f1\u04fe\7\u022c\2\2\u04f2\u04f4\7\u0082\2\2\u04f3\u04f5\t"+
		"\t\2\2\u04f4\u04f3\3\2\2\2\u04f4\u04f5\3\2\2\2\u04f5\u04f6\3\2\2\2\u04f6"+
		"\u04f7\7\u01ba\2\2\u04f7\u04ff\7\u01cd\2\2\u04f8\u04fa\t\t\2\2\u04f9\u04f8"+
		"\3\2\2\2\u04f9\u04fa\3\2\2\2\u04fa\u04fb\3\2\2\2\u04fb\u04fc\7\u01ba\2"+
		"\2\u04fc\u04fd\7\u01cd\2\2\u04fd\u04ff\7\u02a6\2\2\u04fe\u04f2\3\2\2\2"+
		"\u04fe\u04f9\3\2\2\2\u04ff\u0504\3\2\2\2\u0500\u0501\7\u022c\2\2\u0501"+
		"\u0502\t\n\2\2\u0502\u0504\7[\2\2\u0503\u04e3\3\2\2\2\u0503\u04e4\3\2"+
		"\2\2\u0503\u04e9\3\2\2\2\u0503\u04eb\3\2\2\2\u0503\u04f1\3\2\2\2\u0503"+
		"\u0500\3\2\2\2\u0504\u0505\3\2\2\2\u0505\u0503\3\2\2\2\u0505\u0506\3\2"+
		"\2\2\u0506\u0508\3\2\2\2\u0507\u04e0\3\2\2\2\u0507\u04e2\3\2\2\2\u0508"+
		"\27\3\2\2\2\u0509\u050a\7-\2\2\u050a\u050b\t\13\2\2\u050b\31\3\2\2\2\u050c"+
		"\u050d\7\u01b6\2\2\u050d\u050e\5\34\17\2\u050e\u0510\7\u0164\2\2\u050f"+
		"\u0511\7\u01ff\2\2\u0510\u050f\3\2\2\2\u0510\u0511\3\2\2\2\u0511\u0512"+
		"\3\2\2\2\u0512\u0513\5\u0408\u0205\2\u0513\u0515\7\u00c6\2\2\u0514\u0516"+
		"\7\u00cd\2\2\u0515\u0514\3\2\2\2\u0515\u0516\3\2\2\2\u0516\u0519\3\2\2"+
		"\2\u0517\u051a\7\u0193\2\2\u0518\u051a\5\u0406\u0204\2\u0519\u0517\3\2"+
		"\2\2\u0519\u0518\3\2\2\2\u051a\u054f\3\2\2\2\u051b\u051c\7\u00cc\2\2\u051c"+
		"\u051d\5\34\17\2\u051d\u051f\7\u0164\2\2\u051e\u0520\7\u01ff\2\2\u051f"+
		"\u051e\3\2\2\2\u051f\u0520\3\2\2\2\u0520\u0521\3\2\2\2\u0521\u0522\5\u0408"+
		"\u0205\2\u0522\u0524\7\u0210\2\2\u0523\u0525\7\u00cd\2\2\u0524\u0523\3"+
		"\2\2\2\u0524\u0525\3\2\2\2\u0525\u0528\3\2\2\2\u0526\u0529\7\u0193\2\2"+
		"\u0527\u0529\5\u0406\u0204\2\u0528\u0526\3\2\2\2\u0528\u0527\3\2\2\2\u0529"+
		"\u054f\3\2\2\2\u052a\u052b\7\u00cc\2\2\u052b\u0530\5\u0406\u0204\2\u052c"+
		"\u052d\7\u028d\2\2\u052d\u052f\5\u0406\u0204\2\u052e\u052c\3\2\2\2\u052f"+
		"\u0532\3\2\2\2\u0530\u052e\3\2\2\2\u0530\u0531\3\2\2\2\u0531\u0533\3\2"+
		"\2\2\u0532\u0530\3\2\2\2\u0533\u0534\7\u0210\2\2\u0534\u0539\5\u0406\u0204"+
		"\2\u0535\u0536\7\u028d\2\2\u0536\u0538\5\u0406\u0204\2\u0537\u0535\3\2"+
		"\2\2\u0538\u053b\3\2\2\2\u0539\u0537\3\2\2\2\u0539\u053a\3\2\2\2\u053a"+
		"\u054f\3\2\2\2\u053b\u0539\3\2\2\2\u053c\u053d\7\u01b6\2\2\u053d\u0542"+
		"\5\u0406\u0204\2\u053e\u053f\7\u028d\2\2\u053f\u0541\5\u0406\u0204\2\u0540"+
		"\u053e\3\2\2\2\u0541\u0544\3\2\2\2\u0542\u0540\3\2\2\2\u0542\u0543\3\2"+
		"\2\2\u0543\u0545\3\2\2\2\u0544\u0542\3\2\2\2\u0545\u0546\7\u00c6\2\2\u0546"+
		"\u054b\5\u0406\u0204\2\u0547\u0548\7\u028d\2\2\u0548\u054a\5\u0406\u0204"+
		"\2\u0549\u0547\3\2\2\2\u054a\u054d\3\2\2\2\u054b\u0549\3\2\2\2\u054b\u054c"+
		"\3\2\2\2\u054c\u054f\3\2\2\2\u054d\u054b\3\2\2\2\u054e\u050c\3\2\2\2\u054e"+
		"\u051b\3\2\2\2\u054e\u052a\3\2\2\2\u054e\u053c\3\2\2\2\u054f\33\3\2\2"+
		"\2\u0550\u0552\7\u028d\2\2\u0551\u0550\3\2\2\2\u0551\u0552\3\2\2\2\u0552"+
		"\u0553\3\2\2\2\u0553\u0555\t\f\2\2\u0554\u0551\3\2\2\2\u0555\u0556\3\2"+
		"\2\2\u0556\u0554\3\2\2\2\u0556\u0557\3\2\2\2\u0557\35\3\2\2\2\u0558\u055b"+
		"\7e\2\2\u0559\u055a\7\u0169\2\2\u055a\u055c\7\u01ac\2\2\u055b\u0559\3"+
		"\2\2\2\u055b\u055c\3\2\2\2\u055c\u0561\3\2\2\2\u055d\u055f\7\u0169\2\2"+
		"\u055e\u055d\3\2\2\2\u055e\u055f\3\2\2\2\u055f\u0560\3\2\2\2\u0560\u0562"+
		"\7\u00c1\2\2\u0561\u055e\3\2\2\2\u0561\u0562\3\2\2\2\u0562\u0564\3\2\2"+
		"\2\u0563\u0565\7\u0096\2\2\u0564\u0563\3\2\2\2\u0564\u0565\3\2\2\2\u0565"+
		"\u0566\3\2\2\2\u0566\u0567\7\u0239\2\2\u0567\u0569\5\u0408\u0205\2\u0568"+
		"\u056a\5 \21\2\u0569\u0568\3\2\2\2\u0569\u056a\3\2\2\2\u056a\u056b\3\2"+
		"\2\2\u056b\u056c\7\26\2\2\u056c\u056e\5\u0296\u014c\2\u056d\u056f\5\u033a"+
		"\u019e\2\u056e\u056d\3\2\2\2\u056e\u056f\3\2\2\2\u056f\37\3\2\2\2\u0570"+
		"\u0571\5\"\22\2\u0571!\3\2\2\2\u0572\u0580\7\u0287\2\2\u0573\u0575\7\u028d"+
		"\2\2\u0574\u0573\3\2\2\2\u0574\u0575\3\2\2\2\u0575\u057e\3\2\2\2\u0576"+
		"\u057a\5\u03c0\u01e1\2\u0577\u0579\5\u00acW\2\u0578\u0577\3\2\2\2\u0579"+
		"\u057c\3\2\2\2\u057a\u0578\3\2\2\2\u057a\u057b\3\2\2\2\u057b\u057f\3\2"+
		"\2\2\u057c\u057a\3\2\2\2\u057d\u057f\5\u0082B\2\u057e\u0576\3\2\2\2\u057e"+
		"\u057d\3\2\2\2\u057f\u0581\3\2\2\2\u0580\u0574\3\2\2\2\u0581\u0582\3\2"+
		"\2\2\u0582\u0580\3\2\2\2\u0582\u0583\3\2\2\2\u0583\u0584\3\2\2\2\u0584"+
		"\u0585\7\u0288\2\2\u0585#\3\2\2\2\u0586\u0588\7e\2\2\u0587\u0589\t\r\2"+
		"\2\u0588\u0587\3\2\2\2\u0588\u0589\3\2\2\2\u0589\u058a\3\2\2\2\u058a\u058b"+
		"\7\u00e0\2\2\u058b\u058c\5\u03fa\u01fe\2\u058c\u0590\7\u0164\2\2\u058d"+
		"\u0591\5&\24\2\u058e\u0591\5\66\34\2\u058f\u0591\5t;\2\u0590\u058d\3\2"+
		"\2\2\u0590\u058e\3\2\2\2\u0590\u058f\3\2\2\2\u0591\u0593\3\2\2\2\u0592"+
		"\u0594\7\u0224\2\2\u0593\u0592\3\2\2\2\u0593\u0594\3\2\2\2\u0594%\3\2"+
		"\2\2\u0595\u0596\7G\2\2\u0596\u0598\5(\25\2\u0597\u0599\5*\26\2\u0598"+
		"\u0597\3\2\2\2\u0598\u0599\3\2\2\2\u0599\'\3\2\2\2\u059a\u059b\5\u0432"+
		"\u021a\2\u059b\u059c\7\u0280\2\2\u059c\u059e\3\2\2\2\u059d\u059a\3\2\2"+
		"\2\u059d\u059e\3\2\2\2\u059e\u059f\3\2\2\2\u059f\u05a0\5\u0432\u021a\2"+
		"\u05a0)\3\2\2\2\u05a1\u05ae\5\u0098M\2\u05a2\u05ae\5\u009eP\2\u05a3\u05a6"+
		"\7\u0201\2\2\u05a4\u05a7\5,\27\2\u05a5\u05a7\7\u0082\2\2\u05a6\u05a4\3"+
		"\2\2\2\u05a6\u05a5\3\2\2\2\u05a7\u05ae\3\2\2\2\u05a8\u05ae\5.\30\2\u05a9"+
		"\u05ae\5\60\31\2\u05aa\u05ae\7\u01b5\2\2\u05ab\u05ae\5\62\32\2\u05ac\u05ae"+
		"\5\64\33\2\u05ad\u05a1\3\2\2\2\u05ad\u05a2\3\2\2\2\u05ad\u05a3\3\2\2\2"+
		"\u05ad\u05a8\3\2\2\2\u05ad\u05a9\3\2\2\2\u05ad\u05aa\3\2\2\2\u05ad\u05ab"+
		"\3\2\2\2\u05ad\u05ac\3\2\2\2\u05ae\u05af\3\2\2\2\u05af\u05ad\3\2\2\2\u05af"+
		"\u05b0\3\2\2\2\u05b0+\3\2\2\2\u05b1\u05b2\5\u043e\u0220\2\u05b2-\3\2\2"+
		"\2\u05b3\u05b7\7\u0142\2\2\u05b4\u05b5\7U\2\2\u05b5\u05b7\7\u0281\2\2"+
		"\u05b6\u05b3\3\2\2\2\u05b6\u05b4\3\2\2\2\u05b7/\3\2\2\2\u05b8\u05b9\t"+
		"\16\2\2\u05b9\61\3\2\2\2\u05ba\u05bb\t\17\2\2\u05bb\63\3\2\2\2\u05bc\u05c2"+
		"\7\u014e\2\2\u05bd\u05bf\7\u0174\2\2\u05be\u05c0\7\u0281\2\2\u05bf\u05be"+
		"\3\2\2\2\u05bf\u05c0\3\2\2\2\u05c0\u05c2\3\2\2\2\u05c1\u05bc\3\2\2\2\u05c1"+
		"\u05bd\3\2\2\2\u05c2\65\3\2\2\2\u05c3\u05c5\5\u0408\u0205\2\u05c4\u05c6"+
		"\5\u03c0\u01e1\2\u05c5\u05c4\3\2\2\2\u05c5\u05c6\3\2\2\2\u05c6\u05c7\3"+
		"\2\2\2\u05c7\u05cf\7\u0287\2\2\u05c8\u05ca\7\u028d\2\2\u05c9\u05c8\3\2"+
		"\2\2\u05c9\u05ca\3\2\2\2\u05ca\u05cb\3\2\2\2\u05cb\u05cd\58\35\2\u05cc"+
		"\u05ce\t\20\2\2\u05cd\u05cc\3\2\2\2\u05cd\u05ce\3\2\2\2\u05ce\u05d0\3"+
		"\2\2\2\u05cf\u05c9\3\2\2\2\u05d0\u05d1\3\2\2\2\u05d1\u05cf\3\2\2\2\u05d1"+
		"\u05d2\3\2\2\2\u05d2\u05d3\3\2\2\2\u05d3\u05d5\7\u0288\2\2\u05d4\u05d6"+
		"\5:\36\2\u05d5\u05d4\3\2\2\2\u05d5\u05d6\3\2\2\2\u05d6\67\3\2\2\2\u05d7"+
		"\u05da\5\u0404\u0203\2\u05d8\u05da\5\u0346\u01a4\2\u05d9\u05d7\3\2\2\2"+
		"\u05d9\u05d8\3\2\2\2\u05da9\3\2\2\2\u05db\u05df\5<\37\2\u05dc\u05df\5"+
		"Z.\2\u05dd\u05df\5*\26\2\u05de\u05db\3\2\2\2\u05de\u05dc\3\2\2\2\u05de"+
		"\u05dd\3\2\2\2\u05df\u05e0\3\2\2\2\u05e0\u05de\3\2\2\2\u05e0\u05e1\3\2"+
		"\2\2\u05e1\u05e9\3\2\2\2\u05e2\u05e3\7\u00e2\2\2\u05e3\u05e6\7\u00f7\2"+
		"\2\u05e4\u05e7\5h\65\2\u05e5\u05e7\5p9\2\u05e6\u05e4\3\2\2\2\u05e6\u05e5"+
		"\3\2\2\2\u05e7\u05e9\3\2\2\2\u05e8\u05de\3\2\2\2\u05e8\u05e2\3\2\2\2\u05e9"+
		";\3\2\2\2\u05ea\u05eb\7\u00ca\2\2\u05eb\u05ec\7\u0178\2\2\u05ec\u05f9"+
		"\7\65\2\2\u05ed\u05ee\7\u0197\2\2\u05ee\u05ef\5\u00b0Y\2\u05ef\u05f0\7"+
		"\u0287\2\2\u05f0\u05f1\5> \2\u05f1\u05f2\7\u0288\2\2\u05f2\u05fa\3\2\2"+
		"\2\u05f3\u05f4\7\u00d0\2\2\u05f4\u05f7\5\u00b0Y\2\u05f5\u05f8\5H%\2\u05f6"+
		"\u05f8\5V,\2\u05f7\u05f5\3\2\2\2\u05f7\u05f6\3\2\2\2\u05f8\u05fa\3\2\2"+
		"\2\u05f9\u05ed\3\2\2\2\u05f9\u05f3\3\2\2\2\u05fa=\3\2\2\2\u05fb\u05fd"+
		"\7\u0178\2\2\u05fc\u05fe\5@!\2\u05fd\u05fc\3\2\2\2\u05fd\u05fe\3\2\2\2"+
		"\u05fe\u05ff\3\2\2\2\u05ff\u0600\7\u022f\2\2\u0600\u0601\7\u0104\2\2\u0601"+
		"\u0602\7\u0204\2\2\u0602\u0607\7\u0287\2\2\u0603\u0605\7\u028d\2\2\u0604"+
		"\u0603\3\2\2\2\u0604\u0605\3\2\2\2\u0605\u0606\3\2\2\2\u0606\u0608\5B"+
		"\"\2\u0607\u0604\3\2\2\2\u0608\u0609\3\2\2\2\u0609\u0607\3\2\2\2\u0609"+
		"\u060a\3\2\2\2\u060a\u060b\3\2\2\2\u060b\u060d\7\u0288\2\2\u060c\u060e"+
		"\5\u0096L\2\u060d\u060c\3\2\2\2\u060d\u060e\3\2\2\2\u060e?\3\2\2\2\u060f"+
		"\u0610\5\u043e\u0220\2\u0610A\3\2\2\2\u0611\u0616\7\u0283\2\2\u0612\u0616"+
		"\5D#\2\u0613\u0616\5\u042a\u0216\2\u0614\u0616\7\u0122\2\2\u0615\u0611"+
		"\3\2\2\2\u0615\u0612\3\2\2\2\u0615\u0613\3\2\2\2\u0615\u0614\3\2\2\2\u0616"+
		"C\3\2\2\2\u0617\u0618\7\u01f9\2\2\u0618\u0619\7\u0287\2\2\u0619\u061a"+
		"\5\u0346\u01a4\2\u061a\u061b\7\u028d\2\2\u061b\u061e\5\u0346\u01a4\2\u061c"+
		"\u061d\7\u028d\2\2\u061d\u061f\5\u0346\u01a4\2\u061e\u061c\3\2\2\2\u061e"+
		"\u061f\3\2\2\2\u061f\u0620\3\2\2\2\u0620\u0621\7\u0288\2\2\u0621\u067d"+
		"\3\2\2\2\u0622\u0623\7\u01f9\2\2\u0623\u0624\7\u0287\2\2\u0624\u0627\5"+
		"\u0346\u01a4\2\u0625\u0626\7\u00c6\2\2\u0626\u0628\5\u0376\u01bc\2\u0627"+
		"\u0625\3\2\2\2\u0627\u0628\3\2\2\2\u0628\u062b\3\2\2\2\u0629\u062a\7\u00bf"+
		"\2\2\u062a\u062c\5\u0376\u01bc\2\u062b\u0629\3\2\2\2\u062b\u062c\3\2\2"+
		"\2\u062c\u062d\3\2\2\2\u062d\u062e\7\u0288\2\2\u062e\u067d\3\2\2\2\u062f"+
		"\u0630\7\u0211\2\2\u0630\u0634\7\u0287\2\2\u0631\u0635\5\u0426\u0214\2"+
		"\u0632\u0635\5\u037e\u01c0\2\u0633\u0635\5\u0346\u01a4\2\u0634\u0631\3"+
		"\2\2\2\u0634\u0632\3\2\2\2\u0634\u0633\3\2\2\2\u0635\u0638\3\2\2\2\u0636"+
		"\u0637\7\u028d\2\2\u0637\u0639\5\u042e\u0218\2\u0638\u0636\3\2\2\2\u0638"+
		"\u0639\3\2\2\2\u0639\u063c\3\2\2\2\u063a\u063b\7\u028d\2\2\u063b\u063d"+
		"\5\u042e\u0218\2\u063c\u063a\3\2\2\2\u063c\u063d\3\2\2\2\u063d\u063e\3"+
		"\2\2\2\u063e\u063f\7\u0288\2\2\u063f\u067d\3\2\2\2\u0640\u0641\7}\2\2"+
		"\u0641\u0642\7\u0287\2\2\u0642\u0643\5F$\2\u0643\u0644\7\u0288\2\2\u0644"+
		"\u067d\3\2\2\2\u0645\u0646\7C\2\2\u0646\u0647\7\u0287\2\2\u0647\u0648"+
		"\5\u0356\u01ac\2\u0648\u0649\7\u022c\2\2\u0649\u064a\7\u0139\2\2\u064a"+
		"\u064b\7\u0288\2\2\u064b\u067d\3\2\2\2\u064c\u064d\7\u0156\2\2\u064d\u064e"+
		"\7\u0287\2\2\u064e\u064f\5\u0346\u01a4\2\u064f\u0650\7\u028d\2\2\u0650"+
		"\u0651\5\u0346\u01a4\2\u0651\u0652\7\u0288\2\2\u0652\u067d\3\2\2\2\u0653"+
		"\u0654\7\u0218\2\2\u0654\u065c\7\u0287\2\2\u0655\u0657\t\21\2\2\u0656"+
		"\u0655\3\2\2\2\u0656\u0657\3\2\2\2\u0657\u0659\3\2\2\2\u0658\u065a\5\u042e"+
		"\u0218\2\u0659\u0658\3\2\2\2\u0659\u065a\3\2\2\2\u065a\u065b\3\2\2\2\u065b"+
		"\u065d\7\u00c6\2\2\u065c\u0656\3\2\2\2\u065c\u065d\3\2\2\2\u065d\u065e"+
		"\3\2\2\2\u065e\u065f\5\u0356\u01ac\2\u065f\u0660\7\u0288\2\2\u0660\u067d"+
		"\3\2\2\2\u0661\u0662\7\u0212\2\2\u0662\u0663\7\u0287\2\2\u0663\u0666\5"+
		"\u0346\u01a4\2\u0664\u0665\7\u028d\2\2\u0665\u0667\5\u042e\u0218\2\u0666"+
		"\u0664\3\2\2\2\u0666\u0667\3\2\2\2\u0667\u0668\3\2\2\2\u0668\u0669\7\u0288"+
		"\2\2\u0669\u067d\3\2\2\2\u066a\u066b\7V\2\2\u066b\u0672\7\u0287\2\2\u066c"+
		"\u066f\5\u042e\u0218\2\u066d\u066f\5\u0346\u01a4\2\u066e\u066c\3\2\2\2"+
		"\u066e\u066d\3\2\2\2\u066f\u0670\3\2\2\2\u0670\u0671\7\u028d\2\2\u0671"+
		"\u0673\3\2\2\2\u0672\u066e\3\2\2\2\u0673\u0674\3\2\2\2\u0674\u0672\3\2"+
		"\2\2\u0674\u0675\3\2\2\2\u0675\u0678\3\2\2\2\u0676\u0679\5\u042e\u0218"+
		"\2\u0677\u0679\5\u0346\u01a4\2\u0678\u0676\3\2\2\2\u0678\u0677\3\2\2\2"+
		"\u0679\u067a\3\2\2\2\u067a\u067b\7\u0288\2\2\u067b\u067d\3\2\2\2\u067c"+
		"\u0617\3\2\2\2\u067c\u0622\3\2\2\2\u067c\u062f\3\2\2\2\u067c\u0640\3\2"+
		"\2\2\u067c\u0645\3\2\2\2\u067c\u064c\3\2\2\2\u067c\u0653\3\2\2\2\u067c"+
		"\u0661\3\2\2\2\u067c\u066a\3\2\2\2\u067dE\3\2\2\2\u067e\u0683\5\u0346"+
		"\u01a4\2\u067f\u0680\7\u028d\2\2\u0680\u0682\5\u0346\u01a4\2\u0681\u067f"+
		"\3\2\2\2\u0682\u0685\3\2\2\2\u0683\u0681\3\2\2\2\u0683\u0684\3\2\2\2\u0684"+
		"G\3\2\2\2\u0685\u0683\3\2\2\2\u0686\u0691\7\u0287\2\2\u0687\u0689\7\u028d"+
		"\2\2\u0688\u0687\3\2\2\2\u0688\u0689\3\2\2\2\u0689\u068a\3\2\2\2\u068a"+
		"\u068c\7\u0178\2\2\u068b\u068d\5@!\2\u068c\u068b\3\2\2\2\u068c\u068d\3"+
		"\2\2\2\u068d\u068f\3\2\2\2\u068e\u0690\5J&\2\u068f\u068e\3\2\2\2\u068f"+
		"\u0690\3\2\2\2\u0690\u0692\3\2\2\2\u0691\u0688\3\2\2\2\u0692\u0693\3\2"+
		"\2\2\u0693\u0691\3\2\2\2\u0693\u0694\3\2\2\2\u0694\u0695\3\2\2\2\u0695"+
		"\u0696\7\u0288\2\2\u0696I\3\2\2\2\u0697\u0698\7\u0201\2\2\u0698\u06ac"+
		"\5,\27\2\u0699\u069c\7\u0171\2\2\u069a\u069b\7\u0201\2\2\u069b\u069d\5"+
		",\27\2\u069c\u069a\3\2\2\2\u069c\u069d\3\2\2\2\u069d\u06ac\3\2\2\2\u069e"+
		"\u06ac\5L\'\2\u069f\u06ac\5.\30\2\u06a0\u06ac\5N(\2\u06a1\u06a2\7\u0233"+
		"\2\2\u06a2\u06a3\5T+\2\u06a3\u06a4\7\u01f3\2\2\u06a4\u06a6\7\26\2\2\u06a5"+
		"\u06a7\t\22\2\2\u06a6\u06a5\3\2\2\2\u06a6\u06a7\3\2\2\2\u06a7\u06a8\3"+
		"\2\2\2\u06a8\u06a9\7\u010f\2\2\u06a9\u06aa\5R*\2\u06aa\u06ac\3\2\2\2\u06ab"+
		"\u0697\3\2\2\2\u06ab\u0699\3\2\2\2\u06ab\u069e\3\2\2\2\u06ab\u069f\3\2"+
		"\2\2\u06ab\u06a0\3\2\2\2\u06ab\u06a1\3\2\2\2\u06ac\u06ad\3\2\2\2\u06ad"+
		"\u06ab\3\2\2\2\u06ad\u06ae\3\2\2\2\u06aeK\3\2\2\2\u06af\u06b9\7U\2\2\u06b0"+
		"\u06ba\7 \2\2\u06b1\u06b7\7\u00bf\2\2\u06b2\u06b8\7\u0163\2\2\u06b3\u06b5"+
		"\t\23\2\2\u06b4\u06b6\t\24\2\2\u06b5\u06b4\3\2\2\2\u06b5\u06b6\3\2\2\2"+
		"\u06b6\u06b8\3\2\2\2\u06b7\u06b2\3\2\2\2\u06b7\u06b3\3\2\2\2\u06b8\u06ba"+
		"\3\2\2\2\u06b9\u06b0\3\2\2\2\u06b9\u06b1\3\2\2\2\u06b9\u06ba\3\2\2\2\u06ba"+
		"\u06bd\3\2\2\2\u06bb\u06bd\7\u0142\2\2\u06bc\u06af\3\2\2\2\u06bc\u06bb"+
		"\3\2\2\2\u06bdM\3\2\2\2\u06be\u06bf\7\u010f\2\2\u06bf\u06c0\7\u0287\2"+
		"\2\u06c0\u06c1\5P)\2\u06c1\u06c2\7\u0288\2\2\u06c2\u06c3\7\u01f3\2\2\u06c3"+
		"\u06c5\7\26\2\2\u06c4\u06c6\t\22\2\2\u06c5\u06c4\3\2\2\2\u06c5\u06c6\3"+
		"\2\2\2\u06c6\u06d4\3\2\2\2\u06c7\u06cd\5R*\2\u06c8\u06c9\7\u0287\2\2\u06c9"+
		"\u06ca\7\u0201\2\2\u06ca\u06cb\5,\27\2\u06cb\u06cc\7\u0288\2\2\u06cc\u06ce"+
		"\3\2\2\2\u06cd\u06c8\3\2\2\2\u06cd\u06ce\3\2\2\2\u06ce\u06d5\3\2\2\2\u06cf"+
		"\u06d0\7\u0287\2\2\u06d0\u06d1\7\u0201\2\2\u06d1\u06d2\5,\27\2\u06d2\u06d3"+
		"\7\u0288\2\2\u06d3\u06d5\3\2\2\2\u06d4\u06c7\3\2\2\2\u06d4\u06cf\3\2\2"+
		"\2\u06d5O\3\2\2\2\u06d6\u06d7\5\u043e\u0220\2\u06d7Q\3\2\2\2\u06d8\u06d9"+
		"\5\u043e\u0220\2\u06d9S\3\2\2\2\u06da\u06db\5\u0432\u021a\2\u06db\u06dc"+
		"\7\u0280\2\2\u06dc\u06de\3\2\2\2\u06dd\u06da\3\2\2\2\u06dd\u06de\3\2\2"+
		"\2\u06de\u06e2\3\2\2\2\u06df\u06e0\5\u0432\u021a\2\u06e0\u06e1\7\u0280"+
		"\2\2\u06e1\u06e3\3\2\2\2\u06e2\u06df\3\2\2\2\u06e2\u06e3\3\2\2\2\u06e3"+
		"\u06e4\3\2\2\2\u06e4\u06e5\5\u0432\u021a\2\u06e5U\3\2\2\2\u06e6\u06e7"+
		"\7\u0186\2\2\u06e7\u06f5\5X-\2\u06e8\u06e9\7\u01f3\2\2\u06e9\u06ea\7\u00db"+
		"\2\2\u06ea\u06ef\7\u0287\2\2\u06eb\u06ed\7\u028d\2\2\u06ec\u06eb\3\2\2"+
		"\2\u06ec\u06ed\3\2\2\2\u06ed\u06ee\3\2\2\2\u06ee\u06f0\5,\27\2\u06ef\u06ec"+
		"\3\2\2\2\u06f0\u06f1\3\2\2\2\u06f1\u06ef\3\2\2\2\u06f1\u06f2\3\2\2\2\u06f2"+
		"\u06f3\3\2\2\2\u06f3\u06f4\7\u0288\2\2\u06f4\u06f6\3\2\2\2\u06f5\u06e8"+
		"\3\2\2\2\u06f5\u06f6\3\2\2\2\u06f6\u06f9\3\2\2\2\u06f7\u06fa\5L\'\2\u06f8"+
		"\u06fa\5.\30\2\u06f9\u06f7\3\2\2\2\u06f9\u06f8\3\2\2\2\u06f9\u06fa\3\2"+
		"\2\2\u06fa\u0709\3\2\2\2\u06fb\u06fc\7\u0171\2\2\u06fc\u06fd\7\u01f3\2"+
		"\2\u06fd\u06fe\7\u00db\2\2\u06fe\u0703\7\u0287\2\2\u06ff\u0701\7\u028d"+
		"\2\2\u0700\u06ff\3\2\2\2\u0700\u0701\3\2\2\2\u0701\u0702\3\2\2\2\u0702"+
		"\u0704\5,\27\2\u0703\u0700\3\2\2\2\u0704\u0705\3\2\2\2\u0705\u0703\3\2"+
		"\2\2\u0705\u0706\3\2\2\2\u0706\u0707\3\2\2\2\u0707\u0708\7\u0288\2\2\u0708"+
		"\u070a\3\2\2\2\u0709\u06fb\3\2\2\2\u0709\u070a\3\2\2\2\u070aW\3\2\2\2"+
		"\u070b\u070c\7\u0281\2\2\u070cY\3\2\2\2\u070d\u0712\7\u010e\2\2\u070e"+
		"\u0713\5\\/\2\u070f\u0713\5^\60\2\u0710\u0713\5`\61\2\u0711\u0713\5b\62"+
		"\2\u0712\u070e\3\2\2\2\u0712\u070f\3\2\2\2\u0712\u0710\3\2\2\2\u0712\u0711"+
		"\3\2\2\2\u0712\u0713\3\2\2\2\u0713[\3\2\2\2\u0714\u0727\7\u0287\2\2\u0715"+
		"\u0717\7\u028d\2\2\u0716\u0715\3\2\2\2\u0716\u0717\3\2\2\2\u0717\u0718"+
		"\3\2\2\2\u0718\u071a\7\u0178\2\2\u0719\u071b\5@!\2\u071a\u0719\3\2\2\2"+
		"\u071a\u071b\3\2\2\2\u071b\u0722\3\2\2\2\u071c\u071f\5\u0096L\2\u071d"+
		"\u071f\5.\30\2\u071e\u071c\3\2\2\2\u071e\u071d\3\2\2\2\u071f\u0720\3\2"+
		"\2\2\u0720\u071e\3\2\2\2\u0720\u0721\3\2\2\2\u0721\u0723\3\2\2\2\u0722"+
		"\u071e\3\2\2\2\u0722\u0723\3\2\2\2\u0723\u0725\3\2\2\2\u0724\u0726\7\u0224"+
		"\2\2\u0725\u0724\3\2\2\2\u0725\u0726\3\2\2\2\u0726\u0728\3\2\2\2\u0727"+
		"\u0716\3\2\2\2\u0728\u0729\3\2\2\2\u0729\u0727\3\2\2\2\u0729\u072a\3\2"+
		"\2\2\u072a\u072b\3\2\2\2\u072b\u072c\7\u0288\2\2\u072c]\3\2\2\2\u072d"+
		"\u0740\7\u0287\2\2\u072e\u0730\7\u028d\2\2\u072f\u072e\3\2\2\2\u072f\u0730"+
		"\3\2\2\2\u0730\u0731\3\2\2\2\u0731\u0733\7\u0178\2\2\u0732\u0734\5@!\2"+
		"\u0733\u0732\3\2\2\2\u0733\u0734\3\2\2\2\u0734\u073b\3\2\2\2\u0735\u0738"+
		"\5\u0096L\2\u0736\u0738\5.\30\2\u0737\u0735\3\2\2\2\u0737\u0736\3\2\2"+
		"\2\u0738\u0739\3\2\2\2\u0739\u0737\3\2\2\2\u0739\u073a\3\2\2\2\u073a\u073c"+
		"\3\2\2\2\u073b\u0737\3\2\2\2\u073b\u073c\3\2\2\2\u073c\u073e\3\2\2\2\u073d"+
		"\u073f\7\u0224\2\2\u073e\u073d\3\2\2\2\u073e\u073f\3\2\2\2\u073f\u0741"+
		"\3\2\2\2\u0740\u072f\3\2\2\2\u0741\u0742\3\2\2\2\u0742\u0740\3\2\2\2\u0742"+
		"\u0743\3\2\2\2\u0743\u0744\3\2\2\2\u0744\u0745\7\u0288\2\2\u0745_\3\2"+
		"\2\2\u0746\u0747\7\u01f3\2\2\u0747\u0748\7\u00db\2\2\u0748\u074d\7\u0287"+
		"\2\2\u0749\u074b\7\u028d\2\2\u074a\u0749\3\2\2\2\u074a\u074b\3\2\2\2\u074b"+
		"\u074c\3\2\2\2\u074c\u074e\5,\27\2\u074d\u074a\3\2\2\2\u074e\u074f\3\2"+
		"\2\2\u074f\u074d\3\2\2\2\u074f\u0750\3\2\2\2\u0750\u0751\3\2\2\2\u0751"+
		"\u0752\7\u0288\2\2\u0752\u076b\3\2\2\2\u0753\u0765\7\u0287\2\2\u0754\u0756"+
		"\7\u028d\2\2\u0755\u0754\3\2\2\2\u0755\u0756\3\2\2\2\u0756\u0757\3\2\2"+
		"\2\u0757\u0759\7\u0178\2\2\u0758\u075a\5@!\2\u0759\u0758\3\2\2\2\u0759"+
		"\u075a\3\2\2\2\u075a\u075d\3\2\2\2\u075b\u075c\7\u0201\2\2\u075c\u075e"+
		"\5,\27\2\u075d\u075b\3\2\2\2\u075d\u075e\3\2\2\2\u075e\u0760\3\2\2\2\u075f"+
		"\u0761\5.\30\2\u0760\u075f\3\2\2\2\u0760\u0761\3\2\2\2\u0761\u0763\3\2"+
		"\2\2\u0762\u0764\7\u0224\2\2\u0763\u0762\3\2\2\2\u0763\u0764\3\2\2\2\u0764"+
		"\u0766\3\2\2\2\u0765\u0755\3\2\2\2\u0766\u0767\3\2\2\2\u0767\u0765\3\2"+
		"\2\2\u0767\u0768\3\2\2\2\u0768\u0769\3\2\2\2\u0769\u076b\7\u0288\2\2\u076a"+
		"\u0746\3\2\2\2\u076a\u0753\3\2\2\2\u076ba\3\2\2\2\u076c\u076d\7\u01f3"+
		"\2\2\u076d\u076e\7\u00db\2\2\u076e\u0773\7\u0287\2\2\u076f\u0771\7\u028d"+
		"\2\2\u0770\u076f\3\2\2\2\u0770\u0771\3\2\2\2\u0771\u0772\3\2\2\2\u0772"+
		"\u0774\5,\27\2\u0773\u0770\3\2\2\2\u0774\u0775\3\2\2\2\u0775\u0773\3\2"+
		"\2\2\u0775\u0776\3\2\2\2\u0776\u0777\3\2\2\2\u0777\u0778\7\u0288\2\2\u0778"+
		"\u077a\3\2\2\2\u0779\u076c\3\2\2\2\u0779\u077a\3\2\2\2\u077a\u077b\3\2"+
		"\2\2\u077b\u078f\7\u0287\2\2\u077c\u077e\7\u028d\2\2\u077d\u077c\3\2\2"+
		"\2\u077d\u077e\3\2\2\2\u077e\u077f\3\2\2\2\u077f\u0781\7\u0178\2\2\u0780"+
		"\u0782\5@!\2\u0781\u0780\3\2\2\2\u0781\u0782\3\2\2\2\u0782\u0789\3\2\2"+
		"\2\u0783\u0786\5\u0096L\2\u0784\u0786\5.\30\2\u0785\u0783\3\2\2\2\u0785"+
		"\u0784\3\2\2\2\u0786\u0787\3\2\2\2\u0787\u0785\3\2\2\2\u0787\u0788\3\2"+
		"\2\2\u0788\u078a\3\2\2\2\u0789\u0785\3\2\2\2\u0789\u078a\3\2\2\2\u078a"+
		"\u078b\3\2\2\2\u078b\u078d\7\u0224\2\2\u078c\u078e\5d\63\2\u078d\u078c"+
		"\3\2\2\2\u078d\u078e\3\2\2\2\u078e\u0790\3\2\2\2\u078f\u077d\3\2\2\2\u0790"+
		"\u0791\3\2\2\2\u0791\u078f\3\2\2\2\u0791\u0792\3\2\2\2\u0792\u0793\3\2"+
		"\2\2\u0793\u0794\7\u0288\2\2\u0794c\3\2\2\2\u0795\u0796\7\u01f3\2\2\u0796"+
		"\u0797\7\u00db\2\2\u0797\u079c\7\u0287\2\2\u0798\u079a\7\u028d\2\2\u0799"+
		"\u0798\3\2\2\2\u0799\u079a\3\2\2\2\u079a\u079b\3\2\2\2\u079b\u079d\5,"+
		"\27\2\u079c\u0799\3\2\2\2\u079d\u079e\3\2\2\2\u079e\u079c\3\2\2\2\u079e"+
		"\u079f\3\2\2\2\u079f\u07a0\3\2\2\2\u07a0\u07a1\7\u0288\2\2\u07a1\u07ba"+
		"\3\2\2\2\u07a2\u07b4\7\u0287\2\2\u07a3\u07a5\7\u028d\2\2\u07a4\u07a3\3"+
		"\2\2\2\u07a4\u07a5\3\2\2\2\u07a5\u07a6\3\2\2\2\u07a6\u07a8\7\u01f6\2\2"+
		"\u07a7\u07a9\5f\64\2\u07a8\u07a7\3\2\2\2\u07a8\u07a9\3\2\2\2\u07a9\u07ac"+
		"\3\2\2\2\u07aa\u07ab\7\u0201\2\2\u07ab\u07ad\5,\27\2\u07ac\u07aa\3\2\2"+
		"\2\u07ac\u07ad\3\2\2\2\u07ad\u07af\3\2\2\2\u07ae\u07b0\5.\30\2\u07af\u07ae"+
		"\3\2\2\2\u07af\u07b0\3\2\2\2\u07b0\u07b2\3\2\2\2\u07b1\u07b3\7\u0224\2"+
		"\2\u07b2\u07b1\3\2\2\2\u07b2\u07b3\3\2\2\2\u07b3\u07b5\3\2\2\2\u07b4\u07a4"+
		"\3\2\2\2\u07b5\u07b6\3\2\2\2\u07b6\u07b4\3\2\2\2\u07b6\u07b7\3\2\2\2\u07b7"+
		"\u07b8\3\2\2\2\u07b8\u07ba\7\u0288\2\2\u07b9\u0795\3\2\2\2\u07b9\u07a2"+
		"\3\2\2\2\u07bae\3\2\2\2\u07bb\u07bc\5@!\2\u07bcg\3\2\2\2\u07bd\u07bf\5"+
		"j\66\2\u07be\u07c0\5n8\2\u07bf\u07be\3\2\2\2\u07bf\u07c0\3\2\2\2\u07c0"+
		"\u07c2\3\2\2\2\u07c1\u07c3\5\64\33\2\u07c2\u07c1\3\2\2\2\u07c2\u07c3\3"+
		"\2\2\2\u07c3\u07c9\3\2\2\2\u07c4\u07c5\7\u0176\2\2\u07c5\u07c6\7\u0287"+
		"\2\2\u07c6\u07c7\5l\67\2\u07c7\u07c8\7\u0288\2\2\u07c8\u07ca\3\2\2\2\u07c9"+
		"\u07c4\3\2\2\2\u07c9\u07ca\3\2\2\2\u07cai\3\2\2\2\u07cb\u07cc\5\u0432"+
		"\u021a\2\u07cc\u07cd\7\u0280\2\2\u07cd\u07cf\3\2\2\2\u07ce\u07cb\3\2\2"+
		"\2\u07ce\u07cf\3\2\2\2\u07cf\u07d0\3\2\2\2\u07d0\u07d1\5\u0432\u021a\2"+
		"\u07d1k\3\2\2\2\u07d2\u07d3\7\u0283\2\2\u07d3m\3\2\2\2\u07d4\u07e8\7\u010e"+
		"\2\2\u07d5\u07e2\7\u0287\2\2\u07d6\u07d8\7\u028d\2\2\u07d7\u07d6\3\2\2"+
		"\2\u07d7\u07d8\3\2\2\2\u07d8\u07d9\3\2\2\2\u07d9\u07da\7\u0178\2\2\u07da"+
		"\u07e0\5@!\2\u07db\u07dc\7\u0176\2\2\u07dc\u07dd\7\u0287\2\2\u07dd\u07de"+
		"\5l\67\2\u07de\u07df\7\u0288\2\2\u07df\u07e1\3\2\2\2\u07e0\u07db\3\2\2"+
		"\2\u07e0\u07e1\3\2\2\2\u07e1\u07e3\3\2\2\2\u07e2\u07d7\3\2\2\2\u07e3\u07e4"+
		"\3\2\2\2\u07e4\u07e2\3\2\2\2\u07e4\u07e5\3\2\2\2\u07e5\u07e6\3\2\2\2\u07e6"+
		"\u07e7\7\u0288\2\2\u07e7\u07e9\3\2\2\2\u07e8\u07d5\3\2\2\2\u07e8\u07e9"+
		"\3\2\2\2\u07e9o\3\2\2\2\u07ea\u07eb\7\u0248\2\2\u07eb\u07ed\7\u0280\2"+
		"\2\u07ec\u07ea\3\2\2\2\u07ec\u07ed\3\2\2\2\u07ed\u07ee\3\2\2\2\u07ee\u07f0"+
		"\7\u0251\2\2\u07ef\u07f1\5r:\2\u07f0\u07ef\3\2\2\2\u07f0\u07f1\3\2\2\2"+
		"\u07f1\u07f3\3\2\2\2\u07f2\u07f4\5\64\33\2\u07f3\u07f2\3\2\2\2\u07f3\u07f4"+
		"\3\2\2\2\u07f4q\3\2\2\2\u07f5\u0802\7\u010e\2\2\u07f6\u07fc\7\u0287\2"+
		"\2\u07f7\u07f9\7\u028d\2\2\u07f8\u07f7\3\2\2\2\u07f8\u07f9\3\2\2\2\u07f9"+
		"\u07fa\3\2\2\2\u07fa\u07fb\7\u0178\2\2\u07fb\u07fd\5@!\2\u07fc\u07f8\3"+
		"\2\2\2\u07fd\u07fe\3\2\2\2\u07fe\u07fc\3\2\2\2\u07fe\u07ff\3\2\2\2\u07ff"+
		"\u0800\3\2\2\2\u0800\u0801\7\u0288\2\2\u0801\u0803\3\2\2\2\u0802\u07f6"+
		"\3\2\2\2\u0802\u0803\3\2\2\2\u0803s\3\2\2\2\u0804\u0805\5\u0408\u0205"+
		"\2\u0805\u0811\7\u0287\2\2\u0806\u0808\7\u028d\2\2\u0807\u0806\3\2\2\2"+
		"\u0807\u0808\3\2\2\2\u0808\u080b\3\2\2\2\u0809\u080c\5\u0408\u0205\2\u080a"+
		"\u080c\5\u03c0\u01e1\2\u080b\u0809\3\2\2\2\u080b\u080a\3\2\2\2\u080b\u080c"+
		"\3\2\2\2\u080c\u080d\3\2\2\2\u080d\u080f\5\u0404\u0203\2\u080e\u0810\t"+
		"\20\2\2\u080f\u080e\3\2\2\2\u080f\u0810\3\2\2\2\u0810\u0812\3\2\2\2\u0811"+
		"\u0807\3\2\2\2\u0812\u0813\3\2\2\2\u0813\u0811\3\2\2\2\u0813\u0814\3\2"+
		"\2\2\u0814\u0815\3\2\2\2\u0815\u0816\7\u0288\2\2\u0816\u081d\7\u00c6\2"+
		"\2\u0817\u0819\7\u028d\2\2\u0818\u0817\3\2\2\2\u0818\u0819\3\2\2\2\u0819"+
		"\u081a\3\2\2\2\u081a\u081b\5\u0408\u0205\2\u081b\u081c\5\u03c0\u01e1\2"+
		"\u081c\u081e\3\2\2\2\u081d\u0818\3\2\2\2\u081e\u081f\3\2\2\2\u081f\u081d"+
		"\3\2\2\2\u081f\u0820\3\2\2\2\u0820\u0821\3\2\2\2\u0821\u0823\5\u03c4\u01e3"+
		"\2\u0822\u0824\5Z.\2\u0823\u0822\3\2\2\2\u0823\u0824\3\2\2\2\u0824\u0826"+
		"\3\2\2\2\u0825\u0827\5*\26\2\u0826\u0825\3\2\2\2\u0826\u0827\3\2\2\2\u0827"+
		"u\3\2\2\2\u0828\u082d\7e\2\2\u0829\u082b\7\u00ca\2\2\u082a\u0829\3\2\2"+
		"\2\u082a\u082b\3\2\2\2\u082b\u082c\3\2\2\2\u082c\u082e\7\u0203\2\2\u082d"+
		"\u082a\3\2\2\2\u082d\u082e\3\2\2\2\u082e\u082f\3\2\2\2\u082f\u0830\7\u01ff"+
		"\2\2\u0830\u0834\5\u0408\u0205\2\u0831\u0835\5x=\2\u0832\u0835\5\u010c"+
		"\u0087\2\u0833\u0835\5\u0114\u008b\2\u0834\u0831\3\2\2\2\u0834\u0832\3"+
		"\2\2\2\u0834\u0833\3\2\2\2\u0835\u0838\3\2\2\2\u0836\u0837\7\26\2\2\u0837"+
		"\u0839\5\u028c\u0147\2\u0838\u0836\3\2\2\2\u0838\u0839\3\2\2\2\u0839\u084e"+
		"\3\2\2\2\u083a\u083b\7\u0178\2\2\u083b\u083c\7\u015e\2\2\u083c\u084c\5"+
		"\u0408\u0205\2\u083d\u083e\7\u00bf\2\2\u083e\u083f\7\u022f\2\2\u083f\u0840"+
		"\7\u00db\2\2\u0840\u0841\7\u0287\2\2\u0841\u0846\5\u0346\u01a4\2\u0842"+
		"\u0843\7\u028d\2\2\u0843\u0845\5\u0346\u01a4\2\u0844\u0842\3\2\2\2\u0845"+
		"\u0848\3\2\2\2\u0846\u0844\3\2\2\2\u0846\u0847\3\2\2\2\u0847\u0849\3\2"+
		"\2\2\u0848\u0846\3\2\2\2\u0849\u084a\7\u0288\2\2\u084a\u084d\3\2\2\2\u084b"+
		"\u084d\7\u0082\2\2\u084c\u083d\3\2\2\2\u084c\u084b\3\2\2\2\u084d\u084f"+
		"\3\2\2\2\u084e\u083a\3\2\2\2\u084e\u084f\3\2\2\2\u084fw\3\2\2\2\u0850"+
		"\u0851\7\u0287\2\2\u0851\u0852\5z>\2\u0852\u0853\7\u0288\2\2\u0853\u0855"+
		"\3\2\2\2\u0854\u0850\3\2\2\2\u0854\u0855\3\2\2\2\u0855\u085a\3\2\2\2\u0856"+
		"\u0857\7\u0164\2\2\u0857\u0858\7N\2\2\u0858\u0859\t\25\2\2\u0859\u085b"+
		"\7\u01bf\2\2\u085a\u0856\3\2\2\2\u085a\u085b\3\2\2\2\u085b\u085d\3\2\2"+
		"\2\u085c\u085e\5\u0092J\2\u085d\u085c\3\2\2\2\u085d\u085e\3\2\2\2\u085e"+
		"\u0860\3\2\2\2\u085f\u0861\5\u00a0Q\2\u0860\u085f\3\2\2\2\u0860\u0861"+
		"\3\2\2\2\u0861\u0863\3\2\2\2\u0862\u0864\5\u00d4k\2\u0863\u0862\3\2\2"+
		"\2\u0863\u0864\3\2\2\2\u0864\u0866\3\2\2\2\u0865\u0867\t\5\2\2\u0866\u0865"+
		"\3\2\2\2\u0866\u0867\3\2\2\2\u0867\u086d\3\2\2\2\u0868\u0869\7\u01b0\2"+
		"\2\u0869\u086a\7\u0287\2\2\u086a\u086b\7\u012d\2\2\u086b\u086c\t\26\2"+
		"\2\u086c\u086e\7\u0288\2\2\u086d\u0868\3\2\2\2\u086d\u086e\3\2\2\2\u086e"+
		"\u0870\3\2\2\2\u086f\u0871\5\64\33\2\u0870\u086f\3\2\2\2\u0870\u0871\3"+
		"\2\2\2\u0871\u0873\3\2\2\2\u0872\u0874\t\27\2\2\u0873\u0872\3\2\2\2\u0873"+
		"\u0874\3\2\2\2\u0874\u087a\3\2\2\2\u0875\u0877\5\u0104\u0083\2\u0876\u0875"+
		"\3\2\2\2\u0877\u0878\3\2\2\2\u0878\u0876\3\2\2\2\u0878\u0879\3\2\2\2\u0879"+
		"\u087b\3\2\2\2\u087a\u0876\3\2\2\2\u087a\u087b\3\2\2\2\u087b\u087d\3\2"+
		"\2\2\u087c\u087e\5\u0108\u0085\2\u087d\u087c\3\2\2\2\u087d\u087e\3\2\2"+
		"\2\u087e\u0880\3\2\2\2\u087f\u0881\5\u010a\u0086\2\u0880\u087f\3\2\2\2"+
		"\u0880\u0881\3\2\2\2\u0881y\3\2\2\2\u0882\u0884\7\u028d\2\2\u0883\u0882"+
		"\3\2\2\2\u0883\u0884\3\2\2\2\u0884\u088a\3\2\2\2\u0885\u088b\5|?\2\u0886"+
		"\u088b\5\u0080A\2\u0887\u088b\5\u0082B\2\u0888\u088b\5\u0088E\2\u0889"+
		"\u088b\5\u008aF\2\u088a\u0885\3\2\2\2\u088a\u0886\3\2\2\2\u088a\u0887"+
		"\3\2\2\2\u088a\u0888\3\2\2\2\u088a\u0889\3\2\2\2\u088b\u088d\3\2\2\2\u088c"+
		"\u0883\3\2\2\2\u088d\u088e\3\2\2\2\u088e\u088c\3\2\2\2\u088e\u088f\3\2"+
		"\2\2\u088f{\3\2\2\2\u0890\u0893\5\u0404\u0203\2\u0891\u0894\5\u041c\u020f"+
		"\2\u0892\u0894\5\u03ec\u01f7\2\u0893\u0891\3\2\2\2\u0893\u0892\3\2\2\2"+
		"\u0894\u0896\3\2\2\2\u0895\u0897\7\u01e6\2\2\u0896\u0895\3\2\2\2\u0896"+
		"\u0897\3\2\2\2\u0897\u089a\3\2\2\2\u0898\u0899\7\u0082\2\2\u0899\u089b"+
		"\5\u0346\u01a4\2\u089a\u0898\3\2\2\2\u089a\u089b\3\2\2\2\u089b\u08af\3"+
		"\2\2\2\u089c\u089f\7\u009d\2\2\u089d\u089e\7\u022c\2\2\u089e\u08a0\7\u0283"+
		"\2\2\u089f\u089d\3\2\2\2\u089f\u08a0\3\2\2\2\u08a0\u08a4\3\2\2\2\u08a1"+
		"\u08a2\7\u00d5\2\2\u08a2\u08a3\7\65\2\2\u08a3\u08a5\5\u043e\u0220\2\u08a4"+
		"\u08a1\3\2\2\2\u08a4\u08a5\3\2\2\2\u08a5\u08a7\3\2\2\2\u08a6\u08a8\7\u0283"+
		"\2\2\u08a7\u08a6\3\2\2\2\u08a7\u08a8\3\2\2\2\u08a8\u08ad\3\2\2\2\u08a9"+
		"\u08ab\7\u013f\2\2\u08aa\u08a9\3\2\2\2\u08aa\u08ab\3\2\2\2\u08ab\u08ac"+
		"\3\2\2\2\u08ac\u08ae\7\u01c1\2\2\u08ad\u08aa\3\2\2\2\u08ad\u08ae\3\2\2"+
		"\2\u08ae\u08b0\3\2\2\2\u08af\u089c\3\2\2\2\u08af\u08b0\3\2\2\2\u08b0\u08b8"+
		"\3\2\2\2\u08b1\u08b3\5\u00acW\2\u08b2\u08b1\3\2\2\2\u08b3\u08b6\3\2\2"+
		"\2\u08b4\u08b2\3\2\2\2\u08b4\u08b5\3\2\2\2\u08b5\u08b9\3\2\2\2\u08b6\u08b4"+
		"\3\2\2\2\u08b7\u08b9\5~@\2\u08b8\u08b4\3\2\2\2\u08b8\u08b7\3\2\2\2\u08b9"+
		"\u08bc\3\2\2\2\u08ba\u08bb\7\u0082\2\2\u08bb\u08bd\5\u0346\u01a4\2\u08bc"+
		"\u08ba\3\2\2\2\u08bc\u08bd\3\2\2\2\u08bd}\3\2\2\2\u08be\u08bf\7\u01c8"+
		"\2\2\u08bf\u08c0\7\u00f7\2\2\u08c0\u08cc\5\u0408\u0205\2\u08c1\u08c2\7"+
		"\u0243\2\2\u08c2\u08cc\7\u01be\2\2\u08c3\u08c4\7Z\2\2\u08c4\u08c6\5\u03e8"+
		"\u01f5\2\u08c5\u08c3\3\2\2\2\u08c5\u08c6\3\2\2\2\u08c6\u08c7\3\2\2\2\u08c7"+
		"\u08c9\5\u00aeX\2\u08c8\u08ca\5\u00b6\\\2\u08c9\u08c8\3\2\2\2\u08c9\u08ca"+
		"\3\2\2\2\u08ca\u08cc\3\2\2\2\u08cb\u08be\3\2\2\2\u08cb\u08c1\3\2\2\2\u08cb"+
		"\u08c5\3\2\2\2\u08cc\177\3\2\2\2\u08cd\u08cf\5\u0404\u0203\2\u08ce\u08d0"+
		"\5\u041c\u020f\2\u08cf\u08ce\3\2\2\2\u08cf\u08d0\3\2\2\2\u08d0\u08d3\3"+
		"\2\2\2\u08d1\u08d2\7\u00c9\2\2\u08d2\u08d4\7\17\2\2\u08d3\u08d1\3\2\2"+
		"\2\u08d3\u08d4\3\2\2\2\u08d4\u08d5\3\2\2\2\u08d5\u08d6\7\26\2\2\u08d6"+
		"\u08d7\7\u0287\2\2\u08d7\u08d8\5\u0346\u01a4\2\u08d8\u08da\7\u0288\2\2"+
		"\u08d9\u08db\7\u023a\2\2\u08da\u08d9\3\2\2\2\u08da\u08db\3\2\2\2\u08db"+
		"\u08df\3\2\2\2\u08dc\u08de\5\u00acW\2\u08dd\u08dc\3\2\2\2\u08de\u08e1"+
		"\3\2\2\2\u08df\u08dd\3\2\2\2\u08df\u08e0\3\2\2\2\u08e0\u0081\3\2\2\2\u08e1"+
		"\u08df\3\2\2\2\u08e2\u08e3\7Z\2\2\u08e3\u08e5\5\u03e8\u01f5\2\u08e4\u08e2"+
		"\3\2\2\2\u08e4\u08e5\3\2\2\2\u08e5\u08f1\3\2\2\2\u08e6\u08e7\7\u0220\2"+
		"\2\u08e7\u08f2\5\u00b0Y\2\u08e8\u08e9\7\u0190\2\2\u08e9\u08ea\7\u00fe"+
		"\2\2\u08ea\u08f2\5\u00b0Y\2\u08eb\u08f2\5\u0084C\2\u08ec\u08ed\7A\2\2"+
		"\u08ed\u08ee\7\u0287\2\2\u08ee\u08ef\5\u0346\u01a4\2\u08ef\u08f0\7\u0288"+
		"\2\2\u08f0\u08f2\3\2\2\2\u08f1\u08e6\3\2\2\2\u08f1\u08e8\3\2\2\2\u08f1"+
		"\u08eb\3\2\2\2\u08f1\u08ec\3\2\2\2\u08f2\u08f4\3\2\2\2\u08f3\u08f5\5\u00b6"+
		"\\\2\u08f4\u08f3\3\2\2\2\u08f4\u08f5\3\2\2\2\u08f5\u0083\3\2\2\2\u08f6"+
		"\u08f7\7\u00c2\2\2\u08f7\u08f8\7\u00fe\2\2\u08f8\u08f9\5\u00b0Y\2\u08f9"+
		"\u08fb\5\u00aeX\2\u08fa\u08fc\5\u0086D\2\u08fb\u08fa\3\2\2\2\u08fb\u08fc"+
		"\3\2\2\2\u08fc\u0085\3\2\2\2\u08fd\u08fe\7\u0164\2\2\u08fe\u0902\7\u0087"+
		"\2\2\u08ff\u0903\7;\2\2\u0900\u0901\7\u01d6\2\2\u0901\u0903\7\u0157\2"+
		"\2\u0902\u08ff\3\2\2\2\u0902\u0900\3\2\2\2\u0903\u0087\3\2\2\2\u0904\u0905"+
		"\7\u01c8\2\2\u0905\u0906\7\u00bf\2\2\u0906\u0907\7\u0287\2\2\u0907\u0908"+
		"\5\u043e\u0220\2\u0908\u0909\7\u0288\2\2\u0909\u090a\7\u00f7\2\2\u090a"+
		"\u090b\5\u0408\u0205\2\u090b\u0928\3\2\2\2\u090c\u090d\7\u01a1\2\2\u090d"+
		"\u090e\7\u0287\2\2\u090e\u090f\5\u043e\u0220\2\u090f\u0910\7\u0288\2\2"+
		"\u0910\u0911\7\u0243\2\2\u0911\u0912\7\u01be\2\2\u0912\u0928\3\2\2\2\u0913"+
		"\u0914\7Z\2\2\u0914\u0916\5\u03e8\u01f5\2\u0915\u0913\3\2\2\2\u0915\u0916"+
		"\3\2\2\2\u0916\u0917\3\2\2\2\u0917\u0918\7\u00c2\2\2\u0918\u0919\7\u00fe"+
		"\2\2\u0919\u091e\7\u0287\2\2\u091a\u091c\7\u028d\2\2\u091b\u091a\3\2\2"+
		"\2\u091b\u091c\3\2\2\2\u091c\u091d\3\2\2\2\u091d\u091f\5\u043e\u0220\2"+
		"\u091e\u091b\3\2\2\2\u091f\u0920\3\2\2\2\u0920\u091e\3\2\2\2\u0920\u0921"+
		"\3\2\2\2\u0921\u0922\3\2\2\2\u0922\u0923\7\u0288\2\2\u0923\u0925\5\u00ae"+
		"X\2\u0924\u0926\5\u00b6\\\2\u0925\u0924\3\2\2\2\u0925\u0926\3\2\2\2\u0926"+
		"\u0928\3\2\2\2\u0927\u0904\3\2\2\2\u0927\u090c\3\2\2\2\u0927\u0915\3\2"+
		"\2\2\u0928\u0089\3\2\2\2\u0929\u092a\7\u01fc\2\2\u092a\u092d\7\u0114\2"+
		"\2\u092b\u092e\5\u008cG\2\u092c\u092e\5\u0090I\2\u092d\u092b\3\2\2\2\u092d"+
		"\u092c\3\2\2\2\u092e\u008b\3\2\2\2\u092f\u0930\7\u00cd\2\2\u0930\u0931"+
		"\5\u008eH\2\u0931\u093a\7\u0287\2\2\u0932\u0934\7\u028d\2\2\u0933\u0932"+
		"\3\2\2\2\u0933\u0934\3\2\2\2\u0934\u0935\3\2\2\2\u0935\u0938\5\u043e\u0220"+
		"\2\u0936\u0937\7\u013f\2\2\u0937\u0939\7\u0114\2\2\u0938\u0936\3\2\2\2"+
		"\u0938\u0939\3\2\2\2\u0939\u093b\3\2\2\2\u093a\u0933\3\2\2\2\u093b\u093c"+
		"\3\2\2\2\u093c\u093a\3\2\2\2\u093c\u093d\3\2\2\2\u093d\u093e\3\2\2\2\u093e"+
		"\u0940\7\u0288\2\2\u093f\u0941\7\17\2\2\u0940\u093f\3\2\2\2\u0940\u0941"+
		"\3\2\2\2\u0941\u008d\3\2\2\2\u0942\u0943\7\u0281\2\2\u0943\u008f\3\2\2"+
		"\2\u0944\u0945\7p\2\2\u0945\u0951\7\u0287\2\2\u0946\u0948\7\u028d\2\2"+
		"\u0947\u0946\3\2\2\2\u0947\u0948\3\2\2\2\u0948\u094f\3\2\2\2\u0949\u0950"+
		"\7\13\2\2\u094a\u094b\7\u0190\2\2\u094b\u0950\7\u00fe\2\2\u094c\u0950"+
		"\7\u0220\2\2\u094d\u094e\7\u00c2\2\2\u094e\u0950\7\u00fe\2\2\u094f\u0949"+
		"\3\2\2\2\u094f\u094a\3\2\2\2\u094f\u094c\3\2\2\2\u094f\u094d\3\2\2\2\u0950"+
		"\u0952\3\2\2\2\u0951\u0947\3\2\2\2\u0952\u0953\3\2\2\2\u0953\u0951\3\2"+
		"\2\2\u0953\u0954\3\2\2\2\u0954\u0955\3\2\2\2\u0955\u0956\7\u0288\2\2\u0956"+
		"\u0957\7K\2\2\u0957\u0091\3\2\2\2\u0958\u095a\5\u0094K\2\u0959\u0958\3"+
		"\2\2\2\u0959\u095a\3\2\2\2\u095a\u095b\3\2\2\2\u095b\u095d\5\u0096L\2"+
		"\u095c\u095e\5L\'\2\u095d\u095c\3\2\2\2\u095d\u095e\3\2\2\2\u095e\u0093"+
		"\3\2\2\2\u095f\u0960\7\u01cd\2\2\u0960\u0961\7h\2\2\u0961\u0962\t\13\2"+
		"\2\u0962\u0095\3\2\2\2\u0963\u0968\5\u0098M\2\u0964\u0965\7\u0201\2\2"+
		"\u0965\u0968\5\u0432\u021a\2\u0966\u0968\5\u009eP\2\u0967\u0963\3\2\2"+
		"\2\u0967\u0964\3\2\2\2\u0967\u0966\3\2\2\2\u0968\u0969\3\2\2\2\u0969\u0967"+
		"\3\2\2\2\u0969\u096a\3\2\2\2\u096a\u0097\3\2\2\2\u096b\u096c\7\u017b\2"+
		"\2\u096c\u0973\7\u0281\2\2\u096d\u096e\7\u017e\2\2\u096e\u0973\7\u0281"+
		"\2\2\u096f\u0970\7\u00e8\2\2\u0970\u0973\7\u0281\2\2\u0971\u0973\5\u009a"+
		"N\2\u0972\u096b\3\2\2\2\u0972\u096d\3\2\2\2\u0972\u096f\3\2\2\2\u0972"+
		"\u0971\3\2\2\2\u0973\u0974\3\2\2\2\u0974\u0972\3\2\2\2\u0974\u0975\3\2"+
		"\2\2\u0975\u0099\3\2\2\2\u0976\u0977\7\u01f2\2\2\u0977\u0991\7\u0287\2"+
		"\2\u0978\u0979\7\u00e6\2\2\u0979\u0992\5\u009cO\2\u097a\u097b\7\u013e"+
		"\2\2\u097b\u0992\5\u009cO\2\u097c\u097d\7\u0127\2\2\u097d\u0992\t\30\2"+
		"\2\u097e\u097f\7\u0121\2\2\u097f\u0992\t\30\2\2\u0980\u0981\7\u017c\2"+
		"\2\u0981\u0992\7\u0281\2\2\u0982\u0983\7\u00c4\2\2\u0983\u0992\7\u0281"+
		"\2\2\u0984\u0985\7\u00c3\2\2\u0985\u0986\7\u00ce\2\2\u0986\u0992\7\u0281"+
		"\2\2\u0987\u098a\7\u0167\2\2\u0988\u098b\5\u009cO\2\u0989\u098b\7\u0157"+
		"\2\2\u098a\u0988\3\2\2\2\u098a\u0989\3\2\2\2\u098b\u0992\3\2\2\2\u098c"+
		"\u098d\7,\2\2\u098d\u0992\t\31\2\2\u098e\u098f\7\u00bb\2\2\u098f\u0992"+
		"\t\32\2\2\u0990\u0992\7\u009d\2\2\u0991\u0978\3\2\2\2\u0991\u097a\3\2"+
		"\2\2\u0991\u097c\3\2\2\2\u0991\u097e\3\2\2\2\u0991\u0980\3\2\2\2\u0991"+
		"\u0982\3\2\2\2\u0991\u0984\3\2\2\2\u0991\u0987\3\2\2\2\u0991\u098c\3\2"+
		"\2\2\u0991\u098e\3\2\2\2\u0991\u0990\3\2\2\2\u0992\u0993\3\2\2\2\u0993"+
		"\u0991\3\2\2\2\u0993\u0994\3\2\2\2\u0994\u0995\3\2\2\2\u0995\u0996\7\u0288"+
		"\2\2\u0996\u009b\3\2\2\2\u0997\u0999\7\u0281\2\2\u0998\u099a\7\u02a6\2"+
		"\2\u0999\u0998\3\2\2\2\u0999\u099a\3\2\2\2\u099a\u009d\3\2\2\2\u099b\u099c"+
		"\t\33\2\2\u099c\u009f\3\2\2\2\u099d\u09a5\5\u00a2R\2\u099e\u09a5\5\u00a6"+
		"T\2\u099f\u09a2\5\u00ba^\2\u09a0\u09a2\5\u00caf\2\u09a1\u099f\3\2\2\2"+
		"\u09a1\u09a0\3\2\2\2\u09a2\u09a5\3\2\2\2\u09a3\u09a5\5\u00ccg\2\u09a4"+
		"\u099d\3\2\2\2\u09a4\u099e\3\2\2\2\u09a4\u09a1\3\2\2\2\u09a4\u09a3\3\2"+
		"\2\2\u09a5\u00a1\3\2\2\2\u09a6\u09a7\7J\2\2\u09a7\u09a8\5\u043e\u0220"+
		"\2\u09a8\u09a9\5\u00a4S\2\u09a9\u00a3\3\2\2\2\u09aa\u09ac\7\u0097\2\2"+
		"\u09ab\u09aa\3\2\2\2\u09ab\u09ac\3\2\2\2\u09ac\u09ad\3\2\2\2\u09ad\u09ae"+
		"\7\u00f7\2\2\u09ae\u09b0\7\u015e\2\2\u09af\u09b1\7\u021c\2\2\u09b0\u09af"+
		"\3\2\2\2\u09b0\u09b1\3\2\2\2\u09b1\u09b2\3\2\2\2\u09b2\u09b3\7\u0287\2"+
		"\2\u09b3\u09b4\5\u03ec\u01f7\2\u09b4\u09b5\7\u0288\2\2\u09b5\u09be\3\2"+
		"\2\2\u09b6\u09b8\7\u0153\2\2\u09b7\u09b6\3\2\2\2\u09b7\u09b8\3\2\2\2\u09b8"+
		"\u09b9\3\2\2\2\u09b9\u09ba\7\u01f8\2\2\u09ba\u09bb\7\31\2\2\u09bb\u09bc"+
		"\7\13\2\2\u09bc\u09be\7\u0106\2\2\u09bd\u09ab\3\2\2\2\u09bd\u09b7\3\2"+
		"\2\2\u09be\u00a5\3\2\2\2\u09bf\u09c0\7\u013b\2\2\u09c0\u09c3\7\u01ff\2"+
		"\2\u09c1\u09c4\5\u00a8U\2\u09c2\u09c4\7L\2\2\u09c3\u09c1\3\2\2\2\u09c3"+
		"\u09c2\3\2\2\2\u09c4\u09c6\3\2\2\2\u09c5\u09c7\5\u00a4S\2\u09c6\u09c5"+
		"\3\2\2\2\u09c6\u09c7\3\2\2\2\u09c7\u09c9\3\2\2\2\u09c8\u09ca\t\34\2\2"+
		"\u09c9\u09c8\3\2\2\2\u09c9\u09ca\3\2\2\2\u09ca\u09cb\3\2\2\2\u09cb\u09cc"+
		"\7\u01f3\2\2\u09cc\u09cd\7\26\2\2\u09cd\u09db\5\u0408\u0205\2\u09ce\u09d5"+
		"\7\u0287\2\2\u09cf\u09d0\7\u0287\2\2\u09d0\u09d1\5\u00aaV\2\u09d1\u09d2"+
		"\7\u0288\2\2\u09d2\u09d6\3\2\2\2\u09d3\u09d6\5\u0092J\2\u09d4\u09d6\5"+
		"\u00a0Q\2\u09d5\u09cf\3\2\2\2\u09d5\u09d3\3\2\2\2\u09d5\u09d4\3\2\2\2"+
		"\u09d6\u09d7\3\2\2\2\u09d7\u09d5\3\2\2\2\u09d7\u09d8\3\2\2\2\u09d8\u09d9"+
		"\3\2\2\2\u09d9\u09da\7\u0288\2\2\u09da\u09dc\3\2\2\2\u09db\u09ce\3\2\2"+
		"\2\u09db\u09dc\3\2\2\2\u09dc\u09e2\3\2\2\2\u09dd\u09df\7\u01b2\2\2\u09de"+
		"\u09e0\7\26\2\2\u09df\u09de\3\2\2\2\u09df\u09e0\3\2\2\2\u09e0\u09e1\3"+
		"\2\2\2\u09e1\u09e3\t\35\2\2\u09e2\u09dd\3\2\2\2\u09e2\u09e3\3\2\2\2\u09e3"+
		"\u00a7\3\2\2\2\u09e4\u09e5\5\u043e\u0220\2\u09e5\u00a9\3\2\2\2\u09e6\u09e9"+
		"\5\u0404\u0203\2\u09e7\u09e9\5\u03ce\u01e8\2\u09e8\u09e6\3\2\2\2\u09e8"+
		"\u09e7\3\2\2\2\u09e9\u09ec\3\2\2\2\u09ea\u09eb\7\u0082\2\2\u09eb\u09ed"+
		"\5\u0346\u01a4\2\u09ec\u09ea\3\2\2\2\u09ec\u09ed\3\2\2\2\u09ed\u09f7\3"+
		"\2\2\2\u09ee\u09f0\7\u028d\2\2\u09ef\u09ee\3\2\2\2\u09ef\u09f0\3\2\2\2"+
		"\u09f0\u09f1\3\2\2\2\u09f1\u09f3\5\u00acW\2\u09f2\u09ef\3\2\2\2\u09f3"+
		"\u09f4\3\2\2\2\u09f4\u09f2\3\2\2\2\u09f4\u09f5\3\2\2\2\u09f5\u09f8\3\2"+
		"\2\2\u09f6\u09f8\5~@\2\u09f7\u09f2\3\2\2\2\u09f7\u09f6\3\2\2\2\u09f7\u09f8"+
		"\3\2\2\2\u09f8\u09fd\3\2\2\2\u09f9\u09fd\5\u0082B\2\u09fa\u09fd\5\u0088"+
		"E\2\u09fb\u09fd\5\u008aF\2\u09fc\u09e8\3\2\2\2\u09fc\u09f9\3\2\2\2\u09fc"+
		"\u09fa\3\2\2\2\u09fc\u09fb\3\2\2\2\u09fd\u00ab\3\2\2\2\u09fe\u09ff\7Z"+
		"\2\2\u09ff\u0a01\5\u03e8\u01f5\2\u0a00\u09fe\3\2\2\2\u0a00\u0a01\3\2\2"+
		"\2\u0a01\u0a0b\3\2\2\2\u0a02\u0a04\7\u0153\2\2\u0a03\u0a02\3\2\2\2\u0a03"+
		"\u0a04\3\2\2\2\u0a04\u0a05\3\2\2\2\u0a05\u0a0c\7\u0157\2\2\u0a06\u0a0c"+
		"\7\u0220\2\2\u0a07\u0a08\7\u0190\2\2\u0a08\u0a0c\7\u00fe\2\2\u0a09\u0a0c"+
		"\5\u00aeX\2\u0a0a\u0a0c\5\u00b4[\2\u0a0b\u0a03\3\2\2\2\u0a0b\u0a06\3\2"+
		"\2\2\u0a0b\u0a07\3\2\2\2\u0a0b\u0a09\3\2\2\2\u0a0b\u0a0a\3\2\2\2\u0a0c"+
		"\u0a0e\3\2\2\2\u0a0d\u0a0f\5\u00b6\\\2\u0a0e\u0a0d\3\2\2\2\u0a0e\u0a0f"+
		"\3\2\2\2\u0a0f\u00ad\3\2\2\2\u0a10\u0a11\7\u01a3\2\2\u0a11\u0a12\5\u0408"+
		"\u0205\2\u0a12\u0a13\5\u00b0Y\2\u0a13\u00af\3\2\2\2\u0a14\u0a15\7\u0287"+
		"\2\2\u0a15\u0a16\5\u00b2Z\2\u0a16\u0a17\7\u0288\2\2\u0a17\u00b1\3\2\2"+
		"\2\u0a18\u0a1a\7\u028d\2\2\u0a19\u0a18\3\2\2\2\u0a19\u0a1a\3\2\2\2\u0a1a"+
		"\u0a1b\3\2\2\2\u0a1b\u0a1d\5\u0404\u0203\2\u0a1c\u0a19\3\2\2\2\u0a1d\u0a1e"+
		"\3\2\2\2\u0a1e\u0a1c\3\2\2\2\u0a1e\u0a1f\3\2\2\2\u0a1f\u00b3\3\2\2\2\u0a20"+
		"\u0a21\7A\2\2\u0a21\u0a22\7\u0287\2\2\u0a22\u0a23\5\u0344\u01a3\2\u0a23"+
		"\u0a25\7\u0288\2\2\u0a24\u0a26\7\u008d\2\2\u0a25\u0a24\3\2\2\2\u0a25\u0a26"+
		"\3\2\2\2\u0a26\u00b5\3\2\2\2\u0a27\u0a29\7\u0153\2\2\u0a28\u0a27\3\2\2"+
		"\2\u0a28\u0a29\3\2\2\2\u0a29\u0a2a\3\2\2\2\u0a2a\u0a32\7\u0084\2\2\u0a2b"+
		"\u0a2c\7\u00e7\2\2\u0a2c\u0a32\t\13\2\2\u0a2d\u0a32\t\36\2\2\u0a2e\u0a32"+
		"\t\6\2\2\u0a2f\u0a32\t\37\2\2\u0a30\u0a32\5\u00b8]\2\u0a31\u0a28\3\2\2"+
		"\2\u0a31\u0a2b\3\2\2\2\u0a31\u0a2d\3\2\2\2\u0a31\u0a2e\3\2\2\2\u0a31\u0a2f"+
		"\3\2\2\2\u0a31\u0a30\3\2\2\2\u0a32\u0a33\3\2\2\2\u0a33\u0a31\3\2\2\2\u0a33"+
		"\u0a34\3\2\2\2\u0a34\u00b7\3\2\2\2\u0a35\u0a36\7\u022c\2\2\u0a36\u0a3d"+
		"\7\u00e0\2\2\u0a37\u0a3e\5\u03fa\u01fe\2\u0a38\u0a39\7\u0287\2\2\u0a39"+
		"\u0a3a\5$\23\2\u0a3a\u0a3b\7\u0288\2\2\u0a3b\u0a3e\3\2\2\2\u0a3c\u0a3e"+
		"\5*\26\2\u0a3d\u0a37\3\2\2\2\u0a3d\u0a38\3\2\2\2\u0a3d\u0a3c\3\2\2\2\u0a3d"+
		"\u0a3e\3\2\2\2\u0a3e\u00b9\3\2\2\2\u0a3f\u0a40\7\u0233\2\2\u0a40\u0a46"+
		"\5T+\2\u0a41\u0a43\5\u00a4S\2\u0a42\u0a41\3\2\2\2\u0a42\u0a43\3\2\2\2"+
		"\u0a43\u0a44\3\2\2\2\u0a44\u0a47\5\u00bc_\2\u0a45\u0a47\5\u00a4S\2\u0a46"+
		"\u0a42\3\2\2\2\u0a46\u0a45\3\2\2\2\u0a47\u00bb\3\2\2\2\u0a48\u0a49\7\u01f3"+
		"\2\2\u0a49\u0a4b\7\26\2\2\u0a4a\u0a4c\t\22\2\2\u0a4b\u0a4a\3\2\2\2\u0a4b"+
		"\u0a4c\3\2\2\2\u0a4c\u0a4d\3\2\2\2\u0a4d\u0a56\7\u010f\2\2\u0a4e\u0a50"+
		"\5R*\2\u0a4f\u0a4e\3\2\2\2\u0a4f\u0a50\3\2\2\2\u0a50\u0a51\3\2\2\2\u0a51"+
		"\u0a52\7\u0287\2\2\u0a52\u0a53\5\u00be`\2\u0a53\u0a54\7\u0288\2\2\u0a54"+
		"\u0a57\3\2\2\2\u0a55\u0a57\5R*\2\u0a56\u0a4f\3\2\2\2\u0a56\u0a55\3\2\2"+
		"\2\u0a57\u00bd\3\2\2\2\u0a58\u0a59\7\u0201\2\2\u0a59\u0a60\5,\27\2\u0a5a"+
		"\u0a5c\5\u00c0a\2\u0a5b\u0a5d\5\u009aN\2\u0a5c\u0a5b\3\2\2\2\u0a5c\u0a5d"+
		"\3\2\2\2\u0a5d\u0a60\3\2\2\2\u0a5e\u0a60\5\u009aN\2\u0a5f\u0a58\3\2\2"+
		"\2\u0a5f\u0a5a\3\2\2\2\u0a5f\u0a5e\3\2\2\2\u0a60\u00bf\3\2\2\2\u0a61\u0a62"+
		"\t\6\2\2\u0a62\u0a63\7\u01f2\2\2\u0a63\u0a64\7\u00db\2\2\u0a64\u0a7b\7"+
		"\u01bc\2\2\u0a65\u0a66\7D\2\2\u0a66\u0a7b\7\u0281\2\2\u0a67\u0a68\7\u017f"+
		"\2\2\u0a68\u0a7b\7\u0281\2\2\u0a69\u0a6a\7\u00c5\2\2\u0a6a\u0a7b\7\u0281"+
		"\2\2\u0a6b\u0a7b\5\u00c2b\2\u0a6c\u0a7b\5\u00c4c\2\u0a6d\u0a7b\5\u00c6"+
		"d\2\u0a6e\u0a6f\7\u009d\2\2\u0a6f\u0a7b\5\u00c8e\2\u0a70\u0a7b\7\u0080"+
		"\2\2\u0a71\u0a76\78\2\2\u0a72\u0a76\7\u0141\2\2\u0a73\u0a74\78\2\2\u0a74"+
		"\u0a76\7\u019a\2\2\u0a75\u0a71\3\2\2\2\u0a75\u0a72\3\2\2\2\u0a75\u0a73"+
		"\3\2\2\2\u0a76\u0a78\3\2\2\2\u0a77\u0a79\5\u009eP\2\u0a78\u0a77\3\2\2"+
		"\2\u0a78\u0a79\3\2\2\2\u0a79\u0a7b\3\2\2\2\u0a7a\u0a61\3\2\2\2\u0a7a\u0a65"+
		"\3\2\2\2\u0a7a\u0a67\3\2\2\2\u0a7a\u0a69\3\2\2\2\u0a7a\u0a6b\3\2\2\2\u0a7a"+
		"\u0a6c\3\2\2\2\u0a7a\u0a6d\3\2\2\2\u0a7a\u0a6e\3\2\2\2\u0a7a\u0a70\3\2"+
		"\2\2\u0a7a\u0a75\3\2\2\2\u0a7b\u0a7c\3\2\2\2\u0a7c\u0a7a\3\2\2\2\u0a7c"+
		"\u0a7d\3\2\2\2\u0a7d\u00c1\3\2\2\2\u0a7e\u0a84\7\u01b1\2\2\u0a7f\u0a85"+
		"\7\u0270\2\2\u0a80\u0a81\7\u0272\2\2\u0a81\u0a85\7\u0281\2\2\u0a82\u0a85"+
		"\7\35\2\2\u0a83\u0a85\7\u014b\2\2\u0a84\u0a7f\3\2\2\2\u0a84\u0a80\3\2"+
		"\2\2\u0a84\u0a82\3\2\2\2\u0a84\u0a83\3\2\2\2\u0a84\u0a85\3\2\2\2\u0a85"+
		"\u00c3\3\2\2\2\u0a86\u0a87\t \2\2\u0a87\u00c5\3\2\2\2\u0a88\u0a8e\7\u0142"+
		"\2\2\u0a89\u0a8b\7U\2\2\u0a8a\u0a8c\t!\2\2\u0a8b\u0a8a\3\2\2\2\u0a8b\u0a8c"+
		"\3\2\2\2\u0a8c\u0a8e\3\2\2\2\u0a8d\u0a88\3\2\2\2\u0a8d\u0a89\3\2\2\2\u0a8e"+
		"\u00c7\3\2\2\2\u0a8f\u0a90\7\u022c\2\2\u0a90\u0a92\7\u0283\2\2\u0a91\u0a8f"+
		"\3\2\2\2\u0a91\u0a92\3\2\2\2\u0a92\u0a96\3\2\2\2\u0a93\u0a94\7\u00d5\2"+
		"\2\u0a94\u0a95\7\65\2\2\u0a95\u0a97\7\u02a6\2\2\u0a96\u0a93\3\2\2\2\u0a96"+
		"\u0a97\3\2\2\2\u0a97\u0a99\3\2\2\2\u0a98\u0a9a\7\u0283\2\2\u0a99\u0a98"+
		"\3\2\2\2\u0a99\u0a9a\3\2\2\2\u0a9a\u0a9f\3\2\2\2\u0a9b\u0a9d\7\u013f\2"+
		"\2\u0a9c\u0a9b\3\2\2\2\u0a9c\u0a9d\3\2\2\2\u0a9d\u0a9e\3\2\2\2\u0a9e\u0aa0"+
		"\7\u01c1\2\2\u0a9f\u0a9c\3\2\2\2\u0a9f\u0aa0\3\2\2\2\u0aa0\u00c9\3\2\2"+
		"\2\u0aa1\u0ac6\7\u010f\2\2\u0aa2\u0aa7\7\u0287\2\2\u0aa3\u0aa5\7\u028d"+
		"\2\2\u0aa4\u0aa3\3\2\2\2\u0aa4\u0aa5\3\2\2\2\u0aa5\u0aa6\3\2\2\2\u0aa6"+
		"\u0aa8\5P)\2\u0aa7\u0aa4\3\2\2\2\u0aa8\u0aa9\3\2\2\2\u0aa9\u0aa7\3\2\2"+
		"\2\u0aa9\u0aaa\3\2\2\2\u0aaa\u0aab\3\2\2\2\u0aab\u0aac\7\u0288\2\2\u0aac"+
		"\u0aad\7\u01f3\2\2\u0aad\u0ab3\7\26\2\2\u0aae\u0ab4\t\22\2\2\u0aaf\u0ab0"+
		"\7\u0287\2\2\u0ab0\u0ab1\5\u00be`\2\u0ab1\u0ab2\7\u0288\2\2\u0ab2\u0ab4"+
		"\3\2\2\2\u0ab3\u0aae\3\2\2\2\u0ab3\u0aaf\3\2\2\2\u0ab4\u0ab5\3\2\2\2\u0ab5"+
		"\u0ab3\3\2\2\2\u0ab5\u0ab6\3\2\2\2\u0ab6\u0ac7\3\2\2\2\u0ab7\u0ab8\7\u0287"+
		"\2\2\u0ab8\u0ab9\5P)\2\u0ab9\u0aba\7\u0288\2\2\u0aba\u0abb\7\u01f3\2\2"+
		"\u0abb\u0ac2\7\26\2\2\u0abc\u0ac3\t\22\2\2\u0abd\u0ac3\5R*\2\u0abe\u0abf"+
		"\7\u0287\2\2\u0abf\u0ac0\5\u00be`\2\u0ac0\u0ac1\7\u0288\2\2\u0ac1\u0ac3"+
		"\3\2\2\2\u0ac2\u0abc\3\2\2\2\u0ac2\u0abd\3\2\2\2\u0ac2\u0abe\3\2\2\2\u0ac3"+
		"\u0ac4\3\2\2\2\u0ac4\u0ac2\3\2\2\2\u0ac4\u0ac5\3\2\2\2\u0ac5\u0ac7\3\2"+
		"\2\2\u0ac6\u0aa2\3\2\2\2\u0ac6\u0ab7\3\2\2\2\u0ac7\u00cb\3\2\2\2\u0ac8"+
		"\u0aca\7\u025a\2\2\u0ac9\u0acb\7J\2\2\u0aca\u0ac9\3\2\2\2\u0aca\u0acb"+
		"\3\2\2\2\u0acb\u0acc\3\2\2\2\u0acc\u0ace\5\u0404\u0203\2\u0acd\u0acf\5"+
		"\u00ceh\2\u0ace\u0acd\3\2\2\2\u0ace\u0acf\3\2\2\2\u0acf\u0ad1\3\2\2\2"+
		"\u0ad0\u0ad2\5\u00d0i\2\u0ad1\u0ad0\3\2\2\2\u0ad1\u0ad2\3\2\2\2\u0ad2"+
		"\u00cd\3\2\2\2\u0ad3\u0ad4\7\u01f3\2\2\u0ad4\u0aec\7\26\2\2\u0ad5\u0ad6"+
		"\7\u015d\2\2\u0ad6\u0aed\7\u01a8\2\2\u0ad7\u0ad9\t\22\2\2\u0ad8\u0ad7"+
		"\3\2\2\2\u0ad8\u0ad9\3\2\2\2\u0ad9\u0add\3\2\2\2\u0ada\u0ade\7E\2\2\u0adb"+
		"\u0adc\7\'\2\2\u0adc\u0ade\7\u0249\2\2\u0add\u0ada\3\2\2\2\u0add\u0adb"+
		"\3\2\2\2\u0ade\u0aea\3\2\2\2\u0adf\u0ae4\5R*\2\u0ae0\u0ae1\7\u0287\2\2"+
		"\u0ae1\u0ae2\5\u00c0a\2\u0ae2\u0ae3\7\u0288\2\2\u0ae3\u0ae5\3\2\2\2\u0ae4"+
		"\u0ae0\3\2\2\2\u0ae4\u0ae5\3\2\2\2\u0ae5\u0aeb\3\2\2\2\u0ae6\u0ae7\7\u0287"+
		"\2\2\u0ae7\u0ae8\5\u00c0a\2\u0ae8\u0ae9\7\u0288\2\2\u0ae9\u0aeb\3\2\2"+
		"\2\u0aea\u0adf\3\2\2\2\u0aea\u0ae6\3\2\2\2\u0aea\u0aeb\3\2\2\2\u0aeb\u0aed"+
		"\3\2\2\2\u0aec\u0ad5\3\2\2\2\u0aec\u0ad8\3\2\2\2\u0aed\u0af3\3\2\2\2\u0aee"+
		"\u0aef\7\u01f3\2\2\u0aef\u0af0\7\u0234\2\2\u0af0\u0af1\7\26\2\2\u0af1"+
		"\u0af3\t\"\2\2\u0af2\u0ad3\3\2\2\2\u0af2\u0aee\3\2\2\2\u0af3\u00cf\3\2"+
		"\2\2\u0af4\u0af5\7\u0257\2\2\u0af5\u0af7\7\u0284\2\2\u0af6\u0af4\3\2\2"+
		"\2\u0af6\u0af7\3\2\2\2\u0af7\u0af8\3\2\2\2\u0af8\u0af9\7\u0097\2\2\u0af9"+
		"\u0afd\7\u0284\2\2\u0afa\u0afb\5\u00d2j\2\u0afb\u0afc\7\u014c\2\2\u0afc"+
		"\u0afe\3\2\2\2\u0afd\u0afa\3\2\2\2\u0afd\u0afe\3\2\2\2\u0afe\u0b02\3\2"+
		"\2\2\u0aff\u0b00\5\u00d2j\2\u0b00\u0b01\7\23\2\2\u0b01\u0b03\3\2\2\2\u0b02"+
		"\u0aff\3\2\2\2\u0b02\u0b03\3\2\2\2\u0b03\u00d1\3\2\2\2\u0b04\u0b05\t#"+
		"\2\2\u0b05\u00d3\3\2\2\2\u0b06\u0b0f\5\u00d6l\2\u0b07\u0b0f\5\u00dco\2"+
		"\u0b08\u0b0f\5\u00e0q\2\u0b09\u0b0f\5\u00e2r\2\u0b0a\u0b0f\5\u00f8}\2"+
		"\u0b0b\u0b0f\5\u00fc\177\2\u0b0c\u0b0f\5\u00fe\u0080\2\u0b0d\u0b0f\5\u0102"+
		"\u0082\2\u0b0e\u0b06\3\2\2\2\u0b0e\u0b07\3\2\2\2\u0b0e\u0b08\3\2\2\2\u0b0e"+
		"\u0b09\3\2\2\2\u0b0e\u0b0a\3\2\2\2\u0b0e\u0b0b\3\2\2\2\u0b0e\u0b0c\3\2"+
		"\2\2\u0b0e\u0b0d\3\2\2\2\u0b0f\u00d5\3\2\2\2\u0b10\u0b11\7\u0178\2\2\u0b11"+
		"\u0b12\7\65\2\2\u0b12\u0b13\7\u0197\2\2\u0b13\u0b27\5\u00b0Y\2\u0b14\u0b15"+
		"\7\u00f3\2\2\u0b15\u0b16\7\u0287\2\2\u0b16\u0b17\5\u0346\u01a4\2\u0b17"+
		"\u0b25\7\u0288\2\2\u0b18\u0b19\7\u01f3\2\2\u0b19\u0b1a\7\u00db\2\2\u0b1a"+
		"\u0b1f\7\u0287\2\2\u0b1b\u0b1d\7\u028d\2\2\u0b1c\u0b1b\3\2\2\2\u0b1c\u0b1d"+
		"\3\2\2\2\u0b1d\u0b1e\3\2\2\2\u0b1e\u0b20\5,\27\2\u0b1f\u0b1c\3\2\2\2\u0b20"+
		"\u0b21\3\2\2\2\u0b21\u0b1f\3\2\2\2\u0b21\u0b22\3\2\2\2\u0b22\u0b23\3\2"+
		"\2\2\u0b23\u0b24\7\u0288\2\2\u0b24\u0b26\3\2\2\2\u0b25\u0b18\3\2\2\2\u0b25"+
		"\u0b26\3\2\2\2\u0b26\u0b28\3\2\2\2\u0b27\u0b14\3\2\2\2\u0b27\u0b28\3\2"+
		"\2\2\u0b28\u0b29\3\2\2\2\u0b29\u0b34\7\u0287\2\2\u0b2a\u0b2c\7\u028d\2"+
		"\2\u0b2b\u0b2a\3\2\2\2\u0b2b\u0b2c\3\2\2\2\u0b2c\u0b2d\3\2\2\2\u0b2d\u0b2f"+
		"\7\u0178\2\2\u0b2e\u0b30\5@!\2\u0b2f\u0b2e\3\2\2\2\u0b2f\u0b30\3\2\2\2"+
		"\u0b30\u0b31\3\2\2\2\u0b31\u0b32\5\u00d8m\2\u0b32\u0b33\5\u00dan\2\u0b33"+
		"\u0b35\3\2\2\2\u0b34\u0b2b\3\2\2\2\u0b35\u0b36\3\2\2\2\u0b36\u0b34\3\2"+
		"\2\2\u0b36\u0b37\3\2\2\2\u0b37\u0b38\3\2\2\2\u0b38\u0b39\7\u0288\2\2\u0b39"+
		"\u00d7\3\2\2\2\u0b3a\u0b3b\7\u022f\2\2\u0b3b\u0b3c\7\u0104\2\2\u0b3c\u0b3d"+
		"\7\u0204\2\2\u0b3d\u0b42\7\u0287\2\2\u0b3e\u0b40\7\u028d\2\2\u0b3f\u0b3e"+
		"\3\2\2\2\u0b3f\u0b40\3\2\2\2\u0b40\u0b41\3\2\2\2\u0b41\u0b43\5B\"\2\u0b42"+
		"\u0b3f\3\2\2\2\u0b43\u0b44\3\2\2\2\u0b44\u0b42\3\2\2\2\u0b44\u0b45\3\2"+
		"\2\2\u0b45\u0b46\3\2\2\2\u0b46\u0b47\7\u0288\2\2\u0b47\u00d9\3\2\2\2\u0b48"+
		"\u0b4a\5\u0094K\2\u0b49\u0b48\3\2\2\2\u0b49\u0b4a\3\2\2\2\u0b4a\u0b4c"+
		"\3\2\2\2\u0b4b\u0b4d\5\u0096L\2\u0b4c\u0b4b\3\2\2\2\u0b4c\u0b4d\3\2\2"+
		"\2\u0b4d\u0b50\3\2\2\2\u0b4e\u0b51\5L\'\2\u0b4f\u0b51\5.\30\2\u0b50\u0b4e"+
		"\3\2\2\2\u0b50\u0b4f\3\2\2\2\u0b50\u0b51\3\2\2\2\u0b51\u0b56\3\2\2\2\u0b52"+
		"\u0b54\7\u0171\2\2\u0b53\u0b55\5\u0096L\2\u0b54\u0b53\3\2\2\2\u0b54\u0b55"+
		"\3\2\2\2\u0b55\u0b57\3\2\2\2\u0b56\u0b52\3\2\2\2\u0b56\u0b57\3\2\2\2\u0b57"+
		"\u0b5b\3\2\2\2\u0b58\u0b5c\5\u00caf\2\u0b59\u0b5c\5\u00ba^\2\u0b5a\u0b5c"+
		"\5\u00a6T\2\u0b5b\u0b58\3\2\2\2\u0b5b\u0b59\3\2\2\2\u0b5b\u0b5a\3\2\2"+
		"\2\u0b5b\u0b5c\3\2\2\2\u0b5c\u00db\3\2\2\2\u0b5d\u0b5e\7\u0178\2\2\u0b5e"+
		"\u0b5f\7\65\2\2\u0b5f\u0b60\7\u010d\2\2\u0b60\u0b61\7\u0287\2\2\u0b61"+
		"\u0b62\5\u0404\u0203\2\u0b62\u0b74\7\u0288\2\2\u0b63\u0b6e\7\u0287\2\2"+
		"\u0b64\u0b66\7\u028d\2\2\u0b65\u0b64\3\2\2\2\u0b65\u0b66\3\2\2\2\u0b66"+
		"\u0b67\3\2\2\2\u0b67\u0b69\7\u0178\2\2\u0b68\u0b6a\5@!\2\u0b69\u0b68\3"+
		"\2\2\2\u0b69\u0b6a\3\2\2\2\u0b6a\u0b6b\3\2\2\2\u0b6b\u0b6c\5\u00dep\2"+
		"\u0b6c\u0b6d\5\u00dan\2\u0b6d\u0b6f\3\2\2\2\u0b6e\u0b65\3\2\2\2\u0b6f"+
		"\u0b70\3\2\2\2\u0b70\u0b6e\3\2\2\2\u0b70\u0b71\3\2\2\2\u0b71\u0b72\3\2"+
		"\2\2\u0b72\u0b73\7\u0288\2\2\u0b73\u0b75\3\2\2\2\u0b74\u0b63\3\2\2\2\u0b74"+
		"\u0b75\3\2\2\2\u0b75\u00dd\3\2\2\2\u0b76\u0b77\7\u022f\2\2\u0b77\u0b81"+
		"\7\u0287\2\2\u0b78\u0b7a\7\u028d\2\2\u0b79\u0b78\3\2\2\2\u0b79\u0b7a\3"+
		"\2\2\2\u0b7a\u0b7b\3\2\2\2\u0b7b\u0b7d\5B\"\2\u0b7c\u0b79\3\2\2\2\u0b7d"+
		"\u0b7e\3\2\2\2\u0b7e\u0b7c\3\2\2\2\u0b7e\u0b7f\3\2\2\2\u0b7f\u0b82\3\2"+
		"\2\2\u0b80\u0b82\7\u0082\2\2\u0b81\u0b7c\3\2\2\2\u0b81\u0b80\3\2\2\2\u0b82"+
		"\u0b83\3\2\2\2\u0b83\u0b84\7\u0288\2\2\u0b84\u00df\3\2\2\2\u0b85\u0b86"+
		"\7\u0178\2\2\u0b86\u0b87\7\65\2\2\u0b87\u0b88\7\u00d0\2\2\u0b88\u0b8b"+
		"\5\u00b0Y\2\u0b89\u0b8c\5H%\2\u0b8a\u0b8c\5V,\2\u0b8b\u0b89\3\2\2\2\u0b8b"+
		"\u0b8a\3\2\2\2\u0b8c\u00e1\3\2\2\2\u0b8d\u0b8e\7\u0178\2\2\u0b8e\u0b8f"+
		"\7\65\2\2\u0b8f\u0b90\7\u0197\2\2\u0b90\u0ba4\5\u00b0Y\2\u0b91\u0b92\7"+
		"\u00f3\2\2\u0b92\u0b93\7\u0287\2\2\u0b93\u0b94\5\u0346\u01a4\2\u0b94\u0ba2"+
		"\7\u0288\2\2\u0b95\u0b96\7\u01f3\2\2\u0b96\u0b97\7\u00db\2\2\u0b97\u0b9c"+
		"\7\u0287\2\2\u0b98\u0b9a\7\u028d\2\2\u0b99\u0b98\3\2\2\2\u0b99\u0b9a\3"+
		"\2\2\2\u0b9a\u0b9b\3\2\2\2\u0b9b\u0b9d\5,\27\2\u0b9c\u0b99\3\2\2\2\u0b9d"+
		"\u0b9e\3\2\2\2\u0b9e\u0b9c\3\2\2\2\u0b9e\u0b9f\3\2\2\2\u0b9f\u0ba0\3\2"+
		"\2\2\u0ba0\u0ba1\7\u0288\2\2\u0ba1\u0ba3\3\2\2\2\u0ba2\u0b95\3\2\2\2\u0ba2"+
		"\u0ba3\3\2\2\2\u0ba3\u0ba5\3\2\2\2\u0ba4\u0b91\3\2\2\2\u0ba4\u0ba5\3\2"+
		"\2\2\u0ba5\u0ba9\3\2\2\2\u0ba6\u0baa\5\u00e4s\2\u0ba7\u0baa\5\u00e6t\2"+
		"\u0ba8\u0baa\5\u00f2z\2\u0ba9\u0ba6\3\2\2\2\u0ba9\u0ba7\3\2\2\2\u0ba9"+
		"\u0ba8\3\2\2\2\u0baa\u0bab\3\2\2\2\u0bab\u0bb0\7\u0287\2\2\u0bac\u0bae"+
		"\7\u028d\2\2\u0bad\u0bac\3\2\2\2\u0bad\u0bae\3\2\2\2\u0bae\u0baf\3\2\2"+
		"\2\u0baf\u0bb1\5\u00f4{\2\u0bb0\u0bad\3\2\2\2\u0bb1\u0bb2\3\2\2\2\u0bb2"+
		"\u0bb0\3\2\2\2\u0bb2\u0bb3\3\2\2\2\u0bb3\u0bb4\3\2\2\2\u0bb4\u0bb5\7\u0288"+
		"\2\2\u0bb5\u00e3\3\2\2\2\u0bb6\u0bb7\7\u01f6\2\2\u0bb7\u0bb8\7\65\2\2"+
		"\u0bb8\u0bb9\7\u0197\2\2\u0bb9\u0bbb\5\u00b0Y\2\u0bba\u0bbc\5\u00e8u\2"+
		"\u0bbb\u0bba\3\2\2\2\u0bbb\u0bbc\3\2\2\2\u0bbc\u00e5\3\2\2\2\u0bbd\u0bbe"+
		"\7\u01f6\2\2\u0bbe\u0bbf\7\65\2\2\u0bbf\u0bc0\7\u010d\2\2\u0bc0\u0bc1"+
		"\7\u0287\2\2\u0bc1\u0bc2\5\u0404\u0203\2\u0bc2\u0bc4\7\u0288\2\2\u0bc3"+
		"\u0bc5\5\u00e8u\2\u0bc4\u0bc3\3\2\2\2\u0bc4\u0bc5\3\2\2\2\u0bc5\u00e7"+
		"\3\2\2\2\u0bc6\u0bc7\7\u01f6\2\2\u0bc7\u0be6\7\u0202\2\2\u0bc8\u0be1\7"+
		"\u0287\2\2\u0bc9\u0bcb\7\u028d\2\2\u0bca\u0bc9\3\2\2\2\u0bca\u0bcb\3\2"+
		"\2\2\u0bcb\u0bcc\3\2\2\2\u0bcc\u0bce\5\u00eav\2\u0bcd\u0bca\3\2\2\2\u0bce"+
		"\u0bcf\3\2\2\2\u0bcf\u0bcd\3\2\2\2\u0bcf\u0bd0\3\2\2\2\u0bd0\u0be2\3\2"+
		"\2\2\u0bd1\u0bd3\7\u028d\2\2\u0bd2\u0bd1\3\2\2\2\u0bd2\u0bd3\3\2\2\2\u0bd3"+
		"\u0bd4\3\2\2\2\u0bd4\u0bd6\5\u00ecw\2\u0bd5\u0bd2\3\2\2\2\u0bd6\u0bd7"+
		"\3\2\2\2\u0bd7\u0bd5\3\2\2\2\u0bd7\u0bd8\3\2\2\2\u0bd8\u0be2\3\2\2\2\u0bd9"+
		"\u0bdb\7\u028d\2\2\u0bda\u0bd9\3\2\2\2\u0bda\u0bdb\3\2\2\2\u0bdb\u0bdc"+
		"\3\2\2\2\u0bdc\u0bde\5\u00eex\2\u0bdd\u0bda\3\2\2\2\u0bde\u0bdf\3\2\2"+
		"\2\u0bdf\u0bdd\3\2\2\2\u0bdf\u0be0\3\2\2\2\u0be0\u0be2\3\2\2\2\u0be1\u0bcd"+
		"\3\2\2\2\u0be1\u0bd5\3\2\2\2\u0be1\u0bdd\3\2\2\2\u0be2\u0be3\3\2\2\2\u0be3"+
		"\u0be4\7\u0288\2\2\u0be4\u0be7\3\2\2\2\u0be5\u0be7\5\u00f0y\2\u0be6\u0bc8"+
		"\3\2\2\2\u0be6\u0be5\3\2\2\2\u0be7\u00e9\3\2\2\2\u0be8\u0bea\7\u01f6\2"+
		"\2\u0be9\u0beb\5f\64\2\u0bea\u0be9\3\2\2\2\u0bea\u0beb\3\2\2\2\u0beb\u0bec"+
		"\3\2\2\2\u0bec\u0bee\5\u00d8m\2\u0bed\u0bef\5J&\2\u0bee\u0bed\3\2\2\2"+
		"\u0bee\u0bef\3\2\2\2\u0bef\u00eb\3\2\2\2\u0bf0\u0bf2\7\u01f6\2\2\u0bf1"+
		"\u0bf3\5f\64\2\u0bf2\u0bf1\3\2\2\2\u0bf2\u0bf3\3\2\2\2\u0bf3\u0bf4\3\2"+
		"\2\2\u0bf4\u0bf6\5\u00dep\2\u0bf5\u0bf7\5J&\2\u0bf6\u0bf5\3\2\2\2\u0bf6"+
		"\u0bf7\3\2\2\2\u0bf7\u00ed\3\2\2\2\u0bf8\u0bfa\7\u01f6\2\2\u0bf9\u0bfb"+
		"\5f\64\2\u0bfa\u0bf9\3\2\2\2\u0bfa\u0bfb\3\2\2\2\u0bfb\u0bfd\3\2\2\2\u0bfc"+
		"\u0bfe\5J&\2\u0bfd\u0bfc\3\2\2\2\u0bfd\u0bfe\3\2\2\2\u0bfe\u00ef\3\2\2"+
		"\2\u0bff\u0c00\7\u0281\2\2\u0c00\u00f1\3\2\2\2\u0c01\u0c02\7\u01f6\2\2"+
		"\u0c02\u0c03\7\65\2\2\u0c03\u0c04\7\u00d0\2\2\u0c04\u0c17\5\u00b0Y\2\u0c05"+
		"\u0c06\7\u01f7\2\2\u0c06\u0c14\7\u0281\2\2\u0c07\u0c08\7\u01f3\2\2\u0c08"+
		"\u0c09\7\u00db\2\2\u0c09\u0c0e\7\u0287\2\2\u0c0a\u0c0c\7\u028d\2\2\u0c0b"+
		"\u0c0a\3\2\2\2\u0c0b\u0c0c\3\2\2\2\u0c0c\u0c0d\3\2\2\2\u0c0d\u0c0f\5,"+
		"\27\2\u0c0e\u0c0b\3\2\2\2\u0c0f\u0c10\3\2\2\2\u0c10\u0c0e\3\2\2\2\u0c10"+
		"\u0c11\3\2\2\2\u0c11\u0c12\3\2\2\2\u0c12\u0c13\7\u0288\2\2\u0c13\u0c15"+
		"\3\2\2\2\u0c14\u0c07\3\2\2\2\u0c14\u0c15\3\2\2\2\u0c15\u0c18\3\2\2\2\u0c16"+
		"\u0c18\5\u00e8u\2\u0c17\u0c05\3\2\2\2\u0c17\u0c16\3\2\2\2\u0c17\u0c18"+
		"\3\2\2\2\u0c18\u00f3\3\2\2\2\u0c19\u0c1b\7\u0178\2\2\u0c1a\u0c1c\5@!\2"+
		"\u0c1b\u0c1a\3\2\2\2\u0c1b\u0c1c\3\2\2\2\u0c1c\u0c1d\3\2\2\2\u0c1d\u0c1e"+
		"\5\u00d8m\2\u0c1e\u0c3f\5\u00dan\2\u0c1f\u0c38\7\u0287\2\2\u0c20\u0c22"+
		"\7\u028d\2\2\u0c21\u0c20\3\2\2\2\u0c21\u0c22\3\2\2\2\u0c22\u0c23\3\2\2"+
		"\2\u0c23\u0c25\5\u00eav\2\u0c24\u0c21\3\2\2\2\u0c25\u0c26\3\2\2\2\u0c26"+
		"\u0c24\3\2\2\2\u0c26\u0c27\3\2\2\2\u0c27\u0c39\3\2\2\2\u0c28\u0c2a\7\u028d"+
		"\2\2\u0c29\u0c28\3\2\2\2\u0c29\u0c2a\3\2\2\2\u0c2a\u0c2b\3\2\2\2\u0c2b"+
		"\u0c2d\5\u00ecw\2\u0c2c\u0c29\3\2\2\2\u0c2d\u0c2e\3\2\2\2\u0c2e\u0c2c"+
		"\3\2\2\2\u0c2e\u0c2f\3\2\2\2\u0c2f\u0c39\3\2\2\2\u0c30\u0c32\7\u028d\2"+
		"\2\u0c31\u0c30\3\2\2\2\u0c31\u0c32\3\2\2\2\u0c32\u0c33\3\2\2\2\u0c33\u0c35"+
		"\5\u00eex\2\u0c34\u0c31\3\2\2\2\u0c35\u0c36\3\2\2\2\u0c36\u0c34\3\2\2"+
		"\2\u0c36\u0c37\3\2\2\2\u0c37\u0c39\3\2\2\2\u0c38\u0c24\3\2\2\2\u0c38\u0c2c"+
		"\3\2\2\2\u0c38\u0c34\3\2\2\2\u0c39\u0c3a\3\2\2\2\u0c3a\u0c3b\7\u0288\2"+
		"\2\u0c3b\u0c3e\3\2\2\2\u0c3c\u0c3e\5\u00f6|\2\u0c3d\u0c1f\3\2\2\2\u0c3d"+
		"\u0c3c\3\2\2\2\u0c3e\u0c40\3\2\2\2\u0c3f\u0c3d\3\2\2\2\u0c3f\u0c40\3\2"+
		"\2\2\u0c40\u00f5\3\2\2\2\u0c41\u0c42\7\u01f7\2\2\u0c42\u0c50\7\u0281\2"+
		"\2\u0c43\u0c44\7\u01f3\2\2\u0c44\u0c45\7\u00db\2\2\u0c45\u0c4a\7\u0287"+
		"\2\2\u0c46\u0c48\7\u028d\2\2\u0c47\u0c46\3\2\2\2\u0c47\u0c48\3\2\2\2\u0c48"+
		"\u0c49\3\2\2\2\u0c49\u0c4b\5,\27\2\u0c4a\u0c47\3\2\2\2\u0c4b\u0c4c\3\2"+
		"\2\2\u0c4c\u0c4a\3\2\2\2\u0c4c\u0c4d\3\2\2\2\u0c4d\u0c4e\3\2\2\2\u0c4e"+
		"\u0c4f\7\u0288\2\2\u0c4f\u0c51\3\2\2\2\u0c50\u0c43\3\2\2\2\u0c50\u0c51"+
		"\3\2\2\2\u0c51\u00f7\3\2\2\2\u0c52\u0c53\7\u0178\2\2\u0c53\u0c54\7\65"+
		"\2\2\u0c54\u0c55\7\u010d\2\2\u0c55\u0c56\7\u0287\2\2\u0c56\u0c57\5\u0404"+
		"\u0203\2\u0c57\u0c5b\7\u0288\2\2\u0c58\u0c5c\5\u00e4s\2\u0c59\u0c5c\5"+
		"\u00e6t\2\u0c5a\u0c5c\5\u00f2z\2\u0c5b\u0c58\3\2\2\2\u0c5b\u0c59\3\2\2"+
		"\2\u0c5b\u0c5a\3\2\2\2\u0c5c\u0c5d\3\2\2\2\u0c5d\u0c62\7\u0287\2\2\u0c5e"+
		"\u0c60\7\u028d\2\2\u0c5f\u0c5e\3\2\2\2\u0c5f\u0c60\3\2\2\2\u0c60\u0c61"+
		"\3\2\2\2\u0c61\u0c63\5\u00fa~\2\u0c62\u0c5f\3\2\2\2\u0c63\u0c64\3\2\2"+
		"\2\u0c64\u0c62\3\2\2\2\u0c64\u0c65\3\2\2\2\u0c65\u0c66\3\2\2\2\u0c66\u0c67"+
		"\7\u0288\2\2\u0c67\u00f9\3\2\2\2\u0c68\u0c6a\7\u0178\2\2\u0c69\u0c6b\5"+
		"@!\2\u0c6a\u0c69\3\2\2\2\u0c6a\u0c6b\3\2\2\2\u0c6b\u0c6c\3\2\2\2\u0c6c"+
		"\u0c6d\5\u00dep\2\u0c6d\u0c8e\5\u00dan\2\u0c6e\u0c87\7\u0287\2\2\u0c6f"+
		"\u0c71\7\u028d\2\2\u0c70\u0c6f\3\2\2\2\u0c70\u0c71\3\2\2\2\u0c71\u0c72"+
		"\3\2\2\2\u0c72\u0c74\5\u00eav\2\u0c73\u0c70\3\2\2\2\u0c74\u0c75\3\2\2"+
		"\2\u0c75\u0c73\3\2\2\2\u0c75\u0c76\3\2\2\2\u0c76\u0c88\3\2\2\2\u0c77\u0c79"+
		"\7\u028d\2\2\u0c78\u0c77\3\2\2\2\u0c78\u0c79\3\2\2\2\u0c79\u0c7a\3\2\2"+
		"\2\u0c7a\u0c7c\5\u00ecw\2\u0c7b\u0c78\3\2\2\2\u0c7c\u0c7d\3\2\2\2\u0c7d"+
		"\u0c7b\3\2\2\2\u0c7d\u0c7e\3\2\2\2\u0c7e\u0c88\3\2\2\2\u0c7f\u0c81\7\u028d"+
		"\2\2\u0c80\u0c7f\3\2\2\2\u0c80\u0c81\3\2\2\2\u0c81\u0c82\3\2\2\2\u0c82"+
		"\u0c84\5\u00eex\2\u0c83\u0c80\3\2\2\2\u0c84\u0c85\3\2\2\2\u0c85\u0c83"+
		"\3\2\2\2\u0c85\u0c86\3\2\2\2\u0c86\u0c88\3\2\2\2\u0c87\u0c73\3\2\2\2\u0c87"+
		"\u0c7b\3\2\2\2\u0c87\u0c83\3\2\2\2\u0c88\u0c89\3\2\2\2\u0c89\u0c8a\7\u0288"+
		"\2\2\u0c8a\u0c8d\3\2\2\2\u0c8b\u0c8d\5\u00f6|\2\u0c8c\u0c6e\3\2\2\2\u0c8c"+
		"\u0c8b\3\2\2\2\u0c8d\u0c8f\3\2\2\2\u0c8e\u0c8c\3\2\2\2\u0c8e\u0c8f\3\2"+
		"\2\2\u0c8f\u00fb\3\2\2\2\u0c90\u0c91\7\u0178\2\2\u0c91\u0c92\7\65\2\2"+
		"\u0c92\u0c93\7\u00d0\2\2\u0c93\u0c96\7\u0287\2\2\u0c94\u0c95\7\u028d\2"+
		"\2\u0c95\u0c97\5\u0404\u0203\2\u0c96\u0c94\3\2\2\2\u0c97\u0c98\3\2\2\2"+
		"\u0c98\u0c96\3\2\2\2\u0c98\u0c99\3\2\2\2\u0c99\u0c9a\3\2\2\2\u0c9a\u0c9e"+
		"\7\u0288\2\2\u0c9b\u0c9f\5\u00e4s\2\u0c9c\u0c9f\5\u00e6t\2\u0c9d\u0c9f"+
		"\5\u00f2z\2\u0c9e\u0c9b\3\2\2\2\u0c9e\u0c9c\3\2\2\2\u0c9e\u0c9d\3\2\2"+
		"\2\u0c9f\u0ca2\3\2\2\2\u0ca0\u0ca3\5H%\2\u0ca1\u0ca3\5V,\2\u0ca2\u0ca0"+
		"\3\2\2\2\u0ca2\u0ca1\3\2\2\2\u0ca3\u00fd\3\2\2\2\u0ca4\u0ca5\7\u0178\2"+
		"\2\u0ca5\u0ca6\7\65\2\2\u0ca6\u0ca7\7\u01a2\2\2\u0ca7\u0ca8\7\u0287\2"+
		"\2\u0ca8\u0ca9\5\u043e\u0220\2\u0ca9\u0cb5\7\u0288\2\2\u0caa\u0caf\7\u0287"+
		"\2\2\u0cab\u0cad\7\u028d\2\2\u0cac\u0cab\3\2\2\2\u0cac\u0cad\3\2\2\2\u0cad"+
		"\u0cae\3\2\2\2\u0cae\u0cb0\5\u0100\u0081\2\u0caf\u0cac\3\2\2\2\u0cb0\u0cb1"+
		"\3\2\2\2\u0cb1\u0caf\3\2\2\2\u0cb1\u0cb2\3\2\2\2\u0cb2\u0cb3\3\2\2\2\u0cb3"+
		"\u0cb4\7\u0288\2\2\u0cb4\u0cb6\3\2\2\2\u0cb5\u0caa\3\2\2\2\u0cb5\u0cb6"+
		"\3\2\2\2\u0cb6\u00ff\3\2\2\2\u0cb7\u0cb9\7\u0178\2\2\u0cb8\u0cba\5@!\2"+
		"\u0cb9\u0cb8\3\2\2\2\u0cb9\u0cba\3\2\2\2\u0cba\u0cbb\3\2\2\2\u0cbb\u0cbc"+
		"\5\u00dan\2\u0cbc\u0101\3\2\2\2\u0cbd\u0cbe\7\u0178\2\2\u0cbe\u0cbf\7"+
		"\65\2\2\u0cbf\u0cca\7\u01fe\2\2\u0cc0\u0cc1\7\u0186\2\2\u0cc1\u0ccb\7"+
		"\u0281\2\2\u0cc2\u0cc4\7\u028d\2\2\u0cc3\u0cc2\3\2\2\2\u0cc3\u0cc4\3\2"+
		"\2\2\u0cc4\u0cc5\3\2\2\2\u0cc5\u0cc7\5\u0100\u0081\2\u0cc6\u0cc3\3\2\2"+
		"\2\u0cc7\u0cc8\3\2\2\2\u0cc8\u0cc6\3\2\2\2\u0cc8\u0cc9\3\2\2\2\u0cc9\u0ccb"+
		"\3\2\2\2\u0cca\u0cc0\3\2\2\2\u0cca\u0cc6\3\2\2\2\u0cca\u0ccb\3\2\2\2\u0ccb"+
		"\u0103\3\2\2\2\u0ccc\u0cce\t\6\2\2\u0ccd\u0ccf\t\37\2\2\u0cce\u0ccd\3"+
		"\2\2\2\u0cce\u0ccf\3\2\2\2\u0ccf\u0cd6\3\2\2\2\u0cd0\u0cd1\7\u0220\2\2"+
		"\u0cd1\u0cd7\5\u00b0Y\2\u0cd2\u0cd3\7\u0190\2\2\u0cd3\u0cd7\7\u00fe\2"+
		"\2\u0cd4\u0cd5\7Z\2\2\u0cd5\u0cd7\5\u03e8\u01f5\2\u0cd6\u0cd0\3\2\2\2"+
		"\u0cd6\u0cd2\3\2\2\2\u0cd6\u0cd4\3\2\2\2\u0cd7\u0cd9\3\2\2\2\u0cd8\u0cda"+
		"\5\u00b8]\2\u0cd9\u0cd8\3\2\2\2\u0cd9\u0cda\3\2\2\2\u0cda\u0cdc\3\2\2"+
		"\2\u0cdb\u0cdd\5\u0106\u0084\2\u0cdc\u0cdb\3\2\2\2\u0cdc\u0cdd\3\2\2\2"+
		"\u0cdd\u0cdf\3\2\2\2\u0cde\u0ce0\7;\2\2\u0cdf\u0cde\3\2\2\2\u0cdf\u0ce0"+
		"\3\2\2\2\u0ce0\u0ce3\3\2\2\2\u0ce1\u0ce2\t$\2\2\u0ce2\u0ce4\7\u00e0\2"+
		"\2\u0ce3\u0ce1\3\2\2\2\u0ce3\u0ce4\3\2\2\2\u0ce4\u0105\3\2\2\2\u0ce5\u0ce6"+
		"\7\u00a8\2\2\u0ce6\u0ce7\7\u00f4\2\2\u0ce7\u0ce8\5\u0408\u0205\2\u0ce8"+
		"\u0107\3\2\2\2\u0ce9\u0ceb\t\6\2\2\u0cea\u0ce9\3\2\2\2\u0cea\u0ceb\3\2"+
		"\2\2\u0ceb\u0cec\3\2\2\2\u0cec\u0ced\7\u01bc\2\2\u0ced\u0cee\7\u0131\2"+
		"\2\u0cee\u0109\3\2\2\2\u0cef\u0cf0\7\u00ba\2\2\u0cf0\u0cf1\7\24\2\2\u0cf1"+
		"\u0cf6\7\u02a6\2\2\u0cf2\u0cf3\7\u013f\2\2\u0cf3\u0cf4\7\u00ba\2\2\u0cf4"+
		"\u0cf6\7\24\2\2\u0cf5\u0cef\3\2\2\2\u0cf5\u0cf2\3\2\2\2\u0cf6\u010b\3"+
		"\2\2\2\u0cf7\u0cf8\7\u015e\2\2\u0cf8\u0cfa\5\u03ec\u01f7\2\u0cf9\u0cfb"+
		"\5\u010e\u0088\2\u0cfa\u0cf9\3\2\2\2\u0cfa\u0cfb\3\2\2\2\u0cfb\u0d07\3"+
		"\2\2\2\u0cfc\u0d01\7\u0287\2\2\u0cfd\u0cff\7\u028d\2\2\u0cfe\u0cfd\3\2"+
		"\2\2\u0cfe\u0cff\3\2\2\2\u0cff\u0d00\3\2\2\2\u0d00\u0d02\5\u00aaV\2\u0d01"+
		"\u0cfe\3\2\2\2\u0d02\u0d03\3\2\2\2\u0d03\u0d01\3\2\2\2\u0d03\u0d04\3\2"+
		"\2\2\u0d04\u0d05\3\2\2\2\u0d05\u0d06\7\u0288\2\2\u0d06\u0d08\3\2\2\2\u0d07"+
		"\u0cfc\3\2\2\2\u0d07\u0d08\3\2\2\2\u0d08\u0d0d\3\2\2\2\u0d09\u0d0a\7\u0164"+
		"\2\2\u0d0a\u0d0b\7N\2\2\u0d0b\u0d0c\t\25\2\2\u0d0c\u0d0e\7\u01bf\2\2\u0d0d"+
		"\u0d09\3\2\2\2\u0d0d\u0d0e\3\2\2\2\u0d0e\u0d10\3\2\2\2\u0d0f\u0d11\5\u0110"+
		"\u0089\2\u0d10\u0d0f\3\2\2\2\u0d10\u0d11\3\2\2\2\u0d11\u0d13\3\2\2\2\u0d12"+
		"\u0d14\5\u0112\u008a\2\u0d13\u0d12\3\2\2\2\u0d13\u0d14\3\2\2\2\u0d14\u0d16"+
		"\3\2\2\2\u0d15\u0d17\5\u0092J\2\u0d16\u0d15\3\2\2\2\u0d16\u0d17\3\2\2"+
		"\2\u0d17\u0d19\3\2\2\2\u0d18\u0d1a\5\u00a0Q\2\u0d19\u0d18\3\2\2\2\u0d19"+
		"\u0d1a\3\2\2\2\u0d1a\u0d1c\3\2\2\2\u0d1b\u0d1d\5\u00d4k\2\u0d1c\u0d1b"+
		"\3\2\2\2\u0d1c\u0d1d\3\2\2\2\u0d1d\u0d1f\3\2\2\2\u0d1e\u0d20\t\5\2\2\u0d1f"+
		"\u0d1e\3\2\2\2\u0d1f\u0d20\3\2\2\2\u0d20\u0d26\3\2\2\2\u0d21\u0d22\7\u01b0"+
		"\2\2\u0d22\u0d23\7\u0287\2\2\u0d23\u0d24\7\u012d\2\2\u0d24\u0d25\t\26"+
		"\2\2\u0d25\u0d27\7\u0288\2\2\u0d26\u0d21\3\2\2\2\u0d26\u0d27\3\2\2\2\u0d27"+
		"\u0d29\3\2\2\2\u0d28\u0d2a\5\64\33\2\u0d29\u0d28\3\2\2\2\u0d29\u0d2a\3"+
		"\2\2\2\u0d2a\u0d2c\3\2\2\2\u0d2b\u0d2d\t\27\2\2\u0d2c\u0d2b\3\2\2\2\u0d2c"+
		"\u0d2d\3\2\2\2\u0d2d\u0d33\3\2\2\2\u0d2e\u0d30\5\u0104\u0083\2\u0d2f\u0d2e"+
		"\3\2\2\2\u0d30\u0d31\3\2\2\2\u0d31\u0d2f\3\2\2\2\u0d31\u0d32\3\2\2\2\u0d32"+
		"\u0d34\3\2\2\2\u0d33\u0d2f\3\2\2\2\u0d33\u0d34\3\2\2\2\u0d34\u0d36\3\2"+
		"\2\2\u0d35\u0d37\5\u0108\u0085\2\u0d36\u0d35\3\2\2\2\u0d36\u0d37\3\2\2"+
		"\2\u0d37\u0d39\3\2\2\2\u0d38\u0d3a\5\u010a\u0086\2\u0d39\u0d38\3\2\2\2"+
		"\u0d39\u0d3a\3\2\2\2\u0d3a\u010d\3\2\2\2\u0d3b\u0d3d\7\u0153\2\2\u0d3c"+
		"\u0d3b\3\2\2\2\u0d3c\u0d3d\3\2\2\2\u0d3d\u0d3e\3\2\2\2\u0d3e\u0d3f\7\u01f8"+
		"\2\2\u0d3f\u0d40\7\31\2\2\u0d40\u0d41\7\13\2\2\u0d41\u0d42\7\u0106\2\2"+
		"\u0d42\u010f\3\2\2\2\u0d43\u0d44\7\u015d\2\2\u0d44\u0d45\7\u00d6\2\2\u0d45"+
		"\u0d4a\7\u00f7\2\2\u0d46\u0d47\7\u01fe\2\2\u0d47\u0d4b\7\u00c9\2\2\u0d48"+
		"\u0d49\7\u0190\2\2\u0d49\u0d4b\7\u00fe\2\2\u0d4a\u0d46\3\2\2\2\u0d4a\u0d48"+
		"\3\2\2\2\u0d4b\u0111\3\2\2\2\u0d4c\u0d4e\7\u0161\2\2\u0d4d\u0d4f\5\u03fa"+
		"\u01fe\2\u0d4e\u0d4d\3\2\2\2\u0d4e\u0d4f\3\2\2\2\u0d4f\u0d50\3\2\2\2\u0d50"+
		"\u0d54\7\u0287\2\2\u0d51\u0d55\5\u0098M\2\u0d52\u0d53\7\u0201\2\2\u0d53"+
		"\u0d55\5,\27\2\u0d54\u0d51\3\2\2\2\u0d54\u0d52\3\2\2\2\u0d55\u0d56\3\2"+
		"\2\2\u0d56\u0d54\3\2\2\2\u0d56\u0d57\3\2\2\2\u0d57\u0d58\3\2\2\2\u0d58"+
		"\u0d59\7\u0288\2\2\u0d59\u0113\3\2\2\2\u0d5a\u0d5b\7\u015e\2\2\u0d5b\u0d60"+
		"\7\u025a\2\2\u0d5c\u0d5d\7\u0287\2\2\u0d5d\u0d5e\5\u00aaV\2\u0d5e\u0d5f"+
		"\7\u0288\2\2\u0d5f\u0d61\3\2\2\2\u0d60\u0d5c\3\2\2\2\u0d60\u0d61\3\2\2"+
		"\2\u0d61\u0d64\3\2\2\2\u0d62\u0d63\7\u025a\2\2\u0d63\u0d65\5\u00ceh\2"+
		"\u0d64\u0d62\3\2\2\2\u0d64\u0d65\3\2\2\2\u0d65\u0d67\3\2\2\2\u0d66\u0d68"+
		"\5\u00d0i\2\u0d67\u0d66\3\2\2\2\u0d67\u0d68\3\2\2\2\u0d68\u0d6a\3\2\2"+
		"\2\u0d69\u0d6b\5\u0116\u008c\2\u0d6a\u0d69\3\2\2\2\u0d6a\u0d6b\3\2\2\2"+
		"\u0d6b\u0d70\3\2\2\2\u0d6c\u0d6d\7\u0164\2\2\u0d6d\u0d6e\7N\2\2\u0d6e"+
		"\u0d6f\t\25\2\2\u0d6f\u0d71\7\u01bf\2\2\u0d70\u0d6c\3\2\2\2\u0d70\u0d71"+
		"\3\2\2\2\u0d71\u0d73\3\2\2\2\u0d72\u0d74\5\u0110\u0089\2\u0d73\u0d72\3"+
		"\2\2\2\u0d73\u0d74\3\2\2\2\u0d74\u0d76\3\2\2\2\u0d75\u0d77\5\u0112\u008a"+
		"\2\u0d76\u0d75\3\2\2\2\u0d76\u0d77\3\2\2\2\u0d77\u0d79\3\2\2\2\u0d78\u0d7a"+
		"\5\u0092J\2\u0d79\u0d78\3\2\2\2\u0d79\u0d7a\3\2\2\2\u0d7a\u0d7c\3\2\2"+
		"\2\u0d7b\u0d7d\5\u00a0Q\2\u0d7c\u0d7b\3\2\2\2\u0d7c\u0d7d\3\2\2\2\u0d7d"+
		"\u0d7f\3\2\2\2\u0d7e\u0d80\5\u00d4k\2\u0d7f\u0d7e\3\2\2\2\u0d7f\u0d80"+
		"\3\2\2\2\u0d80\u0d82\3\2\2\2\u0d81\u0d83\t\5\2\2\u0d82\u0d81\3\2\2\2\u0d82"+
		"\u0d83\3\2\2\2\u0d83\u0d89\3\2\2\2\u0d84\u0d85\7\u01b0\2\2\u0d85\u0d86"+
		"\7\u0287\2\2\u0d86\u0d87\7\u012d\2\2\u0d87\u0d88\t\26\2\2\u0d88\u0d8a"+
		"\7\u0288\2\2\u0d89\u0d84\3\2\2\2\u0d89\u0d8a\3\2\2\2\u0d8a\u0d8c\3\2\2"+
		"\2\u0d8b\u0d8d\5\64\33\2\u0d8c\u0d8b\3\2\2\2\u0d8c\u0d8d\3\2\2\2\u0d8d"+
		"\u0d8f\3\2\2\2\u0d8e\u0d90\t\27\2\2\u0d8f\u0d8e\3\2\2\2\u0d8f\u0d90\3"+
		"\2\2\2\u0d90\u0d96\3\2\2\2\u0d91\u0d93\5\u0104\u0083\2\u0d92\u0d91\3\2"+
		"\2\2\u0d93\u0d94\3\2\2\2\u0d94\u0d92\3\2\2\2\u0d94\u0d95\3\2\2\2\u0d95"+
		"\u0d97\3\2\2\2\u0d96\u0d92\3\2\2\2\u0d96\u0d97\3\2\2\2\u0d97\u0d99\3\2"+
		"\2\2\u0d98\u0d9a\5\u0108\u0085\2\u0d99\u0d98\3\2\2\2\u0d99\u0d9a\3\2\2"+
		"\2\u0d9a\u0d9c\3\2\2\2\u0d9b\u0d9d\5\u010a\u0086\2\u0d9c\u0d9b\3\2\2\2"+
		"\u0d9c\u0d9d\3\2\2\2\u0d9d\u0115\3\2\2\2\u0d9e\u0d9f\7\u023a\2\2\u0d9f"+
		"\u0da0\7K\2\2\u0da0\u0daa\7\u0287\2\2\u0da1\u0da3\7\u028d\2\2\u0da2\u0da1"+
		"\3\2\2\2\u0da2\u0da3\3\2\2\2\u0da3\u0da4\3\2\2\2\u0da4\u0da5\5\u0404\u0203"+
		"\2\u0da5\u0da6\7\26\2\2\u0da6\u0da7\7\u0287\2\2\u0da7\u0da8\5\u0346\u01a4"+
		"\2\u0da8\u0da9\7\u0288\2\2\u0da9\u0dab\3\2\2\2\u0daa\u0da2\3\2\2\2\u0dab"+
		"\u0dac\3\2\2\2\u0dac\u0daa\3\2\2\2\u0dac\u0dad\3\2\2\2\u0dad\u0dae\3\2"+
		"\2\2\u0dae\u0daf\7\u0288\2\2\u0daf\u0117\3\2\2\2\u0db0\u0db1\7\u0093\2"+
		"\2\u0db1\u0db4\7\u01ff\2\2\u0db2\u0db3\7\u00d7\2\2\u0db3\u0db5\7\u00ac"+
		"\2\2\u0db4\u0db2\3\2\2\2\u0db4\u0db5\3\2\2\2\u0db5\u0db6\3\2\2\2\u0db6"+
		"\u0db8\5\u0408\u0205\2\u0db7\u0db9\7\u0194\2\2\u0db8\u0db7\3\2\2\2\u0db8"+
		"\u0db9\3\2\2\2\u0db9\u0119\3\2\2\2\u0dba\u0dbb\7\16\2\2\u0dbb\u0dbc\7"+
		"\u01ff\2\2\u0dbc\u0dc1\5\u0408\u0205\2\u0dbd\u0dc2\3\2\2\2\u0dbe\u0dc2"+
		"\5\u011c\u008f\2\u0dbf\u0dc2\5\u013a\u009e\2\u0dc0\u0dc2\5\u0144\u00a3"+
		"\2\u0dc1\u0dbd\3\2\2\2\u0dc1\u0dbe\3\2\2\2\u0dc1\u0dbf\3\2\2\2\u0dc1\u0dc0"+
		"\3\2\2\2\u0dc2\u011b\3\2\2\2\u0dc3\u0dcf\5\u011e\u0090\2\u0dc4\u0dc5\7"+
		"\u01ab\2\2\u0dc5\u0dc6\7\u0210\2\2\u0dc6\u0dcf\5\u0408\u0205\2\u0dc7\u0dcf"+
		"\5\u0136\u009c\2\u0dc8\u0dc9\7\u0199\2\2\u0dc9\u0dcf\7\u0165\2\2\u0dca"+
		"\u0dcb\7\u0199\2\2\u0dcb\u0dcf\7\u0247\2\2\u0dcc\u0dcd\7\u01a7\2\2\u0dcd"+
		"\u0dcf\7\u0283\2\2\u0dce\u0dc3\3\2\2\2\u0dce\u0dc4\3\2\2\2\u0dce\u0dc7"+
		"\3\2\2\2\u0dce\u0dc8\3\2\2\2\u0dce\u0dca\3\2\2\2\u0dce\u0dcc\3\2\2\2\u0dcf"+
		"\u011d\3\2\2\2\u0dd0\u0de2\5\u0098M\2\u0dd1\u0de2\5\u009eP\2\u0dd2\u0de2"+
		"\5L\'\2\u0dd3\u0de2\5\u0120\u0091\2\u0dd4\u0de2\5\u0122\u0092\2\u0dd5"+
		"\u0de2\5\u0124\u0093\2\u0dd6\u0de2\t\5\2\2\u0dd7\u0dd8\7\u01b0\2\2\u0dd8"+
		"\u0dd9\7\u0287\2\2\u0dd9\u0dda\7\u012d\2\2\u0dda\u0ddb\t\26\2\2\u0ddb"+
		"\u0de2\7\u0288\2\2\u0ddc\u0de2\5\u0126\u0094\2\u0ddd\u0de2\5\u0128\u0095"+
		"\2\u0dde\u0de2\5\64\33\2\u0ddf\u0de2\5\u0108\u0085\2\u0de0\u0de2\5\u010a"+
		"\u0086\2\u0de1\u0dd0\3\2\2\2\u0de1\u0dd1\3\2\2\2\u0de1\u0dd2\3\2\2\2\u0de1"+
		"\u0dd3\3\2\2\2\u0de1\u0dd4\3\2\2\2\u0de1\u0dd5\3\2\2\2\u0de1\u0dd6\3\2"+
		"\2\2\u0de1\u0dd7\3\2\2\2\u0de1\u0ddc\3\2\2\2\u0de1\u0ddd\3\2\2\2\u0de1"+
		"\u0dde\3\2\2\2\u0de1\u0ddf\3\2\2\2\u0de1\u0de0\3\2\2\2\u0de2\u0de3\3\2"+
		"\2\2\u0de3\u0de1\3\2\2\2\u0de3\u0de4\3\2\2\2\u0de4\u0de6\3\2\2\2\u0de5"+
		"\u0de7\5\u012a\u0096\2\u0de6\u0de5\3\2\2\2\u0de6\u0de7\3\2\2\2\u0de7\u011f"+
		"\3\2\2\2\u0de8\u0df4\7\7\2\2\u0de9\u0deb\7\u028d\2\2\u0dea\u0de9\3\2\2"+
		"\2\u0dea\u0deb\3\2\2\2\u0deb\u0dec\3\2\2\2\u0dec\u0ded\7\u01fc\2\2\u0ded"+
		"\u0df0\7\u0114\2\2\u0dee\u0df1\5\u008cG\2\u0def\u0df1\5\u0090I\2\u0df0"+
		"\u0dee\3\2\2\2\u0df0\u0def\3\2\2\2\u0df1\u0df3\3\2\2\2\u0df2\u0dea\3\2"+
		"\2\2\u0df3\u0df6\3\2\2\2\u0df4\u0df2\3\2\2\2\u0df4\u0df5\3\2\2\2\u0df5"+
		"\u0e08\3\2\2\2\u0df6\u0df4\3\2\2\2\u0df7\u0e04\7\u0093\2\2\u0df8\u0dfa"+
		"\7\u028d\2\2\u0df9\u0df8\3\2\2\2\u0df9\u0dfa\3\2\2\2\u0dfa\u0dfb\3\2\2"+
		"\2\u0dfb\u0dfc\7\u01fc\2\2\u0dfc\u0e00\7\u0114\2\2\u0dfd\u0e01\5\u0090"+
		"I\2\u0dfe\u0dff\7\u00cd\2\2\u0dff\u0e01\5\u008eH\2\u0e00\u0dfd\3\2\2\2"+
		"\u0e00\u0dfe\3\2\2\2\u0e01\u0e03\3\2\2\2\u0e02\u0df9\3\2\2\2\u0e03\u0e06"+
		"\3\2\2\2\u0e04\u0e02\3\2\2\2\u0e04\u0e05\3\2\2\2\u0e05\u0e08\3\2\2\2\u0e06"+
		"\u0e04\3\2\2\2\u0e07\u0de8\3\2\2\2\u0e07\u0df7\3\2\2\2\u0e08\u0121\3\2"+
		"\2\2\u0e09\u0e0a\7\f\2\2\u0e0a\u0e17\7\u00af\2\2\u0e0b\u0e12\7\u0287\2"+
		"\2\u0e0c\u0e0d\7\u01e1\2\2\u0e0d\u0e13\5\u009cO\2\u0e0e\u0e0f\7r\2\2\u0e0f"+
		"\u0e13\7\u0283\2\2\u0e10\u0e11\7\u00ed\2\2\u0e11\u0e13\7\u0281\2\2\u0e12"+
		"\u0e0c\3\2\2\2\u0e12\u0e0e\3\2\2\2\u0e12\u0e10\3\2\2\2\u0e13\u0e14\3\2"+
		"\2\2\u0e14\u0e12\3\2\2\2\u0e14\u0e15\3\2\2\2\u0e15\u0e16\3\2\2\2\u0e16"+
		"\u0e18\7\u0288\2\2\u0e17\u0e0b\3\2\2\2\u0e17\u0e18\3\2\2\2\u0e18\u0123"+
		"\3\2\2\2\u0e19\u0e1a\7y\2\2\u0e1a\u0e1d\7\u0225\2\2\u0e1b\u0e1c\7\u00fc"+
		"\2\2\u0e1c\u0e1e\5\u009cO\2\u0e1d\u0e1b\3\2\2\2\u0e1d\u0e1e\3\2\2\2\u0e1e"+
		"\u0125\3\2\2\2\u0e1f\u0e21\7\u0228\2\2\u0e20\u0e22\7\u0153\2\2\u0e21\u0e20"+
		"\3\2\2\2\u0e21\u0e22\3\2\2\2\u0e22\u0e23\3\2\2\2\u0e23\u0e24\7\u00dd\2"+
		"\2\u0e24\u0e25\7p\2\2\u0e25\u0e26\3\2\2\2\u0e26\u0e27\5\u00a0Q\2\u0e27"+
		"\u0127\3\2\2\2\u0e28\u0e2a\t%\2\2\u0e29\u0e28\3\2\2\2\u0e29\u0e2a\3\2"+
		"\2\2\u0e2a\u0e2b\3\2\2\2\u0e2b\u0e2c\7\u019e\2\2\u0e2c\u0129\3\2\2\2\u0e2d"+
		"\u0e32\5\u012c\u0097\2\u0e2e\u0e32\5\u0132\u009a\2\u0e2f\u0e32\5\u0138"+
		"\u009d\2\u0e30\u0e32\7H\2\2\u0e31\u0e2d\3\2\2\2\u0e31\u0e2e\3\2\2\2\u0e31"+
		"\u0e2f\3\2\2\2\u0e31\u0e30\3\2\2\2\u0e32\u012b\3\2\2\2\u0e33\u0e38\5\u012e"+
		"\u0098\2\u0e34\u0e35\7\u017d\2\2\u0e35\u0e38\7\u0281\2\2\u0e36\u0e38\5"+
		".\30\2\u0e37\u0e33\3\2\2\2\u0e37\u0e34\3\2\2\2\u0e37\u0e36\3\2\2\2\u0e38"+
		"\u0e3a\3\2\2\2\u0e39\u0e3b\5\u0130\u0099\2\u0e3a\u0e39\3\2\2\2\u0e3a\u0e3b"+
		"\3\2\2\2\u0e3b\u012d\3\2\2\2\u0e3c\u0e3d\7\u011e\2\2\u0e3d\u0e40\7\u01ff"+
		"\2\2\u0e3e\u0e40\7\u0147\2\2\u0e3f\u0e3c\3\2\2\2\u0e3f\u0e3e\3\2\2\2\u0e40"+
		"\u012f\3\2\2\2\u0e41\u0e42\7\u00dd\2\2\u0e42\u0e44\5\u0404\u0203\2\u0e43"+
		"\u0e41\3\2\2\2\u0e43\u0e44\3\2\2\2\u0e44\u0e45\3\2\2\2\u0e45\u0e47\7\u0171"+
		"\2\2\u0e46\u0e48\5\u0096L\2\u0e47\u0e46\3\2\2\2\u0e47\u0e48\3\2\2\2\u0e48"+
		"\u0131\3\2\2\2\u0e49\u0e54\5\u0134\u009b\2\u0e4a\u0e4f\7\u0171\2\2\u0e4b"+
		"\u0e50\5\u0096L\2\u0e4c\u0e50\5\u0122\u0092\2\u0e4d\u0e50\5\u0136\u009c"+
		"\2\u0e4e\u0e50\5\u0124\u0093\2\u0e4f\u0e4b\3\2\2\2\u0e4f\u0e4c\3\2\2\2"+
		"\u0e4f\u0e4d\3\2\2\2\u0e4f\u0e4e\3\2\2\2\u0e50\u0e51\3\2\2\2\u0e51\u0e4f"+
		"\3\2\2\2\u0e51\u0e52\3\2\2\2\u0e52\u0e54\3\2\2\2\u0e53\u0e49\3\2\2\2\u0e53"+
		"\u0e4a\3\2\2\2\u0e54\u0133\3\2\2\2\u0e55\u0e56\7\7\2\2\u0e56\u0e58\7\u0171"+
		"\2\2\u0e57\u0e59\5\u0096L\2\u0e58\u0e57\3\2\2\2\u0e58\u0e59\3\2\2\2\u0e59"+
		"\u0e67\3\2\2\2\u0e5a\u0e62\7\u0287\2\2\u0e5b\u0e5d\7\u028d\2\2\u0e5c\u0e5b"+
		"\3\2\2\2\u0e5c\u0e5d\3\2\2\2\u0e5d\u0e5e\3\2\2\2\u0e5e\u0e60\7\u0178\2"+
		"\2\u0e5f\u0e61\5\u0096L\2\u0e60\u0e5f\3\2\2\2\u0e60\u0e61\3\2\2\2\u0e61"+
		"\u0e63\3\2\2\2\u0e62\u0e5c\3\2\2\2\u0e63\u0e64\3\2\2\2\u0e64\u0e62\3\2"+
		"\2\2\u0e64\u0e65\3\2\2\2\u0e65\u0e66\3\2\2\2\u0e66\u0e68\7\u0288\2\2\u0e67"+
		"\u0e5a\3\2\2\2\u0e67\u0e68\3\2\2\2\u0e68\u0135\3\2\2\2\u0e69\u0e6a\7\u01db"+
		"\2\2\u0e6a\u0e6c\7\u01e7\2\2\u0e6b\u0e6d\7P\2\2\u0e6c\u0e6b\3\2\2\2\u0e6c"+
		"\u0e6d\3\2\2\2\u0e6d\u0e6f\3\2\2\2\u0e6e\u0e70\7;\2\2\u0e6f\u0e6e\3\2"+
		"\2\2\u0e6f\u0e70\3\2\2\2\u0e70\u0137\3\2\2\2\u0e71\u0e72\7\u011e\2\2\u0e72"+
		"\u0e75\7\u01ff\2\2\u0e73\u0e76\5\u0122\u0092\2\u0e74\u0e76\5\u0124\u0093"+
		"\2\u0e75\u0e73\3\2\2\2\u0e75\u0e74\3\2\2\2\u0e76\u0139\3\2\2\2\u0e77\u0e78"+
		"\7\7\2\2\u0e78\u0e80\7\u0287\2\2\u0e79\u0e7b\5\u0082B\2\u0e7a\u0e79\3"+
		"\2\2\2\u0e7b\u0e7e\3\2\2\2\u0e7c\u0e7a\3\2\2\2\u0e7c\u0e7d\3\2\2\2\u0e7d"+
		"\u0e81\3\2\2\2\u0e7e\u0e7c\3\2\2\2\u0e7f\u0e81\5\u0088E\2\u0e80\u0e7c"+
		"\3\2\2\2\u0e80\u0e7f\3\2\2\2\u0e81\u0e82\3\2\2\2\u0e82\u0ea6\7\u0288\2"+
		"\2\u0e83\u0e8b\7\7\2\2\u0e84\u0e86\5\u0082B\2\u0e85\u0e84\3\2\2\2\u0e86"+
		"\u0e89\3\2\2\2\u0e87\u0e85\3\2\2\2\u0e87\u0e88\3\2\2\2\u0e88\u0e8c\3\2"+
		"\2\2\u0e89\u0e87\3\2\2\2\u0e8a\u0e8c\5\u0088E\2\u0e8b\u0e87\3\2\2\2\u0e8b"+
		"\u0e8a\3\2\2\2\u0e8c\u0ea6\3\2\2\2\u0e8d\u0e94\7\u012f\2\2\u0e8e\u0e8f"+
		"\7Z\2\2\u0e8f\u0e95\5\u03e8\u01f5\2\u0e90\u0e91\7\u0190\2\2\u0e91\u0e95"+
		"\7\u00fe\2\2\u0e92\u0e93\7\u0220\2\2\u0e93\u0e95\5\u00b0Y\2\u0e94\u0e8e"+
		"\3\2\2\2\u0e94\u0e90\3\2\2\2\u0e94\u0e92\3\2\2\2\u0e95\u0e96\3\2\2\2\u0e96"+
		"\u0e98\5\u00b6\\\2\u0e97\u0e99\7;\2\2\u0e98\u0e97\3\2\2\2\u0e98\u0e99"+
		"\3\2\2\2\u0e99\u0ea6\3\2\2\2\u0e9a\u0e9b\7\u01ab\2\2\u0e9b\u0e9c\7Z\2"+
		"\2\u0e9c\u0e9d\5\u013c\u009f\2\u0e9d\u0e9e\7\u0210\2\2\u0e9e\u0e9f\5\u013e"+
		"\u00a0\2\u0e9f\u0ea6\3\2\2\2\u0ea0\u0ea2\5\u0140\u00a1\2\u0ea1\u0ea0\3"+
		"\2\2\2\u0ea2\u0ea3\3\2\2\2\u0ea3\u0ea1\3\2\2\2\u0ea3\u0ea4\3\2\2\2\u0ea4"+
		"\u0ea6\3\2\2\2\u0ea5\u0e77\3\2\2\2\u0ea5\u0e83\3\2\2\2\u0ea5\u0e8d\3\2"+
		"\2\2\u0ea5\u0e9a\3\2\2\2\u0ea5\u0ea1\3\2\2\2\u0ea6\u013b\3\2\2\2\u0ea7"+
		"\u0ea8\5\u03e8\u01f5\2\u0ea8\u013d\3\2\2\2\u0ea9\u0eaa\5\u03e8\u01f5\2"+
		"\u0eaa\u013f\3\2\2\2\u0eab\u0eac\7\u0093\2\2\u0eac\u0ead\5\u0142\u00a2"+
		"\2\u0ead\u0141\3\2\2\2\u0eae\u0eaf\7\u0190\2\2\u0eaf\u0eb3\7\u00fe\2\2"+
		"\u0eb0\u0eb1\7\u0220\2\2\u0eb1\u0eb3\5\u00b0Y\2\u0eb2\u0eae\3\2\2\2\u0eb2"+
		"\u0eb0\3\2\2\2\u0eb3\u0eb5\3\2\2\2\u0eb4\u0eb6\7;\2\2\u0eb5\u0eb4\3\2"+
		"\2\2\u0eb5\u0eb6\3\2\2\2\u0eb6\u0eb8\3\2\2\2\u0eb7\u0eb9\t$\2\2\u0eb8"+
		"\u0eb7\3\2\2\2\u0eb8\u0eb9\3\2\2\2\u0eb9\u0ec0\3\2\2\2\u0eba\u0ebb\7Z"+
		"\2\2\u0ebb\u0ebd\5\u03e8\u01f5\2\u0ebc\u0ebe\7;\2\2\u0ebd\u0ebc\3\2\2"+
		"\2\u0ebd\u0ebe\3\2\2\2\u0ebe\u0ec0\3\2\2\2\u0ebf\u0eb2\3\2\2\2\u0ebf\u0eba"+
		"\3\2\2\2\u0ec0\u0143\3\2\2\2\u0ec1\u0ec6\5\u0146\u00a4\2\u0ec2\u0ec6\5"+
		"\u0154\u00ab\2\u0ec3\u0ec6\5\u015a\u00ae\2\u0ec4\u0ec6\5\u015e\u00b0\2"+
		"\u0ec5\u0ec1\3\2\2\2\u0ec5\u0ec2\3\2\2\2\u0ec5\u0ec3\3\2\2\2\u0ec5\u0ec4"+
		"\3\2\2\2\u0ec6\u0145\3\2\2\2\u0ec7\u0ed3\5\u0148\u00a5\2\u0ec8\u0ed3\5"+
		"\u014a\u00a6\2\u0ec9\u0ed3\5\u014c\u00a7\2\u0eca\u0ecf\5\u0152\u00aa\2"+
		"\u0ecb\u0ecc\7\u028d\2\2\u0ecc\u0ece\5\u0152\u00aa\2\u0ecd\u0ecb\3\2\2"+
		"\2\u0ece\u0ed1\3\2\2\2\u0ecf\u0ecd\3\2\2\2\u0ecf\u0ed0\3\2\2\2\u0ed0\u0ed3"+
		"\3\2\2\2\u0ed1\u0ecf\3\2\2\2\u0ed2\u0ec7\3\2\2\2\u0ed2\u0ec8\3\2\2\2\u0ed2"+
		"\u0ec9\3\2\2\2\u0ed2\u0eca\3\2\2\2\u0ed3\u0ed4\3\2\2\2\u0ed4\u0ed2\3\2"+
		"\2\2\u0ed4\u0ed5\3\2\2\2\u0ed5\u0147\3\2\2\2\u0ed6\u0ed8\7\7\2\2\u0ed7"+
		"\u0ed9\7J\2\2\u0ed8\u0ed7\3\2\2\2\u0ed8\u0ed9\3\2\2\2\u0ed9\u0eed\3\2"+
		"\2\2\u0eda\u0ee3\7\u0287\2\2\u0edb\u0edd\7\u028d\2\2\u0edc\u0edb\3\2\2"+
		"\2\u0edc\u0edd\3\2\2\2\u0edd\u0ede\3\2\2\2\u0ede\u0ee4\5|?\2\u0edf\u0ee1"+
		"\7\u028d\2\2\u0ee0\u0edf\3\2\2\2\u0ee0\u0ee1\3\2\2\2\u0ee1\u0ee2\3\2\2"+
		"\2\u0ee2\u0ee4\5\u0080A\2\u0ee3\u0edc\3\2\2\2\u0ee3\u0ee0\3\2\2\2\u0ee4"+
		"\u0ee5\3\2\2\2\u0ee5\u0ee3\3\2\2\2\u0ee5\u0ee6\3\2\2\2\u0ee6\u0ee7\3\2"+
		"\2\2\u0ee7\u0ee8\7\u0288\2\2\u0ee8\u0eee\3\2\2\2\u0ee9\u0eec\5|?\2\u0eea"+
		"\u0eec\5\u0080A\2\u0eeb\u0ee9\3\2\2\2\u0eeb\u0eea\3\2\2\2\u0eec\u0eee"+
		"\3\2\2\2\u0eed\u0eda\3\2\2\2\u0eed\u0eeb\3\2\2\2\u0eee\u0ef0\3\2\2\2\u0eef"+
		"\u0ef1\5\u00a0Q\2\u0ef0\u0eef\3\2\2\2\u0ef0\u0ef1\3\2\2\2\u0ef1\u0149"+
		"\3\2\2\2\u0ef2\u0f00\7\u012f\2\2\u0ef3\u0ef8\7\u0287\2\2\u0ef4\u0ef6\7"+
		"\u028d\2\2\u0ef5\u0ef4\3\2\2\2\u0ef5\u0ef6\3\2\2\2\u0ef6\u0ef7\3\2\2\2"+
		"\u0ef7\u0ef9\5\u014e\u00a8\2\u0ef8\u0ef5\3\2\2\2\u0ef9\u0efa\3\2\2\2\u0efa"+
		"\u0ef8\3\2\2\2\u0efa\u0efb\3\2\2\2\u0efb\u0efc\3\2\2\2\u0efc\u0efd\7\u0288"+
		"\2\2\u0efd\u0f01\3\2\2\2\u0efe\u0f01";
	private static final String _serializedATNSegment2 =
		"\5\u014e\u00a8\2\u0eff\u0f01\5\u0150\u00a9\2\u0f00\u0ef3\3\2\2\2\u0f00"+
		"\u0efe\3\2\2\2\u0f00\u0eff\3\2\2\2\u0f01\u014b\3\2\2\2\u0f02\u0f04\7\16"+
		"\2\2\u0f03\u0f05\7J\2\2\u0f04\u0f03\3\2\2\2\u0f04\u0f05\3\2\2\2\u0f05"+
		"\u0f06\3\2\2\2\u0f06\u0f10\5\u0404\u0203\2\u0f07\u0f08\t&\2\2\u0f08\u0f09"+
		"\7\u0153\2\2\u0f09\u0f11\7\u0157\2\2\u0f0a\u0f0b\7\u021c\2\2\u0f0b\u0f0e"+
		"\5\u041c\u020f\2\u0f0c\u0f0d\7\u022c\2\2\u0f0d\u0f0f\5\u0346\u01a4\2\u0f0e"+
		"\u0f0c\3\2\2\2\u0f0e\u0f0f\3\2\2\2\u0f0f\u0f11\3\2\2\2\u0f10\u0f07\3\2"+
		"\2\2\u0f10\u0f0a\3\2\2\2\u0f11\u014d\3\2\2\2\u0f12\u0f14\5\u0404\u0203"+
		"\2\u0f13\u0f15\5\u041c\u020f\2\u0f14\u0f13\3\2\2\2\u0f14\u0f15\3\2\2\2"+
		"\u0f15\u0f18\3\2\2\2\u0f16\u0f17\7\u0082\2\2\u0f17\u0f19\5\u0346\u01a4"+
		"\2\u0f18\u0f16\3\2\2\2\u0f18\u0f19\3\2\2\2\u0f19\u0f1d\3\2\2\2\u0f1a\u0f1b"+
		"\7\u009d\2\2\u0f1b\u0f1e\5\u00c8e\2\u0f1c\u0f1e\7\u0080\2\2\u0f1d\u0f1a"+
		"\3\2\2\2\u0f1d\u0f1c\3\2\2\2\u0f1d\u0f1e\3\2\2\2\u0f1e\u0f22\3\2\2\2\u0f1f"+
		"\u0f21\5\u00acW\2\u0f20\u0f1f\3\2\2\2\u0f21\u0f24\3\2\2\2\u0f22\u0f20"+
		"\3\2\2\2\u0f22\u0f23\3\2\2\2\u0f23\u0f26\3\2\2\2\u0f24\u0f22\3\2\2\2\u0f25"+
		"\u0f27\5\u00caf\2\u0f26\u0f25\3\2\2\2\u0f26\u0f27\3\2\2\2\u0f27\u014f"+
		"\3\2\2\2\u0f28\u0f29\7J\2\2\u0f29\u0f2b\5\u0404\u0203\2\u0f2a\u0f2c\7"+
		"\u0153\2\2\u0f2b\u0f2a\3\2\2\2\u0f2b\u0f2c\3\2\2\2\u0f2c\u0f2d\3\2\2\2"+
		"\u0f2d\u0f2e\7\u01f8\2\2\u0f2e\u0f2f\7\31\2\2\u0f2f\u0f30\7\13\2\2\u0f30"+
		"\u0f32\7\u0106\2\2\u0f31\u0f33\7\u00c1\2\2\u0f32\u0f31\3\2\2\2\u0f32\u0f33"+
		"\3\2\2\2\u0f33\u0151\3\2\2\2\u0f34\u0f35\7\u01d6\2\2\u0f35\u0f43\7\u0225"+
		"\2\2\u0f36\u0f37\7J\2\2\u0f37\u0f44\5\u0404\u0203\2\u0f38\u0f3d\7\u0287"+
		"\2\2\u0f39\u0f3b\7\u028d\2\2\u0f3a\u0f39\3\2\2\2\u0f3a\u0f3b\3\2\2\2\u0f3b"+
		"\u0f3c\3\2\2\2\u0f3c\u0f3e\5\u0404\u0203\2\u0f3d\u0f3a\3\2\2\2\u0f3e\u0f3f"+
		"\3\2\2\2\u0f3f\u0f3d\3\2\2\2\u0f3f\u0f40\3\2\2\2\u0f40\u0f41\3\2\2\2\u0f41"+
		"\u0f42\7\u0288\2\2\u0f42\u0f44\3\2\2\2\u0f43\u0f36\3\2\2\2\u0f43\u0f38"+
		"\3\2\2\2\u0f44\u0f4a\3\2\2\2\u0f45\u0f46\7;\2\2\u0f46\u0f49\7[\2\2\u0f47"+
		"\u0f49\7\u00f5\2\2\u0f48\u0f45\3\2\2\2\u0f48\u0f47\3\2\2\2\u0f49\u0f4c"+
		"\3\2\2\2\u0f4a\u0f48\3\2\2\2\u0f4a\u0f4b\3\2\2\2\u0f4b\u0f73\3\2\2\2\u0f4c"+
		"\u0f4a\3\2\2\2\u0f4d\u0f5b\7\u0093\2\2\u0f4e\u0f4f\7J\2\2\u0f4f\u0f5c"+
		"\5\u0404\u0203\2\u0f50\u0f55\7\u0287\2\2\u0f51\u0f53\7\u028d\2\2\u0f52"+
		"\u0f51\3\2\2\2\u0f52\u0f53\3\2\2\2\u0f53\u0f54\3\2\2\2\u0f54\u0f56\5\u0404"+
		"\u0203\2\u0f55\u0f52\3\2\2\2\u0f56\u0f57\3\2\2\2\u0f57\u0f55\3\2\2\2\u0f57"+
		"\u0f58\3\2\2\2\u0f58\u0f59\3\2\2\2\u0f59\u0f5a\7\u0288\2\2\u0f5a\u0f5c"+
		"\3\2\2\2\u0f5b\u0f4e\3\2\2\2\u0f5b\u0f50\3\2\2\2\u0f5c\u0f62\3\2\2\2\u0f5d"+
		"\u0f5e\7;\2\2\u0f5e\u0f61\7[\2\2\u0f5f\u0f61\7\u00f5\2\2\u0f60\u0f5d\3"+
		"\2\2\2\u0f60\u0f5f\3\2\2\2\u0f61\u0f64\3\2\2\2\u0f62\u0f60\3\2\2\2\u0f62"+
		"\u0f63\3\2\2\2\u0f63\u0f67\3\2\2\2\u0f64\u0f62\3\2\2\2\u0f65\u0f66\7B"+
		"\2\2\u0f66\u0f68\7\u0281\2\2\u0f67\u0f65\3\2\2\2\u0f67\u0f68\3\2\2\2\u0f68"+
		"\u0f73\3\2\2\2\u0f69\u0f6e\7\u0093\2\2\u0f6a\u0f6b\7\u0225\2\2\u0f6b\u0f6f"+
		"\7K\2\2\u0f6c\u0f6d\7K\2\2\u0f6d\u0f6f\7_\2\2\u0f6e\u0f6a\3\2\2\2\u0f6e"+
		"\u0f6c\3\2\2\2\u0f6f\u0f70\3\2\2\2\u0f70\u0f71\7B\2\2\u0f71\u0f73\7\u0281"+
		"\2\2\u0f72\u0f34\3\2\2\2\u0f72\u0f4d\3\2\2\2\u0f72\u0f69\3\2\2\2\u0f73"+
		"\u0153\3\2\2\2\u0f74\u0f76\7\u01ab\2\2\u0f75\u0f77\7J\2\2\u0f76\u0f75"+
		"\3\2\2\2\u0f76\u0f77\3\2\2\2\u0f77\u0f78\3\2\2\2\u0f78\u0f79\5\u0156\u00ac"+
		"\2\u0f79\u0f7a\7\u0210\2\2\u0f7a\u0f7b\5\u0158\u00ad\2\u0f7b\u0155\3\2"+
		"\2\2\u0f7c\u0f7d\5\u0404\u0203\2\u0f7d\u0157\3\2\2\2\u0f7e\u0f7f\5\u0404"+
		"\u0203\2\u0f7f\u0159\3\2\2\2\u0f80\u0f81\7\u012f\2\2\u0f81\u0f82\7\u013b"+
		"\2\2\u0f82\u0f83\7\u01ff\2\2\u0f83\u0f84\5\u015c\u00af\2\u0f84\u0f85\7"+
		"\u01b2\2\2\u0f85\u0f86\7\26\2\2\u0f86\u0f87\t\35\2\2\u0f87\u015b\3\2\2"+
		"\2\u0f88\u0f89\5\u0408\u0205\2\u0f89\u015d\3\2\2\2\u0f8a\u0f8b\7\u012f"+
		"\2\2\u0f8b\u0f8c\7\u010f\2\2\u0f8c\u0f8d\7\u0287\2\2\u0f8d\u0f8e\5P)\2"+
		"\u0f8e\u0f8f\7\u0288\2\2\u0f8f\u0f90\7\u0287\2\2\u0f90\u0f91\5\u0160\u00b1"+
		"\2\u0f91\u0f92\7\u0288\2\2\u0f92\u015f\3\2\2\2\u0f93\u0fac\5\u009aN\2"+
		"\u0f94\u0f95\t\'\2\2\u0f95\u0fac\7\u0281\2\2\u0f96\u0f97\7\u019c\2\2\u0f97"+
		"\u0fac\7\u00c5\2\2\u0f98\u0fac\5\u00c2b\2\u0f99\u0fac\5\u00c4c\2\u0f9a"+
		"\u0fac\5\u00c6d\2\u0f9b\u0f9c\7\u009d\2\2\u0f9c\u0fac\5\u00c8e\2\u0f9d"+
		"\u0fac\7\u0080\2\2\u0f9e\u0fac\78\2\2\u0f9f\u0fa4\78\2\2\u0fa0\u0fa4\7"+
		"\u0141\2\2\u0fa1\u0fa2\78\2\2\u0fa2\u0fa4\7\u019a\2\2\u0fa3\u0f9f\3\2"+
		"\2\2\u0fa3\u0fa0\3\2\2\2\u0fa3\u0fa1\3\2\2\2\u0fa4\u0fa6\3\2\2\2\u0fa5"+
		"\u0fa7\5\u009eP\2\u0fa6\u0fa5\3\2\2\2\u0fa6\u0fa7\3\2\2\2\u0fa7\u0fac"+
		"\3\2\2\2\u0fa8\u0fac\5\u0122\u0092\2\u0fa9\u0fac\5\u0136\u009c\2\u0faa"+
		"\u0fac\5\u0124\u0093\2\u0fab\u0f93\3\2\2\2\u0fab\u0f94\3\2\2\2\u0fab\u0f96"+
		"\3\2\2\2\u0fab\u0f98\3\2\2\2\u0fab\u0f99\3\2\2\2\u0fab\u0f9a\3\2\2\2\u0fab"+
		"\u0f9b\3\2\2\2\u0fab\u0f9d\3\2\2\2\u0fab\u0f9e\3\2\2\2\u0fab\u0fa3\3\2"+
		"\2\2\u0fab\u0fa8\3\2\2\2\u0fab\u0fa9\3\2\2\2\u0fab\u0faa\3\2\2\2\u0fac"+
		"\u0fad\3\2\2\2\u0fad\u0fab\3\2\2\2\u0fad\u0fae\3\2\2\2\u0fae\u0161\3\2"+
		"\2\2\u0faf\u0fb0\7\u0093\2\2\u0fb0\u0fb1\7\u00c8\2\2\u0fb1\u0fb2\5\u03f2"+
		"\u01fa\2\u0fb2\u0163\3\2\2\2\u0fb3\u0fb4\7\16\2\2\u0fb4\u0fb5\7\u00c8"+
		"\2\2\u0fb5\u0fb6\5\u03f2\u01fa\2\u0fb6\u0fb8\7R\2\2\u0fb7\u0fb9\7x\2\2"+
		"\u0fb8\u0fb7\3\2\2\2\u0fb8\u0fb9\3\2\2\2\u0fb9\u0fbd\3\2\2\2\u0fba\u0fbc"+
		"\5\u0208\u0105\2\u0fbb\u0fba\3\2\2\2\u0fbc\u0fbf\3\2\2\2\u0fbd\u0fbb\3"+
		"\2\2\2\u0fbd\u0fbe\3\2\2\2\u0fbe\u0fc2\3\2\2\2\u0fbf\u0fbd\3\2\2\2\u0fc0"+
		"\u0fc1\7\u01b4\2\2\u0fc1\u0fc3\7\u01d8\2\2\u0fc2\u0fc0\3\2\2\2\u0fc2\u0fc3"+
		"\3\2\2\2\u0fc3\u0165\3\2\2\2\u0fc4\u0fc7\7e\2\2\u0fc5\u0fc6\7\u0169\2"+
		"\2\u0fc6\u0fc8\7\u01ac\2\2\u0fc7\u0fc5\3\2\2\2\u0fc7\u0fc8\3\2\2\2\u0fc8"+
		"\u0fca\3\2\2\2\u0fc9\u0fc4\3\2\2\2\u0fc9\u0fca\3\2\2\2\u0fca\u0fcb\3\2"+
		"\2\2\u0fcb\u0fcc\7\u00c8\2\2\u0fcc\u0fd8\5\u03f2\u01fa\2\u0fcd\u0fce\7"+
		"\u0287\2\2\u0fce\u0fd3\5\u0214\u010b\2\u0fcf\u0fd0\7\u028d\2\2\u0fd0\u0fd2"+
		"\5\u0214\u010b\2\u0fd1\u0fcf\3\2\2\2\u0fd2\u0fd5\3\2\2\2\u0fd3\u0fd1\3"+
		"\2\2\2\u0fd3\u0fd4\3\2\2\2\u0fd4\u0fd6\3\2\2\2\u0fd5\u0fd3\3\2\2\2\u0fd6"+
		"\u0fd7\7\u0288\2\2\u0fd7\u0fd9\3\2\2\2\u0fd8\u0fcd\3\2\2\2\u0fd8\u0fd9"+
		"\3\2\2\2\u0fd9\u0fda\3\2\2\2\u0fda\u0fdb\7\u01b2\2\2\u0fdb\u0fe2\5\u041a"+
		"\u020e\2\u0fdc\u0fe1\5\u0206\u0104\2\u0fdd\u0fe1\5\u0168\u00b5\2\u0fde"+
		"\u0fe1\5\u016c\u00b7\2\u0fdf\u0fe1\7\u008b\2\2\u0fe0\u0fdc\3\2\2\2\u0fe0"+
		"\u0fdd\3\2\2\2\u0fe0\u0fde\3\2\2\2\u0fe0\u0fdf\3\2\2\2\u0fe1\u0fe4\3\2"+
		"\2\2\u0fe2\u0fe0\3\2\2\2\u0fe2\u0fe3\3\2\2\2\u0fe3\u0ff9\3\2\2\2\u0fe4"+
		"\u0fe2\3\2\2\2\u0fe5\u0fe7\7\u0182\2\2\u0fe6\u0fe5\3\2\2\2\u0fe6\u0fe7"+
		"\3\2\2\2\u0fe7\u0fe8\3\2\2\2\u0fe8\u0ff4\t(\2\2\u0fe9\u0feb\7|\2\2\u0fea"+
		"\u0fe9\3\2\2\2\u0fea\u0feb\3\2\2\2\u0feb\u0fef\3\2\2\2\u0fec\u0fee\5\u0218"+
		"\u010d\2\u0fed\u0fec\3\2\2\2\u0fee\u0ff1\3\2\2\2\u0fef\u0fed\3\2\2\2\u0fef"+
		"\u0ff0\3\2\2\2\u0ff0\u0ff2\3\2\2\2\u0ff1\u0fef\3\2\2\2\u0ff2\u0ff5\5\u0262"+
		"\u0132\2\u0ff3\u0ff5\5\u020a\u0106\2\u0ff4\u0fea\3\2\2\2\u0ff4\u0ff3\3"+
		"\2\2\2\u0ff5\u0ffa\3\2\2\2\u0ff6\u0ff7\t)\2\2\u0ff7\u0ff8\7\u022c\2\2"+
		"\u0ff8\u0ffa\5\u03dc\u01ef\2\u0ff9\u0fe6\3\2\2\2\u0ff9\u0ff6\3\2\2\2\u0ffa"+
		"\u0167\3\2\2\2\u0ffb\u0ffd\7\u0175\2\2\u0ffc\u0ffe\5\u016a\u00b6\2\u0ffd"+
		"\u0ffc\3\2\2\2\u0ffd\u0ffe\3\2\2\2\u0ffe\u0169\3\2\2\2\u0fff\u1000\7\u0287"+
		"\2\2\u1000\u1001\7\u0178\2\2\u1001\u1002\5\u0346\u01a4\2\u1002\u1010\7"+
		"\65\2\2\u1003\u1011\7\22\2\2\u1004\u1005\t*\2\2\u1005\u1006\7\u0287\2"+
		"\2\u1006\u100b\5\u0404\u0203\2\u1007\u1008\7\u028d\2\2\u1008\u100a\5\u0404"+
		"\u0203\2\u1009\u1007\3\2\2\2\u100a\u100d\3\2\2\2\u100b\u1009\3\2\2\2\u100b"+
		"\u100c\3\2\2\2\u100c\u100e\3\2\2\2\u100d\u100b\3\2\2\2\u100e\u100f\7\u0288"+
		"\2\2\u100f\u1011\3\2\2\2\u1010\u1003\3\2\2\2\u1010\u1004\3\2\2\2\u1011"+
		"\u1013\3\2\2\2\u1012\u1014\5\u0170\u00b9\2\u1013\u1012\3\2\2\2\u1013\u1014"+
		"\3\2\2\2\u1014\u1015\3\2\2\2\u1015\u1016\7\u0288\2\2\u1016\u016b\3\2\2"+
		"\2\u1017\u1019\7\u01b0\2\2\u1018\u101a\5\u016e\u00b8\2\u1019\u1018\3\2"+
		"\2\2\u1019\u101a\3\2\2\2\u101a\u016d\3\2\2\2\u101b\u101c\7\u01a9\2\2\u101c"+
		"\u101d\7\u0287\2\2\u101d\u1022\5\u0408\u0205\2\u101e\u101f\7\u028d\2\2"+
		"\u101f\u1021\5\u0408\u0205\2\u1020\u101e\3\2\2\2\u1021\u1024\3\2\2\2\u1022"+
		"\u1020\3\2\2\2\u1022\u1023\3\2\2\2\u1023\u1025\3\2\2\2\u1024\u1022\3\2"+
		"\2\2\u1025\u1026\7\u0288\2\2\u1026\u016f\3\2\2\2\u1027\u1028\t+\2\2\u1028"+
		"\u1029\5\u0346\u01a4\2\u1029\u102a\7\65\2\2\u102a\u102b\7\u0287\2\2\u102b"+
		"\u1030\5\u0404\u0203\2\u102c\u102d\7\u028d\2\2\u102d\u102f\5\u0404\u0203"+
		"\2\u102e\u102c\3\2\2\2\u102f\u1032\3\2\2\2\u1030\u102e\3\2\2\2\u1030\u1031"+
		"\3\2\2\2\u1031\u1033\3\2\2\2\u1032\u1030\3\2\2\2\u1033\u1034\7\u0288\2"+
		"\2\u1034\u0171\3\2\2\2\u1035\u1036\7\u0093\2\2\u1036\u1038\7\u0173\2\2"+
		"\u1037\u1039\7\60\2\2\u1038\u1037\3\2\2\2\u1038\u1039\3\2\2\2\u1039\u103a"+
		"\3\2\2\2\u103a\u103b\5\u03da\u01ee\2\u103b\u0173\3\2\2\2\u103c\u103d\7"+
		"\16\2\2\u103d\u103e\7\u0173\2\2\u103e\u103f\5\u03da\u01ee\2\u103f\u1041"+
		"\7R\2\2\u1040\u1042\7x\2\2\u1041\u1040\3\2\2\2\u1041\u1042\3\2\2\2\u1042"+
		"\u1044\3\2\2\2\u1043\u1045\t,\2\2\u1044\u1043\3\2\2\2\u1044\u1045\3\2"+
		"\2\2\u1045\u1049\3\2\2\2\u1046\u1048\5\u0208\u0105\2\u1047\u1046\3\2\2"+
		"\2\u1048\u104b\3\2\2\2\u1049\u1047\3\2\2\2\u1049\u104a\3\2\2\2\u104a\u104e"+
		"\3\2\2\2\u104b\u1049\3\2\2\2\u104c\u104d\7\u01b4\2\2\u104d\u104f\7\u01d8"+
		"\2\2\u104e\u104c\3\2\2\2\u104e\u104f\3\2\2\2\u104f\u0175\3\2\2\2\u1050"+
		"\u1053\7e\2\2\u1051\u1052\7\u0169\2\2\u1052\u1054\7\u01ac\2\2\u1053\u1051"+
		"\3\2\2\2\u1053\u1054\3\2\2\2\u1054\u1055\3\2\2\2\u1055\u1058\7\u0173\2"+
		"\2\u1056\u1059\5\u017a\u00be\2\u1057\u1059\5\u0178\u00bd\2\u1058\u1056"+
		"\3\2\2\2\u1058\u1057\3\2\2\2\u1058\u1059\3\2\2\2\u1059\u0177\3\2\2\2\u105a"+
		"\u105b\7\60\2\2\u105b\u105c\5\u03da\u01ee\2\u105c\u1060\t(\2\2\u105d\u105f"+
		"\5\u0182\u00c2\2\u105e\u105d\3\2\2\2\u105f\u1062\3\2\2\2\u1060\u105e\3"+
		"\2\2\2\u1060\u1061\3\2\2\2\u1061\u1069\3\2\2\2\u1062\u1060\3\2\2\2\u1063"+
		"\u1064\7$\2\2\u1064\u106a\5\u0238\u011d\2\u1065\u1067\7\u009e\2\2\u1066"+
		"\u1068\5\u03da\u01ee\2\u1067\u1066\3\2\2\2\u1067\u1068\3\2\2\2\u1068\u106a"+
		"\3\2\2\2\u1069\u1063\3\2\2\2\u1069\u1065\3\2\2\2\u106a\u0179\3\2\2\2\u106b"+
		"\u106d\5\u03da\u01ee\2\u106c\u106e\5\u0206\u0104\2\u106d\u106c\3\2\2\2"+
		"\u106d\u106e\3\2\2\2\u106e\u106f\3\2\2\2\u106f\u1073\t(\2\2\u1070\u1072"+
		"\5\u017c\u00bf\2\u1071\u1070\3\2\2\2\u1072\u1075\3\2\2\2\u1073\u1071\3"+
		"\2\2\2\u1073\u1074\3\2\2\2\u1074\u1076\3\2\2\2\u1075\u1073\3\2\2\2\u1076"+
		"\u1078\7\u009e\2\2\u1077\u1079\5\u03da\u01ee\2\u1078\u1077\3\2\2\2\u1078"+
		"\u1079\3\2\2\2\u1079\u017b\3\2\2\2\u107a\u1084\5\u021a\u010e\2\u107b\u1084"+
		"\5\u021c\u010f\2\u107c\u1084\5\u021e\u0110\2\u107d\u1084\5\u0222\u0112"+
		"\2\u107e\u1084\5\u0224\u0113\2\u107f\u1084\5\u0226\u0114\2\u1080\u1084"+
		"\5\u022e\u0118\2\u1081\u1084\5\u017e\u00c0\2\u1082\u1084\5\u0180\u00c1"+
		"\2\u1083\u107a\3\2\2\2\u1083\u107b\3\2\2\2\u1083\u107c\3\2\2\2\u1083\u107d"+
		"\3\2\2\2\u1083\u107e\3\2\2\2\u1083\u107f\3\2\2\2\u1083\u1080\3\2\2\2\u1083"+
		"\u1081\3\2\2\2\u1083\u1082\3\2\2\2\u1084\u017d\3\2\2\2\u1085\u1086\7\u0192"+
		"\2\2\u1086\u1092\5\u03f4\u01fb\2\u1087\u1088\7\u0287\2\2\u1088\u108d\5"+
		"\u0214\u010b\2\u1089\u108a\7\u028d\2\2\u108a\u108c\5\u0214\u010b\2\u108b"+
		"\u1089\3\2\2\2\u108c\u108f\3\2\2\2\u108d\u108b\3\2\2\2\u108d\u108e\3\2"+
		"\2\2\u108e\u1090\3\2\2\2\u108f\u108d\3\2\2\2\u1090\u1091\7\u0288\2\2\u1091"+
		"\u1093\3\2\2\2\u1092\u1087\3\2\2\2\u1092\u1093\3\2\2\2\u1093\u1094\3\2"+
		"\2\2\u1094\u1095\7\u0293\2\2\u1095\u017f\3\2\2\2\u1096\u1097\7\u00c8\2"+
		"\2\u1097\u10a3\5\u03f2\u01fa\2\u1098\u1099\7\u0287\2\2\u1099\u109e\5\u0214"+
		"\u010b\2\u109a\u109b\7\u028d\2\2\u109b\u109d\5\u0214\u010b\2\u109c\u109a"+
		"\3\2\2\2\u109d\u10a0\3\2\2\2\u109e\u109c\3\2\2\2\u109e\u109f\3\2\2\2\u109f"+
		"\u10a1\3\2\2\2\u10a0\u109e\3\2\2\2\u10a1\u10a2\7\u0288\2\2\u10a2\u10a4"+
		"\3\2\2\2\u10a3\u1098\3\2\2\2\u10a3\u10a4\3\2\2\2\u10a4\u10a5\3\2\2\2\u10a5"+
		"\u10a6\7\u01b2\2\2\u10a6\u10a8\5\u041a\u020e\2\u10a7\u10a9\7\u008b\2\2"+
		"\u10a8\u10a7\3\2\2\2\u10a8\u10a9\3\2\2\2\u10a9\u10ab\3\2\2\2\u10aa\u10ac"+
		"\7\u01b0\2\2\u10ab\u10aa\3\2\2\2\u10ab\u10ac\3\2\2\2\u10ac\u10ad\3\2\2"+
		"\2\u10ad\u10ae\7\u0293\2\2\u10ae\u0181\3\2\2\2\u10af\u10ba\5\u021a\u010e"+
		"\2\u10b0\u10ba\5\u021c\u010f\2\u10b1\u10ba\5\u021e\u0110\2\u10b2\u10ba"+
		"\5\u0222\u0112\2\u10b3\u10ba\5\u0226\u0114\2\u10b4\u10ba\5\u022e\u0118"+
		"\2\u10b5\u10ba\5\u0188\u00c5\2\u10b6\u10ba\5\u0166\u00b4\2\u10b7\u10ba"+
		"\5\u017e\u00c0\2\u10b8\u10ba\5\u0180\u00c1\2\u10b9\u10af\3\2\2\2\u10b9"+
		"\u10b0\3\2\2\2\u10b9\u10b1\3\2\2\2\u10b9\u10b2\3\2\2\2\u10b9\u10b3\3\2"+
		"\2\2\u10b9\u10b4\3\2\2\2\u10b9\u10b5\3\2\2\2\u10b9\u10b6\3\2\2\2\u10b9"+
		"\u10b7\3\2\2\2\u10b9\u10b8\3\2\2\2\u10ba\u0183\3\2\2\2\u10bb\u10bc\7\u0093"+
		"\2\2\u10bc\u10bd\7\u0192\2\2\u10bd\u10be\5\u03f4\u01fb\2\u10be\u0185\3"+
		"\2\2\2\u10bf\u10c0\7\16\2\2\u10c0\u10c1\7\u0192\2\2\u10c1\u10c2\5\u03f4"+
		"\u01fb\2\u10c2\u10c4\7R\2\2\u10c3\u10c5\7x\2\2\u10c4\u10c3\3\2\2\2\u10c4"+
		"\u10c5\3\2\2\2\u10c5\u10c9\3\2\2\2\u10c6\u10c8\5\u0208\u0105\2\u10c7\u10c6"+
		"\3\2\2\2\u10c8\u10cb\3\2\2\2\u10c9\u10c7\3\2\2\2\u10c9\u10ca\3\2\2\2\u10ca"+
		"\u10ce\3\2\2\2\u10cb\u10c9\3\2\2\2\u10cc\u10cd\7\u01b4\2\2\u10cd\u10cf"+
		"\7\u01d8\2\2\u10ce\u10cc\3\2\2\2\u10ce\u10cf\3\2\2\2\u10cf\u0187\3\2\2"+
		"\2\u10d0\u10d3\7e\2\2\u10d1\u10d2\7\u0169\2\2\u10d2\u10d4\7\u01ac\2\2"+
		"\u10d3\u10d1\3\2\2\2\u10d3\u10d4\3\2\2\2\u10d4\u10d6\3\2\2\2\u10d5\u10d0"+
		"\3\2\2\2\u10d5\u10d6\3\2\2\2\u10d6\u10d7\3\2\2\2\u10d7\u10d8\7\u0192\2"+
		"\2\u10d8\u10e4\5\u03f4\u01fb\2\u10d9\u10da\7\u0287\2\2\u10da\u10df\5\u0214"+
		"\u010b\2\u10db\u10dc\7\u028d\2\2\u10dc\u10de\5\u0214\u010b\2\u10dd\u10db"+
		"\3\2\2\2\u10de\u10e1\3\2\2\2\u10df\u10dd\3\2\2\2\u10df\u10e0\3\2\2\2\u10e0"+
		"\u10e2\3\2\2\2\u10e1\u10df\3\2\2\2\u10e2\u10e3\7\u0288\2\2\u10e3\u10e5"+
		"\3\2\2\2\u10e4\u10d9\3\2\2\2\u10e4\u10e5\3\2\2\2\u10e5\u10e7\3\2\2\2\u10e6"+
		"\u10e8\5\u0206\u0104\2\u10e7\u10e6\3\2\2\2\u10e7\u10e8\3\2\2\2\u10e8\u10e9"+
		"\3\2\2\2\u10e9\u10f6\t(\2\2\u10ea\u10ec\7|\2\2\u10eb\u10ea\3\2\2\2\u10eb"+
		"\u10ec\3\2\2\2\u10ec\u10f0\3\2\2\2\u10ed\u10ef\5\u0218\u010d\2\u10ee\u10ed"+
		"\3\2\2\2\u10ef\u10f2\3\2\2\2\u10f0\u10ee\3\2\2\2\u10f0\u10f1\3\2\2\2\u10f1"+
		"\u10f3\3\2\2\2\u10f2\u10f0\3\2\2\2\u10f3\u10f7\5\u0262\u0132\2\u10f4\u10f7"+
		"\5\u020a\u0106\2\u10f5\u10f7\7\u00b0\2\2\u10f6\u10eb\3\2\2\2\u10f6\u10f4"+
		"\3\2\2\2\u10f6\u10f5\3\2\2\2\u10f7\u0189\3\2\2\2\u10f8\u10f9\7\u0093\2"+
		"\2\u10f9\u10fa\7\u0217\2\2\u10fa\u10fb\5\u03f6\u01fc\2\u10fb\u018b\3\2"+
		"\2\2\u10fc\u10fd\7\16\2\2\u10fd\u10fe\7\u0217\2\2\u10fe\u1111\5\u03f6"+
		"\u01fc\2\u10ff\u1112\t\6\2\2\u1100\u1101\7\u01ab\2\2\u1101\u1102\7\u0210"+
		"\2\2\u1102\u1112\5\u03f6\u01fc\2\u1103\u1105\7R\2\2\u1104\u1106\7x\2\2"+
		"\u1105\u1104\3\2\2\2\u1105\u1106\3\2\2\2\u1106\u110a\3\2\2\2\u1107\u1109"+
		"\5\u0208\u0105\2\u1108\u1107\3\2\2\2\u1109\u110c\3\2\2\2\u110a\u1108\3"+
		"\2\2\2\u110a\u110b\3\2\2\2\u110b\u110f\3\2\2\2\u110c\u110a\3\2\2\2\u110d"+
		"\u110e\7\u01b4\2\2\u110e\u1110\7\u01d8\2\2\u110f\u110d\3\2\2\2\u110f\u1110"+
		"\3\2\2\2\u1110\u1112\3\2\2\2\u1111\u10ff\3\2\2\2\u1111\u1100\3\2\2\2\u1111"+
		"\u1103\3\2\2\2\u1112\u018d\3\2\2\2\u1113\u1116\7e\2\2\u1114\u1115\7\u0169"+
		"\2\2\u1115\u1117\7\u01ac\2\2\u1116\u1114\3\2\2\2\u1116\u1117\3\2\2\2\u1117"+
		"\u1118\3\2\2\2\u1118\u1119\7\u0217\2\2\u1119\u111d\5\u03f6\u01fc\2\u111a"+
		"\u111e\5\u0194\u00cb\2\u111b\u111e\5\u0198\u00cd\2\u111c\u111e\5\u019a"+
		"\u00ce\2\u111d\u111a\3\2\2\2\u111d\u111b\3\2\2\2\u111d\u111c\3\2\2\2\u111e"+
		"\u1120\3\2\2\2\u111f\u1121\5\u0190\u00c9\2\u1120\u111f\3\2\2\2\u1120\u1121"+
		"\3\2\2\2\u1121\u1123\3\2\2\2\u1122\u1124\t\6\2\2\u1123\u1122\3\2\2\2\u1123"+
		"\u1124\3\2\2\2\u1124\u1126\3\2\2\2\u1125\u1127\5\u0192\u00ca\2\u1126\u1125"+
		"\3\2\2\2\u1126\u1127\3\2\2\2\u1127\u1128\3\2\2\2\u1128\u1129\5\u019c\u00cf"+
		"\2\u1129\u018f\3\2\2\2\u112a\u112b\7\u00be\2\2\u112b\u1130\5\u03f6\u01fc"+
		"\2\u112c\u112d\7\u028d\2\2\u112d\u112f\5\u03f6\u01fc\2\u112e\u112c\3\2"+
		"\2\2\u112f\u1132\3\2\2\2\u1130\u112e\3\2\2\2\u1130\u1131\3\2\2\2\u1131"+
		"\u0191\3\2\2\2\u1132\u1130\3\2\2\2\u1133\u1134\7\u023f\2\2\u1134\u1135"+
		"\7\u0287\2\2\u1135\u1136\5\u0344\u01a3\2\u1136\u1137\7\u0288\2\2\u1137"+
		"\u0193\3\2\2\2\u1138\u113d\7#\2\2\u1139\u113d\7\b\2\2\u113a\u113b\7\u00ef"+
		"\2\2\u113b\u113d\7\u015e\2\2\u113c\u1138\3\2\2\2\u113c\u1139\3\2\2\2\u113c"+
		"\u113a\3\2\2\2\u113d\u113e\3\2\2\2\u113e\u1140\5\u01a6\u00d4\2\u113f\u1141"+
		"\5\u01ac\u00d7\2\u1140\u113f\3\2\2\2\u1140\u1141\3\2\2\2\u1141\u1143\3"+
		"\2\2\2\u1142\u1144\5\u0196\u00cc\2\u1143\u1142\3\2\2\2\u1143\u1144\3\2"+
		"\2\2\u1144\u0195\3\2\2\2\u1145\u1146\7\u00bf\2\2\u1146\u1147\7\u0095\2"+
		"\2\u1147\u1148\7\u01bc\2\2\u1148\u0197\3\2\2\2\u1149\u114a\7\u00bf\2\2"+
		"\u114a\u114c\5\u01a6\u00d4\2\u114b\u114d\5\u01ac\u00d7\2\u114c\u114b\3"+
		"\2\2\2\u114c\u114d\3\2\2\2\u114d\u0199\3\2\2\2\u114e\u114f\t-\2\2\u114f"+
		"\u1154\5\u01a4\u00d3\2\u1150\u1151\7\u0169\2\2\u1151\u1153\5\u01a4\u00d3"+
		"\2\u1152\u1150\3\2\2\2\u1153\u1156\3\2\2\2\u1154\u1152\3\2\2\2\u1154\u1155"+
		"\3\2\2\2\u1155\u1157\3\2\2\2\u1156\u1154\3\2\2\2\u1157\u115f\7\u0164\2"+
		"\2\u1158\u1160\7q\2\2\u1159\u115a\5\u03d6\u01ec\2\u115a\u115b\7\u0280"+
		"\2\2\u115b\u115d\3\2\2\2\u115c\u1159\3\2\2\2\u115c\u115d\3\2\2\2\u115d"+
		"\u115e\3\2\2\2\u115e\u1160\7\u01c5\2\2\u115f\u1158\3\2\2\2\u115f\u115c"+
		"\3\2\2\2\u1160\u019b\3\2\2\2\u1161\u1162\7T\2\2\u1162\u1167\7\u0217\2"+
		"\2\u1163\u1164\79\2\2\u1164\u1167\5\u0430\u0219\2\u1165\u1167\5\u0266"+
		"\u0134\2\u1166\u1161\3\2\2\2\u1166\u1163\3\2\2\2\u1166\u1165\3\2\2\2\u1167"+
		"\u019d\3\2\2\2\u1168\u116a\5\u03d8\u01ed\2\u1169\u116b\5\u0410\u0209\2"+
		"\u116a\u1169\3\2\2\2\u116a\u116b\3\2\2\2\u116b\u019f\3\2\2\2\u116c\u116d"+
		"\7T\2\2\u116d\u1171\7\u0217\2\2\u116e\u1170\5\u0218\u010d\2\u116f\u116e"+
		"\3\2\2\2\u1170\u1173\3\2\2\2\u1171\u116f\3\2\2\2\u1171\u1172\3\2\2\2\u1172"+
		"\u1175\3\2\2\2\u1173\u1171\3\2\2\2\u1174\u1176\5\u01a2\u00d2\2\u1175\u1174"+
		"\3\2\2\2\u1176\u1177\3\2\2\2\u1177\u1175\3\2\2\2\u1177\u1178\3\2\2\2\u1178"+
		"\u1179\3\2\2\2\u1179\u117a\7\u009e\2\2\u117a\u117b\5\u03f6\u01fc\2\u117b"+
		"\u01a1\3\2\2\2\u117c\u117d\7#\2\2\u117d\u117e\7\u01ee\2\2\u117e\u117f"+
		"\7\u00f7\2\2\u117f\u1180\5\u0266\u0134\2\u1180\u1181\7#\2\2\u1181\u1182"+
		"\7\u01ee\2\2\u1182\u1183\7\u0293\2\2\u1183\u11a1\3\2\2\2\u1184\u1185\7"+
		"#\2\2\u1185\u1186\7\u0095\2\2\u1186\u1187\7\u01bc\2\2\u1187\u1188\7\u00f7"+
		"\2\2\u1188\u1189\5\u0266\u0134\2\u1189\u118a\7#\2\2\u118a\u118b\7\u0095"+
		"\2\2\u118b\u118c\7\u01bc\2\2\u118c\u118d\7\u0293\2\2\u118d\u11a1\3\2\2"+
		"\2\u118e\u118f\7\b\2\2\u118f\u1190\7\u01ee\2\2\u1190\u1191\7\u00f7\2\2"+
		"\u1191\u1192\5\u0266\u0134\2\u1192\u1193\7\b\2\2\u1193\u1194\7\u01ee\2"+
		"\2\u1194\u1195\7\u0293\2\2\u1195\u11a1\3\2\2\2\u1196\u1197\7\b\2\2\u1197"+
		"\u1198\7\u0095\2\2\u1198\u1199\7\u01bc\2\2\u1199\u119a\7\u00f7\2\2\u119a"+
		"\u119b\5\u0266\u0134\2\u119b\u119c\7\b\2\2\u119c\u119d\7\u0095\2\2\u119d"+
		"\u119e\7\u01bc\2\2\u119e\u119f\7\u0293\2\2\u119f\u11a1\3\2\2\2\u11a0\u117c"+
		"\3\2\2\2\u11a0\u1184\3\2\2\2\u11a0\u118e\3\2\2\2\u11a0\u1196\3\2\2\2\u11a1"+
		"\u01a3\3\2\2\2\u11a2\u11bd\7\16\2\2\u11a3\u11bd\7\20\2\2\u11a4\u11a5\7"+
		"\30\2\2\u11a5\u11bd\7\u01f1\2\2\u11a6\u11bd\7\33\2\2\u11a7\u11bd\7M\2"+
		"\2\u11a8\u11bd\7e\2\2\u11a9\u11aa\7\u008f\2\2\u11aa\u11bd\7\u01f1\2\2"+
		"\u11ab\u11bd\7\u0093\2\2\u11ac\u11bd\7\u00cc\2\2\u11ad\u11bd\7\u0140\2"+
		"\2\u11ae\u11bd\7\u01ab\2\2\u11af\u11bd\7\u01b6\2\2\u11b0\u11bd\7\u021a"+
		"\2\2\u11b1\u11bd\7w\2\2\u11b2\u11bd\7\u01ed\2\2\u11b3\u11bd\7\u01dc\2"+
		"\2\u11b4\u11bd\7u\2\2\u11b5\u11bd\7\u0118\2\2\u11b6\u11bd\7\u0116\2\2"+
		"\u11b7\u11bd\7\u01d4\2\2\u11b8\u11bd\7\u01fd\2\2\u11b9\u11bd\7q\2\2\u11ba"+
		"\u11bd\7\u01c5\2\2\u11bb\u11bd\7\u00be\2\2\u11bc\u11a2\3\2\2\2\u11bc\u11a3"+
		"\3\2\2\2\u11bc\u11a4\3\2\2\2\u11bc\u11a6\3\2\2\2\u11bc\u11a7\3\2\2\2\u11bc"+
		"\u11a8\3\2\2\2\u11bc\u11a9\3\2\2\2\u11bc\u11ab\3\2\2\2\u11bc\u11ac\3\2"+
		"\2\2\u11bc\u11ad\3\2\2\2\u11bc\u11ae\3\2\2\2\u11bc\u11af\3\2\2\2\u11bc"+
		"\u11b0\3\2\2\2\u11bc\u11b1\3\2\2\2\u11bc\u11b2\3\2\2\2\u11bc\u11b3\3\2"+
		"\2\2\u11bc\u11b4\3\2\2\2\u11bc\u11b5\3\2\2\2\u11bc\u11b6\3\2\2\2\u11bc"+
		"\u11b7\3\2\2\2\u11bc\u11b8\3\2\2\2\u11bc\u11b9\3\2\2\2\u11bc\u11ba\3\2"+
		"\2\2\u11bc\u11bb\3\2\2\2\u11bd\u01a5\3\2\2\2\u11be\u11c3\5\u01a8\u00d5"+
		"\2\u11bf\u11c0\7\u0169\2\2\u11c0\u11c2\5\u01a8\u00d5\2\u11c1\u11bf\3\2"+
		"\2\2\u11c2\u11c5\3\2\2\2\u11c3\u11c1\3\2\2\2\u11c3\u11c4\3\2\2\2\u11c4"+
		"\u11c6\3\2\2\2\u11c5\u11c3\3\2\2\2\u11c6\u11c8\7\u0164\2\2\u11c7\u11c9"+
		"\5\u01aa\u00d6\2\u11c8\u11c7\3\2\2\2\u11c8\u11c9\3\2\2\2\u11c9\u11ca\3"+
		"\2\2\2\u11ca\u11cb\5\u0408\u0205\2\u11cb\u01a7\3\2\2\2\u11cc\u11d6\t."+
		"\2\2\u11cd\u11ce\7\u015e\2\2\u11ce\u11d3\5\u0404\u0203\2\u11cf\u11d0\7"+
		"\u028d\2\2\u11d0\u11d2\5\u0404\u0203\2\u11d1\u11cf\3\2\2\2\u11d2\u11d5"+
		"\3\2\2\2\u11d3\u11d1\3\2\2\2\u11d3\u11d4\3\2\2\2\u11d4\u11d7\3\2\2\2\u11d5"+
		"\u11d3\3\2\2\2\u11d6\u11cd\3\2\2\2\u11d6\u11d7\3\2\2\2\u11d7\u01a9\3\2"+
		"\2\2\u11d8\u11d9\7\u013b\2\2\u11d9\u11da\7\u01ff\2\2\u11da\u11db\5\u0408"+
		"\u0205\2\u11db\u11dc\7\u015e\2\2\u11dc\u01ab\3\2\2\2\u11dd\u11df\7\u01a4"+
		"\2\2\u11de\u11e0\5\u01ae\u00d8\2\u11df\u11de\3\2\2\2\u11e0\u11e1\3\2\2"+
		"\2\u11e1\u11df\3\2\2\2\u11e1\u11e2\3\2\2\2\u11e2\u01ad\3\2\2\2\u11e3\u11e4"+
		"\t/\2\2\u11e4\u11e5\5\u03be\u01e0\2\u11e5\u01af\3\2\2\2\u11e6\u11e7\7"+
		"\u0093\2\2\u11e7\u11e9\7\u021c\2\2\u11e8\u11ea\7\60\2\2\u11e9\u11e8\3"+
		"\2\2\2\u11e9\u11ea\3\2\2\2\u11ea\u11eb\3\2\2\2\u11eb\u11ed\5\u03ec\u01f7"+
		"\2\u11ec\u11ee\t\60\2\2\u11ed\u11ec\3\2\2\2\u11ed\u11ee\3\2\2\2\u11ee"+
		"\u01b1\3\2\2\2\u11ef\u11f0\7\16\2\2\u11f0\u11f1\7\u021c\2\2\u11f1\u11f7"+
		"\5\u03ec\u01f7\2\u11f2\u11f8\5\u01b4\u00db\2\u11f3\u11f8\5\u01b6\u00dc"+
		"\2\u11f4\u11f8\5\u01b8\u00dd\2\u11f5\u11f8\5\u01c0\u00e1\2\u11f6\u11f8"+
		"\5\u01e2\u00f2\2\u11f7\u11f2\3\2\2\2\u11f7\u11f3\3\2\2\2\u11f7\u11f4\3"+
		"\2\2\2\u11f7\u11f5\3\2\2\2\u11f7\u11f6\3\2\2\2\u11f8\u11fa\3\2\2\2\u11f9"+
		"\u11fb\5\u01c2\u00e2\2\u11fa\u11f9\3\2\2\2\u11fa\u11fb\3\2\2\2\u11fb\u01b3"+
		"\3\2\2\2\u11fc\u11fe\7R\2\2\u11fd\u11ff\7x\2\2\u11fe\u11fd\3\2\2\2\u11fe"+
		"\u11ff\3\2\2\2\u11ff\u1201\3\2\2\2\u1200\u1202\t\61\2\2\u1201\u1200\3"+
		"\2\2\2\u1201\u1202\3\2\2\2\u1202\u1206\3\2\2\2\u1203\u1205\5\u0208\u0105"+
		"\2\u1204\u1203\3\2\2\2\u1205\u1208\3\2\2\2\u1206\u1204\3\2\2\2\u1206\u1207"+
		"\3\2\2\2\u1207\u120b\3\2\2\2\u1208\u1206\3\2\2\2\u1209\u120a\7\u01b4\2"+
		"\2\u120a\u120c\7\u01d8\2\2\u120b\u1209\3\2\2\2\u120b\u120c\3\2\2\2\u120c"+
		"\u01b5\3\2\2\2\u120d\u120f\7\u01ac\2\2\u120e\u1210\5\u0206\u0104\2\u120f"+
		"\u120e\3\2\2\2\u120f\u1210\3\2\2\2\u1210\u1211\3\2\2\2\u1211\u1212\7\26"+
		"\2\2\u1212\u1213\7\u015d\2\2\u1213\u1214\7\u0287\2\2\u1214\u1219\5\u01e4"+
		"\u00f3\2\u1215\u1216\7\u028d\2\2\u1216\u1218\5\u01e4\u00f3\2\u1217\u1215"+
		"\3\2\2\2\u1218\u121b\3\2\2\2\u1219\u1217\3\2\2\2\u1219\u121a\3\2\2\2\u121a"+
		"\u121c\3\2\2\2\u121b\u1219\3\2\2\2\u121c\u121d\7\u0288\2\2\u121d\u01b7"+
		"\3\2\2\2\u121e\u1223\5\u01ba\u00de\2\u121f\u1220\7\u028d\2\2\u1220\u1222"+
		"\5\u01ba\u00de\2\u1221\u121f\3\2\2\2\u1222\u1225\3\2\2\2\u1223\u1221\3"+
		"\2\2\2\u1223\u1224\3\2\2\2\u1224\u01b9\3\2\2\2\u1225\u1223\3\2\2\2\u1226"+
		"\u1229\t\62\2\2\u1227\u122a\5\u01f4\u00fb\2\u1228\u122a\5\u01ec\u00f7"+
		"\2\u1229\u1227\3\2\2\2\u1229\u1228\3\2\2\2\u122a\u01bb\3\2\2\2\u122b\u122c"+
		"\t\63\2\2\u122c\u1239\7\32\2\2\u122d\u123a\5\u01be\u00e0\2\u122e\u122f"+
		"\7\u0287\2\2\u122f\u1234\5\u01be\u00e0\2\u1230\u1231\7\u028d\2\2\u1231"+
		"\u1233\5\u01be\u00e0\2\u1232\u1230\3\2\2\2\u1233\u1236\3\2\2\2\u1234\u1232"+
		"\3\2\2\2\u1234\u1235\3\2\2\2\u1235\u1237\3\2\2\2\u1236\u1234\3\2\2\2\u1237"+
		"\u1238\7\u0288\2\2\u1238\u123a\3\2\2\2\u1239\u122d\3\2\2\2\u1239\u122e"+
		"\3\2\2\2\u123a\u01bd\3\2\2\2\u123b\u123d\5\u03ce\u01e8\2\u123c\u123e\5"+
		"\u041a\u020e\2\u123d\u123c\3\2\2\2\u123d\u123e\3\2\2\2\u123e\u01bf\3\2"+
		"\2\2\u123f\u1245\7\u012f\2\2\u1240\u1241\7\u010c\2\2\u1241\u1246\5\u0346"+
		"\u01a4\2\u1242\u1243\7\u0097\2\2\u1243\u1244\7\u021c\2\2\u1244\u1246\5"+
		"\u041a\u020e\2\u1245\u1240\3\2\2\2\u1245\u1242\3\2\2\2\u1246\u01c1\3\2"+
		"\2\2\u1247\u1258\7\u00f5\2\2\u1248\u1252\7;\2\2\u1249\u124a\7`\2\2\u124a"+
		"\u124b\7\u0210\2\2\u124b\u1253\7\u01f8\2\2\u124c\u124e\7\u0153\2\2\u124d"+
		"\u124c\3\2\2\2\u124d\u124e\3\2\2\2\u124e\u124f\3\2\2\2\u124f\u1250\7\u00dd"+
		"\2\2\u1250\u1251\7\u01ff\2\2\u1251\u1253\7p\2\2\u1252\u1249\3\2\2\2\u1252"+
		"\u124d\3\2\2\2\u1252\u1253\3\2\2\2\u1253\u1255\3\2\2\2\u1254\u1256\5\u01c4"+
		"\u00e3\2\u1255\u1254\3\2\2\2\u1255\u1256\3\2\2\2\u1256\u1258\3\2\2\2\u1257"+
		"\u1247\3\2\2\2\u1257\u1248\3\2\2\2\u1258\u01c3\3\2\2\2\u1259\u125b\7\u00c1"+
		"\2\2\u125a\u1259\3\2\2\2\u125a\u125b\3\2\2\2\u125b\u125c\3\2\2\2\u125c"+
		"\u125d\7\u00a8\2\2\u125d\u125e\7\u00f4\2\2\u125e\u125f\5\u0408\u0205\2"+
		"\u125f\u01c5\3\2\2\2\u1260\u1263\7e\2\2\u1261\u1262\7\u0169\2\2\u1262"+
		"\u1264\7\u01ac\2\2\u1263\u1261\3\2\2\2\u1263\u1264\3\2\2\2\u1264\u1265"+
		"\3\2\2\2\u1265\u1268\7\u021c\2\2\u1266\u1269\5\u01c8\u00e5\2\u1267\u1269"+
		"\5\u01d4\u00eb\2\u1268\u1266\3\2\2\2\u1268\u1267\3\2\2\2\u1269\u01c7\3"+
		"\2\2\2\u126a\u126d\5\u03ec\u01f7\2\u126b\u126c\7\u0160\2\2\u126c\u126e"+
		"\7\u0283\2\2\u126d\u126b\3\2\2\2\u126d\u126e\3\2\2\2\u126e\u1270\3\2\2"+
		"\2\u126f\u1271\5\u01ca\u00e6\2\u1270\u126f\3\2\2\2\u1270\u1271\3\2\2\2"+
		"\u1271\u01c9\3\2\2\2\u1272\u1274\5\u0206\u0104\2\u1273\u1272\3\2\2\2\u1273"+
		"\u1274\3\2\2\2\u1274\u1277\3\2\2\2\u1275\u1278\5\u01cc\u00e7\2\u1276\u1278"+
		"\5\u01ce\u00e8\2\u1277\u1275\3\2\2\2\u1277\u1276\3\2\2\2\u1278\u127a\3"+
		"\2\2\2\u1279\u127b\5\u01d2\u00ea\2\u127a\u1279\3\2\2\2\u127a\u127b\3\2"+
		"\2\2\u127b\u1287\3\2\2\2\u127c\u127d\7\u0287\2\2\u127d\u1282\5\u01e4\u00f3"+
		"\2\u127e\u127f\7\u028d\2\2\u127f\u1281\5\u01e4\u00f3\2\u1280\u127e\3\2"+
		"\2\2\u1281\u1284\3\2\2\2\u1282\u1280\3\2\2\2\u1282\u1283\3\2\2\2\u1283"+
		"\u1285\3\2\2\2\u1284\u1282\3\2\2\2\u1285\u1286\7\u0288\2\2\u1286\u1288"+
		"\3\2\2\2\u1287\u127c\3\2\2\2\u1287\u1288\3\2\2\2\u1288\u128c\3\2\2\2\u1289"+
		"\u128b\5\u01e2\u00f2\2\u128a\u1289\3\2\2\2\u128b\u128e\3\2\2\2\u128c\u128a"+
		"\3\2\2\2\u128c\u128d\3\2\2\2\u128d\u01cb\3\2\2\2\u128e\u128c\3\2\2\2\u128f"+
		"\u1293\t(\2\2\u1290\u1294\7\u015d\2\2\u1291\u1294\5\u0234\u011b\2\u1292"+
		"\u1294\5\u01d0\u00e9\2\u1293\u1290\3\2\2\2\u1293\u1291\3\2\2\2\u1293\u1292"+
		"\3\2\2\2\u1294\u01cd\3\2\2\2\u1295\u1296\7\u021e\2\2\u1296\u1297\5\u041a"+
		"\u020e\2\u1297\u01cf\3\2\2\2\u1298\u1299\7\u01ff\2\2\u1299\u129a\7\u015e"+
		"\2\2\u129a\u129d\5\u041a\u020e\2\u129b\u129c\7\u0153\2\2\u129c\u129e\7"+
		"\u0157\2\2\u129d\u129b\3\2\2\2\u129d\u129e\3\2\2\2\u129e\u01d1\3\2\2\2"+
		"\u129f\u12a0\7\u00b0\2\2\u12a0\u12a1\7\u0133\2\2\u12a1\u12a2\5\u0346\u01a4"+
		"\2\u12a2\u12a3\7\u00ff\2\2\u12a3\u12a4\7\u00fa\2\2\u12a4\u12a5\7\u022c"+
		"\2\2\u12a5\u12a6\t\64\2\2\u12a6\u01d3\3\2\2\2\u12a7\u12a8\7\60\2\2\u12a8"+
		"\u12a9\5\u03ec\u01f7\2\u12a9\u12ab\t(\2\2\u12aa\u12ac\5\u01d6\u00ec\2"+
		"\u12ab\u12aa\3\2\2\2\u12ac\u12ad\3\2\2\2\u12ad\u12ab\3\2\2\2\u12ad\u12ae"+
		"\3\2\2\2\u12ae\u12af\3\2\2\2\u12af\u12b0\7\u009e\2\2\u12b0\u01d5\3\2\2"+
		"\2\u12b1\u12b4\5\u01d8\u00ed\2\u12b2\u12b4\5\u01da\u00ee\2\u12b3\u12b1"+
		"\3\2\2\2\u12b3\u12b2\3\2\2\2\u12b4\u01d7\3\2\2\2\u12b5\u12b6\t\65\2\2"+
		"\u12b6\u12b7\7\u0125\2\2\u12b7\u12b8\5\u01de\u00f0\2\u12b8\u01d9\3\2\2"+
		"\2\u12b9\u12bd\t\66\2\2\u12ba\u12be\5\u01dc\u00ef\2\u12bb\u12be\5\u01de"+
		"\u00f0\2\u12bc\u12be\5\u01e0\u00f1\2\u12bd\u12ba\3\2\2\2\u12bd\u12bb\3"+
		"\2\2\2\u12bd\u12bc\3\2\2\2\u12be\u01db\3\2\2\2\u12bf\u12c0\7\u0192\2\2"+
		"\u12c0\u12c1\5\u03f4\u01fb\2\u12c1\u12c2\7\u0287\2\2\u12c2\u12c7\5\u01fa"+
		"\u00fe\2\u12c3\u12c4\7\u028d\2\2\u12c4\u12c6\5\u01fa\u00fe\2\u12c5\u12c3"+
		"\3\2\2\2\u12c6\u12c9\3\2\2\2\u12c7\u12c5\3\2\2\2\u12c7\u12c8\3\2\2\2\u12c8"+
		"\u12ca\3\2\2\2\u12c9\u12c7\3\2\2\2\u12ca\u12cb\7\u0288\2\2\u12cb\u12d9"+
		"\t(\2\2\u12cc\u12da\5\u020a\u0106\2\u12cd\u12cf\7|\2\2\u12ce\u12cd\3\2"+
		"\2\2\u12ce\u12cf\3\2\2\2\u12cf\u12d3\3\2\2\2\u12d0\u12d2\5\u0218\u010d"+
		"\2\u12d1\u12d0\3\2\2\2\u12d2\u12d5\3\2\2\2\u12d3\u12d1\3\2\2\2\u12d3\u12d4"+
		"\3\2\2\2\u12d4\u12d6\3\2\2\2\u12d5\u12d3\3\2\2\2\u12d6\u12d7\5\u0262\u0132"+
		"\2\u12d7\u12d8\7\u0293\2\2\u12d8\u12da\3\2\2\2\u12d9\u12cc\3\2\2\2\u12d9"+
		"\u12ce\3\2\2\2\u12da\u01dd\3\2\2\2\u12db\u12dc\7\u00c8\2\2\u12dc\u12e8"+
		"\5\u03f2\u01fa\2\u12dd\u12de\7\u0287\2\2\u12de\u12e3\5\u01fa\u00fe\2\u12df"+
		"\u12e0\7\u028d\2\2\u12e0\u12e2\5\u01fa\u00fe\2\u12e1\u12df\3\2\2\2\u12e2"+
		"\u12e5\3\2\2\2\u12e3\u12e1\3\2\2\2\u12e3\u12e4\3\2\2\2\u12e4\u12e6\3\2"+
		"\2\2\u12e5\u12e3\3\2\2\2\u12e6\u12e7\7\u0288\2\2\u12e7\u12e9\3\2\2\2\u12e8"+
		"\u12dd\3\2\2\2\u12e8\u12e9\3\2\2\2\u12e9\u12ea\3\2\2\2\u12ea\u12eb\7\u01b2"+
		"\2\2\u12eb\u12ec\5\u041a\u020e\2\u12ec\u12fa\t(\2\2\u12ed\u12fb\5\u020a"+
		"\u0106\2\u12ee\u12f0\7|\2\2\u12ef\u12ee\3\2\2\2\u12ef\u12f0\3\2\2\2\u12f0"+
		"\u12f4\3\2\2\2\u12f1\u12f3\5\u0218\u010d\2\u12f2\u12f1\3\2\2\2\u12f3\u12f6"+
		"\3\2\2\2\u12f4\u12f2\3\2\2\2\u12f4\u12f5\3\2\2\2\u12f5\u12f7\3\2\2\2\u12f6"+
		"\u12f4\3\2\2\2\u12f7\u12f8\5\u0262\u0132\2\u12f8\u12f9\7\u0293\2\2\u12f9"+
		"\u12fb\3\2\2\2\u12fa\u12ed\3\2\2\2\u12fa\u12ef\3\2\2\2\u12fb\u01df\3\2"+
		"\2\2\u12fc\u12fe\7\u00b7\2\2\u12fd\u12fc\3\2\2\2\u12fd\u12fe\3\2\2\2\u12fe"+
		"\u1300\3\2\2\2\u12ff\u1301\7\u00ee\2\2\u1300\u12ff\3\2\2\2\u1300\u1301"+
		"\3\2\2\2\u1301\u1302\3\2\2\2\u1302\u1303\7\\\2\2\u1303\u1304\7\u00c8\2"+
		"\2\u1304\u1316\5\u041a\u020e\2\u1305\u1306\7\u0287\2\2\u1306\u1307\7\u01cf"+
		"\2\2\u1307\u1308\7\u00db\2\2\u1308\u1309\7\u016e\2\2\u1309\u130a\5\u041a"+
		"\u020e\2\u130a\u130b\7\u028d\2\2\u130b\u130c\3\2\2\2\u130c\u1311\5\u01fa"+
		"\u00fe\2\u130d\u130e\7\u028d\2\2\u130e\u1310\5\u01fa\u00fe\2\u130f\u130d"+
		"\3\2\2\2\u1310\u1313\3\2\2\2\u1311\u130f\3\2\2\2\u1311\u1312\3\2\2\2\u1312"+
		"\u1314\3\2\2\2\u1313\u1311\3\2\2\2\u1314\u1315\7\u0288\2\2\u1315\u1317"+
		"\3\2\2\2\u1316\u1305\3\2\2\2\u1316\u1317\3\2\2\2\u1317\u1318\3\2\2\2\u1318"+
		"\u1319\7\u01b2\2\2\u1319\u131a\7\u01cf\2\2\u131a\u131b\7\26\2\2\u131b"+
		"\u131c\7\u01af\2\2\u131c\u132a\t(\2\2\u131d\u132b\5\u020a\u0106\2\u131e"+
		"\u1320\7|\2\2\u131f\u131e\3\2\2\2\u131f\u1320\3\2\2\2\u1320\u1324\3\2"+
		"\2\2\u1321\u1323\5\u0218\u010d\2\u1322\u1321\3\2\2\2\u1323\u1326\3\2\2"+
		"\2\u1324\u1322\3\2\2\2\u1324\u1325\3\2\2\2\u1325\u1327\3\2\2\2\u1326\u1324"+
		"\3\2\2\2\u1327\u1328\5\u0262\u0132\2\u1328\u1329\7\u0293\2\2\u1329\u132b"+
		"\3\2\2\2\u132a\u131d\3\2\2\2\u132a\u131f\3\2\2\2\u132b\u01e1\3\2\2\2\u132c"+
		"\u132e\7\u0153\2\2\u132d\u132c\3\2\2\2\u132d\u132e\3\2\2\2\u132e\u132f"+
		"\3\2\2\2\u132f\u1330\t\67\2\2\u1330\u01e3\3\2\2\2\u1331\u1332\5\u0430"+
		"\u0219\2\u1332\u1334\5\u041a\u020e\2\u1333\u1335\5\u01e6\u00f4\2\u1334"+
		"\u1333\3\2\2\2\u1334\u1335\3\2\2\2\u1335\u1338\3\2\2\2\u1336\u1338\5\u01e8"+
		"\u00f5\2\u1337\u1331\3\2\2\2\u1337\u1336\3\2\2\2\u1338\u01e5\3\2\2\2\u1339"+
		"\u133a\7\u00b0\2\2\u133a\u133b\7\u0133\2\2\u133b\u133c\5\u0346\u01a4\2"+
		"\u133c\u01e7\3\2\2\2\u133d\u133f\5\u01e2\u00f2\2\u133e\u133d\3\2\2\2\u133e"+
		"\u133f\3\2\2\2\u133f\u1341\3\2\2\2\u1340\u1342\5\u01ea\u00f6\2\u1341\u1340"+
		"\3\2\2\2\u1342\u1343\3\2\2\2\u1343\u1341\3\2\2\2\u1343\u1344\3\2\2\2\u1344"+
		"\u1347\3\2\2\2\u1345\u1346\7\u028d\2\2\u1346\u1348\5\u01f6\u00fc\2\u1347"+
		"\u1345\3\2\2\2\u1347\u1348\3\2\2\2\u1348\u01e9\3\2\2\2\u1349\u134d\5\u01ec"+
		"\u00f7\2\u134a\u134d\5\u01f2\u00fa\2\u134b\u134d\5\u01f4\u00fb\2\u134c"+
		"\u1349\3\2\2\2\u134c\u134a\3\2\2\2\u134c\u134b\3\2\2\2\u134d\u01eb\3\2"+
		"\2\2\u134e\u1351\t\66\2\2\u134f\u1352\5\u01ee\u00f8\2\u1350\u1352\5\u01f0"+
		"\u00f9\2\u1351\u134f\3\2\2\2\u1351\u1350\3\2\2\2\u1352\u01ed\3\2\2\2\u1353"+
		"\u1354\7\u0192\2\2\u1354\u1355\5\u03f4\u01fb\2\u1355\u1356\7\u0287\2\2"+
		"\u1356\u135b\5\u01fa\u00fe\2\u1357\u1358\7\u028d\2\2\u1358\u135a\5\u01fa"+
		"\u00fe\2\u1359\u1357\3\2\2\2\u135a\u135d\3\2\2\2\u135b\u1359\3\2\2\2\u135b"+
		"\u135c\3\2\2\2\u135c\u135e\3\2\2\2\u135d\u135b\3\2\2\2\u135e\u1361\7\u0288"+
		"\2\2\u135f\u1360\t(\2\2\u1360\u1362\5\u020a\u0106\2\u1361\u135f\3\2\2"+
		"\2\u1361\u1362\3\2\2\2\u1362\u01ef\3\2\2\2\u1363\u1364\7\u00c8\2\2\u1364"+
		"\u1370\5\u03f2\u01fa\2\u1365\u1366\7\u0287\2\2\u1366\u136b\5\u01fa\u00fe"+
		"\2\u1367\u1368\7\u028d\2\2\u1368\u136a\5\u01fa\u00fe\2\u1369\u1367\3\2"+
		"\2\2\u136a\u136d\3\2\2\2\u136b\u1369\3\2\2\2\u136b\u136c\3\2\2\2\u136c"+
		"\u136e\3\2\2\2\u136d\u136b\3\2\2\2\u136e\u136f\7\u0288\2\2\u136f\u1371"+
		"\3\2\2\2\u1370\u1365\3\2\2\2\u1370\u1371\3\2\2\2\u1371\u1372\3\2\2\2\u1372"+
		"\u1377\7\u01b2\2\2\u1373\u1378\5\u041a\u020e\2\u1374\u1375\7\u01cf\2\2"+
		"\u1375\u1376\7\26\2\2\u1376\u1378\7\u01af\2\2\u1377\u1373\3\2\2\2\u1377"+
		"\u1374\3\2\2\2\u1378\u1381\3\2\2\2\u1379\u137a\t(\2\2\u137a\u1382\5\u020a"+
		"\u0106\2\u137b\u137d\7\u00b0\2\2\u137c\u137e\7\u0232\2\2\u137d\u137c\3"+
		"\2\2\2\u137d\u137e\3\2\2\2\u137e\u137f\3\2\2\2\u137f\u1380\7\u0133\2\2"+
		"\u1380\u1382\5\u0346\u01a4\2\u1381\u1379\3\2\2\2\u1381\u137b\3\2\2\2\u1381"+
		"\u1382\3\2\2\2\u1382\u01f1\3\2\2\2\u1383\u1385\7\u00b7\2\2\u1384\u1383"+
		"\3\2\2\2\u1384\u1385\3\2\2\2\u1385\u1387\3\2\2\2\u1386\u1388\7\u00ee\2"+
		"\2\u1387\u1386\3\2\2\2\u1387\u1388\3\2\2\2\u1388\u1389\3\2\2\2\u1389\u138a"+
		"\7\\\2\2\u138a\u138b\7\u00c8\2\2\u138b\u139d\5\u041a\u020e\2\u138c\u138d"+
		"\7\u0287\2\2\u138d\u138e\7\u01cf\2\2\u138e\u138f\7\u00db\2\2\u138f\u1390"+
		"\7\u016e\2\2\u1390\u1391\5\u041a\u020e\2\u1391\u1392\7\u028d\2\2\u1392"+
		"\u1393\3\2\2\2\u1393\u1398\5\u01fa\u00fe\2\u1394\u1395\7\u028d\2\2\u1395"+
		"\u1397\5\u01fa\u00fe\2\u1396\u1394\3\2\2\2\u1397\u139a\3\2\2\2\u1398\u1396"+
		"\3\2\2\2\u1398\u1399\3\2\2\2\u1399\u139b\3\2\2\2\u139a\u1398\3\2\2\2\u139b"+
		"\u139c\7\u0288\2\2\u139c\u139e\3\2\2\2\u139d\u138c\3\2\2\2\u139d\u139e"+
		"\3\2\2\2\u139e\u139f\3\2\2\2\u139f\u13a0\7\u01b2\2\2\u13a0\u13a1\7\u01cf"+
		"\2\2\u13a1\u13a2\7\26\2\2\u13a2\u13a5\7\u01af\2\2\u13a3\u13a4\t(\2\2\u13a4"+
		"\u13a6\5\u020a\u0106\2\u13a5\u13a3\3\2\2\2\u13a5\u13a6\3\2\2\2\u13a6\u01f3"+
		"\3\2\2\2\u13a7\u13a8\t\65\2\2\u13a8\u13a9\7\u0125\2\2\u13a9\u13aa\5\u01f0"+
		"\u00f9\2\u13aa\u01f5\3\2\2\2\u13ab\u13ac\7\u018a\2\2\u13ac\u13ad\7\u01ae"+
		"\2\2\u13ad\u13ae\7\u0287\2\2\u13ae\u13b3\5\u01f8\u00fd\2\u13af\u13b0\7"+
		"\u028d\2\2\u13b0\u13b2\5\u01f8\u00fd\2\u13b1\u13af\3\2\2\2\u13b2\u13b5"+
		"\3\2\2\2\u13b3\u13b1\3\2\2\2\u13b3\u13b4\3\2\2\2\u13b4\u13b6\3\2\2\2\u13b5"+
		"\u13b3\3\2\2\2\u13b6\u13b7\7\u0288\2\2\u13b7\u01f7\3\2\2\2\u13b8\u13bb"+
		"\5\u0430\u0219\2\u13b9\u13bb\7\u0082\2\2\u13ba\u13b8\3\2\2\2\u13ba\u13b9"+
		"\3\2\2\2\u13bb\u01f9\3\2\2\2\u13bc\u13bd\5\u03de\u01f0\2\u13bd\u13be\5"+
		"\u041a\u020e\2\u13be\u01fb\3\2\2\2\u13bf\u13c0\7\u0093\2\2\u13c0\u13c1"+
		"\7\u01d0\2\2\u13c1\u13c2\5\u03ee\u01f8\2\u13c2\u01fd\3\2\2\2\u13c3\u13c4"+
		"\7\16\2\2\u13c4\u13c5\7\u01d0\2\2\u13c5\u13c7\5\u03ee\u01f8\2\u13c6\u13c8"+
		"\5\u0202\u0102\2\u13c7\u13c6\3\2\2\2\u13c8\u13c9\3\2\2\2\u13c9\u13c7\3"+
		"\2\2\2\u13c9\u13ca\3\2\2\2\u13ca\u01ff\3\2\2\2\u13cb\u13cc\7e\2\2\u13cc"+
		"\u13cd\7\u01d0\2\2\u13cd\u13d2\5\u03ee\u01f8\2\u13ce\u13d1\5\u0204\u0103"+
		"\2\u13cf\u13d1\5\u0202\u0102\2\u13d0\u13ce\3\2\2\2\u13d0\u13cf\3\2\2\2"+
		"\u13d1\u13d4\3\2\2\2\u13d2\u13d0\3\2\2\2\u13d2\u13d3\3\2\2\2\u13d3\u0201"+
		"\3\2\2\2\u13d4\u13d2\3\2\2\2\u13d5\u13d6\7\u00de\2\2\u13d6\u13d7\7\65"+
		"\2\2\u13d7\u13e6\7\u0281\2\2\u13d8\u13d9\7\u0122\2\2\u13d9\u13e6\7\u0281"+
		"\2\2\u13da\u13e6\7\u0148\2\2\u13db\u13dc\7\u012b\2\2\u13dc\u13e6\7\u0281"+
		"\2\2\u13dd\u13e6\7\u014a\2\2\u13de\u13e6\7o\2\2\u13df\u13e6\7\u0144\2"+
		"\2\u13e0\u13e1\78\2\2\u13e1\u13e6\7\u0281\2\2\u13e2\u13e6\7\u0141\2\2"+
		"\u13e3\u13e6\7\u016b\2\2\u13e4\u13e6\7\u014d\2\2\u13e5\u13d5\3\2\2\2\u13e5"+
		"\u13d8\3\2\2\2\u13e5\u13da\3\2\2\2\u13e5\u13db\3\2\2\2\u13e5\u13dd\3\2"+
		"\2\2\u13e5\u13de\3\2\2\2\u13e5\u13df\3\2\2\2\u13e5\u13e0\3\2\2\2\u13e5"+
		"\u13e2\3\2\2\2\u13e5\u13e3\3\2\2\2\u13e5\u13e4\3\2\2\2\u13e6\u0203\3\2"+
		"\2\2\u13e7\u13e8\7\u01ec\2\2\u13e8\u13e9\7\u0243\2\2\u13e9\u13ea\7\u0281"+
		"\2\2\u13ea\u0205\3\2\2\2\u13eb\u13ec\7\34\2\2\u13ec\u13ed\t8\2\2\u13ed"+
		"\u0207\3\2\2\2\u13ee\u13ef\5\u0430\u0219\2\u13ef\u13f0\7\u029e\2\2\u13f0"+
		"\u13f1\5\u0346\u01a4\2\u13f1\u0209\3\2\2\2\u13f2\u13f5\7\u00ff\2\2\u13f3"+
		"\u13f6\5\u020c\u0107\2\u13f4\u13f6\5\u020e\u0108\2\u13f5\u13f3\3\2\2\2"+
		"\u13f5\u13f4\3\2\2\2\u13f6\u020b\3\2\2\2\u13f7\u13f8\7\u00fa\2\2\u13f8"+
		"\u13f9\7\u0133\2\2\u13f9\u13fa\7\u0283\2\2\u13fa\u020d\3\2\2\2\u13fb\u13fe"+
		"\7\67\2\2\u13fc\u13fd\7\u0133\2\2\u13fd\u13ff\7\u0283\2\2\u13fe\u13fc"+
		"\3\2\2\2\u13fe\u13ff\3\2\2\2\u13ff\u1400\3\2\2\2\u1400\u1401\7\u0107\2"+
		"\2\u1401\u1403\5\u0430\u0219\2\u1402\u1404\5\u0210\u0109\2\u1403\u1402"+
		"\3\2\2\2\u1403\u1404\3\2\2\2\u1404\u1407\3\2\2\2\u1405\u1406\7\u0243\2"+
		"\2\u1406\u1408\7^\2\2\u1407\u1405\3\2\2\2\u1407\u1408\3\2\2\2\u1408\u140a"+
		"\3\2\2\2\u1409\u140b\5\u0212\u010a\2\u140a\u1409\3\2\2\2\u140a\u140b\3"+
		"\2\2\2\u140b\u020f\3\2\2\2\u140c\u140d\7\t\2\2\u140d\u140e\7\u00db\2\2"+
		"\u140e\u140f\7\u0287\2\2\u140f\u1414\5\u0346\u01a4\2\u1410\u1411\7\u028d"+
		"\2\2\u1411\u1413\5\u0346\u01a4\2\u1412\u1410\3\2\2\2\u1413\u1416\3\2\2"+
		"\2\u1414\u1412\3\2\2\2\u1414\u1415\3\2\2\2\u1415\u1417\3\2\2\2\u1416\u1414"+
		"\3\2\2\2\u1417\u1418\7\u0288\2\2\u1418\u0211\3\2\2\2\u1419\u141a\7\u0176"+
		"\2\2\u141a\u1426\7\u0287\2\2\u141b\u1420\5\u0346\u01a4\2\u141c\u141d\7"+
		"\u028d\2\2\u141d\u141f\5\u0346\u01a4\2\u141e\u141c\3\2\2\2\u141f\u1422"+
		"\3\2\2\2\u1420\u141e\3\2\2\2\u1420\u1421\3\2\2\2\u1421\u1427\3\2\2\2\u1422"+
		"\u1420\3\2\2\2\u1423\u1424\7\u0280\2\2\u1424\u1425\7\u0280\2\2\u1425\u1427"+
		"\7\u0280\2\2\u1426\u141b\3\2\2\2\u1426\u1423\3\2\2\2\u1427\u1428\3\2\2"+
		"\2\u1428\u1429\7\u0288\2\2\u1429\u0213\3\2\2\2\u142a\u142e\5\u03de\u01f0"+
		"\2\u142b\u142d\t9\2\2\u142c\u142b\3\2\2\2\u142d\u1430\3\2\2\2\u142e\u142c"+
		"\3\2\2\2\u142e\u142f\3\2\2\2\u142f\u1432\3\2\2\2\u1430\u142e\3\2\2\2\u1431"+
		"\u1433\5\u041a\u020e\2\u1432\u1431\3\2\2\2\u1432\u1433\3\2\2\2\u1433\u1435"+
		"\3\2\2\2\u1434\u1436\5\u0216\u010c\2\u1435\u1434\3\2\2\2\u1435\u1436\3"+
		"\2\2\2\u1436\u0215\3\2\2\2\u1437\u1438\t:\2\2\u1438\u1439\5\u0346\u01a4"+
		"\2\u1439\u0217\3\2\2\2\u143a\u1444\5\u021a\u010e\2\u143b\u1444\5\u021c"+
		"\u010f\2\u143c\u1444\5\u021e\u0110\2\u143d\u1444\5\u0222\u0112\2\u143e"+
		"\u1444\5\u0224\u0113\2\u143f\u1444\5\u0226\u0114\2\u1440\u1444\5\u022e"+
		"\u0118\2\u1441\u1444\5\u0188\u00c5\2\u1442\u1444\5\u0166\u00b4\2\u1443"+
		"\u143a\3\2\2\2\u1443\u143b\3\2\2\2\u1443\u143c\3\2\2\2\u1443\u143d\3\2"+
		"\2\2\u1443\u143e\3\2\2\2\u1443\u143f\3\2\2\2\u1443\u1440\3\2\2\2\u1443"+
		"\u1441\3\2\2\2\u1443\u1442\3\2\2\2\u1444\u0219\3\2\2\2\u1445\u1447\5\u03f8"+
		"\u01fd\2\u1446\u1448\7Y\2\2\u1447\u1446\3\2\2\2\u1447\u1448\3\2\2\2\u1448"+
		"\u1449\3\2\2\2\u1449\u144c\5\u041a\u020e\2\u144a\u144b\7\u0153\2\2\u144b"+
		"\u144d\7\u0157\2\2\u144c\u144a\3\2\2\2\u144c\u144d\3\2\2\2\u144d\u144f"+
		"\3\2\2\2\u144e\u1450\5\u0216\u010c\2\u144f\u144e\3\2\2\2\u144f\u1450\3"+
		"\2\2\2\u1450\u1451\3\2\2\2\u1451\u1452\7\u0293\2\2\u1452\u021b\3\2\2\2"+
		"\u1453\u1454\7\u01fa\2\2\u1454\u1455\5\u03ec\u01f7\2\u1455\u1456\7\u00f7"+
		"\2\2\u1456\u145c\5\u041a\u020e\2\u1457\u1458\7\u0197\2\2\u1458\u1459\5"+
		"\u0346\u01a4\2\u1459\u145a\7\3\2\2\u145a\u145b\5\u0346\u01a4\2\u145b\u145d"+
		"\3\2\2\2\u145c\u1457\3\2\2\2\u145c\u145d\3\2\2\2\u145d\u1460\3\2\2\2\u145e"+
		"\u145f\7\u0153\2\2\u145f\u1461\7\u0157\2\2\u1460\u145e\3\2\2\2\u1460\u1461"+
		"\3\2\2\2\u1461\u1462\3\2\2\2\u1462\u1463\7\u0293\2\2\u1463\u021d\3\2\2"+
		"\2\u1464\u1465\7m\2\2\u1465\u1471\5\u03fc\u01ff\2\u1466\u1467\7\u0287"+
		"\2\2\u1467\u146c\5\u0220\u0111\2\u1468\u1469\7\u028d\2\2\u1469\u146b\5"+
		"\u0220\u0111\2\u146a\u1468\3\2\2\2\u146b\u146e\3\2\2\2\u146c\u146a\3\2"+
		"\2\2\u146c\u146d\3\2\2\2\u146d\u146f\3\2\2\2\u146e\u146c\3\2\2\2\u146f"+
		"\u1470\7\u0288\2\2\u1470\u1472\3\2\2\2\u1471\u1466\3\2\2\2\u1471\u1472"+
		"\3\2\2\2\u1472\u1475\3\2\2\2\u1473\u1474\7\u01b2\2\2\u1474\u1476\5\u041a"+
		"\u020e\2\u1475\u1473\3\2\2\2\u1475\u1476\3\2\2\2\u1476\u1479\3\2\2\2\u1477"+
		"\u1478\7\u00f7\2\2\u1478\u147a\5\u028c\u0147\2\u1479\u1477\3\2\2\2\u1479"+
		"\u147a\3\2\2\2\u147a\u147b\3\2\2\2\u147b\u147c\7\u0293\2\2\u147c\u021f"+
		"\3\2\2\2\u147d\u1482\5\u03de\u01f0\2\u147e\u1480\7\u00db\2\2\u147f\u147e"+
		"\3\2\2\2\u147f\u1480\3\2\2\2\u1480\u1481\3\2\2\2\u1481\u1483\5\u041a\u020e"+
		"\2\u1482\u147f\3\2\2\2\u1482\u1483\3\2\2\2\u1483\u1485\3\2\2\2\u1484\u1486"+
		"\5\u0216\u010c\2\u1485\u1484\3\2\2\2\u1485\u1486\3\2\2\2\u1486\u0221\3"+
		"\2\2\2\u1487\u1488\5\u03f0\u01f9\2\u1488\u1489\7\u00a6\2\2\u1489\u148a"+
		"\7\u0293\2\2\u148a\u0223\3\2\2\2\u148b\u14aa\7\u018a\2\2\u148c\u14ab\7"+
		"\u01d3\2\2\u148d\u14ab\7\37\2\2\u148e\u148f\7\u00a7\2\2\u148f\u1490\7"+
		"\u0287\2\2\u1490\u1491\5\u03f0\u01f9\2\u1491\u1492\7\u028d\2\2\u1492\u1493"+
		"\5\u042c\u0217\2\u1493\u1494\7\u0288\2\2\u1494\u14ab\3\2\2\2\u1495\u1496"+
		"\7\u00e9\2\2\u1496\u1497\7\u0287\2\2\u1497\u1498\5\u0430\u0219\2\u1498"+
		"\u1499\7\u028d\2\2\u1499\u149a\5\u0346\u01a4\2\u149a\u149b\7\u0288\2\2"+
		"\u149b\u14ab\3\2\2\2\u149c\u149d\7\u01ae\2\2\u149d\u14a0\7\u0287\2\2\u149e"+
		"\u14a1\5\u0430\u0219\2\u149f\u14a1\7\u0082\2\2\u14a0\u149e\3\2\2\2\u14a0"+
		"\u149f\3\2\2\2\u14a1\u14a4\3\2\2\2\u14a2\u14a3\7\u028d\2\2\u14a3\u14a5"+
		"\5\u0430\u0219\2\u14a4\u14a2\3\2\2\2\u14a5\u14a6\3\2\2\2\u14a6\u14a4\3"+
		"\2\2\2\u14a6\u14a7\3\2\2\2\u14a7\u14a8\3\2\2\2\u14a8\u14a9\7\u0288\2\2"+
		"\u14a9\u14ab\3\2\2\2\u14aa\u148c\3\2\2\2\u14aa\u148d\3\2\2\2\u14aa\u148e"+
		"\3\2\2\2\u14aa\u1495\3\2\2\2\u14aa\u149c\3\2\2\2\u14ab\u14ac\3\2\2\2\u14ac"+
		"\u14ad\7\u0293\2\2\u14ad\u0225\3\2\2\2\u14ae\u14b1\5\u0228\u0115\2\u14af"+
		"\u14b1\5\u022c\u0117\2\u14b0\u14ae\3\2\2\2\u14b0\u14af\3\2\2\2\u14b1\u0227"+
		"\3\2\2\2\u14b2\u14b3\7\u021c\2\2\u14b3\u14b4\5\u03ec\u01f7\2\u14b4\u14c7"+
		"\7\u00f7\2\2\u14b5\u14b6\7\u019d\2\2\u14b6\u14b7\7\u0287\2\2\u14b7\u14bc"+
		"\5\u022a\u0116\2\u14b8\u14b9\7\u028d\2\2\u14b9\u14bb\5\u022a\u0116\2\u14ba"+
		"\u14b8\3\2\2\2\u14bb\u14be\3\2\2\2\u14bc\u14ba\3\2\2\2\u14bc\u14bd\3\2"+
		"\2\2\u14bd\u14bf\3\2\2\2\u14be\u14bc\3\2\2\2\u14bf\u14c0\7\u0288\2\2\u14c0"+
		"\u14c8\3\2\2\2\u14c1\u14c2\7\u01a1\2\2\u14c2\u14c5\7m\2\2\u14c3\u14c4"+
		"\7\u01b2\2\2\u14c4\u14c6\5\u041a\u020e\2\u14c5\u14c3\3\2\2\2\u14c5\u14c6"+
		"\3\2\2\2\u14c6\u14c8\3\2\2\2\u14c7\u14b5\3\2\2\2\u14c7\u14c1\3\2\2\2\u14c8"+
		"\u14c9\3\2\2\2\u14c9\u14ca\7\u0293\2\2\u14ca\u0229\3\2\2\2\u14cb\u14cd"+
		"\5\u0404\u0203\2\u14cc\u14ce\5\u041a\u020e\2\u14cd\u14cc\3\2\2\2\u14cd"+
		"\u14ce\3\2\2\2\u14ce\u14d1\3\2\2\2\u14cf\u14d0\7\u0153\2\2\u14d0\u14d2"+
		"\7\u0157\2\2\u14d1\u14cf\3\2\2\2\u14d1\u14d2\3\2\2\2\u14d2\u14d4\3\2\2"+
		"\2\u14d3\u14d5\5\u0216\u010c\2\u14d4\u14d3\3\2\2\2\u14d4\u14d5\3\2\2\2"+
		"\u14d5\u022b\3\2\2\2\u14d6\u14d7\5\u03fe\u0200\2\u14d7\u14d8\5\u03ec\u01f7"+
		"\2\u14d8\u14d9\t;\2\2\u14d9\u14da\7\u0293\2\2\u14da\u022d\3\2\2\2\u14db"+
		"\u14de\5\u0230\u0119\2\u14dc\u14de\5\u0236\u011c\2\u14dd\u14db\3\2\2\2"+
		"\u14dd\u14dc\3\2\2\2\u14de\u14df\3\2\2\2\u14df\u14e0\7\u0293\2\2\u14e0"+
		"\u022f\3\2\2\2\u14e1\u14e2\7\u021c\2\2\u14e2\u14e3\5\u03ec\u01f7\2\u14e3"+
		"\u14ef\7\u00f7\2\2\u14e4\u14e5\7\u01ff\2\2\u14e5\u14e6\7\u015e\2\2\u14e6"+
		"\u14e8\5\u041a\u020e\2\u14e7\u14e9\5\u0232\u011a\2\u14e8\u14e7\3\2\2\2"+
		"\u14e8\u14e9\3\2\2\2\u14e9\u14ec\3\2\2\2\u14ea\u14eb\7\u0153\2\2\u14eb"+
		"\u14ed\7\u0157\2\2\u14ec\u14ea\3\2\2\2\u14ec\u14ed\3\2\2\2\u14ed\u14f0"+
		"\3\2\2\2\u14ee\u14f0\5\u0234\u011b\2\u14ef\u14e4\3\2\2\2\u14ef\u14ee\3"+
		"\2\2\2\u14f0\u0231\3\2\2\2\u14f1\u14f4\7\u00e1\2\2\u14f2\u14f4\7\u00e0"+
		"\2\2\u14f3\u14f1\3\2\2\2\u14f3\u14f2\3\2\2\2\u14f4\u14f5\3\2\2\2\u14f5"+
		"\u14f6\7\65\2\2\u14f6\u14f7\5\u041a\u020e\2\u14f7\u0233\3\2\2\2\u14f8"+
		"\u14fc\7\u0233\2\2\u14f9\u14fa\7\u0235\2\2\u14fa\u14fc\7\25\2\2\u14fb"+
		"\u14f8\3\2\2\2\u14fb\u14f9\3\2\2\2\u14fc\u14fd\3\2\2\2\u14fd\u14fe\7\u0287"+
		"\2\2\u14fe\u14ff\5\u0346\u01a4\2\u14ff\u1500\7\u0288\2\2\u1500\u1501\7"+
		"\u015e\2\2\u1501\u1504\5\u041a\u020e\2\u1502\u1503\7\u0153\2\2\u1503\u1505"+
		"\7\u0157\2\2\u1504\u1502\3\2\2\2\u1504\u1505\3\2\2\2\u1505\u0235\3\2\2"+
		"\2\u1506\u1507\5\u03d4\u01eb\2\u1507\u1508\5\u041a\u020e\2\u1508\u0237"+
		"\3\2\2\2\u1509\u150a\5\u023c\u011f\2\u150a\u150b\t<\2\2\u150b\u150e\3"+
		"\2\2\2\u150c\u150e\5\u023a\u011e\2\u150d\u1509\3\2\2\2\u150d\u150c\3\2"+
		"\2\2\u150e\u150f\3\2\2\2\u150f\u150d\3\2\2\2\u150f\u1510\3\2\2\2\u1510"+
		"\u0239\3\2\2\2\u1511\u1512\7\u0295\2\2\u1512\u1513\7\u0295\2\2\u1513\u1514"+
		"\5\u03ea\u01f6\2\u1514\u1515\7\u029b\2\2\u1515\u1516\7\u029b\2\2\u1516"+
		"\u023b\3\2\2\2\u1517\u1518\7e\2\2\u1518\u1532\5\2\2\2\u1519\u151a\7\16"+
		"\2\2\u151a\u1532\5\2\2\2\u151b\u151d\7\u00cc\2\2\u151c\u151e\7\13\2\2"+
		"\u151d\u151c\3\2\2\2\u151d\u151e\3\2\2\2\u151e\u151f\3\2\2\2\u151f\u1532"+
		"\5\2\2\2\u1520\u1521\7\u021a\2\2\u1521\u1532\5\2\2\2\u1522\u1532\5\u0262"+
		"\u0132\2\u1523\u1532\5\u0268\u0135\2\u1524\u1532\5\u023e\u0120\2\u1525"+
		"\u1532\5\u0240\u0121\2\u1526\u1532\5\u0242\u0122\2\u1527\u1532\5\u0244"+
		"\u0123\2\u1528\u1532\5\u0246\u0124\2\u1529\u1532\5\u024c\u0127\2\u152a"+
		"\u1532\5\u0250\u0129\2\u152b\u1532\5\u025a\u012e\2\u152c\u1532\5\u025c"+
		"\u012f\2\u152d\u1532\5\u025e\u0130\2\u152e\u1532\5\u036a\u01b6\2\u152f"+
		"\u1532\5\u026a\u0136\2\u1530\u1532\5\u0260\u0131\2\u1531\u1517\3\2\2\2"+
		"\u1531\u1519\3\2\2\2\u1531\u151b\3\2\2\2\u1531\u1520\3\2\2\2\u1531\u1522"+
		"\3\2\2\2\u1531\u1523\3\2\2\2\u1531\u1524\3\2\2\2\u1531\u1525\3\2\2\2\u1531"+
		"\u1526\3\2\2\2\u1531\u1527\3\2\2\2\u1531\u1528\3\2\2\2\u1531\u1529\3\2"+
		"\2\2\u1531\u152a\3\2\2\2\u1531\u152b\3\2\2\2\u1531\u152c\3\2\2\2\u1531"+
		"\u152d\3\2\2\2\u1531\u152e\3\2\2\2\u1531\u152f\3\2\2\2\u1531\u1530\3\2"+
		"\2\2\u1532\u023d\3\2\2\2\u1533\u1536\5\u0424\u0213\2\u1534\u1536\5\u0422"+
		"\u0212\2\u1535\u1533\3\2\2\2\u1535\u1534\3\2\2\2\u1536\u1537\3\2\2\2\u1537"+
		"\u1538\7\u0290\2\2\u1538\u1539\5\u0346\u01a4\2\u1539\u023f\3\2\2\2\u153a"+
		"\u153c\7_\2\2\u153b\u153d\5\u03ea\u01f6\2\u153c\u153b\3\2\2\2\u153c\u153d"+
		"\3\2\2\2\u153d\u1540\3\2\2\2\u153e\u153f\7\u023f\2\2\u153f\u1541\5\u0344"+
		"\u01a3\2\u1540\u153e\3\2\2\2\u1540\u1541\3\2\2\2\u1541\u0241\3\2\2\2\u1542"+
		"\u1544\7\u00ad\2\2\u1543\u1545\5\u03ea\u01f6\2\u1544\u1543\3\2\2\2\u1544"+
		"\u1545\3\2\2\2\u1545\u1548\3\2\2\2\u1546\u1547\7\u023f\2\2\u1547\u1549"+
		"\5\u0344\u01a3\2\u1548\u1546\3\2\2\2\u1548\u1549\3\2\2\2\u1549\u0243\3"+
		"\2\2\2\u154a\u154b\7\u00cb\2\2\u154b\u154c\5\u03ea\u01f6\2\u154c\u0245"+
		"\3\2\2\2\u154d\u154e\7\u00d7\2\2\u154e\u154f\5\u0344\u01a3\2\u154f\u1550"+
		"\7\u0206\2\2\u1550\u1554\5\u0238\u011d\2\u1551\u1553\5\u0248\u0125\2\u1552"+
		"\u1551\3\2\2\2\u1553\u1556\3\2\2\2\u1554\u1552\3\2\2\2\u1554\u1555\3\2"+
		"\2\2\u1555\u1558\3\2\2\2\u1556\u1554\3\2\2\2\u1557\u1559\5\u024a\u0126"+
		"\2\u1558\u1557\3\2\2\2\u1558\u1559\3\2\2\2\u1559\u155a\3\2\2\2\u155a\u155b"+
		"\7\u009e\2\2\u155b\u155c\7\u00d7\2\2\u155c\u0247\3\2\2\2\u155d\u155e\7"+
		"\u0099\2\2\u155e\u155f\5\u0344\u01a3\2\u155f\u1560\7\u0206\2\2\u1560\u1561"+
		"\5\u0238\u011d\2\u1561\u0249\3\2\2\2\u1562\u1563\7\u0098\2\2\u1563\u1564"+
		"\5\u0238\u011d\2\u1564\u024b\3\2\2\2\u1565\u1567\5\u03ea\u01f6\2\u1566"+
		"\u1565\3\2\2\2\u1566\u1567\3\2\2\2\u1567\u156c\3\2\2\2\u1568\u1569\7\u0242"+
		"\2\2\u1569\u156d\5\u0344\u01a3\2\u156a\u156b\7\u00bf\2\2\u156b\u156d\5"+
		"\u024e\u0128\2\u156c\u1568\3\2\2\2\u156c\u156a\3\2\2\2\u156c\u156d\3\2"+
		"\2\2\u156d\u156e\3\2\2\2\u156e\u156f\7\u011a\2\2\u156f\u1570\5\u0238\u011d"+
		"\2\u1570\u1571\7\u009e\2\2\u1571\u1573\7\u011a\2\2\u1572\u1574\5\u03ea"+
		"\u01f6\2\u1573\u1572\3\2\2\2\u1573\u1574\3\2\2\2\u1574\u024d\3\2\2\2\u1575"+
		"\u1576\5\u03fa\u01fe\2\u1576\u1578\7\u00db\2\2\u1577\u1579\7\u01b5\2\2"+
		"\u1578\u1577\3\2\2\2\u1578\u1579\3\2\2\2\u1579\u157a\3\2\2\2\u157a\u157b"+
		"\5\u0256\u012c\2\u157b\u157c\7\3\2\2\u157c\u157d\5\u0258\u012d\2\u157d"+
		"\u158b\3\2\2\2\u157e\u157f\5\u03fe\u0200\2\u157f\u1588\7\u00db\2\2\u1580"+
		"\u1582\5\u03fc\u01ff\2\u1581\u1583\5\u0342\u01a2\2\u1582\u1581\3\2\2\2"+
		"\u1582\u1583\3\2\2\2\u1583\u1589\3\2\2\2\u1584\u1585\7\u0287\2\2\u1585"+
		"\u1586\5\u028c\u0147\2\u1586\u1587\7\u0288\2\2\u1587\u1589\3\2\2\2\u1588"+
		"\u1580\3\2\2\2\u1588\u1584\3\2\2\2\u1589\u158b\3\2\2\2\u158a\u1575\3\2"+
		"\2\2\u158a\u157e\3\2\2\2\u158b\u024f\3\2\2\2\u158c\u158d\7\u00c0\2\2\u158d"+
		"\u158e\5\u03fa\u01fe\2\u158e\u158f\7\u00db\2\2\u158f\u1590\5\u0252\u012a"+
		"\2\u1590\u1593\5\u026a\u0136\2\u1591\u1592\7\u01c3\2\2\u1592\u1594\7\u00a8"+
		"\2\2\u1593\u1591\3\2\2\2\u1593\u1594\3\2\2\2\u1594\u0251\3\2\2\2\u1595"+
		"\u1596\5\u0256\u012c\2\u1596\u1597\7\3\2\2\u1597\u1598\5\u0258\u012d\2"+
		"\u1598\u15a3\3\2\2\2\u1599\u159a\7\u00e4\2\2\u159a\u159b\7\u015e\2\2\u159b"+
		"\u159d\5\u0400\u0201\2\u159c\u159e\5\u0254\u012b\2\u159d\u159c\3\2\2\2"+
		"\u159d\u159e\3\2\2\2\u159e\u15a3\3\2\2\2\u159f\u15a0\7\u022f\2\2\u15a0"+
		"\u15a1\7\u015e\2\2\u15a1\u15a3\5\u03fa\u01fe\2\u15a2\u1595\3\2\2\2\u15a2"+
		"\u1599\3\2\2\2\u15a2\u159f\3\2\2\2\u15a3\u0253\3\2\2\2\u15a4\u15a5\7%"+
		"\2\2\u15a5\u15a6\5\u0256\u012c\2\u15a6\u15a7\7\21\2\2\u15a7\u15a8\5\u0258"+
		"\u012d\2\u15a8\u0255\3\2\2\2\u15a9\u15aa\5\u0356\u01ac\2\u15aa\u0257\3"+
		"\2\2\2\u15ab\u15ac\5\u0356\u01ac\2\u15ac\u0259\3\2\2\2\u15ad\u15ae\7\u0157"+
		"\2\2\u15ae\u025b\3\2\2\2\u15af\u15b1\7\u0196\2\2\u15b0\u15b2\5\u03f0\u01f9"+
		"\2\u15b1\u15b0\3\2\2\2\u15b1\u15b2\3\2\2\2\u15b2\u025d\3\2\2\2\u15b3\u15b5"+
		"\7\u01b2\2\2\u15b4\u15b6\5\u0344\u01a3\2\u15b5\u15b4\3\2\2\2\u15b5\u15b6"+
		"\3\2\2\2\u15b6\u025f\3\2\2\2\u15b7\u15b9\79\2\2\u15b8\u15b7\3\2\2\2\u15b8"+
		"\u15b9\3\2\2\2\u15b9\u15ba\3\2\2\2\u15ba\u15bc\5\u03d8\u01ed\2\u15bb\u15bd"+
		"\5\u0410\u0209\2\u15bc\u15bb\3\2\2\2\u15bc\u15bd\3\2\2\2\u15bd\u0261\3"+
		"\2\2\2\u15be\u15bf\7$\2\2\u15bf\u15c6\5\u0238\u011d\2\u15c0\u15c2\7\u00a6"+
		"\2\2\u15c1\u15c3\5\u0264\u0133\2\u15c2\u15c1\3\2\2\2\u15c3\u15c4\3\2\2"+
		"\2\u15c4\u15c2\3\2\2\2\u15c4\u15c5\3\2\2\2\u15c5\u15c7\3\2\2\2\u15c6\u15c0"+
		"\3\2\2\2\u15c6\u15c7\3\2\2\2\u15c7\u15c8\3\2\2\2\u15c8\u15ca\7\u009e\2"+
		"\2\u15c9\u15cb\5\u03ea\u01f6\2\u15ca\u15c9\3\2\2\2\u15ca\u15cb\3\2\2\2"+
		"\u15cb\u0263\3\2\2\2\u15cc\u15cd\7\u023f\2\2\u15cd\u15d2\5\u03f0\u01f9"+
		"\2\u15ce\u15cf\7\u0169\2\2\u15cf\u15d1\5\u03f0\u01f9\2\u15d0\u15ce\3\2"+
		"\2\2\u15d1\u15d4\3\2\2\2\u15d2\u15d0\3\2\2\2\u15d2\u15d3\3\2\2\2\u15d3"+
		"\u15d5\3\2\2\2\u15d4\u15d2\3\2\2\2\u15d5\u15d6\7\u0206\2\2\u15d6\u15d7"+
		"\5\u0238\u011d\2\u15d7\u0265\3\2\2\2\u15d8\u15da\7|\2\2\u15d9\u15d8\3"+
		"\2\2\2\u15d9\u15da\3\2\2\2\u15da\u15dc\3\2\2\2\u15db\u15dd\5\u0218\u010d"+
		"\2\u15dc\u15db\3\2\2\2\u15dd\u15de\3\2\2\2\u15de\u15dc\3\2\2\2\u15de\u15df"+
		"\3\2\2\2\u15df\u15e1\3\2\2\2\u15e0\u15d9\3\2\2\2\u15e0\u15e1\3\2\2\2\u15e1"+
		"\u15e2\3\2\2\2\u15e2\u15e3\5\u0262\u0132\2\u15e3\u0267\3\2\2\2\u15e4\u15e6"+
		"\7|\2\2\u15e5\u15e4\3\2\2\2\u15e5\u15e6\3\2\2\2\u15e6\u15e8\3\2\2\2\u15e7"+
		"\u15e9\5\u0218\u010d\2\u15e8\u15e7\3\2\2\2\u15e9\u15ea\3\2\2\2\u15ea\u15e8"+
		"\3\2\2\2\u15ea\u15eb\3\2\2\2\u15eb\u15ec\3\2\2\2\u15ec\u15ed\5\u0262\u0132"+
		"\2\u15ed\u0269\3\2\2\2\u15ee\u15f3\5\u026c\u0137\2\u15ef\u15f3\5\u0270"+
		"\u0139\2\u15f0\u15f3\5\u0272\u013a\2\u15f1\u15f3\5\u027c\u013f\2\u15f2"+
		"\u15ee\3\2\2\2\u15f2\u15ef\3\2\2\2\u15f2\u15f0\3\2\2\2\u15f2\u15f1\3\2"+
		"\2\2\u15f3\u026b\3\2\2\2\u15f4\u15f5\7\u00ab\2\2\u15f5\u15f6\7\u00da\2"+
		"\2\u15f6\u1600\5\u0346\u01a4\2\u15f7\u15f9\5\u03c8\u01e5\2\u15f8\u15fa"+
		"\5\u0390\u01c9\2\u15f9\u15f8\3\2\2\2\u15f9\u15fa\3\2\2\2\u15fa\u1601\3"+
		"\2\2\2\u15fb\u15fd\5\u0390\u01c9\2\u15fc\u15fe\5\u026e\u0138\2\u15fd\u15fc"+
		"\3\2\2\2\u15fd\u15fe\3\2\2\2\u15fe\u1601\3\2\2\2\u15ff\u1601\5\u026e\u0138"+
		"\2\u1600\u15f7\3\2\2\2\u1600\u15fb\3\2\2\2\u1600\u15ff\3\2\2\2\u1600\u1601"+
		"\3\2\2\2\u1601\u026d\3\2\2\2\u1602\u1603\t=\2\2\u1603\u1604\5\u03c8\u01e5"+
		"\2\u1604\u026f\3\2\2\2\u1605\u160d\5\u0318\u018d\2\u1606\u160d\5\u0324"+
		"\u0193\2\u1607\u160d\5\u028c\u0147\2\u1608\u160d\5\u02fe\u0180\2\u1609"+
		"\u160d\5\u0304\u0183\2\u160a\u160d\5\u0306\u0184\2\u160b\u160d\5\u028a"+
		"\u0146\2\u160c\u1605\3\2\2\2\u160c\u1606\3\2\2\2\u160c\u1607\3\2\2\2\u160c"+
		"\u1608\3\2\2\2\u160c\u1609\3\2\2\2\u160c\u160a\3\2\2\2\u160c\u160b\3\2"+
		"\2\2\u160d\u0271\3\2\2\2\u160e\u1613\5\u0274\u013b\2\u160f\u1613\5\u0276"+
		"\u013c\2\u1610\u1613\5\u0278\u013d\2\u1611\u1613\5\u027a\u013e\2\u1612"+
		"\u160e\3\2\2\2\u1612\u160f\3\2\2\2\u1612\u1610\3\2\2\2\u1612\u1611\3\2"+
		"\2\2\u1613\u0273\3\2\2\2\u1614\u1615\7F\2\2\u1615\u1616\5\u03fc\u01ff"+
		"\2\u1616\u0275\3\2\2\2\u1617\u1618\7\u0166\2\2\u1618\u161a\5\u03fc\u01ff"+
		"\2\u1619\u161b\5\u0342\u01a2\2\u161a\u1619\3\2\2\2\u161a\u161b\3\2\2\2"+
		"\u161b\u0277\3\2\2\2\u161c\u161d\7\u00b5\2\2\u161d\u1632\5\u03fc\u01ff"+
		"\2\u161e\u161f\7\u00f4\2\2\u161f\u1624\5\u03f8\u01fd\2\u1620\u1621\7\u028d"+
		"\2\2\u1621\u1623\5\u03f8\u01fd\2\u1622\u1620\3\2\2\2\u1623\u1626\3\2\2"+
		"\2\u1624\u1622\3\2\2\2\u1624\u1625\3\2\2\2\u1625\u1633\3\2\2\2\u1626\u1624"+
		"\3\2\2\2\u1627\u1628\7\64\2\2\u1628\u1629\7I\2\2\u1629\u162a\7\u00f4\2"+
		"\2\u162a\u162f\5\u03f8\u01fd\2\u162b\u162c\7\u028d\2\2\u162c\u162e\5\u03f8"+
		"\u01fd\2\u162d\u162b\3\2\2\2\u162e\u1631\3\2\2\2\u162f\u162d\3\2\2\2\u162f"+
		"\u1630\3\2\2\2\u1630\u1633\3\2\2\2\u1631\u162f\3\2\2\2\u1632\u161e\3\2"+
		"\2\2\u1632\u1627\3\2\2\2\u1633\u0279\3\2\2\2\u1634\u1635\7\u0166\2\2\u1635"+
		"\u1636\5\u03f8\u01fd\2\u1636\u1639\7\u00bf\2\2\u1637\u163a\5\u028c\u0147"+
		"\2\u1638\u163a\5\u0346\u01a4\2\u1639\u1637\3\2\2\2\u1639\u1638\3\2\2\2"+
		"\u163a\u163c\3\2\2\2\u163b\u163d\5\u0390\u01c9\2\u163c\u163b\3\2\2\2\u163c"+
		"\u163d\3\2\2\2\u163d\u027b\3\2\2\2\u163e\u1644\5\u027e\u0140\2\u163f\u1644"+
		"\5\u0280\u0141\2\u1640\u1644\5\u0282\u0142\2\u1641\u1644\5\u0286\u0144"+
		"\2\u1642\u1644\5\u0288\u0145\2\u1643\u163e\3\2\2\2\u1643\u163f\3\2\2\2"+
		"\u1643\u1640\3\2\2\2\u1643\u1641\3\2\2\2\u1643\u1642\3\2\2\2\u1644\u027d"+
		"\3\2\2\2\u1645\u1646\7\u01d6\2\2\u1646\u1654\7\u0214\2\2\u1647\u1648\7"+
		"\u0199\2\2\u1648\u1655\t>\2\2\u1649\u164a\7\u00f8\2\2\u164a\u164e\7\u0105"+
		"\2\2\u164b\u164f\7\u01d2\2\2\u164c\u164d\7\u0199\2\2\u164d\u164f\7O\2"+
		"\2\u164e\u164b\3\2\2\2\u164e\u164c\3\2\2\2\u164f\u1655\3\2\2\2\u1650\u1651"+
		"\7\u022b\2\2\u1651\u1652\7\u01ba\2\2\u1652\u1653\7\u01cd\2\2\u1653\u1655"+
		"\5\u03d2\u01ea\2\u1654\u1647\3\2\2\2\u1654\u1649\3\2\2\2\u1654\u1650\3"+
		"\2\2\2\u1654\u1655\3\2\2\2\u1655\u1658\3\2\2\2\u1656\u1657\7\u0133\2\2"+
		"\u1657\u1659\5\u042e\u0218\2\u1658\u1656\3\2\2\2\u1658\u1659\3\2\2\2\u1659"+
		"\u027f\3\2\2\2\u165a\u165b\7\u01d6\2\2\u165b\u1665\t?\2\2\u165c\u1666"+
		"\7\13\2\2\u165d\u1662\5\u03e8\u01f5\2\u165e\u165f\7\u028d\2\2\u165f\u1661"+
		"\5\u03e8\u01f5\2\u1660\u165e\3\2\2\2\u1661\u1664\3\2\2\2\u1662\u1660\3"+
		"\2\2\2\u1662\u1663\3\2\2\2\u1663\u1666\3\2\2\2\u1664\u1662\3\2\2\2\u1665"+
		"\u165c\3\2\2\2\u1665\u165d\3\2\2\2\u1666\u1667\3\2\2\2\u1667\u1668\t\13"+
		"\2\2\u1668\u0281\3\2\2\2\u1669\u166b\7N\2\2\u166a\u166c\7\u0246\2\2\u166b"+
		"\u166a\3\2\2\2\u166b\u166c\3\2\2\2\u166c\u167a\3\2\2\2\u166d\u166e\7M"+
		"\2\2\u166e\u167b\5\u0346\u01a4\2\u166f\u1678\7\u00c1\2\2\u1670\u1671\7"+
		"a\2\2\u1671\u1679\5\u0346\u01a4\2\u1672\u1679\7b\2\2\u1673\u1676\5\u0346"+
		"\u01a4\2\u1674\u1675\7\u028d\2\2\u1675\u1677\5\u0346\u01a4\2\u1676\u1674"+
		"\3\2\2\2\u1676\u1677\3\2\2\2\u1677\u1679\3\2\2\2\u1678\u1670\3\2\2\2\u1678"+
		"\u1672\3\2\2\2\u1678\u1673\3\2\2\2\u1679\u167b\3\2\2\2\u167a\u166d\3\2"+
		"\2\2\u167a\u166f\3\2\2\2\u167a\u167b\3\2\2\2\u167b\u167d\3\2\2\2\u167c"+
		"\u167e\5\u0284\u0143\2\u167d\u167c\3\2\2\2\u167d\u167e\3\2\2\2\u167e\u0283"+
		"\3\2\2\2\u167f\u1681\7\u0247\2\2\u1680\u1682\t@\2\2\u1681\u1680\3\2\2"+
		"\2\u1681\u1682\3\2\2\2\u1682\u1684\3\2\2\2\u1683\u1685\tA\2\2\u1684\u1683"+
		"\3\2\2\2\u1684\u1685\3\2\2\2\u1685\u0285\3\2\2\2\u1686\u1688\7\u01ba\2"+
		"\2\u1687\u1689\7\u0246\2\2\u1688\u1687\3\2\2\2\u1688\u1689\3\2\2\2\u1689"+
		"\u1691\3\2\2\2\u168a\u168c\7\u0210\2\2\u168b\u168d\7\u01c4\2\2\u168c\u168b"+
		"\3\2\2\2\u168c\u168d\3\2\2\2\u168d\u168e\3\2\2\2\u168e\u1692\5\u03d0\u01e9"+
		"\2\u168f\u1690\7\u00c1\2\2\u1690\u1692\5\u042e\u0218\2\u1691\u168a\3\2"+
		"\2\2\u1691\u168f\3\2\2\2\u1691\u1692\3\2\2\2\u1692\u0287\3\2\2\2\u1693"+
		"\u1694\7\u01c4\2\2\u1694\u1695\5\u03d0\u01e9\2\u1695\u0289\3\2\2\2\u1696"+
		"\u1697\7\u00ae\2\2\u1697\u169c\7\u0184\2\2\u1698\u1699\7\u01d6\2\2\u1699"+
		"\u169a\7\u01ef\2\2\u169a\u169b\7\u029e\2\2\u169b\u169d\5\u042e\u0218\2"+
		"\u169c\u1698\3\2\2\2\u169c\u169d\3\2\2\2\u169d\u16a0\3\2\2\2\u169e\u169f"+
		"\7\u00f4\2\2\u169f\u16a1\5\u0408\u0205\2\u16a0\u169e\3\2\2\2\u16a0\u16a1"+
		"\3\2\2\2\u16a1\u16a2\3\2\2\2\u16a2\u16a8\7\u00bf\2\2\u16a3\u16a9\5\u028c"+
		"\u0147\2\u16a4\u16a9\5\u02fe\u0180\2\u16a5\u16a9\5\u0304\u0183\2\u16a6"+
		"\u16a9\5\u0306\u0184\2\u16a7\u16a9\5\u0318\u018d\2\u16a8\u16a3\3\2\2\2"+
		"\u16a8\u16a4\3\2\2\2\u16a8\u16a5\3\2\2\2\u16a8\u16a6\3\2\2\2\u16a8\u16a7"+
		"\3\2\2\2\u16a9\u028b\3\2\2\2\u16aa\u16ac\5\u028e\u0148\2\u16ab\u16aa\3"+
		"\2\2\2\u16ab\u16ac\3\2\2\2\u16ac\u16ad\3\2\2\2\u16ad\u16ae\5\u0296\u014c"+
		"\2\u16ae\u028d\3\2\2\2\u16af\u16b0\7\u0243\2\2\u16b0\u16b5\5\u0290\u0149"+
		"\2\u16b1\u16b2\7\u028d\2\2\u16b2\u16b4\5\u0290\u0149\2\u16b3\u16b1\3\2"+
		"\2\2\u16b4\u16b7\3\2\2\2\u16b5\u16b3\3\2\2\2\u16b5\u16b6\3\2\2\2\u16b6"+
		"\u028f\3\2\2\2\u16b7\u16b5\3\2\2\2\u16b8\u16ba\5\u03e6\u01f4\2\u16b9\u16bb"+
		"\5\u00b0Y\2\u16ba\u16b9\3\2\2\2\u16ba\u16bb\3\2\2\2\u16bb\u16bc\3\2\2"+
		"\2\u16bc\u16bd\7\26\2\2\u16bd\u16be\7\u0287\2\2\u16be\u16c0\5\u0296\u014c"+
		"\2\u16bf\u16c1\5\u02f2\u017a\2\u16c0\u16bf\3\2\2\2\u16c0\u16c1\3\2\2\2"+
		"\u16c1\u16c2\3\2\2\2\u16c2\u16c4\7\u0288\2\2\u16c3\u16c5\5\u0292\u014a"+
		"\2\u16c4\u16c3\3\2\2\2\u16c4\u16c5\3\2\2\2\u16c5\u16c7\3\2\2\2\u16c6\u16c8"+
		"\5\u0294\u014b\2\u16c7\u16c6\3\2\2\2\u16c7\u16c8\3\2\2\2\u16c8\u0291\3"+
		"\2\2\2\u16c9\u16ca\7\u01c9\2\2\u16ca\u16cb\tB\2\2\u16cb\u16cc\7\u00b8"+
		"\2\2\u16cc\u16cd\7\65\2\2\u16cd\u16cf\5\u0404\u0203\2\u16ce\u16d0\7\27"+
		"\2\2\u16cf\u16ce\3\2\2\2\u16cf\u16d0\3\2\2\2\u16d0\u16d2\3\2\2\2\u16d1"+
		"\u16d3\7\u008a\2\2\u16d2\u16d1\3\2\2\2\u16d2\u16d3\3\2\2\2\u16d3\u16d6"+
		"\3\2\2\2\u16d4\u16d5\7\u0158\2\2\u16d5\u16d7\7\u00b8\2\2\u16d6\u16d4\3"+
		"\2\2\2\u16d6\u16d7\3\2\2\2\u16d7\u16da\3\2\2\2\u16d8\u16d9\7\u0158\2\2"+
		"\u16d9\u16db\7\u0100\2\2\u16da\u16d8\3\2\2\2\u16da\u16db\3\2\2\2\u16db"+
		"\u16ee\3\2\2\2\u16dc\u16dd\7\u028d\2\2\u16dd\u16df\5\u0404\u0203\2\u16de"+
		"\u16e0\7\27\2\2\u16df\u16de\3\2\2\2\u16df\u16e0\3\2\2\2\u16e0\u16e2\3"+
		"\2\2\2\u16e1\u16e3\7\u008a\2\2\u16e2\u16e1\3\2\2\2\u16e2\u16e3\3\2\2\2"+
		"\u16e3\u16e6\3\2\2\2\u16e4\u16e5\7\u0158\2\2\u16e5\u16e7\7\u00b8\2\2\u16e6"+
		"\u16e4\3\2\2\2\u16e6\u16e7\3\2\2\2\u16e7\u16ea\3\2\2\2\u16e8\u16e9\7\u0158"+
		"\2\2\u16e9\u16eb\7\u0100\2\2\u16ea\u16e8\3\2\2\2\u16ea\u16eb\3\2\2\2\u16eb"+
		"\u16ed\3\2\2\2\u16ec\u16dc\3\2\2\2\u16ed\u16f0\3\2\2\2\u16ee\u16ec\3\2"+
		"\2\2\u16ee\u16ef\3\2\2\2\u16ef\u16f1\3\2\2\2\u16f0\u16ee\3\2\2\2\u16f1"+
		"\u16f2\7\u01d6\2\2\u16f2\u16f3\5\u0404\u0203\2\u16f3\u0293\3\2\2\2\u16f4"+
		"\u16f5\7o\2\2\u16f5\u16fa\5\u0404\u0203\2\u16f6\u16f7\7\u028d\2\2\u16f7"+
		"\u16f9\5\u0404\u0203\2\u16f8\u16f6\3\2\2\2\u16f9\u16fc\3\2\2\2\u16fa\u16f8"+
		"\3\2\2\2\u16fa\u16fb\3\2\2\2\u16fb\u16fd\3\2\2\2\u16fc\u16fa\3\2\2\2\u16fd"+
		"\u16fe\7\u01d6\2\2\u16fe\u16ff\5\u0404\u0203\2\u16ff\u1700\7\u0210\2\2"+
		"\u1700\u1701\5\u0346\u01a4\2\u1701\u1702\7\u0082\2\2\u1702\u1703\5\u0346"+
		"\u01a4\2\u1703\u0295\3\2\2\2\u1704\u1705\b\u014c\1\2\u1705\u1706\7\u0287"+
		"\2\2\u1706\u1707\5\u0296\u014c\2\u1707\u1708\7\u0288\2\2\u1708\u170b\3"+
		"\2\2\2\u1709\u170b\5\u029a\u014e\2\u170a\u1704\3\2\2\2\u170a\u1709\3\2"+
		"\2\2\u170b\u1714\3\2\2\2\u170c\u170d\f\4\2\2\u170d\u170e\5\u0298\u014d"+
		"\2\u170e\u1710\5\u0296\u014c\2\u170f\u1711\5\u02f2\u017a\2\u1710\u170f"+
		"\3\2\2\2\u1710\u1711\3\2\2\2\u1711\u1713\3\2\2\2\u1712\u170c\3\2\2\2\u1713"+
		"\u1716\3\2\2\2\u1714\u1712\3\2\2\2\u1714\u1715\3\2\2\2\u1715\u0297\3\2"+
		"\2\2\u1716\u1714\3\2\2\2\u1717\u1719\tC\2\2\u1718\u171a\7\13\2\2\u1719"+
		"\u1718\3\2\2\2\u1719\u171a\3\2\2\2\u171a\u0299\3\2\2\2\u171b\u171d\7\u01ce"+
		"\2\2\u171c\u171e\tD\2\2\u171d\u171c\3\2\2\2\u171d\u171e\3\2\2\2\u171e"+
		"\u171f\3\2\2\2\u171f\u1724\5\u029c\u014f\2\u1720\u1721\7\u028d\2\2\u1721"+
		"\u1723\5\u029c\u014f\2\u1722\u1720\3\2\2\2\u1723\u1726\3\2\2\2\u1724\u1722"+
		"\3\2\2\2\u1724\u1725\3\2\2\2\u1725\u1728\3\2\2\2\u1726\u1724\3\2\2\2\u1727"+
		"\u1729\5\u03c8\u01e5\2\u1728\u1727\3\2\2\2\u1728\u1729\3\2\2\2\u1729\u172b"+
		"\3\2\2\2\u172a\u172c\5\u029e\u0150\2\u172b\u172a\3\2\2\2\u172b\u172c\3"+
		"\2\2\2\u172c\u172e\3\2\2\2\u172d\u172f\5\u03c4\u01e3\2\u172e\u172d\3\2"+
		"\2\2\u172e\u172f\3\2\2\2\u172f\u1731\3\2\2\2\u1730\u1732\5\u02c4\u0163"+
		"\2\u1731\u1730\3\2\2\2\u1731\u1732\3\2\2\2\u1732\u1737\3\2\2\2\u1733\u1736"+
		"\5\u02c8\u0165\2\u1734\u1736\5\u02d2\u016a\2\u1735\u1733\3\2\2\2\u1735"+
		"\u1734\3\2\2\2\u1736\u1739\3\2\2\2\u1737\u1735\3\2\2\2\u1737\u1738\3\2"+
		"\2\2\u1738\u173b\3\2\2\2\u1739\u1737\3\2\2\2\u173a\u173c\5\u02d4\u016b"+
		"\2\u173b\u173a\3\2\2\2\u173b\u173c\3\2\2\2\u173c\u1742\3\2\2\2\u173d\u1741"+
		"\5\u02f6\u017c\2\u173e\u1741\5\u02f2\u017a\2\u173f\u1741\5\u02fc\u017f"+
		"\2\u1740\u173d\3\2\2\2\u1740\u173e\3\2\2\2\u1740\u173f\3\2\2\2\u1741\u1744"+
		"\3\2\2\2\u1742\u1740\3\2\2\2\u1742\u1743\3\2\2\2\u1743\u029b\3\2\2\2\u1744"+
		"\u1742\3\2\2\2\u1745\u1750\5\u040c\u0207\2\u1746\u1747\5\u040a\u0206\2"+
		"\u1747\u1748\7\u0280\2\2\u1748\u1749\5\u040c\u0207\2\u1749\u1750\3\2\2"+
		"\2\u174a\u1750\5\u0408\u0205\2\u174b\u174d\5\u0346\u01a4\2\u174c\u174e"+
		"\5\u03be\u01e0\2\u174d\u174c\3\2\2\2\u174d\u174e\3\2\2\2\u174e\u1750\3"+
		"\2\2\2\u174f\u1745\3\2\2\2\u174f\u1746\3\2\2\2\u174f\u174a\3\2\2\2\u174f"+
		"\u174b\3\2\2\2\u1750\u029d\3\2\2\2\u1751\u1752\7\u00c6\2\2\u1752\u1757"+
		"\5\u02a2\u0152\2\u1753\u1754\7\u028d\2\2\u1754\u1756\5\u02a2\u0152\2\u1755"+
		"\u1753\3\2\2\2\u1756\u1759\3\2\2\2\u1757\u1755\3\2\2\2\u1757\u1758\3\2"+
		"\2\2\u1758\u029f\3\2\2\2\u1759\u1757\3\2\2\2\u175a\u175d\5\u02a2\u0152"+
		"\2\u175b\u175e\5\u02b2\u015a\2\u175c\u175e\5\u02be\u0160\2\u175d\u175b"+
		"\3\2\2\2\u175d\u175c\3\2\2\2\u175d\u175e\3\2\2\2\u175e\u02a1\3\2\2\2\u175f"+
		"\u1760\b\u0152\1\2\u1760\u1764\5\u02a4\u0153\2\u1761\u1763\5\u02b0\u0159"+
		"\2\u1762\u1761\3\2\2\2\u1763\u1766\3\2\2\2\u1764\u1762\3\2\2\2\u1764\u1765"+
		"\3\2\2\2\u1765\u1772\3\2\2\2\u1766\u1764\3\2\2\2\u1767\u176b\5\u02a4\u0153"+
		"\2\u1768\u176a\5\u02b0\u0159\2\u1769\u1768\3\2\2\2\u176a\u176d\3\2\2\2"+
		"\u176b\u1769\3\2\2\2\u176b\u176c\3\2\2\2\u176c\u176f\3\2\2\2\u176d\u176b"+
		"\3\2\2\2\u176e\u1770\5\u03c0\u01e1\2\u176f\u176e\3\2\2\2\u176f\u1770\3"+
		"\2\2\2\u1770\u1772\3\2\2\2\u1771\u175f\3\2\2\2\u1771\u1767\3\2\2\2\u1772"+
		"\u1777\3\2\2\2\u1773\u1774\f\5\2\2\u1774\u1776\5\u02a6\u0154\2\u1775\u1773"+
		"\3\2\2\2\u1776\u1779\3\2\2\2\u1777\u1775\3\2\2\2\u1777\u1778\3\2\2\2\u1778"+
		"\u02a3\3\2\2\2\u1779\u1777\3\2\2\2\u177a\u177d\5\u0336\u019c\2\u177b\u177e"+
		"\5\u02b2\u015a\2\u177c\u177e\5\u02be\u0160\2\u177d\u177b\3\2\2\2\u177d"+
		"\u177c\3\2\2\2\u177d\u177e\3\2\2\2\u177e\u1785\3\2\2\2\u177f\u1780\7\u0165"+
		"\2\2\u1780\u1781\7\u0287\2\2\u1781\u1782\5\u0336\u019c\2\u1782\u1783\7"+
		"\u0288\2\2\u1783\u1785\3\2\2\2\u1784\u177a\3\2\2\2\u1784\u177f\3\2\2\2"+
		"\u1785\u02a5\3\2\2\2\u1786\u1788\5\u02ae\u0158\2\u1787\u1786\3\2\2\2\u1787"+
		"\u1788\3\2\2\2\u1788\u178a\3\2\2\2\u1789\u178b\5\u02ac\u0157\2\u178a\u1789"+
		"\3\2\2\2\u178a\u178b\3\2\2\2\u178b\u178c\3\2\2\2\u178c\u178d\7\u00fb\2"+
		"\2\u178d\u178f\5\u02a2\u0152\2\u178e\u1790\5\u02ae\u0158\2\u178f\u178e"+
		"\3\2\2\2\u178f\u1790\3\2\2\2\u1790\u1793\3\2\2\2\u1791\u1794\5\u02a8\u0155"+
		"\2\u1792\u1794\5\u02aa\u0156\2\u1793\u1791\3\2\2\2\u1793\u1792\3\2\2\2"+
		"\u1793\u1794\3\2\2\2\u1794\u02a7\3\2\2\2\u1795\u1796\7\u0164\2\2\u1796"+
		"\u1797\5\u0344\u01a3\2\u1797\u02a9\3\2\2\2\u1798\u1799\7\u022c\2\2\u1799"+
		"\u179a\7\u0287\2\2\u179a\u179f\5\u0404\u0203\2\u179b\u179c\7\u028d\2\2"+
		"\u179c\u179e\5\u0404\u0203\2\u179d\u179b\3\2\2\2\u179e\u17a1\3\2\2\2\u179f"+
		"\u179d\3\2\2\2\u179f\u17a0\3\2\2\2\u17a0\u17a2\3\2\2\2\u17a1\u179f\3\2"+
		"\2\2\u17a2\u17a3\7\u0288\2\2\u17a3\u02ab\3\2\2\2\u17a4\u17b0\7i\2\2\u17a5"+
		"\u17a7\7\u0135\2\2\u17a6\u17a5\3\2\2\2\u17a6\u17a7\3\2\2\2\u17a7\u17ad"+
		"\3\2\2\2\u17a8\u17ae\7\u00ea\2\2\u17a9\u17ab\tE\2\2\u17aa\u17ac\7\u016f"+
		"\2\2\u17ab\u17aa\3\2\2\2\u17ab\u17ac\3\2\2\2\u17ac\u17ae\3\2\2\2\u17ad"+
		"\u17a8\3\2\2\2\u17ad\u17a9\3\2\2\2\u17ae\u17b0\3\2\2\2\u17af\u17a4\3\2"+
		"\2\2\u17af\u17a6\3\2\2\2\u17b0\u02ad\3\2\2\2\u17b1\u17b2\7\u0178\2\2\u17b2"+
		"\u17c0\7\65\2\2\u17b3\u17b4\7\u0287\2\2\u17b4\u17b5\5\u0296\u014c\2\u17b5"+
		"\u17b6\7\u0288\2\2\u17b6\u17c1\3\2\2\2\u17b7\u17c1\5\u0342\u01a2\2\u17b8"+
		"\u17bd\5\u0346\u01a4\2\u17b9\u17ba\7\u028d\2\2\u17ba\u17bc\5\u0346\u01a4"+
		"\2\u17bb\u17b9\3\2\2\2\u17bc\u17bf\3\2\2\2\u17bd\u17bb\3\2\2\2\u17bd\u17be"+
		"\3\2\2\2\u17be\u17c1\3\2\2\2\u17bf\u17bd\3\2\2\2\u17c0\u17b3\3\2\2\2\u17c0"+
		"\u17b7\3\2\2\2\u17c0\u17b8\3\2\2\2\u17c1\u02af\3\2\2\2\u17c2\u17c3\7\u0238"+
		"\2\2\u17c3\u17c4\7%\2\2\u17c4\u17c5\tF\2\2\u17c5\u17cb\5\u0346\u01a4\2"+
		"\u17c6\u17c7\7\26\2\2\u17c7\u17c8\7\u015e\2\2\u17c8\u17c9\tG\2\2\u17c9"+
		"\u17cb\5\u0346\u01a4\2\u17ca\u17c2\3\2\2\2\u17ca\u17c6\3\2\2\2\u17cb\u02b1"+
		"\3\2\2\2\u17cc\u17ce\7\u0183\2\2\u17cd\u17cf\7\u0249\2\2\u17ce\u17cd\3"+
		"\2\2\2\u17ce\u17cf\3\2\2\2\u17cf\u17d0\3\2\2\2\u17d0\u17d1\7\u0287\2\2"+
		"\u17d1\u17d6\5\u02b4\u015b\2\u17d2\u17d3\7\u028d\2\2\u17d3\u17d5\5\u02b4"+
		"\u015b\2\u17d4\u17d2\3\2\2\2\u17d5\u17d8\3\2\2\2\u17d6\u17d4\3\2\2\2\u17d6"+
		"\u17d7\3\2\2\2\u17d7\u17d9\3\2\2\2\u17d8\u17d6\3\2\2\2\u17d9\u17da\5\u02b6"+
		"\u015c\2\u17da\u17db\5\u02b8\u015d\2\u17db\u17dc\7\u0288\2\2\u17dc\u02b3"+
		"\3\2\2\2\u17dd\u17de\5\u03e4\u01f3\2\u17de\u17df\7\u0287\2\2\u17df\u17e0"+
		"\5\u0346\u01a4\2\u17e0\u17e2\7\u0288\2\2\u17e1\u17e3\5\u03be\u01e0\2\u17e2"+
		"\u17e1\3\2\2\2\u17e2\u17e3\3\2\2\2\u17e3\u02b5\3\2\2\2\u17e4\u17f1\7\u00bf"+
		"\2\2\u17e5\u17f2\5\u0404\u0203\2\u17e6\u17e7\7\u0287\2\2\u17e7\u17ec\5"+
		"\u0404\u0203\2\u17e8\u17e9\7\u028d\2\2\u17e9\u17eb\5\u0404\u0203\2\u17ea"+
		"\u17e8\3\2\2\2\u17eb\u17ee\3\2\2\2\u17ec\u17ea\3\2\2\2\u17ec\u17ed\3\2"+
		"\2\2\u17ed\u17ef\3\2\2\2\u17ee\u17ec\3\2\2\2\u17ef\u17f0\7\u0288\2\2\u17f0"+
		"\u17f2\3\2\2\2\u17f1\u17e5\3\2\2\2\u17f1\u17e6\3\2\2\2\u17f2\u02b7\3\2"+
		"\2\2\u17f3\u17f4\7\u00db\2\2\u17f4\u1806\7\u0287\2\2\u17f5\u1807\5\u0296"+
		"\u014c\2\u17f6\u17fb\7\22\2\2\u17f7\u17f8\7\u028d\2\2\u17f8\u17fa\7\22"+
		"\2\2\u17f9\u17f7\3\2\2\2\u17fa\u17fd\3\2\2\2\u17fb\u17f9\3\2\2\2\u17fb"+
		"\u17fc\3\2\2\2\u17fc\u1807\3\2\2\2\u17fd\u17fb\3\2\2\2\u17fe\u1803\5\u02ba"+
		"\u015e\2\u17ff\u1800\7\u028d\2\2\u1800\u1802\5\u02ba\u015e\2\u1801\u17ff"+
		"\3\2\2\2\u1802\u1805\3\2\2\2\u1803\u1801\3\2\2\2\u1803\u1804\3\2\2\2\u1804"+
		"\u1807\3\2\2\2\u1805\u1803\3\2\2\2\u1806\u17f5\3\2\2\2\u1806\u17f6\3\2"+
		"\2\2\u1806\u17fe\3\2\2\2\u1807\u1808\3\2\2\2\u1808\u1809\7\u0288\2\2\u1809"+
		"\u02b9\3\2\2\2\u180a\u180c\5\u02bc\u015f\2\u180b\u180d\5\u03be\u01e0\2"+
		"\u180c\u180b\3\2\2\2\u180c\u180d\3\2\2\2\u180d\u02bb\3\2\2\2\u180e\u1811"+
		"\5\u0346\u01a4\2\u180f\u1811\5\u0342\u01a2\2\u1810\u180e\3\2\2\2\u1810"+
		"\u180f\3\2\2\2\u1811\u02bd\3\2\2\2\u1812\u1815\7\u0222\2\2\u1813\u1814"+
		"\tH\2\2\u1814\u1816\7\u0158\2\2\u1815\u1813\3\2\2\2\u1815\u1816\3\2\2"+
		"\2\u1816\u1817\3\2\2\2\u1817\u1824\7\u0287\2\2\u1818\u1825\5\u0404\u0203"+
		"\2\u1819\u181a\7\u0287\2\2\u181a\u181f\5\u0404\u0203\2\u181b\u181c\7\u028d"+
		"\2\2\u181c\u181e\5\u0404\u0203\2\u181d\u181b\3\2\2\2\u181e\u1821\3\2\2"+
		"\2\u181f\u181d\3\2\2\2\u181f\u1820\3\2\2\2\u1820\u1822\3\2\2\2\u1821\u181f"+
		"\3\2\2\2\u1822\u1823\7\u0288\2\2\u1823\u1825\3\2\2\2\u1824\u1818\3\2\2"+
		"\2\u1824\u1819\3\2\2\2\u1825\u1826\3\2\2\2\u1826\u1827\5\u02b6\u015c\2"+
		"\u1827\u1828\5\u02c0\u0161\2\u1828\u1829\7\u0288\2\2\u1829\u02bf\3\2\2"+
		"\2\u182a\u182b\7\u00db\2\2\u182b\u182c\7\u0287\2\2\u182c\u1831\5\u02c2"+
		"\u0162\2\u182d\u182e\7\u028d\2\2\u182e\u1830\5\u02c2\u0162\2\u182f\u182d"+
		"\3\2\2\2\u1830\u1833\3\2\2\2\u1831\u182f\3\2\2\2\u1831\u1832\3\2\2\2\u1832"+
		"\u1834\3\2\2\2\u1833\u1831\3\2\2\2\u1834\u1835\7\u0288\2\2\u1835\u02c1"+
		"\3\2\2\2\u1836\u1843\5\u0404\u0203\2\u1837\u1838\7\u0287\2\2\u1838\u183d"+
		"\5\u0404\u0203\2\u1839\u183a\7\u028d\2\2\u183a\u183c\5\u0404\u0203\2\u183b"+
		"\u1839\3\2\2\2\u183c\u183f\3\2\2\2\u183d\u183b\3\2\2\2\u183d\u183e\3\2"+
		"\2\2\u183e\u1840\3\2\2\2\u183f\u183d\3\2\2\2\u1840\u1841\7\u0288\2\2\u1841"+
		"\u1843\3\2\2\2\u1842\u1836\3\2\2\2\u1842\u1837\3\2\2\2\u1843\u1853\3\2"+
		"\2\2\u1844\u1851\7\26\2\2\u1845\u1852\5\u0428\u0215\2\u1846\u1847\7\u0287"+
		"\2\2\u1847\u184c\5\u0428\u0215\2\u1848\u1849\7\u028d\2\2\u1849\u184b\5"+
		"\u0428\u0215\2\u184a\u1848\3\2\2\2\u184b\u184e\3\2\2\2\u184c\u184a\3\2"+
		"\2\2\u184c\u184d\3\2\2\2\u184d\u184f\3\2\2\2\u184e\u184c\3\2\2\2\u184f"+
		"\u1850\7\u0288\2\2\u1850\u1852\3\2\2\2\u1851\u1845\3\2\2\2\u1851\u1846"+
		"\3\2\2\2\u1852\u1854\3\2\2\2\u1853\u1844\3\2\2\2\u1853\u1854\3\2\2\2\u1854"+
		"\u02c3\3\2\2\2\u1855\u1856\7W\2\2\u1856\u1858\7\65\2\2\u1857\u1859\7\u0144"+
		"\2\2\u1858\u1857\3\2\2\2\u1858\u1859\3\2\2\2\u1859\u185a\3\2\2\2\u185a"+
		"\u185c\5\u0344\u01a3\2\u185b\u185d\5\u02c6\u0164\2\u185c\u185b\3\2\2\2"+
		"\u185c\u185d\3\2\2\2\u185d\u1867\3\2\2\2\u185e\u185f\5\u02c6\u0164\2\u185f"+
		"\u1860\7W\2\2\u1860\u1862\7\65\2\2\u1861\u1863\7\u0144\2\2\u1862\u1861"+
		"\3\2\2\2\u1862\u1863\3\2\2\2\u1863\u1864\3\2\2\2\u1864\u1865\5\u0344\u01a3"+
		"\2\u1865\u1867\3\2\2\2\u1866\u1855\3\2\2\2\u1866\u185e\3\2\2\2\u1867\u02c5"+
		"\3\2\2\2\u1868\u1869\7\u01ec\2\2\u1869\u186a\7\u0243\2\2\u186a\u186b\5"+
		"\u0344\u01a3\2\u186b\u02c7\3\2\2\2\u186c\u186d\7\u00cd\2\2\u186d\u186e"+
		"\7\65\2\2\u186e\u1873\5\u02ca\u0166\2\u186f\u1870\7\u028d\2\2\u1870\u1872"+
		"\5\u02ca\u0166\2\u1871\u186f\3\2\2\2\u1872\u1875\3\2\2\2\u1873\u1871\3"+
		"\2\2\2\u1873\u1874\3\2\2\2\u1874\u02c9\3\2\2\2\u1875\u1873\3\2\2\2\u1876"+
		"\u187a\5\u02ce\u0168\2\u1877\u187a\5\u02cc\u0167\2\u1878\u187a\5\u0346"+
		"\u01a4\2\u1879\u1876\3\2\2\2\u1879\u1877\3\2\2\2\u1879\u1878\3\2\2\2\u187a"+
		"\u02cb\3\2\2\2\u187b\u187c\tI\2\2\u187c\u187d\7\u0287\2\2\u187d\u1882"+
		"\5\u02d0\u0169\2\u187e\u187f\7\u028d\2\2\u187f\u1881\5\u02d0\u0169\2\u1880"+
		"\u187e\3\2\2\2\u1881\u1884\3\2\2\2\u1882\u1880\3\2\2\2\u1882\u1883\3\2"+
		"\2\2\u1883\u1885\3\2\2\2\u1884\u1882\3\2\2\2\u1885\u1886\7\u0288\2\2\u1886"+
		"\u02cd\3\2\2\2\u1887\u1888\7\u00cf\2\2\u1888\u1889\7\u01d7\2\2\u1889\u188a"+
		"\7\u0287\2\2\u188a\u188f\5\u02d0\u0169\2\u188b\u188c\7\u028d\2\2\u188c"+
		"\u188e\5\u02d0\u0169\2\u188d\u188b\3\2\2\2\u188e\u1891\3\2\2\2\u188f\u188d"+
		"\3\2\2\2\u188f\u1890\3\2\2\2\u1890\u1892\3\2\2\2\u1891\u188f\3\2\2\2\u1892"+
		"\u1893\7\u0288\2\2\u1893\u02cf\3\2\2\2\u1894\u1898\5\u02cc\u0167\2\u1895"+
		"\u1898\5\u0342\u01a2\2\u1896\u1898\5\u0346\u01a4\2\u1897\u1894\3\2\2\2"+
		"\u1897\u1895\3\2\2\2\u1897\u1896\3\2\2\2\u1898\u02d1\3\2\2\2\u1899\u189a"+
		"\7\u00d1\2\2\u189a\u189b\5\u0344\u01a3\2\u189b\u02d3\3\2\2\2\u189c\u18a0"+
		"\7\u012e\2\2\u189d\u189f\5\u02d6\u016c\2\u189e\u189d\3\2\2\2\u189f\u18a2"+
		"\3\2\2\2\u18a0\u189e\3\2\2\2\u18a0\u18a1\3\2\2\2\u18a1\u18a4\3\2\2\2\u18a2"+
		"\u18a0\3\2\2\2\u18a3\u18a5\5\u02d8\u016d\2\u18a4\u18a3\3\2\2\2\u18a4\u18a5"+
		"\3\2\2\2\u18a5\u18a9\3\2\2\2\u18a6\u18a8\5\u02da\u016e\2\u18a7\u18a6\3"+
		"\2\2\2\u18a8\u18ab\3\2\2\2\u18a9\u18a7\3\2\2\2\u18a9\u18aa\3\2\2\2\u18aa"+
		"\u18ac\3\2\2\2\u18ab\u18a9\3\2\2\2\u18ac\u18ad\5\u02dc\u016f\2\u18ad\u02d5"+
		"\3\2\2\2\u18ae\u18af\tJ\2\2\u18af\u18b7\7\u0137\2\2\u18b0\u18b4\7\u0220"+
		"\2\2\u18b1\u18b5\7\u008c\2\2\u18b2\u18b3\7\u01e0\2\2\u18b3\u18b5\7\u01a2"+
		"\2\2\u18b4\u18b1\3\2\2\2\u18b4\u18b2\3\2\2\2\u18b5\u18b7\3\2\2\2\u18b6"+
		"\u18ae\3\2\2\2\u18b6\u18b0\3\2\2\2\u18b7\u02d7\3\2\2\2\u18b8\u18b9\7\u01b2"+
		"\2\2\u18b9\u18ba\tK\2\2\u18ba\u18bb\7\u01bf\2\2\u18bb\u02d9\3\2\2\2\u18bc"+
		"\u18bd\7\u01a2\2\2\u18bd\u18be\5\u03e0\u01f1\2\u18be\u18bf\7\u0164\2\2"+
		"\u18bf\u18c0\7\u0287\2\2\u18c0\u18c1\5\u0296\u014c\2\u18c1\u18c2\7\u0288"+
		"\2\2\u18c2\u18c6\5\u02de\u0170\2\u18c3\u18c5\5\u02d6\u016c\2\u18c4\u18c3"+
		"\3\2\2\2\u18c5\u18c8\3\2\2\2\u18c6\u18c4\3\2\2\2\u18c6\u18c7\3\2\2\2\u18c7"+
		"\u02db\3\2\2\2\u18c8\u18c6\3\2\2\2\u18c9\u18ca\7\u011c\2\2\u18ca\u18cc"+
		"\5\u03e2\u01f2\2\u18cb\u18c9\3\2\2\2\u18cb\u18cc\3\2\2\2\u18cc\u18cd\3"+
		"\2\2\2\u18cd\u18d1\5\u02de\u0170\2\u18ce\u18d0\5\u02d6\u016c\2\u18cf\u18ce"+
		"\3\2\2\2\u18d0\u18d3\3\2\2\2\u18d1\u18cf\3\2\2\2\u18d1\u18d2\3\2\2\2\u18d2"+
		"\u18d4\3\2\2\2\u18d3\u18d1\3\2\2\2\u18d4\u18d5\5\u02e6\u0174\2\u18d5\u02dd"+
		"\3\2\2\2\u18d6\u18d8\5\u02e0\u0171\2\u18d7\u18d6\3\2\2\2\u18d7\u18d8\3"+
		"\2\2\2\u18d8\u18d9\3\2\2\2\u18d9\u18da\7\u008c\2\2\u18da\u18db\7\65\2"+
		"\2\u18db\u18dc\5\u02e2\u0172\2\u18dc\u18dd\7\u0123\2\2\u18dd\u18de\5\u02e2"+
		"\u0172\2\u18de\u02df\3\2\2\2\u18df\u18e0\7\u0178\2\2\u18e0\u18e1\7\65"+
		"\2\2\u18e1\u18e2\5\u02e2\u0172\2\u18e2\u02e1\3\2\2\2\u18e3\u18e4\7\u0287"+
		"\2\2\u18e4\u18e9\5\u02e4\u0173\2\u18e5\u18e6\7\u028d\2\2\u18e6\u18e8\5"+
		"\u02e4\u0173\2\u18e7\u18e5\3\2\2\2\u18e8\u18eb\3\2\2\2\u18e9\u18e7\3\2"+
		"\2\2\u18e9\u18ea\3\2\2\2\u18ea\u18ec\3\2\2\2\u18eb\u18e9\3\2\2\2\u18ec"+
		"\u18ed\7\u0288\2\2\u18ed\u02e3\3\2\2\2\u18ee\u18f0\5\u0346\u01a4\2\u18ef"+
		"\u18f1\5\u03c0\u01e1\2\u18f0\u18ef\3\2\2\2\u18f0\u18f1\3\2\2\2\u18f1\u02e5"+
		"\3\2\2\2\u18f2\u18f4\5\u02e8\u0175\2\u18f3\u18f2\3\2\2\2\u18f3\u18f4\3"+
		"\2\2\2\u18f4\u18f5\3\2\2\2\u18f5\u18f6\7\u0287\2\2\u18f6\u18fb\5\u02ea"+
		"\u0176\2\u18f7\u18f8\7\u028d\2\2\u18f8\u18fa\5\u02ea\u0176\2\u18f9\u18f7"+
		"\3\2\2\2\u18fa\u18fd\3\2\2\2\u18fb\u18f9\3\2\2\2\u18fb\u18fc\3\2\2\2\u18fc"+
		"\u18fe\3\2\2\2\u18fd\u18fb\3\2\2\2\u18fe\u18ff\7\u0288\2\2\u18ff\u02e7"+
		"\3\2\2\2\u1900\u1906\7\u01c0\2\2\u1901\u1907\7\u0226\2\2\u1902\u1904\7"+
		"\u0229\2\2\u1903\u1905\7\13\2\2\u1904\u1903\3\2\2\2\u1904\u1905\3\2\2"+
		"\2\u1905\u1907\3\2\2\2\u1906\u1901\3\2\2\2\u1906\u1902\3\2\2\2\u1906\u1907"+
		"\3\2\2\2\u1907\u190a\3\2\2\2\u1908\u1909\tL\2\2\u1909\u190b\7\u016b\2"+
		"\2\u190a\u1908\3\2\2\2\u190a\u190b\3\2\2\2\u190b\u190d\3\2\2\2\u190c\u190e"+
		"\5\u02ee\u0178\2\u190d\u190c\3\2\2\2\u190d\u190e\3\2\2\2\u190e\u02e9\3"+
		"\2\2\2\u190f\u1915\7\u0226\2\2\u1910\u1912\7\u0229\2\2\u1911\u1913\7\13"+
		"\2\2\u1912\u1911\3\2\2\2\u1912\u1913\3\2\2\2\u1913\u1915\3\2\2\2\u1914"+
		"\u190f\3\2\2\2\u1914\u1910\3\2\2\2\u1914\u1915\3\2\2\2\u1915\u1916\3\2"+
		"\2\2\u1916\u1918\5\u02ec\u0177\2\u1917\u1919\5\u02f2\u017a\2\u1918\u1917"+
		"\3\2\2\2\u1918\u1919\3\2\2\2\u1919\u191a\3\2\2\2\u191a\u191b\7\u029e\2"+
		"\2\u191b\u191c\5\u0346\u01a4\2\u191c\u02eb\3\2\2\2\u191d\u191e\5\u035c"+
		"\u01af\2\u191e\u02ed\3\2\2\2\u191f\u1920\7\u00f9\2\2\u1920\u1921\7\u0287"+
		"\2\2\u1921\u1922\5\u0346\u01a4\2\u1922\u1924\7\u0288\2\2\u1923\u1925\5"+
		"\u02f0\u0179\2\u1924\u1923\3\2\2\2\u1924\u1925\3\2\2\2\u1925\u02ef\3\2"+
		"\2\2\u1926\u1927\7\u0223\2\2\u1927\u1928\7\u0287\2\2\u1928\u1929\5\u0344"+
		"\u01a3\2\u1929\u192a\7\u0288\2\2\u192a\u02f1\3\2\2\2\u192b\u192d\7\u016b"+
		"\2\2\u192c\u192e\7\u01dd\2\2\u192d\u192c\3\2\2\2\u192d\u192e\3\2\2\2\u192e"+
		"\u192f\3\2\2\2\u192f\u1930\7\65\2\2\u1930\u1935\5\u02f4\u017b\2\u1931"+
		"\u1932\7\u028d\2\2\u1932\u1934\5\u02f4\u017b\2\u1933\u1931\3\2\2\2\u1934"+
		"\u1937\3\2\2\2\u1935\u1933\3\2\2\2\u1935\u1936\3\2\2\2\u1936\u02f3\3\2"+
		"\2\2\u1937\u1935\3\2\2\2\u1938\u193a\5\u0346\u01a4\2\u1939\u193b\t\20"+
		"\2\2\u193a\u1939\3\2\2\2\u193a\u193b\3\2\2\2\u193b\u193e\3\2\2\2\u193c"+
		"\u193d\7\u0158\2\2\u193d\u193f\tM\2\2\u193e\u193c\3\2\2\2\u193e\u193f"+
		"\3\2\2\2\u193f\u02f5\3\2\2\2\u1940\u1941\7\u00bf\2\2\u1941\u1943\7\u0226"+
		"\2\2\u1942\u1944\5\u02f8\u017d\2\u1943\u1942\3\2\2\2\u1943\u1944\3\2\2"+
		"\2\u1944\u1946\3\2\2\2\u1945\u1947\5\u02fa\u017e\2\u1946\u1945\3\2\2\2"+
		"\u1946\u1947\3\2\2\2\u1947\u02f7\3\2\2\2\u1948\u1949\7\u015e\2\2\u1949"+
		"\u194e\5\u0404\u0203\2\u194a\u194b\7\u028d\2\2\u194b\u194d\5\u0404\u0203"+
		"\2\u194c\u194a\3\2\2\2\u194d\u1950\3\2\2\2\u194e\u194c\3\2\2\2\u194e\u194f"+
		"\3\2\2\2\u194f\u02f9\3\2\2\2\u1950\u194e\3\2\2\2\u1951\u1952\7\u01e2\2"+
		"\2\u1952\u1957\7\u0113\2\2\u1953\u1957\7\u0155\2\2\u1954\u1955\7\u023c"+
		"\2\2\u1955\u1957\5\u0346\u01a4\2\u1956\u1951\3\2\2\2\u1956\u1953\3\2\2"+
		"\2\u1956\u1954\3\2\2\2\u1957\u02fb\3\2\2\2\u1958\u1959\7\u010c\2\2\u1959"+
		"\u195a\5\u0346\u01a4\2\u195a\u02fd\3\2\2\2\u195b\u195c\7\u0226\2\2\u195c"+
		"\u195d\5\u032c\u0197\2\u195d\u195f\5\u0300\u0181\2\u195e\u1960\5\u029e"+
		"\u0150\2\u195f\u195e\3\2\2\2\u195f\u1960\3\2\2\2\u1960\u1962\3\2\2\2\u1961"+
		"\u1963\5\u03c4\u01e3\2\u1962\u1961\3\2\2\2\u1962\u1963\3\2\2\2\u1963\u1965"+
		"\3\2\2\2\u1964\u1966\5\u032e\u0198\2\u1965\u1964\3\2\2\2\u1965\u1966\3"+
		"\2\2\2\u1966\u1968\3\2\2\2\u1967\u1969\5\u0330\u0199\2\u1968\u1967\3\2"+
		"\2\2\u1968\u1969\3\2\2\2\u1969\u02ff\3\2\2\2\u196a\u197a\7\u01d6\2\2\u196b"+
		"\u1970\5\u0302\u0182\2\u196c\u196d\7\u028d\2\2\u196d\u196f\5\u0302\u0182"+
		"\2\u196e\u196c\3\2\2\2\u196f\u1972\3\2\2\2\u1970\u196e\3\2\2\2\u1970\u1971"+
		"\3\2\2\2\u1971\u197b\3\2\2\2\u1972\u1970\3\2\2\2\u1973\u1974\7\u022e\2"+
		"\2\u1974\u1975\7\u0287\2\2\u1975\u1976\5\u0430\u0219\2\u1976\u1977\7\u0288"+
		"\2\2\u1977\u1978\7\u029e\2\2\u1978\u1979\5\u0346\u01a4\2\u1979\u197b\3"+
		"\2\2\2\u197a\u196b\3\2\2\2\u197a\u1973\3\2\2\2\u197b\u0301\3\2\2\2\u197c"+
		"\u197d\5\u0404\u0203\2\u197d\u197e\7\u029e\2\2\u197e\u197f\5\u0346\u01a4"+
		"\2\u197f\u1985\3\2\2\2\u1980\u1981\5\u00b0Y\2\u1981\u1982\7\u029e\2\2"+
		"\u1982\u1983\5\u0296\u014c\2\u1983\u1985\3\2\2\2\u1984\u197c\3\2\2\2\u1984"+
		"\u1980\3\2\2\2\u1985\u0303\3\2\2\2\u1986\u1988\7\u0087\2\2\u1987\u1989"+
		"\7\u00c6\2\2\u1988\u1987\3\2\2\2\u1988\u1989\3\2\2\2\u1989\u198a\3\2\2"+
		"\2\u198a\u198c\5\u032c\u0197\2\u198b\u198d\5\u03c4\u01e3\2\u198c\u198b"+
		"\3\2\2\2\u198c\u198d\3\2\2\2\u198d\u198f\3\2\2\2\u198e\u1990\5\u032e\u0198"+
		"\2\u198f\u198e\3\2\2\2\u198f\u1990\3\2\2\2\u1990\u1992\3\2\2\2\u1991\u1993"+
		"\5\u0330\u0199\2\u1992\u1991\3\2\2\2\u1992\u1993\3\2\2\2\u1993\u0305\3"+
		"\2\2\2\u1994\u1997\7\u00ec\2\2\u1995\u1998\5\u0308\u0185\2\u1996\u1998"+
		"\5\u030a\u0186\2\u1997\u1995\3\2\2\2\u1997\u1996\3\2\2\2\u1998\u0307\3"+
		"\2\2\2\u1999\u199f\5\u0314\u018b\2\u199a\u199c\5\u0316\u018c\2\u199b\u199d"+
		"\5\u032e\u0198\2\u199c\u199b\3\2\2\2\u199c\u199d\3\2\2\2\u199d\u19a0\3"+
		"\2\2\2\u199e\u19a0\5\u028c\u0147\2\u199f\u199a\3\2\2\2\u199f\u199e\3\2"+
		"\2\2\u19a0\u19a2\3\2\2\2\u19a1\u19a3\5\u0330\u0199\2\u19a2\u19a1\3\2\2"+
		"\2\u19a2\u19a3\3\2\2\2\u19a3\u0309\3\2\2\2\u19a4\u19a6\7\13\2\2\u19a5"+
		"\u19a7\5\u030c\u0187\2\u19a6\u19a5\3\2\2\2\u19a7\u19a8\3\2\2\2\u19a8\u19a6"+
		"\3\2\2\2\u19a8\u19a9\3\2\2\2\u19a9\u19ac\3\2\2\2\u19aa\u19ac\5\u030e\u0188"+
		"\2\u19ab\u19a4\3\2\2\2\u19ab\u19aa\3\2\2\2\u19ac\u19ad\3\2\2\2\u19ad\u19ae"+
		"\5\u028c\u0147\2\u19ae\u030b\3\2\2\2\u19af\u19b1\5\u0314\u018b\2\u19b0"+
		"\u19b2\5\u0316\u018c\2\u19b1\u19b0\3\2\2\2\u19b1\u19b2\3\2\2\2\u19b2\u19b4"+
		"\3\2\2\2\u19b3\u19b5\5\u0330\u0199\2\u19b4\u19b3\3\2\2\2\u19b4\u19b5\3"+
		"\2\2\2\u19b5\u030d\3\2\2\2\u19b6\u19b8\tN\2\2\u19b7\u19b6\3\2\2\2\u19b7"+
		"\u19b8\3\2\2\2\u19b8\u19ba\3\2\2\2\u19b9\u19bb\5\u0310\u0189\2\u19ba\u19b9"+
		"\3\2\2\2\u19bb\u19bc\3\2\2\2\u19bc\u19ba\3\2\2\2\u19bc\u19bd\3\2\2\2\u19bd"+
		"\u19bf\3\2\2\2\u19be\u19c0\5\u0312\u018a\2\u19bf\u19be\3\2\2\2\u19bf\u19c0"+
		"\3\2\2\2\u19c0\u030f\3\2\2\2\u19c1\u19c2\7\u023f\2\2\u19c2\u19c3\5\u0344"+
		"\u01a3\2\u19c3\u19c5\7\u0206\2\2\u19c4\u19c6\5\u030c\u0187\2\u19c5\u19c4"+
		"\3\2\2\2\u19c6\u19c7\3\2\2\2\u19c7\u19c5\3\2\2\2\u19c7\u19c8\3\2\2\2\u19c8"+
		"\u0311\3\2\2\2\u19c9\u19cb\7\u0098\2\2\u19ca\u19cc\5\u030c\u0187\2\u19cb"+
		"\u19ca\3\2\2\2\u19cc\u19cd\3\2\2\2\u19cd\u19cb\3\2\2\2\u19cd\u19ce\3\2"+
		"\2\2\u19ce\u0313\3\2\2\2\u19cf\u19d0\7\u00f4\2\2\u19d0\u19d2\5\u032c\u0197"+
		"\2\u19d1\u19d3\5\u00b0Y\2\u19d2\u19d1\3\2\2\2\u19d2\u19d3\3\2\2\2\u19d3"+
		"\u0315\3\2\2\2\u19d4\u19d5\7\u022f\2\2\u19d5\u19da\5\u0342\u01a2\2\u19d6"+
		"\u19d7\7\u028d\2\2\u19d7\u19d9\5\u0342\u01a2\2\u19d8\u19d6\3\2\2\2\u19d9"+
		"\u19dc\3\2\2\2\u19da\u19d8\3\2\2\2\u19da\u19db\3\2\2\2\u19db\u0317\3\2"+
		"\2\2\u19dc\u19da\3\2\2\2\u19dd\u19de\7\u0126\2\2\u19de\u19df\7\u00f4\2"+
		"\2\u19df\u19e1\5\u0408\u0205\2\u19e0\u19e2\5\u03c0\u01e1\2\u19e1\u19e0"+
		"\3\2\2\2\u19e1\u19e2\3\2\2\2\u19e2\u19e3\3\2\2\2\u19e3\u19e4\7\u022c\2"+
		"\2\u19e4\u19e5\5\u0322\u0192\2\u19e5\u19e6\7\u0164\2\2\u19e6\u19e7\7\u0287"+
		"\2\2\u19e7\u19e8\5\u0344\u01a3\2\u19e8\u19f1\7\u0288\2\2\u19e9\u19eb\5"+
		"\u031a\u018e\2\u19ea\u19ec\5\u0320\u0191\2\u19eb\u19ea\3\2\2\2\u19eb\u19ec"+
		"\3\2\2\2\u19ec\u19f2\3\2\2\2\u19ed\u19ef\5\u0320\u0191\2\u19ee\u19f0\5"+
		"\u031a\u018e\2\u19ef\u19ee\3\2\2\2\u19ef\u19f0\3\2\2\2\u19f0\u19f2\3\2"+
		"\2\2\u19f1\u19e9\3\2\2\2\u19f1\u19ed\3\2\2\2\u19f1\u19f2\3\2\2\2\u19f2"+
		"\u19f4\3\2\2\2\u19f3\u19f5\5\u0330\u0199\2\u19f4\u19f3\3\2\2\2\u19f4\u19f5"+
		"\3\2\2\2\u19f5\u0319\3\2\2\2\u19f6\u19f7\7\u023f\2\2\u19f7\u19f8\7\u0120"+
		"\2\2\u19f8\u19f9\7\u0206\2\2\u19f9\u19fa\7\u0226\2\2\u19fa\u19fb\7\u01d6"+
		"\2\2\u19fb\u1a00\5\u031c\u018f\2\u19fc\u19fd\7\u028d\2\2\u19fd\u19ff\5"+
		"\u031c\u018f\2\u19fe\u19fc\3\2\2\2\u19ff\u1a02\3\2\2\2\u1a00\u19fe\3\2"+
		"\2\2\u1a00\u1a01\3\2\2\2\u1a01\u1a04\3\2\2\2\u1a02\u1a00\3\2\2\2\u1a03"+
		"\u1a05\5\u03c4\u01e3\2\u1a04\u1a03\3\2\2\2\u1a04\u1a05\3\2\2\2\u1a05\u1a07"+
		"\3\2\2\2\u1a06\u1a08\5\u031e\u0190\2\u1a07\u1a06\3\2\2\2\u1a07\u1a08\3"+
		"\2\2\2\u1a08\u031b\3\2\2\2\u1a09\u1a0a\5\u0404\u0203\2\u1a0a\u1a0b\7\u029e"+
		"\2\2\u1a0b\u1a0c\5\u0346\u01a4\2\u1a0c\u031d\3\2\2\2\u1a0d\u1a0e\7\u0087"+
		"\2\2\u1a0e\u1a0f\5\u03c4\u01e3\2\u1a0f\u031f\3\2\2\2\u1a10\u1a11\7\u023f"+
		"\2\2\u1a11\u1a12\7\u0153\2\2\u1a12\u1a13\7\u0120\2\2\u1a13\u1a14\7\u0206"+
		"\2\2\u1a14\u1a16\7\u00ec\2\2\u1a15\u1a17\5\u00b0Y\2\u1a16\u1a15\3\2\2"+
		"\2\u1a16\u1a17\3\2\2\2\u1a17\u1a18\3\2\2\2\u1a18\u1a19\7\u022f\2\2\u1a19"+
		"\u1a1b\5\u0342\u01a2\2\u1a1a\u1a1c\5\u03c4\u01e3\2\u1a1b\u1a1a\3\2\2\2"+
		"\u1a1b\u1a1c\3\2\2\2\u1a1c\u0321\3\2\2\2\u1a1d\u1a23\5\u0408\u0205\2\u1a1e"+
		"\u1a1f\7\u0287\2\2\u1a1f\u1a20\5\u028c\u0147\2\u1a20\u1a21\7\u0288\2\2"+
		"\u1a21\u1a23\3\2\2\2\u1a22\u1a1d\3\2\2\2\u1a22\u1a1e\3\2\2\2\u1a23\u1a25"+
		"\3\2\2\2\u1a24\u1a26\5\u03c0\u01e1\2\u1a25\u1a24\3\2\2\2\u1a25\u1a26\3"+
		"\2\2\2\u1a26\u0323\3\2\2\2\u1a27\u1a28\7\u0112\2\2\u1a28\u1a29\7\u01ff"+
		"\2\2\u1a29\u1a2e\5\u0328\u0195\2\u1a2a\u1a2b\7\u028d\2\2\u1a2b\u1a2d\5"+
		"\u0328\u0195\2\u1a2c\u1a2a\3\2\2\2\u1a2d\u1a30\3\2\2\2\u1a2e\u1a2c\3\2"+
		"\2\2\u1a2e\u1a2f\3\2\2\2\u1a2f\u1a31\3\2\2\2\u1a30\u1a2e\3\2\2\2\u1a31"+
		"\u1a32\7\u00db\2\2\u1a32\u1a33\5\u032a\u0196\2\u1a33\u1a35\7\u012d\2\2"+
		"\u1a34\u1a36\5\u0326\u0194\2\u1a35\u1a34\3\2\2\2\u1a35\u1a36\3\2\2\2\u1a36"+
		"\u0325\3\2\2\2\u1a37\u1a38\7\u023c\2\2\u1a38\u1a3b\5\u0346\u01a4\2\u1a39"+
		"\u1a3b\7\u0155\2\2\u1a3a\u1a37\3\2\2\2\u1a3a\u1a39\3\2\2\2\u1a3b\u0327"+
		"\3\2\2\2\u1a3c\u1a3e\5\u0408\u0205\2\u1a3d\u1a3f\5\u03bc\u01df\2\u1a3e"+
		"\u1a3d\3\2\2\2\u1a3e\u1a3f\3\2\2\2\u1a3f\u0329\3\2\2\2\u1a40\u1a41\7\u01bc"+
		"\2\2\u1a41\u1a4d\7\u01d9\2\2\u1a42\u1a43\7\u01bc\2\2\u1a43\u1a4d\7\u00aa"+
		"\2\2\u1a44\u1a46\7\u01d9\2\2\u1a45\u1a47\7\u0226\2\2\u1a46\u1a45\3\2\2"+
		"\2\u1a46\u1a47\3\2\2\2\u1a47\u1a4d\3\2\2\2\u1a48\u1a49\7\u01d9\2\2\u1a49"+
		"\u1a4a\7\u01bc\2\2\u1a4a\u1a4d\7\u00aa\2\2\u1a4b\u1a4d\7\u00aa\2\2\u1a4c"+
		"\u1a40\3\2\2\2\u1a4c\u1a42\3\2\2\2\u1a4c\u1a44\3\2\2\2\u1a4c\u1a48\3\2"+
		"\2\2\u1a4c\u1a4b\3\2\2\2\u1a4d\u032b\3\2\2\2\u1a4e\u1a55\5\u0336\u019c"+
		"\2\u1a4f\u1a50\7\u0165\2\2\u1a50\u1a51\7\u0287\2\2\u1a51\u1a52\5\u0336"+
		"\u019c\2\u1a52\u1a53\7\u0288\2\2\u1a53\u1a55\3\2\2\2\u1a54\u1a4e\3\2\2"+
		"\2\u1a54\u1a4f\3\2\2\2\u1a55\u1a57\3\2\2\2\u1a56\u1a58\5\u03c0\u01e1\2"+
		"\u1a57\u1a56\3\2\2\2\u1a57\u1a58\3\2\2\2\u1a58\u032d\3\2\2\2\u1a59\u1a5a"+
		"\t=\2\2\u1a5a\u1a5f\5\u0346\u01a4\2\u1a5b\u1a5c\7\u028d\2\2\u1a5c\u1a5e"+
		"\5\u0346\u01a4\2\u1a5d\u1a5b\3\2\2\2\u1a5e\u1a61\3\2\2\2\u1a5f\u1a5d\3"+
		"\2\2\2\u1a5f\u1a60\3\2\2\2\u1a60\u1a62\3\2\2\2\u1a61\u1a5f\3\2\2\2\u1a62"+
		"\u1a63\5\u03c8\u01e5\2\u1a63\u032f\3\2\2\2\u1a64\u1a65\7\u0114\2\2\u1a65"+
		"\u1a67\7\u00a2\2\2\u1a66\u1a68\5\u0332\u019a\2\u1a67\u1a66\3\2\2\2\u1a67"+
		"\u1a68\3\2\2\2\u1a68\u1a6a\3\2\2\2\u1a69\u1a6b\5\u0346\u01a4\2\u1a6a\u1a69"+
		"\3\2\2\2\u1a6a\u1a6b\3\2\2\2\u1a6b\u1a6d\3\2\2\2\u1a6c\u1a6e\5\u0334\u019b"+
		"\2\u1a6d\u1a6c\3\2\2\2\u1a6d\u1a6e\3\2\2\2\u1a6e\u0331\3\2\2\2\u1a6f\u1a70"+
		"\7\u00f4\2\2\u1a70\u1a71\5\u0408\u0205\2\u1a71\u0333\3\2\2\2\u1a72\u1a73"+
		"\7\u01a6\2\2\u1a73\u1a76\7\u010c\2\2\u1a74\u1a77\7\u0221\2\2\u1a75\u1a77"+
		"\5\u0346\u01a4\2\u1a76\u1a74\3\2\2\2\u1a76\u1a75\3\2\2\2\u1a77\u0335\3"+
		"\2\2\2\u1a78\u1a85\5\u0338\u019d\2\u1a79\u1a7a\7\u0287\2\2\u1a7a\u1a7c"+
		"\5\u028c\u0147\2\u1a7b\u1a7d\5\u033a\u019e\2\u1a7c\u1a7b\3\2\2\2\u1a7c"+
		"\u1a7d\3\2\2\2\u1a7d\u1a7e\3\2\2\2\u1a7e\u1a7f\7\u0288\2\2\u1a7f\u1a85"+
		"\3\2\2\2\u1a80\u1a82\5\u0408\u0205\2\u1a81\u1a83\5\u033c\u019f\2\u1a82"+
		"\u1a81\3\2\2\2\u1a82\u1a83\3\2\2\2\u1a83\u1a85\3\2\2\2\u1a84\u1a78\3\2"+
		"\2\2\u1a84\u1a79\3\2\2\2\u1a84\u1a80\3\2\2\2\u1a85\u0337\3\2\2\2\u1a86"+
		"\u1a93\tO\2\2\u1a87\u1a88\7\u0287\2\2\u1a88\u1a89\5\u0296\u014c\2\u1a89"+
		"\u1a8a\7\u0288\2\2\u1a8a\u1a94\3\2\2\2\u1a8b\u1a8c\7\u0287\2\2\u1a8c\u1a8d"+
		"\5\u0346\u01a4\2\u1a8d\u1a91\7\u0288\2\2\u1a8e\u1a8f\7\u0287\2\2\u1a8f"+
		"\u1a90\7\u028b\2\2\u1a90\u1a92\7\u0288\2\2\u1a91\u1a8e\3\2\2\2\u1a91\u1a92"+
		"\3\2\2\2\u1a92\u1a94\3\2\2\2\u1a93\u1a87\3\2\2\2\u1a93\u1a8b\3\2\2\2\u1a94"+
		"\u0339\3\2\2\2\u1a95\u1a9e\7\u0243\2\2\u1a96\u1a97\7\u0199\2\2\u1a97\u1a9f"+
		"\7\u0165\2\2\u1a98\u1a99\7A\2\2\u1a99\u1a9c\7\u0168\2\2\u1a9a\u1a9b\7"+
		"Z\2\2\u1a9b\u1a9d\5\u03e8\u01f5\2\u1a9c\u1a9a\3\2\2\2\u1a9c\u1a9d\3\2"+
		"\2\2\u1a9d\u1a9f\3\2\2\2\u1a9e\u1a96\3\2\2\2\u1a9e\u1a98\3\2\2\2\u1a9f"+
		"\u033b\3\2\2\2\u1aa0\u1aa2\7\u01c2\2\2\u1aa1\u1aa3\7/\2\2\u1aa2\u1aa1"+
		"\3\2\2\2\u1aa2\u1aa3\3\2\2\2\u1aa3\u1aa4\3\2\2\2\u1aa4\u1aa5\7\u0287\2"+
		"\2\u1aa5\u1aa8\5\u0346\u01a4\2\u1aa6\u1aa7\7\u028d\2\2\u1aa7\u1aa9\5\u0346"+
		"\u01a4\2\u1aa8\u1aa6\3\2\2\2\u1aa8\u1aa9\3\2\2\2\u1aa9\u1aaa\3\2\2\2\u1aaa"+
		"\u1aac\7\u0288\2\2\u1aab\u1aad\5\u033e\u01a0\2\u1aac\u1aab\3\2\2\2\u1aac"+
		"\u1aad\3\2\2\2\u1aad\u033d\3\2\2\2\u1aae\u1aaf\7\u01cc\2\2\u1aaf\u1ab0"+
		"\7\u0287\2\2\u1ab0\u1ab1\5\u0346\u01a4\2\u1ab1\u1ab2\7\u0288\2\2\u1ab2"+
		"\u033f\3\2\2\2\u1ab3\u1ab4\7m\2\2\u1ab4\u1ab5\7\u0287\2\2\u1ab5\u1ab6"+
		"\5\u0296\u014c\2\u1ab6\u1ab7\7\u0288\2\2\u1ab7\u0341\3\2\2\2\u1ab8\u1aba"+
		"\7\u0287\2\2\u1ab9\u1abb\5\u0346\u01a4\2\u1aba\u1ab9\3\2\2\2\u1aba\u1abb"+
		"\3\2\2\2\u1abb\u1ac0\3\2\2\2\u1abc\u1abd\7\u028d\2\2\u1abd\u1abf\5\u0346"+
		"\u01a4\2\u1abe\u1abc\3\2\2\2\u1abf\u1ac2\3\2\2\2\u1ac0\u1abe\3\2\2\2\u1ac0"+
		"\u1ac1\3\2\2\2\u1ac1\u1ac3\3\2\2\2\u1ac2\u1ac0\3\2\2\2\u1ac3\u1ac4\7\u0288"+
		"\2\2\u1ac4\u0343\3\2\2\2\u1ac5\u1ac6\5\u0346\u01a4\2\u1ac6\u0345\3\2\2"+
		"\2\u1ac7\u1ac8\b\u01a4\1\2\u1ac8\u1ac9\7m\2\2\u1ac9\u1ad2\5\u034a\u01a6"+
		"\2\u1aca\u1acb\7\u0153\2\2\u1acb\u1ad2\5\u0346\u01a4\7\u1acc\u1ad2\5\u0358"+
		"\u01ad\2\u1acd\u1ace\7\u0287\2\2\u1ace\u1acf\5\u0346\u01a4\2\u1acf";
	private static final String _serializedATNSegment3 =
		"\u1ad0\7\u0288\2\2\u1ad0\u1ad2\3\2\2\2\u1ad1\u1ac7\3\2\2\2\u1ad1\u1aca"+
		"\3\2\2\2\u1ad1\u1acc\3\2\2\2\u1ad1\u1acd\3\2\2\2\u1ad2\u1b07\3\2\2\2\u1ad3"+
		"\u1ad5\f\f\2\2\u1ad4\u1ad6\7\u0153\2\2\u1ad5\u1ad4\3\2\2\2\u1ad5\u1ad6"+
		"\3\2\2\2\u1ad6\u1ad7\3\2\2\2\u1ad7\u1ad8\7%\2\2\u1ad8\u1ad9\5\u0346\u01a4"+
		"\2\u1ad9\u1ada\7\21\2\2\u1ada\u1adb\5\u0346\u01a4\r\u1adb\u1b06\3\2\2"+
		"\2\u1adc\u1add\f\n\2\2\u1add\u1ade\5\u034e\u01a8\2\u1ade\u1adf\5\u0346"+
		"\u01a4\13\u1adf\u1b06\3\2\2\2\u1ae0\u1ae1\f\6\2\2\u1ae1\u1ae2\7\21\2\2"+
		"\u1ae2\u1b06\5\u0346\u01a4\7\u1ae3\u1ae4\f\5\2\2\u1ae4\u1ae5\7\u0169\2"+
		"\2\u1ae5\u1b06\5\u0346\u01a4\6\u1ae6\u1ae7\f\16\2\2\u1ae7\u1ae8\7\u00f7"+
		"\2\2\u1ae8\u1b06\5\u0348\u01a5\2\u1ae9\u1aeb\f\r\2\2\u1aea\u1aec\7\u0153"+
		"\2\2\u1aeb\u1aea\3\2\2\2\u1aeb\u1aec\3\2\2\2\u1aec\u1aed\3\2\2\2\u1aed"+
		"\u1af3\7\u00db\2\2\u1aee\u1aef\7\u0287\2\2\u1aef\u1af0\5\u0296\u014c\2"+
		"\u1af0\u1af1\7\u0288\2\2\u1af1\u1af4\3\2\2\2\u1af2\u1af4\5\u0342\u01a2"+
		"\2\u1af3\u1aee\3\2\2\2\u1af3\u1af2\3\2\2\2\u1af4\u1b06\3\2\2\2\u1af5\u1af7"+
		"\f\13\2\2\u1af6\u1af8\7\u0153\2\2\u1af7\u1af6\3\2\2\2\u1af7\u1af8\3\2"+
		"\2\2\u1af8\u1af9\3\2\2\2\u1af9\u1afa\5\u0350\u01a9\2\u1afa\u1afd\5\u0346"+
		"\u01a4\2\u1afb\u1afc\7\u00a3\2\2\u1afc\u1afe\5\u0346\u01a4\2\u1afd\u1afb"+
		"\3\2\2\2\u1afd\u1afe\3\2\2\2\u1afe\u1b06\3\2\2\2\u1aff\u1b00\f\t\2\2\u1b00"+
		"\u1b02\tP\2\2\u1b01\u1b03\7\u015e\2\2\u1b02\u1b01\3\2\2\2\u1b02\u1b03"+
		"\3\2\2\2\u1b03\u1b04\3\2\2\2\u1b04\u1b06\5\u0358\u01ad\2\u1b05\u1ad3\3"+
		"\2\2\2\u1b05\u1adc\3\2\2\2\u1b05\u1ae0\3\2\2\2\u1b05\u1ae3\3\2\2\2\u1b05"+
		"\u1ae6\3\2\2\2\u1b05\u1ae9\3\2\2\2\u1b05\u1af5\3\2\2\2\u1b05\u1aff\3\2"+
		"\2\2\u1b06\u1b09\3\2\2\2\u1b07\u1b05\3\2\2\2\u1b07\u1b08\3\2\2\2\u1b08"+
		"\u0347\3\2\2\2\u1b09\u1b07\3\2\2\2\u1b0a\u1b0c\7\u0153\2\2\u1b0b\u1b0a"+
		"\3\2\2\2\u1b0b\u1b0c\3\2\2\2\u1b0c\u1b26\3\2\2\2\u1b0d\u1b27\7\u0157\2"+
		"\2\u1b0e\u1b27\7\u0134\2\2\u1b0f\u1b27\7\u018e\2\2\u1b10\u1b27\7\u00e5"+
		"\2\2\u1b11\u1b12\7\6\2\2\u1b12\u1b27\7\u01d6\2\2\u1b13\u1b27\7\u009a\2"+
		"\2\u1b14\u1b16\7\u015e\2\2\u1b15\u1b17\7\u021c\2\2\u1b16\u1b15\3\2\2\2"+
		"\u1b16\u1b17\3\2\2\2\u1b17\u1b18\3\2\2\2\u1b18\u1b1a\7\u0287\2\2\u1b19"+
		"\u1b1b\7\u0165\2\2\u1b1a\u1b19\3\2\2\2\u1b1a\u1b1b\3\2\2\2\u1b1b\u1b1c"+
		"\3\2\2\2\u1b1c\u1b21\5\u041a\u020e\2\u1b1d\u1b1e\7\u028d\2\2\u1b1e\u1b20"+
		"\5\u041a\u020e\2\u1b1f\u1b1d\3\2\2\2\u1b20\u1b23\3\2\2\2\u1b21\u1b1f\3"+
		"\2\2\2\u1b21\u1b22\3\2\2\2\u1b22\u1b24\3\2\2\2\u1b23\u1b21\3\2\2\2\u1b24"+
		"\u1b25\7\u0288\2\2\u1b25\u1b27\3\2\2\2\u1b26\u1b0d\3\2\2\2\u1b26\u1b0e"+
		"\3\2\2\2\u1b26\u1b0f\3\2\2\2\u1b26\u1b10\3\2\2\2\u1b26\u1b11\3\2\2\2\u1b26"+
		"\u1b13\3\2\2\2\u1b26\u1b14\3\2\2\2\u1b27\u0349\3\2\2\2\u1b28\u1b29\7\u0287"+
		"\2\2\u1b29\u1b2a\5\u0296\u014c\2\u1b2a\u1b2b\7\u0288\2\2\u1b2b\u034b\3"+
		"\2\2\2\u1b2c\u1b2d\tP\2\2\u1b2d\u034d\3\2\2\2\u1b2e\u1b35\7\u029e\2\2"+
		"\u1b2f\u1b35\5\u0434\u021b\2\u1b30\u1b35\7\u0295\2\2\u1b31\u1b35\7\u029b"+
		"\2\2\u1b32\u1b35\5\u0438\u021d\2\u1b33\u1b35\5\u0436\u021c\2\u1b34\u1b2e"+
		"\3\2\2\2\u1b34\u1b2f\3\2\2\2\u1b34\u1b30\3\2\2\2\u1b34\u1b31\3\2\2\2\u1b34"+
		"\u1b32\3\2\2\2\u1b34\u1b33\3\2\2\2\u1b35\u034f\3\2\2\2\u1b36\u1b37\tQ"+
		"\2\2\u1b37\u0351\3\2\2\2\u1b38\u1b39\7\u00a3\2\2\u1b39\u1b3a\5\u0356\u01ac"+
		"\2\u1b3a\u0353\3\2\2\2\u1b3b\u1b3c\5\u0356\u01ac\2\u1b3c\u1b3d\7\21\2"+
		"\2\u1b3d\u1b3e\5\u0356\u01ac\2\u1b3e\u0355\3\2\2\2\u1b3f\u1b40\5\u0358"+
		"\u01ad\2\u1b40\u0357\3\2\2\2\u1b41\u1b42\b\u01ad\1\2\u1b42\u1b43\7\u0287"+
		"\2\2\u1b43\u1b44\5\u0358\u01ad\2\u1b44\u1b45\7\u0288\2\2\u1b45\u1b48\3"+
		"\2\2\2\u1b46\u1b48\5\u0368\u01b5\2\u1b47\u1b41\3\2\2\2\u1b47\u1b46\3\2"+
		"\2\2\u1b48\u1b62\3\2\2\2\u1b49\u1b4a\f\b\2\2\u1b4a\u1b4b\tR\2\2\u1b4b"+
		"\u1b61\5\u0358\u01ad\t\u1b4c\u1b4d\f\7\2\2\u1b4d\u1b4e\tS\2\2\u1b4e\u1b61"+
		"\5\u0358\u01ad\b\u1b4f\u1b50\f\6\2\2\u1b50\u1b51\7\u029c\2\2\u1b51\u1b61"+
		"\5\u0358\u01ad\7\u1b52\u1b53\f\5\2\2\u1b53\u1b54\7\4\2\2\u1b54\u1b61\5"+
		"\u0358\u01ad\6\u1b55\u1b5e\f\t\2\2\u1b56\u1b5b\7\31\2\2\u1b57\u1b5c\7"+
		"\u010e\2\2\u1b58\u1b59\7\u0207\2\2\u1b59\u1b5a\7\u025e\2\2\u1b5a\u1b5c"+
		"\5\u0358\u01ad\2\u1b5b\u1b57\3\2\2\2\u1b5b\u1b58\3\2\2\2\u1b5c\u1b5f\3"+
		"\2\2\2\u1b5d\u1b5f\5\u035a\u01ae\2\u1b5e\u1b56\3\2\2\2\u1b5e\u1b5d\3\2"+
		"\2\2\u1b5f\u1b61\3\2\2\2\u1b60\u1b49\3\2\2\2\u1b60\u1b4c\3\2\2\2\u1b60"+
		"\u1b4f\3\2\2\2\u1b60\u1b52\3\2\2\2\u1b60\u1b55\3\2\2\2\u1b61\u1b64\3\2"+
		"\2\2\u1b62\u1b60\3\2\2\2\u1b62\u1b63\3\2\2\2\u1b63\u0359\3\2\2\2\u1b64"+
		"\u1b62\3\2\2\2\u1b65\u1b6a\7t\2\2\u1b66\u1b67\7\u0287\2\2\u1b67\u1b68"+
		"\5\u0356\u01ac\2\u1b68\u1b69\7\u0288\2\2\u1b69\u1b6b\3\2\2\2\u1b6a\u1b66"+
		"\3\2\2\2\u1b6a\u1b6b\3\2\2\2\u1b6b\u1b6c\3\2\2\2\u1b6c\u1b6d\7\u0210\2"+
		"\2\u1b6d\u1b72\7\u01ca\2\2\u1b6e\u1b6f\7\u0287\2\2\u1b6f\u1b70\5\u0356"+
		"\u01ac\2\u1b70\u1b71\7\u0288\2\2\u1b71\u1b73\3\2\2\2\u1b72\u1b6e\3\2\2"+
		"\2\u1b72\u1b73\3\2\2\2\u1b73\u1b7e\3\2\2\2\u1b74\u1b79\7\u025b\2\2\u1b75"+
		"\u1b76\7\u0287\2\2\u1b76\u1b77\5\u0356\u01ac\2\u1b77\u1b78\7\u0288\2\2"+
		"\u1b78\u1b7a\3\2\2\2\u1b79\u1b75\3\2\2\2\u1b79\u1b7a\3\2\2\2\u1b7a\u1b7b"+
		"\3\2\2\2\u1b7b\u1b7c\7\u0210\2\2\u1b7c\u1b7e\7\u0130\2\2\u1b7d\u1b65\3"+
		"\2\2\2\u1b7d\u1b74\3\2\2\2\u1b7e\u035b\3\2\2\2\u1b7f\u1b80\5\u0368\u01b5"+
		"\2\u1b80\u1b81\7\u029f\2\2\u1b81\u1b82\5\u035e\u01b0\2\u1b82\u1b83\7\u02a0"+
		"\2\2\u1b83\u035d\3\2\2\2\u1b84\u1b87\7\22\2\2\u1b85\u1b87\5\u0346\u01a4"+
		"\2\u1b86\u1b84\3\2\2\2\u1b86\u1b85\3\2\2\2\u1b87\u1b8f\3\2\2\2\u1b88\u1b8b"+
		"\7\u028d\2\2\u1b89\u1b8c\7\22\2\2\u1b8a\u1b8c\5\u0346\u01a4\2\u1b8b\u1b89"+
		"\3\2\2\2\u1b8b\u1b8a\3\2\2\2\u1b8c\u1b8e\3\2\2\2\u1b8d\u1b88\3\2\2\2\u1b8e"+
		"\u1b91\3\2\2\2\u1b8f\u1b8d\3\2\2\2\u1b8f\u1b90\3\2\2\2\u1b90\u1b9c\3\2"+
		"\2\2\u1b91\u1b8f\3\2\2\2\u1b92\u1b97\5\u0360\u01b1\2\u1b93\u1b94\7\u028d"+
		"\2\2\u1b94\u1b96\5\u0360\u01b1\2\u1b95\u1b93\3\2\2\2\u1b96\u1b99\3\2\2"+
		"\2\u1b97\u1b95\3\2\2\2\u1b97\u1b98\3\2\2\2\u1b98\u1b9c\3\2\2\2\u1b99\u1b97"+
		"\3\2\2\2\u1b9a\u1b9c\5\u0366\u01b4\2\u1b9b\u1b86\3\2\2\2\u1b9b\u1b92\3"+
		"\2\2\2\u1b9b\u1b9a\3\2\2\2\u1b9c\u035f\3\2\2\2\u1b9d\u1b9e\7\u00bf\2\2"+
		"\u1b9e\u1bab\5\u0404\u0203\2\u1b9f\u1ba0\7\u00db\2\2\u1ba0\u1bac\5\u0342"+
		"\u01a2\2\u1ba1\u1ba3\5\u0362\u01b2\2\u1ba2\u1ba1\3\2\2\2\u1ba2\u1ba3\3"+
		"\2\2\2\u1ba3\u1ba4\3\2\2\2\u1ba4\u1ba5\7\u00c6\2\2\u1ba5\u1ba6\5\u0346"+
		"\u01a4\2\u1ba6\u1ba7\7\u0210\2\2\u1ba7\u1ba8\5\u0346\u01a4\2\u1ba8\u1ba9"+
		"\5\u0364\u01b3\2\u1ba9\u1baa\5\u0346\u01a4\2\u1baa\u1bac\3\2\2\2\u1bab"+
		"\u1b9f\3\2\2\2\u1bab\u1ba2\3\2\2\2\u1bac\u0361\3\2\2\2\u1bad\u1bae\7\u0108"+
		"\2\2\u1bae\u1baf\5\u0346\u01a4\2\u1baf\u0363\3\2\2\2\u1bb0\u1bb1\tT\2"+
		"\2\u1bb1\u0365\3\2\2\2\u1bb2\u1bb3\7\u00bf\2\2\u1bb3\u1bb4\7\u0287\2\2"+
		"\u1bb4\u1bb9\5\u0404\u0203\2\u1bb5\u1bb6\7\u028d\2\2\u1bb6\u1bb8\5\u0404"+
		"\u0203\2\u1bb7\u1bb5\3\2\2\2\u1bb8\u1bbb\3\2\2\2\u1bb9\u1bb7\3\2\2\2\u1bb9"+
		"\u1bba\3\2\2\2\u1bba\u1bbc\3\2\2\2\u1bbb\u1bb9\3\2\2\2\u1bbc\u1bbd\7\u0288"+
		"\2\2\u1bbd\u1bbe\7\u00db\2\2\u1bbe\u1bcb\7\u0287\2\2\u1bbf\u1bcc\5\u0296"+
		"\u014c\2\u1bc0\u1bc1\7\u0287\2\2\u1bc1\u1bc6\5\u0342\u01a2\2\u1bc2\u1bc3"+
		"\7\u028d\2\2\u1bc3\u1bc5\5\u0342\u01a2\2\u1bc4\u1bc2\3\2\2\2\u1bc5\u1bc8"+
		"\3\2\2\2\u1bc6\u1bc4\3\2\2\2\u1bc6\u1bc7\3\2\2\2\u1bc7\u1bc9\3\2\2\2\u1bc8"+
		"\u1bc6\3\2\2\2\u1bc9\u1bca\7\u0288\2\2\u1bca\u1bcc\3\2\2\2\u1bcb\u1bbf"+
		"\3\2\2\2\u1bcb\u1bc0\3\2\2\2\u1bcc\u1bcd\3\2\2\2\u1bcd\u1bce\7\u0288\2"+
		"\2\u1bce\u0367\3\2\2\2\u1bcf\u1bd0\b\u01b5\1\2\u1bd0\u1bd1\tS\2\2\u1bd1"+
		"\u1be1\5\u0368\u01b5\f\u1bd2\u1bd3\7\u0191\2\2\u1bd3\u1be1\5\u0368\u01b5"+
		"\13\u1bd4\u1bd5\7X\2\2\u1bd5\u1be1\5\u0368\u01b5\n\u1bd6\u1bd7\7\u013d"+
		"\2\2\u1bd7\u1be1\5\u0368\u01b5\t\u1bd8\u1bd9\7\u0090\2\2\u1bd9\u1be1\5"+
		"\u0368\u01b5\b\u1bda\u1bdb\7\13\2\2\u1bdb\u1be1\5\u0368\u01b5\7\u1bdc"+
		"\u1be1\5\u036a\u01b6\2\u1bdd\u1be1\5\u037c\u01bf\2\u1bde\u1be1\5\u037e"+
		"\u01c0\2\u1bdf\u1be1\5\u0376\u01bc\2\u1be0\u1bcf\3\2\2\2\u1be0\u1bd2\3"+
		"\2\2\2\u1be0\u1bd4\3\2\2\2\u1be0\u1bd6\3\2\2\2\u1be0\u1bd8\3\2\2\2\u1be0"+
		"\u1bda\3\2\2\2\u1be0\u1bdc\3\2\2\2\u1be0\u1bdd\3\2\2\2\u1be0\u1bde\3\2"+
		"\2\2\u1be0\u1bdf\3\2\2\2\u1be1\u1be9\3\2\2\2\u1be2\u1be3\f\r\2\2\u1be3"+
		"\u1be4\7\u029f\2\2\u1be4\u1be5\5\u035e\u01b0\2\u1be5\u1be6\7\u02a0\2\2"+
		"\u1be6\u1be8\3\2\2\2\u1be7\u1be2\3\2\2\2\u1be8\u1beb\3\2\2\2\u1be9\u1be7"+
		"\3\2\2\2\u1be9\u1bea\3\2\2\2\u1bea\u0369\3\2\2\2\u1beb\u1be9\3\2\2\2\u1bec"+
		"\u1bef\5\u0370\u01b9\2\u1bed\u1bef\5\u036c\u01b7\2\u1bee\u1bec\3\2\2\2"+
		"\u1bee\u1bed\3\2\2\2\u1bef\u036b\3\2\2\2\u1bf0\u1bf2\5\u03ea\u01f6\2\u1bf1"+
		"\u1bf0\3\2\2\2\u1bf1\u1bf2\3\2\2\2\u1bf2\u1bf3\3\2\2\2\u1bf3\u1bf4\7<"+
		"\2\2\u1bf4\u1bf6\5\u0376\u01bc\2\u1bf5\u1bf7\5\u036e\u01b8\2\u1bf6\u1bf5"+
		"\3\2\2\2\u1bf7\u1bf8\3\2\2\2\u1bf8\u1bf6\3\2\2\2\u1bf8\u1bf9\3\2\2\2\u1bf9"+
		"\u1bfb\3\2\2\2\u1bfa\u1bfc\5\u0374\u01bb\2\u1bfb\u1bfa\3\2\2\2\u1bfb\u1bfc"+
		"\3\2\2\2\u1bfc\u1bfd\3\2\2\2\u1bfd\u1bff\7\u009e\2\2\u1bfe\u1c00\7<\2"+
		"\2\u1bff\u1bfe\3\2\2\2\u1bff\u1c00\3\2\2\2\u1c00\u1c02\3\2\2\2\u1c01\u1c03"+
		"\5\u03ea\u01f6\2\u1c02\u1c01\3\2\2\2\u1c02\u1c03\3\2\2\2\u1c03\u036d\3"+
		"\2\2\2\u1c04\u1c05\7\u023f\2\2\u1c05\u1c06\5\u0346\u01a4\2\u1c06\u1c09"+
		"\7\u0206\2\2\u1c07\u1c0a\5\u0238\u011d\2\u1c08\u1c0a\5\u0346\u01a4\2\u1c09"+
		"\u1c07\3\2\2\2\u1c09\u1c08\3\2\2\2\u1c0a\u036f\3\2\2\2\u1c0b\u1c0d\5\u03ea"+
		"\u01f6\2\u1c0c\u1c0b\3\2\2\2\u1c0c\u1c0d\3\2\2\2\u1c0d\u1c0e\3\2\2\2\u1c0e"+
		"\u1c10\7<\2\2\u1c0f\u1c11\5\u0372\u01ba\2\u1c10\u1c0f\3\2\2\2\u1c11\u1c12"+
		"\3\2\2\2\u1c12\u1c10\3\2\2\2\u1c12\u1c13\3\2\2\2\u1c13\u1c15\3\2\2\2\u1c14"+
		"\u1c16\5\u0374\u01bb\2\u1c15\u1c14\3\2\2\2\u1c15\u1c16\3\2\2\2\u1c16\u1c17"+
		"\3\2\2\2\u1c17\u1c19\7\u009e\2\2\u1c18\u1c1a\7<\2\2\u1c19\u1c18\3\2\2"+
		"\2\u1c19\u1c1a\3\2\2\2\u1c1a\u1c1c\3\2\2\2\u1c1b\u1c1d\5\u03ea\u01f6\2"+
		"\u1c1c\u1c1b\3\2\2\2\u1c1c\u1c1d\3\2\2\2\u1c1d\u0371\3\2\2\2\u1c1e\u1c1f"+
		"\7\u023f\2\2\u1c1f\u1c20\5\u0346\u01a4\2\u1c20\u1c23\7\u0206\2\2\u1c21"+
		"\u1c24\5\u0238\u011d\2\u1c22\u1c24\5\u0346\u01a4\2\u1c23\u1c21\3\2\2\2"+
		"\u1c23\u1c22\3\2\2\2\u1c24\u0373\3\2\2\2\u1c25\u1c28\7\u0098\2\2\u1c26"+
		"\u1c29\5\u0238\u011d\2\u1c27\u1c29\5\u0346\u01a4\2\u1c28\u1c26\3\2\2\2"+
		"\u1c28\u1c27\3\2\2\2\u1c29\u0375\3\2\2\2\u1c2a\u1c2b\5\u0426\u0214\2\u1c2b"+
		"\u1c2c\5\u043c\u021f\2\u1c2c\u1c3d\3\2\2\2\u1c2d\u1c3d\5\u0422\u0212\2"+
		"\u1c2e\u1c3d\5\u0428\u0215\2\u1c2f\u1c3d\5B\"\2\u1c30\u1c3d\5\u0424\u0213"+
		"\2\u1c31\u1c32\7\u0287\2\2\u1c32\u1c33\5\u0376\u01bc\2\u1c33\u1c34\7\u0288"+
		"\2\2\u1c34\u1c3d\3\2\2\2\u1c35\u1c36\7\u0287\2\2\u1c36\u1c37\5\u0296\u014c"+
		"\2\u1c37\u1c38\7\u0288\2\2\u1c38\u1c3b\3\2\2\2\u1c39\u1c3b\5\u0342\u01a2"+
		"\2\u1c3a\u1c35\3\2\2\2\u1c3a\u1c39\3\2\2\2\u1c3b\u1c3d\3\2\2\2\u1c3c\u1c2a"+
		"\3\2\2\2\u1c3c\u1c2d\3\2\2\2\u1c3c\u1c2e\3\2\2\2\u1c3c\u1c2f\3\2\2\2\u1c3c"+
		"\u1c30\3\2\2\2\u1c3c\u1c31\3\2\2\2\u1c3c\u1c3a\3\2\2\2\u1c3d\u0377\3\2"+
		"\2\2\u1c3e\u1c40\5\u0346\u01a4\2\u1c3f\u1c41\5\u037a\u01be\2\u1c40\u1c3f"+
		"\3\2\2\2\u1c40\u1c41\3\2\2\2\u1c41\u0379\3\2\2\2\u1c42\u1c43\7\u028d\2"+
		"\2\u1c43\u1c48\5\u0346\u01a4\2\u1c44\u1c45\7\u028d\2\2\u1c45\u1c47\5\u0346"+
		"\u01a4\2\u1c46\u1c44\3\2\2\2\u1c47\u1c4a\3\2\2\2\u1c48\u1c46\3\2\2\2\u1c48"+
		"\u1c49\3\2\2\2\u1c49\u037b\3\2\2\2\u1c4a\u1c48\3\2\2\2\u1c4b\u1c54\tU"+
		"\2\2\u1c4c\u1c4d\7\u0287\2\2\u1c4d\u1c4e\5\u0296\u014c\2\u1c4e\u1c4f\7"+
		"\u0288\2\2\u1c4f\u1c55\3\2\2\2\u1c50\u1c51\7\u0287\2\2\u1c51\u1c52\5\u0346"+
		"\u01a4\2\u1c52\u1c53\7\u0288\2\2\u1c53\u1c55\3\2\2\2\u1c54\u1c4c\3\2\2"+
		"\2\u1c54\u1c50\3\2\2\2\u1c55\u037d\3\2\2\2\u1c56\u1c57\b\u01c0\1\2\u1c57"+
		"\u1d93\5\u0380\u01c1\2\u1c58\u1c59\5\u043e\u0220\2\u1c59\u1c5b\5\u0414"+
		"\u020b\2\u1c5a\u1c5c\5\u0390\u01c9\2\u1c5b\u1c5a\3\2\2\2\u1c5b\u1c5c\3"+
		"\2\2\2\u1c5c\u1d93\3\2\2\2\u1c5d\u1c5e\tV\2\2\u1c5e\u1c66\7\u0287\2\2"+
		"\u1c5f\u1c60\7\u0132\2\2\u1c60\u1c61\7\u0287\2\2\u1c61\u1c62\5\u0296\u014c"+
		"\2\u1c62\u1c63\7\u0288\2\2\u1c63\u1c67\3\2\2\2\u1c64\u1c67\5\u0356\u01ac"+
		"\2\u1c65\u1c67\5\u0346\u01a4\2\u1c66\u1c5f\3\2\2\2\u1c66\u1c64\3\2\2\2"+
		"\u1c66\u1c65\3\2\2\2\u1c67\u1c68\3\2\2\2\u1c68\u1c69\7\26\2\2\u1c69\u1c6a"+
		"\5\u041a\u020e\2\u1c6a\u1c6b\7\u0288\2\2\u1c6b\u1d93\3\2\2\2\u1c6c\u1c6f"+
		"\5\u0296\u014c\2\u1c6d\u1c6f\5\u0376\u01bc\2\u1c6e\u1c6c\3\2\2\2\u1c6e"+
		"\u1c6d\3\2\2\2\u1c6f\u1c70\3\2\2\2\u1c70\u1c71\7\5\2\2\u1c71\u1c72\5\u041a"+
		"\u020e\2\u1c72\u1d93\3\2\2\2\u1c73\u1c74\7C\2\2\u1c74\u1c75\7\u0287\2"+
		"\2\u1c75\u1c76\5\u0356\u01ac\2\u1c76\u1c77\7\u022c\2\2\u1c77\u1c78\7\u0139"+
		"\2\2\u1c78\u1c79\7\u0288\2\2\u1c79\u1d93\3\2\2\2\u1c7a\u1c7b\7I\2\2\u1c7b"+
		"\u1c7d\7\u0287\2\2\u1c7c\u1c7e\tW\2\2\u1c7d\u1c7c\3\2\2\2\u1c7d\u1c7e"+
		"\3\2\2\2\u1c7e\u1c7f\3\2\2\2\u1c7f\u1c81\5\u0356\u01ac\2\u1c80\u1c82\5"+
		"\u0394\u01cb\2\u1c81\u1c80\3\2\2\2\u1c81\u1c82\3\2\2\2\u1c82\u1c83\3\2"+
		"\2\2\u1c83\u1c84\7\u0288\2\2\u1c84\u1d93\3\2\2\2\u1c85\u1c86\5\u0384\u01c3"+
		"\2\u1c86\u1c88\5\u0410\u0209\2\u1c87\u1c89\5\u0396\u01cc\2\u1c88\u1c87"+
		"\3\2\2\2\u1c89\u1c8a\3\2\2\2\u1c8a\u1c88\3\2\2\2\u1c8a\u1c8b\3\2\2\2\u1c8b"+
		"\u1d93\3\2\2\2\u1c8c\u1c8d\7~\2\2\u1c8d\u1c8e\7\u0287\2\2\u1c8e\u1c90"+
		"\5\u0356\u01ac\2\u1c8f\u1c91\tX\2\2\u1c90\u1c8f\3\2\2\2\u1c90\u1c91\3"+
		"\2\2\2\u1c91\u1c92\3\2\2\2\u1c92\u1c93\7\u0288\2\2\u1c93\u1d93\3\2\2\2"+
		"\u1c94\u1c95\7\u00b1\2\2\u1c95\u1c98\7\u0287\2\2\u1c96\u1c99\5\u043e\u0220"+
		"\2\u1c97\u1c99\5\u0346\u01a4\2\u1c98\u1c96\3\2\2\2\u1c98\u1c97\3\2\2\2"+
		"\u1c99\u1c9a\3\2\2\2\u1c9a\u1c9b\7\u00c6\2\2\u1c9b\u1c9c\5\u0356\u01ac"+
		"\2\u1c9c\u1c9d\7\u0288\2\2\u1c9d\u1d93\3\2\2\2\u1c9e\u1c9f\tY\2\2\u1c9f"+
		"\u1ca1\5\u0412\u020a\2\u1ca0\u1ca2\5\u0416\u020c\2\u1ca1\u1ca0\3\2\2\2"+
		"\u1ca1\u1ca2\3\2\2\2\u1ca2\u1ca3\3\2\2\2\u1ca3\u1ca4\5\u0388\u01c5\2\u1ca4"+
		"\u1d93\3\2\2\2\u1ca5\u1ca6\5\u0386\u01c4\2\u1ca6\u1ca7\7\u0287\2\2\u1ca7"+
		"\u1cac\5\u0346\u01a4\2\u1ca8\u1ca9\7\u028d\2\2\u1ca9\u1cab\5\u0346\u01a4"+
		"\2\u1caa\u1ca8\3\2\2\2\u1cab\u1cae\3\2\2\2\u1cac\u1caa\3\2\2\2\u1cac\u1cad"+
		"\3\2\2\2\u1cad\u1cb0\3\2\2\2\u1cae\u1cac\3\2\2\2\u1caf\u1cb1\5\u0398\u01cd"+
		"\2\u1cb0\u1caf\3\2\2\2\u1cb0\u1cb1\3\2\2\2\u1cb1\u1cb3\3\2\2\2\u1cb2\u1cb4"+
		"\5\u0390\u01c9\2\u1cb3\u1cb2\3\2\2\2\u1cb3\u1cb4\3\2\2\2\u1cb4\u1cb5\3"+
		"\2\2\2\u1cb5\u1cb6\7\u0288\2\2\u1cb6\u1d93\3\2\2\2\u1cb7\u1cb8\7\u0187"+
		"\2\2\u1cb8\u1cb9\7\u0287\2\2\u1cb9\u1cba\5\u0346\u01a4\2\u1cba\u1cbb\7"+
		"\u00db\2\2\u1cbb\u1cbc\5\u0346\u01a4\2\u1cbc\u1cbd\7\u0288\2\2\u1cbd\u1d93"+
		"\3\2\2\2\u1cbe\u1cbf\7\u0215\2\2\u1cbf\u1cc0\7\u0287\2\2\u1cc0\u1cc3\5"+
		"\u0346\u01a4\2\u1cc1\u1cc2\7\u022c\2\2\u1cc2\u1cc4\tZ\2\2\u1cc3\u1cc1"+
		"\3\2\2\2\u1cc3\u1cc4\3\2\2\2\u1cc4\u1cc9\3\2\2\2\u1cc5\u1cc6\7\u028d\2"+
		"\2\u1cc6\u1cc8\5\u0346\u01a4\2\u1cc7\u1cc5\3\2\2\2\u1cc8\u1ccb\3\2\2\2"+
		"\u1cc9\u1cc7\3\2\2\2\u1cc9\u1cca\3\2\2\2\u1cca\u1ccc\3\2\2\2\u1ccb\u1cc9"+
		"\3\2\2\2\u1ccc\u1ccd\7\u0288\2\2\u1ccd\u1d93\3\2\2\2\u1cce\u1ccf\7\u0216"+
		"\2\2\u1ccf\u1cd0\7\u0287\2\2\u1cd0\u1cd1\5\u0346\u01a4\2\u1cd1\u1cd3\7"+
		"\26\2\2\u1cd2\u1cd4\7\u01a1\2\2\u1cd3\u1cd2\3\2\2\2\u1cd3\u1cd4\3\2\2"+
		"\2\u1cd4\u1cd5\3\2\2\2\u1cd5\u1cd6\5\u041a\u020e\2\u1cd6\u1cd7\7\u0288"+
		"\2\2\u1cd7\u1d93\3\2\2\2\u1cd8\u1cd9\7\u0218\2\2\u1cd9\u1ce1\7\u0287\2"+
		"\2\u1cda\u1cdc\t\21\2\2\u1cdb\u1cda\3\2\2\2\u1cdb\u1cdc\3\2\2\2\u1cdc"+
		"\u1cde\3\2\2\2\u1cdd\u1cdf\5\u042e\u0218\2\u1cde\u1cdd\3\2\2\2\u1cde\u1cdf"+
		"\3\2\2\2\u1cdf\u1ce0\3\2\2\2\u1ce0\u1ce2\7\u00c6\2\2\u1ce1\u1cdb\3\2\2"+
		"\2\u1ce1\u1ce2\3\2\2\2\u1ce2\u1ce3\3\2\2\2\u1ce3\u1ce4\5\u0356\u01ac\2"+
		"\u1ce4\u1ce5\7\u0288\2\2\u1ce5\u1d93\3\2\2\2\u1ce6\u1ce7\7\u024a\2\2\u1ce7"+
		"\u1ce8\7\u0287\2\2\u1ce8\u1cea\5\u0346\u01a4\2\u1ce9\u1ceb\5\u02f2\u017a"+
		"\2\u1cea\u1ce9\3\2\2\2\u1cea\u1ceb\3\2\2\2\u1ceb\u1cec\3\2\2\2\u1cec\u1cef"+
		"\7\u0288\2\2\u1ced\u1cee\7\u0280\2\2\u1cee\u1cf0\5\u0424\u0213\2\u1cef"+
		"\u1ced\3\2\2\2\u1cef\u1cf0\3\2\2\2\u1cf0\u1d93\3\2\2\2\u1cf1\u1cf2\t["+
		"\2\2\u1cf2\u1cf3\7\u0287\2\2\u1cf3\u1cf8\5\u03a4\u01d3\2\u1cf4\u1cf5\7"+
		"\u028d\2\2\u1cf5\u1cf7\5\u03a4\u01d3\2\u1cf6\u1cf4\3\2\2\2\u1cf7\u1cfa"+
		"\3\2\2\2\u1cf8\u1cf6\3\2\2\2\u1cf8\u1cf9\3\2\2\2\u1cf9\u1cfb\3\2\2\2\u1cfa"+
		"\u1cf8\3\2\2\2\u1cfb\u1cfe\7\u0288\2\2\u1cfc\u1cfd\7\u0280\2\2\u1cfd\u1cff"+
		"\5\u0424\u0213\2\u1cfe\u1cfc\3\2\2\2\u1cfe\u1cff\3\2\2\2\u1cff\u1d93\3"+
		"\2\2\2\u1d00\u1d01\7\u024e\2\2\u1d01\u1d03\7\u0287\2\2\u1d02\u1d04\t\\"+
		"\2\2\u1d03\u1d02\3\2\2\2\u1d03\u1d04\3\2\2\2\u1d04\u1d06\3\2\2\2\u1d05"+
		"\u1d07\t]\2\2\u1d06\u1d05\3\2\2\2\u1d06\u1d07\3\2\2\2\u1d07\u1d08\3\2"+
		"\2\2\u1d08\u1d0b\5\u0346\u01a4\2\u1d09\u1d0a\7\u028d\2\2\u1d0a\u1d0c\5"+
		"\u039c\u01cf\2\u1d0b\u1d09\3\2\2\2\u1d0b\u1d0c\3\2\2\2\u1d0c\u1d14\3\2"+
		"\2\2\u1d0d\u1d0e\7\u028d\2\2\u1d0e\u1d10\5\u0346\u01a4\2\u1d0f\u1d11\5"+
		"\u03be\u01e0\2\u1d10\u1d0f\3\2\2\2\u1d10\u1d11\3\2\2\2\u1d11\u1d13\3\2"+
		"\2\2\u1d12\u1d0d\3\2\2\2\u1d13\u1d16\3\2\2\2\u1d14\u1d12\3\2\2\2\u1d14"+
		"\u1d15\3\2\2\2\u1d15\u1d17\3\2\2\2\u1d16\u1d14\3\2\2\2\u1d17\u1d1a\7\u0288"+
		"\2\2\u1d18\u1d19\7\u0280\2\2\u1d19\u1d1b\5\u0424\u0213\2\u1d1a\u1d18\3"+
		"\2\2\2\u1d1a\u1d1b\3\2\2\2\u1d1b\u1d93\3\2\2\2\u1d1c\u1d1d\7\u024f\2\2"+
		"\u1d1d\u1d1e\7\u0287\2\2\u1d1e\u1d20\5\u0346\u01a4\2\u1d1f\u1d21\5\u039a"+
		"\u01ce\2\u1d20\u1d1f\3\2\2\2\u1d20\u1d21\3\2\2\2\u1d21\u1d22\3\2\2\2\u1d22"+
		"\u1d23\7\u0288\2\2\u1d23\u1d93\3\2\2\2\u1d24\u1d25\7\u0253\2\2\u1d25\u1d26"+
		"\7\u0287\2\2\u1d26\u1d27\t^\2\2\u1d27\u1d29\5\u0356\u01ac\2\u1d28\u1d2a"+
		"\7\u023e\2\2\u1d29\u1d28\3\2\2\2\u1d29\u1d2a\3\2\2\2\u1d2a\u1d2b\3\2\2"+
		"\2\u1d2b\u1d2e\7\u0288\2\2\u1d2c\u1d2d\7\u0280\2\2\u1d2d\u1d2f\5\u0424"+
		"\u0213\2\u1d2e\u1d2c\3\2\2\2\u1d2e\u1d2f\3\2\2\2\u1d2f\u1d93\3\2\2\2\u1d30"+
		"\u1d31\7\u0254\2\2\u1d31\u1d36\7\u0287\2\2\u1d32\u1d33\7\u0133\2\2\u1d33"+
		"\u1d37\5\u0430\u0219\2\u1d34\u1d35\7\u00a4\2\2\u1d35\u1d37\5\u0356\u01ac"+
		"\2\u1d36\u1d32\3\2\2\2\u1d36\u1d34\3\2\2\2\u1d37\u1d3a\3\2\2\2\u1d38\u1d39"+
		"\7\u028d\2\2\u1d39\u1d3b\5\u0356\u01ac\2\u1d3a\u1d38\3\2\2\2\u1d3a\u1d3b"+
		"\3\2\2\2\u1d3b\u1d3c\3\2\2\2\u1d3c\u1d3f\7\u0288\2\2\u1d3d\u1d3e\7\u0280"+
		"\2\2\u1d3e\u1d40\5\u0424\u0213\2\u1d3f\u1d3d\3\2\2\2\u1d3f\u1d40\3\2\2"+
		"\2\u1d40\u1d93\3\2\2\2\u1d41\u1d42\7\u0255\2\2\u1d42\u1d43\7\u0287\2\2"+
		"\u1d43\u1d45\5\u0356\u01ac\2\u1d44\u1d46\5\u039a\u01ce\2\u1d45\u1d44\3"+
		"\2\2\2\u1d45\u1d46\3\2\2\2\u1d46\u1d47\3\2\2\2\u1d47\u1d48\7\u01b3\2\2"+
		"\u1d48\u1d4c\7]\2\2\u1d49\u1d4a\7\u0157\2\2\u1d4a\u1d4b\7\u0164\2\2\u1d4b"+
		"\u1d4d\7\u009a\2\2\u1d4c\u1d49\3\2\2\2\u1d4c\u1d4d\3\2\2\2\u1d4d\u1d4e"+
		"\3\2\2\2\u1d4e\u1d51\7\u0288\2\2\u1d4f\u1d50\7\u0280\2\2\u1d50\u1d52\5"+
		"\u0424\u0213\2\u1d51\u1d4f\3\2\2\2\u1d51\u1d52\3\2\2\2\u1d52\u1d93\3\2"+
		"\2\2\u1d53\u1d54\7\u0256\2\2\u1d54\u1d55\7\u0287\2\2\u1d55\u1d58\5\u0356"+
		"\u01ac\2\u1d56\u1d57\7\u028d\2\2\u1d57\u1d59\5\u03a6\u01d4\2\u1d58\u1d56"+
		"\3\2\2\2\u1d58\u1d59\3\2\2\2\u1d59\u1d5c\3\2\2\2\u1d5a\u1d5b\7\u028d\2"+
		"\2\u1d5b\u1d5d\5\u03a8\u01d5\2\u1d5c\u1d5a\3\2\2\2\u1d5c\u1d5d\3\2\2\2"+
		"\u1d5d\u1d5e\3\2\2\2\u1d5e\u1d61\7\u0288\2\2\u1d5f\u1d60\7\u0280\2\2\u1d60"+
		"\u1d62\5\u0424\u0213\2\u1d61\u1d5f\3\2\2\2\u1d61\u1d62\3\2\2\2\u1d62\u1d93"+
		"\3\2\2\2\u1d63\u1d64\7\u0258\2\2\u1d64\u1d65\7\u0287\2\2\u1d65\u1d66\t"+
		"^\2\2\u1d66\u1d69\5\u0356\u01ac\2\u1d67\u1d68\7\26\2\2\u1d68\u1d6a\5\u041a"+
		"\u020e\2\u1d69\u1d67\3\2\2\2\u1d69\u1d6a\3\2\2\2\u1d6a\u1d6c\3\2\2\2\u1d6b"+
		"\u1d6d\5\u03aa\u01d6\2\u1d6c\u1d6b\3\2\2\2\u1d6c\u1d6d\3\2\2\2\u1d6d\u1d6f"+
		"\3\2\2\2\u1d6e\u1d70\5\u03ac\u01d7\2\u1d6f\u1d6e\3\2\2\2\u1d6f\u1d70\3"+
		"\2\2\2\u1d70\u1d72\3\2\2\2\u1d71\u1d73\5\u03ae\u01d8\2\u1d72\u1d71\3\2"+
		"\2\2\u1d72\u1d73\3\2\2\2\u1d73\u1d76\3\2\2\2\u1d74\u1d75\t_\2\2\u1d75"+
		"\u1d77\7\u0083\2\2\u1d76\u1d74\3\2\2\2\u1d76\u1d77\3\2\2\2\u1d77\u1d78"+
		"\3\2\2\2\u1d78\u1d7b\7\u0288\2\2\u1d79\u1d7a\7\u0280\2\2\u1d7a\u1d7c\5"+
		"\u0424\u0213\2\u1d7b\u1d79\3\2\2\2\u1d7b\u1d7c\3\2\2\2\u1d7c\u1d93\3\2"+
		"\2\2\u1d7d\u1d7e\7\u0259\2\2\u1d7e\u1d80\7\u0287\2\2\u1d7f\u1d81\5\u039e"+
		"\u01d0\2\u1d80\u1d7f\3\2\2\2\u1d80\u1d81\3\2\2\2\u1d81\u1d82\3\2\2\2\u1d82"+
		"\u1d84\5\u0356\u01ac\2\u1d83\u1d85\5\u039a\u01ce\2\u1d84\u1d83\3\2\2\2"+
		"\u1d84\u1d85\3\2\2\2\u1d85\u1d8b\3\2\2\2\u1d86\u1d87\7K\2\2\u1d87\u1d88"+
		"\5\u03a0\u01d1\2\u1d88\u1d89\7\u028d\2\2\u1d89\u1d8a\5\u03a0\u01d1\2\u1d8a"+
		"\u1d8c\3\2\2\2\u1d8b\u1d86\3\2\2\2\u1d8b\u1d8c\3\2\2\2\u1d8c\u1d8d\3\2"+
		"\2\2\u1d8d\u1d90\7\u0288\2\2\u1d8e\u1d8f\7\u0280\2\2\u1d8f\u1d91\5\u0424"+
		"\u0213\2\u1d90\u1d8e\3\2\2\2\u1d90\u1d91\3\2\2\2\u1d91\u1d93\3\2\2\2\u1d92"+
		"\u1c56\3\2\2\2\u1d92\u1c58\3\2\2\2\u1d92\u1c5d\3\2\2\2\u1d92\u1c6e\3\2"+
		"\2\2\u1d92\u1c73\3\2\2\2\u1d92\u1c7a\3\2\2\2\u1d92\u1c85\3\2\2\2\u1d92"+
		"\u1c8c\3\2\2\2\u1d92\u1c94\3\2\2\2\u1d92\u1c9e\3\2\2\2\u1d92\u1ca5\3\2"+
		"\2\2\u1d92\u1cb7\3\2\2\2\u1d92\u1cbe\3\2\2\2\u1d92\u1cce\3\2\2\2\u1d92"+
		"\u1cd8\3\2\2\2\u1d92\u1ce6\3\2\2\2\u1d92\u1cf1\3\2\2\2\u1d92\u1d00\3\2"+
		"\2\2\u1d92\u1d1c\3\2\2\2\u1d92\u1d24\3\2\2\2\u1d92\u1d30\3\2\2\2\u1d92"+
		"\u1d41\3\2\2\2\u1d92\u1d53\3\2\2\2\u1d92\u1d63\3\2\2\2\u1d92\u1d7d\3\2"+
		"\2\2\u1d93\u1d99\3\2\2\2\u1d94\u1d95\f\30\2\2\u1d95\u1d96\7\5\2\2\u1d96"+
		"\u1d98\5\u041a\u020e\2\u1d97\u1d94\3\2\2\2\u1d98\u1d9b\3\2\2\2\u1d99\u1d97"+
		"\3\2\2\2\u1d99\u1d9a\3\2\2\2\u1d9a\u037f\3\2\2\2\u1d9b\u1d99\3\2\2\2\u1d9c"+
		"\u1d9d\5\u0382\u01c2\2\u1d9d\u1d9f\5\u0412\u020a\2\u1d9e\u1da0\5\u0388"+
		"\u01c5\2\u1d9f\u1d9e\3\2\2\2\u1d9f\u1da0\3\2\2\2\u1da0\u1daf\3\2\2\2\u1da1"+
		"\u1da2\7d\2\2\u1da2\u1da8\7\u0287\2\2\u1da3\u1da9\5\u040c\u0207\2\u1da4"+
		"\u1da6\tD\2\2\u1da5\u1da4\3\2\2\2\u1da5\u1da6\3\2\2\2\u1da6\u1da7\3\2"+
		"\2\2\u1da7\u1da9\5\u0356\u01ac\2\u1da8\u1da3\3\2\2\2\u1da8\u1da5\3\2\2"+
		"\2\u1da9\u1daa\3\2\2\2\u1daa\u1dac\7\u0288\2\2\u1dab\u1dad\5\u0388\u01c5"+
		"\2\u1dac\u1dab\3\2\2\2\u1dac\u1dad\3\2\2\2\u1dad\u1daf\3\2\2\2\u1dae\u1d9c"+
		"\3\2\2\2\u1dae\u1da1\3\2\2\2\u1daf\u0381\3\2\2\2\u1db0\u1db1\t`\2\2\u1db1"+
		"\u0383\3\2\2\2\u1db2\u1db3\ta\2\2\u1db3\u0385\3\2\2\2\u1db4\u1db5\tb\2"+
		"\2\u1db5\u0387\3\2\2\2\u1db6\u1db7\7\u0170\2\2\u1db7\u1db9\7\u0287\2\2"+
		"\u1db8\u1dba\5\u02ae\u0158\2\u1db9\u1db8\3\2\2\2\u1db9\u1dba\3\2\2\2\u1dba"+
		"\u1dbf\3\2\2\2\u1dbb\u1dbd\5\u02f2\u017a\2\u1dbc\u1dbe\5\u038a\u01c6\2"+
		"\u1dbd\u1dbc\3\2\2\2\u1dbd\u1dbe\3\2\2\2\u1dbe\u1dc0\3\2\2\2\u1dbf\u1dbb"+
		"\3\2\2\2\u1dbf\u1dc0\3\2\2\2\u1dc0\u1dc1\3\2\2\2\u1dc1\u1dc2\7\u0288\2"+
		"\2\u1dc2\u0389\3\2\2\2\u1dc3\u1dca\5\u038c\u01c7\2\u1dc4\u1dc5\7%\2\2"+
		"\u1dc5\u1dc6\5\u038e\u01c8\2\u1dc6\u1dc7\7\21\2\2\u1dc7\u1dc8\5\u038e"+
		"\u01c8\2\u1dc8\u1dcb\3\2\2\2\u1dc9\u1dcb\5\u038e\u01c8\2\u1dca\u1dc4\3"+
		"\2\2\2\u1dca\u1dc9\3\2\2\2\u1dcb\u038b\3\2\2\2\u1dcc\u1dcd\tc\2\2\u1dcd"+
		"\u038d\3\2\2\2\u1dce\u1dcf\7\u021d\2\2\u1dcf\u1dd6\7\u018c\2\2\u1dd0\u1dd1"+
		"\7k\2\2\u1dd1\u1dd6\7\u01bc\2\2\u1dd2\u1dd3\5\u0356\u01ac\2\u1dd3\u1dd4"+
		"\td\2\2\u1dd4\u1dd6\3\2\2\2\u1dd5\u1dce\3\2\2\2\u1dd5\u1dd0\3\2\2\2\u1dd5"+
		"\u1dd2\3\2\2\2\u1dd6\u038f\3\2\2\2\u1dd7\u1de1\7\u022c\2\2\u1dd8\u1de2"+
		"\5\u040c\u0207\2\u1dd9\u1dde\5\u0392\u01ca\2\u1dda\u1ddb\7\u028d\2\2\u1ddb"+
		"\u1ddd\5\u0392\u01ca\2\u1ddc\u1dda\3\2\2\2\u1ddd\u1de0\3\2\2\2\u1dde\u1ddc"+
		"\3\2\2\2\u1dde\u1ddf\3\2\2\2\u1ddf\u1de2\3\2\2\2\u1de0\u1dde\3\2\2\2\u1de1"+
		"\u1dd8\3\2\2\2\u1de1\u1dd9\3\2\2\2\u1de2\u0391\3\2\2\2\u1de3\u1de5\7\u00db"+
		"\2\2\u1de4\u1de6\7\u016e\2\2\u1de5\u1de4\3\2\2\2\u1de5\u1de6\3\2\2\2\u1de6"+
		"\u1de9\3\2\2\2\u1de7\u1de9\7\u016e\2\2\u1de8\u1de3\3\2\2\2\u1de8\u1de7"+
		"\3\2\2\2\u1de8\u1de9\3\2\2\2\u1de9\u1dea\3\2\2\2\u1dea\u1dec\5\u029c\u014f"+
		"\2\u1deb\u1ded\5\u03be\u01e0\2\u1dec\u1deb\3\2\2\2\u1dec\u1ded\3\2\2\2"+
		"\u1ded\u0393\3\2\2\2\u1dee\u1def\7\u016b\2\2\u1def\u1df0\7\65\2\2\u1df0"+
		"\u1df1\5\u0356\u01ac\2\u1df1\u0395\3\2\2\2\u1df2\u1df3\7\u0245\2\2\u1df3"+
		"\u1df4\7\u00cd\2\2\u1df4\u1df5\7\u0287\2\2\u1df5\u1df6\5\u02f2\u017a\2"+
		"\u1df6\u1df7\7\u0288\2\2\u1df7\u1dfa\3\2\2\2\u1df8\u1dfa\5\u0388\u01c5"+
		"\2\u1df9\u1df2\3\2\2\2\u1df9\u1df8\3\2\2\2\u1dfa\u0397\3\2\2\2\u1dfb\u1e0d"+
		"\7c\2\2\u1dfc\u1dfe\7\u012e\2\2\u1dfd\u1dff\7\35\2\2\u1dfe\u1dfd\3\2\2"+
		"\2\u1dfe\u1dff\3\2\2\2\u1dff\u1e0e\3\2\2\2\u1e00\u1e01\7\u0287\2\2\u1e01"+
		"\u1e06\5\u03cc\u01e7\2\u1e02\u1e03\7\u028d\2\2\u1e03\u1e05\5\u03cc\u01e7"+
		"\2\u1e04\u1e02\3\2\2\2\u1e05\u1e08\3\2\2\2\u1e06\u1e04\3\2\2\2\u1e06\u1e07"+
		"\3\2\2\2\u1e07\u1e09\3\2\2\2\u1e08\u1e06\3\2\2\2\u1e09\u1e0a\7\u0288\2"+
		"\2\u1e0a\u1e0b\7\u022f\2\2\u1e0b\u1e0c\5\u0342\u01a2\2\u1e0c\u1e0e\3\2"+
		"\2\2\u1e0d\u1dfc\3\2\2\2\u1e0d\u1e00\3\2\2\2\u1e0e\u0399\3\2\2\2\u1e0f"+
		"\u1e12\7\u0179\2\2\u1e10\u1e11\7\65\2\2\u1e11\u1e13\7\u022e\2\2\u1e12"+
		"\u1e10\3\2\2\2\u1e12\u1e13\3\2\2\2\u1e13\u1e14\3\2\2\2\u1e14\u1e16\5\u0346"+
		"\u01a4\2\u1e15\u1e17\5\u03be\u01e0\2\u1e16\u1e15\3\2\2\2\u1e16\u1e17\3"+
		"\2\2\2\u1e17\u1e18\3\2\2\2\u1e18\u1e19\7\u028d\2\2\u1e19\u1e1b\5\u0346"+
		"\u01a4\2\u1e1a\u1e1c\5\u03be\u01e0\2\u1e1b\u1e1a\3\2\2\2\u1e1b\u1e1c\3"+
		"\2\2\2\u1e1c\u039b\3\2\2\2\u1e1d\u1e1e\7\u024b\2\2\u1e1e\u1e20\7\u0287"+
		"\2\2\u1e1f\u1e21\t\\\2\2\u1e20\u1e1f\3\2\2\2\u1e20\u1e21\3\2\2\2\u1e21"+
		"\u1e23\3\2\2\2\u1e22\u1e24\te\2\2\u1e23\u1e22\3\2\2\2\u1e23\u1e24\3\2"+
		"\2\2\u1e24\u1e25\3\2\2\2\u1e25\u1e2a\5\u03a4\u01d3\2\u1e26\u1e27\7\u028d"+
		"\2\2\u1e27\u1e29\5\u03a4\u01d3\2\u1e28\u1e26\3\2\2\2\u1e29\u1e2c\3\2\2"+
		"\2\u1e2a\u1e28\3\2\2\2\u1e2a\u1e2b\3\2\2\2\u1e2b\u1e2d\3\2\2\2\u1e2c\u1e2a"+
		"\3\2\2\2\u1e2d\u1e2e\7\u0288\2\2\u1e2e\u039d\3\2\2\2\u1e2f\u1e30\7\u0252"+
		"\2\2\u1e30\u1e34\7\u0287\2\2\u1e31\u1e32\5\u0356\u01ac\2\u1e32\u1e33\5"+
		"\u03be\u01e0\2\u1e33\u1e35\3\2\2\2\u1e34\u1e31\3\2\2\2\u1e34\u1e35\3\2"+
		"\2\2\u1e35\u1e3c\3\2\2\2\u1e36\u1e37\7\u028d\2\2\u1e37\u1e38\5\u0356\u01ac"+
		"\2\u1e38\u1e39\5\u03be\u01e0\2\u1e39\u1e3b\3\2\2\2\u1e3a\u1e36\3\2\2\2"+
		"\u1e3b\u1e3e\3\2\2\2\u1e3c\u1e3a\3\2\2\2\u1e3c\u1e3d\3\2\2\2\u1e3d\u1e40"+
		"\3\2\2\2\u1e3e\u1e3c\3\2\2\2\u1e3f\u1e41\5\u03a2\u01d2\2\u1e40\u1e3f\3"+
		"\2\2\2\u1e40\u1e41\3\2\2\2\u1e41\u1e42\3\2\2\2\u1e42\u1e43\7\u0288\2\2"+
		"\u1e43\u039f\3\2\2\2\u1e44\u1e4f\5\u03ca\u01e6\2\u1e45\u1e46\7\u00bf\2"+
		"\2\u1e46\u1e50\7\u016c\2\2\u1e47\u1e4a\5\u041a\u020e\2\u1e48\u1e49\7\u017a"+
		"\2\2\u1e49\u1e4b\5\u0356\u01ac\2\u1e4a\u1e48\3\2\2\2\u1e4a\u1e4b\3\2\2"+
		"\2\u1e4b\u1e4d\3\2\2\2\u1e4c\u1e4e\5\u03a2\u01d2\2\u1e4d\u1e4c\3\2\2\2"+
		"\u1e4d\u1e4e\3\2\2\2\u1e4e\u1e50\3\2\2\2\u1e4f\u1e45\3\2\2\2\u1e4f\u1e47"+
		"\3\2\2\2\u1e50\u03a1\3\2\2\2\u1e51\u1e52\7\u0082\2\2\u1e52\u1e53\5\u0356"+
		"\u01ac\2\u1e53\u03a3\3\2\2\2\u1e54\u1e5b\5\u0346\u01a4\2\u1e55\u1e59\7"+
		"\26\2\2\u1e56\u1e5a\5\u0432\u021a\2\u1e57\u1e58\7\u00a4\2\2\u1e58\u1e5a"+
		"\5\u0356\u01ac\2\u1e59\u1e56\3\2\2\2\u1e59\u1e57\3\2\2\2\u1e5a\u1e5c\3"+
		"\2\2\2\u1e5b\u1e55\3\2\2\2\u1e5b\u1e5c\3\2\2\2\u1e5c\u03a5\3\2\2\2\u1e5d"+
		"\u1e61\7\u0237\2\2\u1e5e\u1e5f\7\u013f\2\2\u1e5f\u1e62\7\u022e\2\2\u1e60"+
		"\u1e62\5\u0346\u01a4\2\u1e61\u1e5e\3\2\2\2\u1e61\u1e60\3\2\2\2\u1e62\u03a7"+
		"\3\2\2\2\u1e63\u1e69\7\u01eb\2\2\u1e64\u1e6a\7\u025c\2\2\u1e65\u1e67\7"+
		"\u013f\2\2\u1e66\u1e68\7\u022e\2\2\u1e67\u1e66\3\2\2\2\u1e67\u1e68\3\2"+
		"\2\2\u1e68\u1e6a\3\2\2\2\u1e69\u1e64\3\2\2\2\u1e69\u1e65\3\2\2\2\u1e6a"+
		"\u03a9\3\2\2\2\u1e6b\u1e6c\7\u009c\2\2\u1e6c\u1e6d\5\u0356\u01ac\2\u1e6d"+
		"\u03ab\3\2\2\2\u1e6e\u1e6f\7\u0237\2\2\u1e6f\u1e70\5\u0356\u01ac\2\u1e70"+
		"\u03ad\3\2\2\2\u1e71\u1e72\7\u013f\2\2\u1e72\u1e7a\7\u00df\2\2\u1e73\u1e77"+
		"\7\u00df\2\2\u1e74\u1e75\7\u01e1\2\2\u1e75\u1e76\7\u029e\2\2\u1e76\u1e78"+
		"\5\u0356\u01ac\2\u1e77\u1e74\3\2\2\2\u1e77\u1e78\3\2\2\2\u1e78\u1e7a\3"+
		"\2\2\2\u1e79\u1e71\3\2\2\2\u1e79\u1e73\3\2\2\2\u1e7a\u03af\3\2\2\2\u1e7b"+
		"\u1e82\7\u028e\2\2\u1e7c\u1e82\5\u03b2\u01da\2\u1e7d\u1e82\5\u03b6\u01dc"+
		"\2\u1e7e\u1e82\5\u03b8\u01dd\2\u1e7f\u1e82\5\u03b4\u01db\2\u1e80\u1e82"+
		"\5\u03ba\u01de\2\u1e81\u1e7b\3\2\2\2\u1e81\u1e7c\3\2\2\2\u1e81\u1e7d\3"+
		"\2\2\2\u1e81\u1e7e\3\2\2\2\u1e81\u1e7f\3\2\2\2\u1e81\u1e80\3\2\2\2\u1e82"+
		"\u03b1\3\2\2\2\u1e83\u1e84\7\u0240\2\2\u1e84\u1e8a\tf\2\2\u1e85\u1e86"+
		"\7\u00ad\2\2\u1e86\u1e87\tg\2\2\u1e87\u1e8b\th\2\2\u1e88\u1e89\7_\2\2"+
		"\u1e89\u1e8b\ti\2\2\u1e8a\u1e85\3\2\2\2\u1e8a\u1e88\3\2\2\2\u1e8b\u03b3"+
		"\3\2\2\2\u1e8c\u1e8d\7\u01d6\2\2\u1e8d\u1e93\5\u043e\u0220\2\u1e8e\u1e94"+
		"\7\u0283\2\2\u1e8f\u1e94\7\u0164\2\2\u1e90\u1e94\7\u015f\2\2\u1e91\u1e94"+
		"\5\u042a\u0216\2\u1e92\u1e94\5\u043e\u0220\2\u1e93\u1e8e\3\2\2\2\u1e93"+
		"\u1e8f\3\2\2\2\u1e93\u1e90\3\2\2\2\u1e93\u1e91\3\2\2\2\u1e93\u1e92\3\2"+
		"\2\2\u1e94\u03b5\3\2\2\2\u1e95\u1e96\7\u00ad\2\2\u1e96\u03b7\3\2\2\2\u1e97"+
		"\u1e98\7\u02a5\2\2\u1e98\u03b9\3\2\2\2\u1e99\u1e9a\7\u01da\2\2\u1e9a\u1e9e"+
		"\7\u00a1\2\2\u1e9b\u1e9c\7\u01da\2\2\u1e9c\u1e9e\7\u00a2\2\2\u1e9d\u1e99"+
		"\3\2\2\2\u1e9d\u1e9b\3\2\2\2\u1e9e\u03bb\3\2\2\2\u1e9f\u1ea1\tj\2\2\u1ea0"+
		"\u1ea2\7\u00bf\2\2\u1ea1\u1ea0\3\2\2\2\u1ea1\u1ea2\3\2\2\2\u1ea2\u1ea3"+
		"\3\2\2\2\u1ea3\u1ea4\5\u0342\u01a2\2\u1ea4\u03bd\3\2\2\2\u1ea5\u1ea7\7"+
		"\26\2\2\u1ea6\u1ea5\3\2\2\2\u1ea6\u1ea7\3\2\2\2\u1ea7\u1eaa\3\2\2\2\u1ea8"+
		"\u1eab\5\u0430\u0219\2\u1ea9\u1eab\5\u03c2\u01e2\2\u1eaa\u1ea8\3\2\2\2"+
		"\u1eaa\u1ea9\3\2\2\2\u1eab\u1eae\3\2\2\2\u1eac\u1eae\7\26\2\2\u1ead\u1ea6"+
		"\3\2\2\2\u1ead\u1eac\3\2\2\2\u1eae\u03bf\3\2\2\2\u1eaf\u1eb1\7\26\2\2"+
		"\u1eb0\u1eaf\3\2\2\2\u1eb0\u1eb1\3\2\2\2\u1eb1\u1eb4\3\2\2\2\u1eb2\u1eb5"+
		"\5\u0430\u0219\2\u1eb3\u1eb5\5\u03c2\u01e2\2\u1eb4\u1eb2\3\2\2\2\u1eb4"+
		"\u1eb3\3\2\2\2\u1eb5\u03c1\3\2\2\2\u1eb6\u1eb7\5\u042e\u0218\2\u1eb7\u03c3"+
		"\3\2\2\2\u1eb8\u1ebb\7\u0241\2\2\u1eb9\u1ebc\5\u03c6\u01e4\2\u1eba\u1ebc"+
		"\5\u0346\u01a4\2\u1ebb\u1eb9\3\2\2\2\u1ebb\u1eba\3\2\2\2\u1ebc\u03c5\3"+
		"\2\2\2\u1ebd\u1ebe\7k\2\2\u1ebe\u1ebf\7\u015e\2\2\u1ebf\u1ec0\5\u03fc"+
		"\u01ff\2\u1ec0\u03c7\3\2\2\2\u1ec1\u1ec2\7\u00f4\2\2\u1ec2\u1ec7\5\u03f8"+
		"\u01fd\2\u1ec3\u1ec4\7\u028d\2\2\u1ec4\u1ec6\5\u03f8\u01fd\2\u1ec5\u1ec3"+
		"\3\2\2\2\u1ec6\u1ec9\3\2\2\2\u1ec7\u1ec5\3\2\2\2\u1ec7\u1ec8\3\2\2\2\u1ec8"+
		"\u1ed6\3\2\2\2\u1ec9\u1ec7\3\2\2\2\u1eca\u1ecb\7\64\2\2\u1ecb\u1ecc\7"+
		"I\2\2\u1ecc\u1ecd\7\u00f4\2\2\u1ecd\u1ed2\5\u03f8\u01fd\2\u1ece\u1ecf"+
		"\7\u028d\2\2\u1ecf\u1ed1\5\u03f8\u01fd\2\u1ed0\u1ece\3\2\2\2\u1ed1\u1ed4"+
		"\3\2\2\2\u1ed2\u1ed0\3\2\2\2\u1ed2\u1ed3\3\2\2\2\u1ed3\u1ed6\3\2\2\2\u1ed4"+
		"\u1ed2\3\2\2\2\u1ed5\u1ec1\3\2\2\2\u1ed5\u1eca\3\2\2\2\u1ed6\u03c9\3\2"+
		"\2\2\u1ed7\u1eda\5\u0430\u0219\2\u1ed8\u1eda\5\u042e\u0218\2\u1ed9\u1ed7"+
		"\3\2\2\2\u1ed9\u1ed8\3\2\2\2\u1eda\u03cb\3\2\2\2\u1edb\u1edc\5\u0430\u0219"+
		"\2\u1edc\u03cd\3\2\2\2\u1edd\u1ede\5\u0430\u0219\2\u1ede\u03cf\3\2\2\2"+
		"\u1edf\u1ee0\5\u0430\u0219\2\u1ee0\u03d1\3\2\2\2\u1ee1\u1ee2\5\u0430\u0219"+
		"\2\u1ee2\u03d3\3\2\2\2\u1ee3\u1ee4\5\u0430\u0219\2\u1ee4\u03d5\3\2\2\2"+
		"\u1ee5\u1ee6\5\u0430\u0219\2\u1ee6\u03d7\3\2\2\2\u1ee7\u1eec\5\u0430\u0219"+
		"\2\u1ee8\u1ee9\7\u0280\2\2\u1ee9\u1eeb\5\u0432\u021a\2\u1eea\u1ee8\3\2"+
		"\2\2\u1eeb\u1eee\3\2\2\2\u1eec\u1eea\3\2\2\2\u1eec\u1eed\3\2\2\2\u1eed"+
		"\u1ef1\3\2\2\2\u1eee\u1eec\3\2\2\2\u1eef\u1ef0\7\u028f\2\2\u1ef0\u1ef2"+
		"\5\u0402\u0202\2\u1ef1\u1eef\3\2\2\2\u1ef1\u1ef2\3\2\2\2\u1ef2\u03d9\3"+
		"\2\2\2\u1ef3\u1ef4\5\u0430\u0219\2\u1ef4\u03db\3\2\2\2\u1ef5\u1ef8\5\u0430"+
		"\u0219\2\u1ef6\u1ef7\7\u0280\2\2\u1ef7\u1ef9\5\u0432\u021a\2\u1ef8\u1ef6"+
		"\3\2\2\2\u1ef8\u1ef9\3\2\2\2\u1ef9\u03dd\3\2\2\2\u1efa\u1efb\5\u0430\u0219"+
		"\2\u1efb\u03df\3\2\2\2\u1efc\u1efd\5\u0430\u0219\2\u1efd\u03e1\3\2\2\2"+
		"\u1efe\u1eff\5\u0430\u0219\2\u1eff\u03e3\3\2\2\2\u1f00\u1f05\5\u0430\u0219"+
		"\2\u1f01\u1f02\7\u0280\2\2\u1f02\u1f04\5\u0432\u021a\2\u1f03\u1f01\3\2"+
		"\2\2\u1f04\u1f07\3\2\2\2\u1f05\u1f03\3\2\2\2\u1f05\u1f06\3\2\2\2\u1f06"+
		"\u03e5\3\2\2\2\u1f07\u1f05\3\2\2\2\u1f08\u1f09\5\u0430\u0219\2\u1f09\u03e7"+
		"\3\2\2\2\u1f0a\u1f0f\5\u0430\u0219\2\u1f0b\u1f0c\7\u0280\2\2\u1f0c\u1f0e"+
		"\5\u0432\u021a\2\u1f0d\u1f0b\3\2\2\2\u1f0e\u1f11\3\2\2\2\u1f0f\u1f0d\3"+
		"\2\2\2\u1f0f\u1f10\3\2\2\2\u1f10\u1f14\3\2\2\2\u1f11\u1f0f\3\2\2\2\u1f12"+
		"\u1f13\7\u028f\2\2\u1f13\u1f15\5\u0402\u0202\2\u1f14\u1f12\3\2\2\2\u1f14"+
		"\u1f15\3\2\2\2\u1f15\u03e9\3\2\2\2\u1f16\u1f17\5\u0432\u021a\2\u1f17\u03eb"+
		"\3\2\2\2\u1f18\u1f1d\5\u0432\u021a\2\u1f19\u1f1a\7\u0280\2\2\u1f1a\u1f1c"+
		"\5\u0432\u021a\2\u1f1b\u1f19\3\2\2\2\u1f1c\u1f1f\3\2\2\2\u1f1d\u1f1b\3"+
		"\2\2\2\u1f1d\u1f1e\3\2\2\2\u1f1e\u03ed\3\2\2\2\u1f1f\u1f1d\3\2\2\2\u1f20"+
		"\u1f25\5\u0432\u021a\2\u1f21\u1f22\7\u0280\2\2\u1f22\u1f24\5\u0432\u021a"+
		"\2\u1f23\u1f21\3\2\2\2\u1f24\u1f27\3\2\2\2\u1f25\u1f23\3\2\2\2\u1f25\u1f26"+
		"\3\2\2\2\u1f26\u03ef\3\2\2\2\u1f27\u1f25\3\2\2\2\u1f28\u1f2d\5\u0430\u0219"+
		"\2\u1f29\u1f2a\7\u0280\2\2\u1f2a\u1f2c\5\u0432\u021a\2\u1f2b\u1f29\3\2"+
		"\2\2\u1f2c\u1f2f\3\2\2\2\u1f2d\u1f2b\3\2\2\2\u1f2d\u1f2e\3\2\2\2\u1f2e"+
		"\u03f1\3\2\2\2\u1f2f\u1f2d\3\2\2\2\u1f30\u1f33\5\u0430\u0219\2\u1f31\u1f32"+
		"\7\u0280\2\2\u1f32\u1f34\5\u0432\u021a\2\u1f33\u1f31\3\2\2\2\u1f33\u1f34"+
		"\3\2\2\2\u1f34\u03f3\3\2\2\2\u1f35\u1f38\5\u0430\u0219\2\u1f36\u1f37\7"+
		"\u0280\2\2\u1f37\u1f39\5\u0432\u021a\2\u1f38\u1f36\3\2\2\2\u1f38\u1f39"+
		"\3\2\2\2\u1f39\u03f5\3\2\2\2\u1f3a\u1f3d\5\u0430\u0219\2\u1f3b\u1f3c\7"+
		"\u0280\2\2\u1f3c\u1f3e\5\u0432\u021a\2\u1f3d\u1f3b\3\2\2\2\u1f3d\u1f3e"+
		"\3\2\2\2\u1f3e\u03f7\3\2\2\2\u1f3f\u1f42\5\u040a\u0206\2\u1f40\u1f42\5"+
		"\u0422\u0212\2\u1f41\u1f3f\3\2\2\2\u1f41\u1f40\3\2\2\2\u1f42\u03f9\3\2"+
		"\2\2\u1f43\u1f44\5\u0430\u0219\2\u1f44\u03fb\3\2\2\2\u1f45\u1f48\5\u0430"+
		"\u0219\2\u1f46\u1f48\5\u0422\u0212\2\u1f47\u1f45\3\2\2\2\u1f47\u1f46\3"+
		"\2\2\2\u1f48\u03fd\3\2\2\2\u1f49\u1f4c\5\u0430\u0219\2\u1f4a\u1f4c\5\u0422"+
		"\u0212\2\u1f4b\u1f49\3\2\2\2\u1f4b\u1f4a\3\2\2\2\u1f4c\u03ff\3\2\2\2\u1f4d"+
		"\u1f50\5\u0430\u0219\2\u1f4e\u1f4f\7\u0280\2\2\u1f4f\u1f51\5\u0432\u021a"+
		"\2\u1f50\u1f4e\3\2\2\2\u1f50\u1f51\3\2\2\2\u1f51\u0401\3\2\2\2\u1f52\u1f53"+
		"\5\u0430\u0219\2\u1f53\u0403\3\2\2\2\u1f54\u1f59\5\u0430\u0219\2\u1f55"+
		"\u1f56\7\u0280\2\2\u1f56\u1f58\5\u0432\u021a\2\u1f57\u1f55\3\2\2\2\u1f58"+
		"\u1f5b\3\2\2\2\u1f59\u1f57\3\2\2\2\u1f59\u1f5a\3\2\2\2\u1f5a\u0405\3\2"+
		"\2\2\u1f5b\u1f59\3\2\2\2\u1f5c\u1f5d\5\u0430\u0219\2\u1f5d\u0407\3\2\2"+
		"\2\u1f5e\u1f62\5\u040a\u0206\2\u1f5f\u1f60\7\u028f\2\2\u1f60\u1f63\5\u0402"+
		"\u0202\2\u1f61\u1f63\5\u03bc\u01df\2\u1f62\u1f5f\3\2\2\2\u1f62\u1f61\3"+
		"\2\2\2\u1f62\u1f63\3\2\2\2\u1f63\u0409\3\2\2\2\u1f64\u1f69\5\u0432\u021a"+
		"\2\u1f65\u1f66\7\u0280\2\2\u1f66\u1f68\5\u0432\u021a\2\u1f67\u1f65\3\2"+
		"\2\2\u1f68\u1f6b\3\2\2\2\u1f69\u1f67\3\2\2\2\u1f69\u1f6a\3\2\2\2\u1f6a"+
		"\u040b\3\2\2\2\u1f6b\u1f69\3\2\2\2\u1f6c\u1f6d\7\u028a\2\2\u1f6d\u040d"+
		"\3\2\2\2\u1f6e\u1f6f\7\u00fc\2\2\u1f6f\u1f70\7\u0287\2\2\u1f70\u1f71\7"+
		"\u0266\2\2\u1f71\u1f72\tM\2\2\u1f72\u1f73\5\u02f2\u017a\2\u1f73\u1f75"+
		"\7\u0288\2\2\u1f74\u1f76\5\u0388\u01c5\2\u1f75\u1f74\3\2\2\2\u1f75\u1f76"+
		"\3\2\2\2\u1f76\u040f\3\2\2\2\u1f77\u1f79\7\u0287\2\2\u1f78\u1f7a\5\u0418"+
		"\u020d\2\u1f79\u1f78\3\2\2\2\u1f79\u1f7a\3\2\2\2\u1f7a\u1f7f\3\2\2\2\u1f7b"+
		"\u1f7c\7\u028d\2\2\u1f7c\u1f7e\5\u0418\u020d\2\u1f7d\u1f7b\3\2\2\2\u1f7e"+
		"\u1f81\3\2\2\2\u1f7f\u1f7d\3\2\2\2\u1f7f\u1f80\3\2\2\2\u1f80\u1f82\3\2"+
		"\2\2\u1f81\u1f7f\3\2\2\2\u1f82\u1f84\7\u0288\2\2\u1f83\u1f85\5\u040e\u0208"+
		"\2\u1f84\u1f83\3\2\2\2\u1f84\u1f85\3\2\2\2\u1f85\u0411\3\2\2\2\u1f86\u1f8b"+
		"\7\u0287\2\2\u1f87\u1f89\5\u0418\u020d\2\u1f88\u1f8a\5\u0416\u020c\2\u1f89"+
		"\u1f88\3\2\2\2\u1f89\u1f8a\3\2\2\2\u1f8a\u1f8c\3\2\2\2\u1f8b\u1f87\3\2"+
		"\2\2\u1f8b\u1f8c\3\2\2\2\u1f8c\u1f94\3\2\2\2\u1f8d\u1f8e\7\u028d\2\2\u1f8e"+
		"\u1f90\5\u0418\u020d\2\u1f8f\u1f91\5\u0416\u020c\2\u1f90\u1f8f\3\2\2\2"+
		"\u1f90\u1f91\3\2\2\2\u1f91\u1f93\3\2\2\2\u1f92\u1f8d\3\2\2\2\u1f93\u1f96"+
		"\3\2\2\2\u1f94\u1f92\3\2\2\2\u1f94\u1f95\3\2\2\2\u1f95\u1f97\3\2\2\2\u1f96"+
		"\u1f94\3\2\2\2\u1f97\u1f99\7\u0288\2\2\u1f98\u1f9a\5\u040e\u0208\2\u1f99"+
		"\u1f98\3\2\2\2\u1f99\u1f9a\3\2\2\2\u1f9a\u0413\3\2\2\2\u1f9b\u1f9c\7\u0287"+
		"\2\2\u1f9c\u1fa9\5\u0404\u0203\2\u1f9d\u1fa0\7\u028d\2\2\u1f9e\u1fa1\5"+
		"\u042a\u0216\2\u1f9f\u1fa1\7\u0157\2\2\u1fa0\u1f9e\3\2\2\2\u1fa0\u1f9f"+
		"\3\2\2\2\u1fa1\u1fa7\3\2\2\2\u1fa2\u1fa5\7\u028d\2\2\u1fa3\u1fa6\5\u042a"+
		"\u0216\2\u1fa4\u1fa6\7\u0157\2\2\u1fa5\u1fa3\3\2\2\2\u1fa5\u1fa4\3\2\2"+
		"\2\u1fa6\u1fa8\3\2\2\2\u1fa7\u1fa2\3\2\2\2\u1fa7\u1fa8\3\2\2\2\u1fa8\u1faa"+
		"\3\2\2\2\u1fa9\u1f9d\3\2\2\2\u1fa9\u1faa\3\2\2\2\u1faa\u1fab\3\2\2\2\u1fab"+
		"\u1fbf\7\u022c\2\2\u1fac\u1fad\5\u0408\u0205\2\u1fad\u1fae\7\u0280\2\2"+
		"\u1fae\u1faf\5\u040c\u0207\2\u1faf\u1fc0\3\2\2\2\u1fb0\u1fc0\5\u040c\u0207"+
		"\2\u1fb1\u1fb3\5\u0346\u01a4\2\u1fb2\u1fb4\5\u03be\u01e0\2\u1fb3\u1fb2"+
		"\3\2\2\2\u1fb3\u1fb4\3\2\2\2\u1fb4\u1fbc\3\2\2\2\u1fb5\u1fb6\7\u028d\2"+
		"\2\u1fb6\u1fb8\5\u0346\u01a4\2\u1fb7\u1fb9\5\u03be\u01e0\2\u1fb8\u1fb7"+
		"\3\2\2\2\u1fb8\u1fb9\3\2\2\2\u1fb9\u1fbb\3\2\2\2\u1fba\u1fb5\3\2\2\2\u1fbb"+
		"\u1fbe\3\2\2\2\u1fbc\u1fba\3\2\2\2\u1fbc\u1fbd\3\2\2\2\u1fbd\u1fc0\3\2"+
		"\2\2\u1fbe\u1fbc\3\2\2\2\u1fbf\u1fac\3\2\2\2\u1fbf\u1fb0\3\2\2\2\u1fbf"+
		"\u1fb1\3\2\2\2\u1fc0\u1fc1\3\2\2\2\u1fc1\u1fc3\7\u0288\2\2\u1fc2\u1fc4"+
		"\5\u040e\u0208\2\u1fc3\u1fc2\3\2\2\2\u1fc3\u1fc4\3\2\2\2\u1fc4\u0415\3"+
		"\2\2\2\u1fc5\u1fc6\tk\2\2\u1fc6\u1fc7\7\u0158\2\2\u1fc7\u0417\3\2\2\2"+
		"\u1fc8\u1fc9\5\u0430\u0219\2\u1fc9\u1fca\7\u029e\2\2\u1fca\u1fcb\7\u029b"+
		"\2\2\u1fcb\u1fcd\3\2\2\2\u1fcc\u1fc8\3\2\2\2\u1fcc\u1fcd\3\2\2\2\u1fcd"+
		"\u1fce\3\2\2\2\u1fce\u1fcf\5\u0346\u01a4\2\u1fcf\u0419\3\2\2\2\u1fd0\u1fd9"+
		"\5\u041c\u020f\2\u1fd1\u1fd3\7\u01a1\2\2\u1fd2\u1fd1\3\2\2\2\u1fd2\u1fd3"+
		"\3\2\2\2\u1fd3\u1fd4\3\2\2\2\u1fd4\u1fd6\5\u03ec\u01f7\2\u1fd5\u1fd7\t"+
		";\2\2\u1fd6\u1fd5\3\2\2\2\u1fd6\u1fd7\3\2\2\2\u1fd7\u1fd9\3\2\2\2\u1fd8"+
		"\u1fd0\3\2\2\2\u1fd8\u1fd2\3\2\2\2\u1fd9\u041b\3\2\2\2\u1fda\u1fdc\5\u0420"+
		"\u0211\2\u1fdb\u1fdd\5\u041e\u0210\2\u1fdc\u1fdb\3\2\2\2\u1fdc\u1fdd\3"+
		"\2\2\2\u1fdd\u1fe4\3\2\2\2\u1fde\u1fe0\7\u0243\2\2\u1fdf\u1fe1\7\u010e"+
		"\2\2\u1fe0\u1fdf\3\2\2\2\u1fe0\u1fe1\3\2\2\2\u1fe1\u1fe2\3\2\2\2\u1fe2"+
		"\u1fe3\7\u0207\2\2\u1fe3\u1fe5\7\u025e\2\2\u1fe4\u1fde\3\2\2\2\u1fe4\u1fe5"+
		"\3\2\2\2\u1fe5\u1ff7\3\2\2\2\u1fe6\u1fe7\7\u00f3\2\2\u1fe7\u1fec\tl\2"+
		"\2\u1fe8\u1fe9\7\u0287\2\2\u1fe9\u1fea\5\u0346\u01a4\2\u1fea\u1feb\7\u0288"+
		"\2\2\u1feb\u1fed\3\2\2\2\u1fec\u1fe8\3\2\2\2\u1fec\u1fed\3\2\2\2\u1fed"+
		"\u1fee\3\2\2\2\u1fee\u1fef\7\u0210\2\2\u1fef\u1ff4\tm\2\2\u1ff0\u1ff1"+
		"\7\u0287\2\2\u1ff1\u1ff2\5\u0346\u01a4\2\u1ff2\u1ff3\7\u0288\2\2\u1ff3"+
		"\u1ff5\3\2\2\2\u1ff4\u1ff0\3\2\2\2\u1ff4\u1ff5\3\2\2\2\u1ff5\u1ff7\3\2"+
		"\2\2\u1ff6\u1fda\3\2\2\2\u1ff6\u1fe6\3\2\2\2\u1ff7\u041d\3\2\2\2\u1ff8"+
		"\u1ff9\7\u0287\2\2\u1ff9\u1ffc\5\u042a\u0216\2\u1ffa\u1ffb\7\u028d\2\2"+
		"\u1ffb\u1ffd\5\u042a\u0216\2\u1ffc\u1ffa\3\2\2\2\u1ffc\u1ffd\3\2\2\2\u1ffd"+
		"\u1fff\3\2\2\2\u1ffe\u2000\tn\2\2\u1fff\u1ffe\3\2\2\2\u1fff\u2000\3\2"+
		"\2\2\u2000\u2001\3\2\2\2\u2001\u2002\7\u0288\2\2\u2002\u041f\3\2\2\2\u2003"+
		"\u2040\7*\2\2\u2004\u2040\7\u0185\2\2\u2005\u2040\7\u0135\2\2\u2006\u2040"+
		"\7)\2\2\u2007\u2040\7(\2\2\u2008\u2040\7\u0136\2\2\u2009\u2040\7\u0188"+
		"\2\2\u200a\u2040\7\u0189\2\2\u200b\u2040\7\u01de\2\2\u200c\u2040\7\u01df"+
		"\2\2\u200d\u2040\7\u015b\2\2\u200e\u2040\7z\2\2\u200f\u2040\7\u00f1\2"+
		"\2\u2010\u2040\7\u00f0\2\2\u2011\u2040\7\u015a\2\2\u2012\u2040\7\u01e3"+
		"\2\2\u2013\u2040\7\u0159\2\2\u2014\u2040\7{\2\2\u2015\u2017\7\u0092\2"+
		"\2\u2016\u2018\7\u018d\2\2\u2017\u2016\3\2\2\2\u2017\u2018\3\2\2\2\u2018"+
		"\u2040\3\2\2\2\u2019\u2040\7\u00bc\2\2\u201a\u2040\7\u019b\2\2\u201b\u2040"+
		"\7\u0138\2\2\u201c\u201e\7\u0119\2\2\u201d\u201f\7\u0198\2\2\u201e\u201d"+
		"\3\2\2\2\u201e\u201f\3\2\2\2\u201f\u2040\3\2\2\2\u2020\u2040\7>\2\2\u2021"+
		"\u2040\7@\2\2\u2022\u2040\7\u0231\2\2\u2023\u2040\7\u0230\2\2\u2024\u2040"+
		"\7\u01f4\2\2\u2025\u2040\7\u0198\2\2\u2026\u2040\7\61\2\2\u2027\u2040"+
		"\7s\2\2\u2028\u2040\7\u01be\2\2\u2029\u2040\7\u022a\2\2\u202a\u2040\7"+
		"\u025b\2\2\u202b\u2040\7\u0130\2\2\u202c\u2040\7t\2\2\u202d\u2040\7\u00d4"+
		"\2\2\u202e\u2040\7\u012a\2\2\u202f\u2040\7\u01ca\2\2\u2030\u2040\7\u020d"+
		"\2\2\u2031\u2040\7\u020e\2\2\u2032\u2040\7\u020f\2\2\u2033\u2040\7\u020c"+
		"\2\2\u2034\u2040\7\u0208\2\2\u2035\u2040\7\u020b\2\2\u2036\u2040\7\u020a"+
		"\2\2\u2037\u2040\7\u0209\2\2\u2038\u2040\7\u025d\2\2\u2039\u2040\7\u0094"+
		"\2\2\u203a\u2040\7&\2\2\u203b\u2040\7.\2\2\u203c\u2040\7E\2\2\u203d\u2040"+
		"\7\u013a\2\2\u203e\u2040\7\u012c\2\2\u203f\u2003\3\2\2\2\u203f\u2004\3"+
		"\2\2\2\u203f\u2005\3\2\2\2\u203f\u2006\3\2\2\2\u203f\u2007\3\2\2\2\u203f"+
		"\u2008\3\2\2\2\u203f\u2009\3\2\2\2\u203f\u200a\3\2\2\2\u203f\u200b\3\2"+
		"\2\2\u203f\u200c\3\2\2\2\u203f\u200d\3\2\2\2\u203f\u200e\3\2\2\2\u203f"+
		"\u200f\3\2\2\2\u203f\u2010\3\2\2\2\u203f\u2011\3\2\2\2\u203f\u2012\3\2"+
		"\2\2\u203f\u2013\3\2\2\2\u203f\u2014\3\2\2\2\u203f\u2015\3\2\2\2\u203f"+
		"\u2019\3\2\2\2\u203f\u201a\3\2\2\2\u203f\u201b\3\2\2\2\u203f\u201c\3\2"+
		"\2\2\u203f\u2020\3\2\2\2\u203f\u2021\3\2\2\2\u203f\u2022\3\2\2\2\u203f"+
		"\u2023\3\2\2\2\u203f\u2024\3\2\2\2\u203f\u2025\3\2\2\2\u203f\u2026\3\2"+
		"\2\2\u203f\u2027\3\2\2\2\u203f\u2028\3\2\2\2\u203f\u2029\3\2\2\2\u203f"+
		"\u202a\3\2\2\2\u203f\u202b\3\2\2\2\u203f\u202c\3\2\2\2\u203f\u202d\3\2"+
		"\2\2\u203f\u202e\3\2\2\2\u203f\u202f\3\2\2\2\u203f\u2030\3\2\2\2\u203f"+
		"\u2031\3\2\2\2\u203f\u2032\3\2\2\2\u203f\u2033\3\2\2\2\u203f\u2034\3\2"+
		"\2\2\u203f\u2035\3\2\2\2\u203f\u2036\3\2\2\2\u203f\u2037\3\2\2\2\u203f"+
		"\u2038\3\2\2\2\u203f\u2039\3\2\2\2\u203f\u203a\3\2\2\2\u203f\u203b\3\2"+
		"\2\2\u203f\u203c\3\2\2\2\u203f\u203d\3\2\2\2\u203f\u203e\3\2\2\2\u2040"+
		"\u0421\3\2\2\2\u2041\u2045\7\u0291\2\2\u2042\u2043\7\u0292\2\2\u2043\u2045"+
		"\7\u0281\2\2\u2044\u2041\3\2\2\2\u2044\u2042\3\2\2\2\u2045\u204e\3\2\2"+
		"\2\u2046\u2048\7\u00e3\2\2\u2047\u2046\3\2\2\2\u2047\u2048\3\2\2\2\u2048"+
		"\u204c\3\2\2\2\u2049\u204d\7\u0291\2\2\u204a\u204b\7\u0292\2\2\u204b\u204d"+
		"\7\u0281\2\2\u204c\u2049\3\2\2\2\u204c\u204a\3\2\2\2\u204d\u204f\3\2\2"+
		"\2\u204e\u2047\3\2\2\2\u204e\u204f\3\2\2\2\u204f\u2054\3\2\2\2\u2050\u2051"+
		"\7\u0280\2\2\u2051\u2053\5\u0424\u0213\2\u2052\u2050\3\2\2\2\u2053\u2056"+
		"\3\2\2\2\u2054\u2052\3\2\2\2\u2054\u2055\3\2\2\2\u2055\u0423\3\2\2\2\u2056"+
		"\u2054\3\2\2\2\u2057\u2058\5\u040a\u0206\2\u2058\u2059\5\u0410\u0209\2"+
		"\u2059\u205c\3\2\2\2\u205a\u205c\5\u040a\u0206\2\u205b\u2057\3\2\2\2\u205b"+
		"\u205a\3\2\2\2\u205c\u0425\3\2\2\2\u205d\u205e\5\u040a\u0206\2\u205e\u0427"+
		"\3\2\2\2\u205f\u2062\7\u0208\2\2\u2060\u2063\5\u042e\u0218\2\u2061\u2063"+
		"\5\u0422\u0212\2\u2062\u2060\3\2\2\2\u2062\u2061\3\2\2\2\u2063\u2068\3"+
		"\2\2\2\u2064\u2065\7\31\2\2\u2065\u2066\7\u0207\2\2\u2066\u2067\7\u025e"+
		"\2\2\u2067\u2069\5\u042e\u0218\2\u2068\u2064\3\2\2\2\u2068\u2069\3\2\2"+
		"\2\u2069\u209e\3\2\2\2\u206a\u206e\7\u00f3\2\2\u206b\u206f\5\u042e\u0218"+
		"\2\u206c\u206f\5\u0422\u0212\2\u206d\u206f\5\u0424\u0213\2\u206e\u206b"+
		"\3\2\2\2\u206e\u206c\3\2\2\2\u206e\u206d\3\2\2\2\u206f\u2070\3\2\2\2\u2070"+
		"\u207e\to\2\2\u2071\u2074\7\u0287\2\2\u2072\u2075\7\u0281\2\2\u2073\u2075"+
		"\5\u0422\u0212\2\u2074\u2072\3\2\2\2\u2074\u2073\3\2\2\2\u2075\u207b\3"+
		"\2\2\2\u2076\u2079\7\u028d\2\2\u2077\u207a\7\u0281\2\2\u2078\u207a\5\u0422"+
		"\u0212\2\u2079\u2077\3\2\2\2\u2079\u2078\3\2\2\2\u207a\u207c\3\2\2\2\u207b"+
		"\u2076\3\2\2\2\u207b\u207c\3\2\2\2\u207c\u207d\3\2\2\2\u207d\u207f\7\u0288"+
		"\2\2\u207e\u2071\3\2\2\2\u207e\u207f\3\2\2\2\u207f\u208f\3\2\2\2\u2080"+
		"\u208d\7\u0210\2\2\u2081\u208e\7t\2\2\u2082\u208e\7\u00d4\2\2\u2083\u208e"+
		"\7\u012a\2\2\u2084\u208b\7\u01ca\2\2\u2085\u2088\7\u0287\2\2\u2086\u2089"+
		"\7\u0281\2\2\u2087\u2089\5\u0422\u0212\2\u2088\u2086\3\2\2\2\u2088\u2087"+
		"\3\2\2\2\u2089\u208a\3\2\2\2\u208a\u208c\7\u0288\2\2\u208b\u2085\3\2\2"+
		"\2\u208b\u208c\3\2\2\2\u208c\u208e\3\2\2\2\u208d\u2081\3\2\2\2\u208d\u2082"+
		"\3\2\2\2\u208d\u2083\3\2\2\2\u208d\u2084\3\2\2\2\u208e\u2090\3\2\2\2\u208f"+
		"\u2080\3\2\2\2\u208f\u2090\3\2\2\2\u2090\u209e\3\2\2\2\u2091\u209e\5\u042a"+
		"\u0216\2\u2092\u2093\7s\2\2\u2093\u209e\5\u042e\u0218\2\u2094\u209e\5"+
		"\u042e\u0218\2\u2095\u209e\7\u0157\2\2\u2096\u209e\7\u0219\2\2\u2097\u209e"+
		"\7\u00b3\2\2\u2098\u209e\7v\2\2\u2099\u209e\7\u01d5\2\2\u209a\u209e\7"+
		"\u012b\2\2\u209b\u209e\7\u0122\2\2\u209c\u209e\7\u0082\2\2\u209d\u205f"+
		"\3\2\2\2\u209d\u206a\3\2\2\2\u209d\u2091\3\2\2\2\u209d\u2092\3\2\2\2\u209d"+
		"\u2094\3\2\2\2\u209d\u2095\3\2\2\2\u209d\u2096\3\2\2\2\u209d\u2097\3\2"+
		"\2\2\u209d\u2098\3\2\2\2\u209d\u2099\3\2\2\2\u209d\u209a\3\2\2\2\u209d"+
		"\u209b\3\2\2\2\u209d\u209c\3\2\2\2\u209e\u0429\3\2\2\2\u209f\u20a0\tp"+
		"\2\2\u20a0\u042b\3\2\2\2\u20a1\u20a2\7\u028c\2\2\u20a2\u20a3\5\u042a\u0216"+
		"\2\u20a3\u042d\3\2\2\2\u20a4\u20a5\tq\2\2\u20a5\u042f\3\2\2\2\u20a6\u20a7"+
		"\5\u040a\u0206\2\u20a7\u0431\3\2\2\2\u20a8\u20ab\5\u043e\u0220\2\u20a9"+
		"\u20ab\7\u0284\2\2\u20aa\u20a8\3\2\2\2\u20aa\u20a9\3\2\2\2\u20ab\u0433"+
		"\3\2\2\2\u20ac\u20b4\7\u0297\2\2\u20ad\u20ae\7\u0295\2\2\u20ae\u20b4\7"+
		"\u029b\2\2\u20af\u20b0\7\u029a\2\2\u20b0\u20b4\7\u029e\2\2\u20b1\u20b2"+
		"\7\u0298\2\2\u20b2\u20b4\7\u029e\2\2\u20b3\u20ac\3\2\2\2\u20b3\u20ad\3"+
		"\2\2\2\u20b3\u20af\3\2\2\2\u20b3\u20b1\3\2\2\2\u20b4\u0435\3\2\2\2\u20b5"+
		"\u20b9\7\u0296\2\2\u20b6\u20b7\7\u029b\2\2\u20b7\u20b9\7\u029e\2\2\u20b8"+
		"\u20b5\3\2\2\2\u20b8\u20b6\3\2\2\2\u20b9\u0437\3\2\2\2\u20ba\u20be\7\u0294"+
		"\2\2\u20bb\u20bc\7\u0295\2\2\u20bc\u20be\7\u029e\2\2\u20bd\u20ba\3\2\2"+
		"\2\u20bd\u20bb\3\2\2\2\u20be\u0439\3\2\2\2\u20bf\u20c3\7\u029c\2\2\u20c0"+
		"\u20c1\7\u029d\2\2\u20c1\u20c3\7\u029d\2\2\u20c2\u20bf\3\2\2\2\u20c2\u20c0"+
		"\3\2\2\2\u20c3\u043b\3\2\2\2\u20c4\u20c5\7\u0287\2\2\u20c5\u20c6\7\u028b"+
		"\2\2\u20c6\u20c7\7\u0288\2\2\u20c7\u043d\3\2\2\2\u20c8\u20c9\tr\2\2\u20c9"+
		"\u043f\3\2\2\2\u04d5\u0443\u0448\u044f\u0454\u0458\u045c\u045e\u0464\u0467"+
		"\u046a\u048a\u0490\u0495\u0497\u04a6\u04ae\u04b1\u04b4\u04b7\u04ba\u04bc"+
		"\u04c3\u04c5\u04c9\u04cf\u04d2\u04d6\u04db\u04e9\u04ef\u04f4\u04f9\u04fe"+
		"\u0503\u0505\u0507\u0510\u0515\u0519\u051f\u0524\u0528\u0530\u0539\u0542"+
		"\u054b\u054e\u0551\u0556\u055b\u055e\u0561\u0564\u0569\u056e\u0574\u057a"+
		"\u057e\u0582\u0588\u0590\u0593\u0598\u059d\u05a6\u05ad\u05af\u05b6\u05bf"+
		"\u05c1\u05c5\u05c9\u05cd\u05d1\u05d5\u05d9\u05de\u05e0\u05e6\u05e8\u05f7"+
		"\u05f9\u05fd\u0604\u0609\u060d\u0615\u061e\u0627\u062b\u0634\u0638\u063c"+
		"\u0656\u0659\u065c\u0666\u066e\u0674\u0678\u067c\u0683\u0688\u068c\u068f"+
		"\u0693\u069c\u06a6\u06ab\u06ad\u06b5\u06b7\u06b9\u06bc\u06c5\u06cd\u06d4"+
		"\u06dd\u06e2\u06ec\u06f1\u06f5\u06f9\u0700\u0705\u0709\u0712\u0716\u071a"+
		"\u071e\u0720\u0722\u0725\u0729\u072f\u0733\u0737\u0739\u073b\u073e\u0742"+
		"\u074a\u074f\u0755\u0759\u075d\u0760\u0763\u0767\u076a\u0770\u0775\u0779"+
		"\u077d\u0781\u0785\u0787\u0789\u078d\u0791\u0799\u079e\u07a4\u07a8\u07ac"+
		"\u07af\u07b2\u07b6\u07b9\u07bf\u07c2\u07c9\u07ce\u07d7\u07e0\u07e4\u07e8"+
		"\u07ec\u07f0\u07f3\u07f8\u07fe\u0802\u0807\u080b\u080f\u0813\u0818\u081f"+
		"\u0823\u0826\u082a\u082d\u0834\u0838\u0846\u084c\u084e\u0854\u085a\u085d"+
		"\u0860\u0863\u0866\u086d\u0870\u0873\u0878\u087a\u087d\u0880\u0883\u088a"+
		"\u088e\u0893\u0896\u089a\u089f\u08a4\u08a7\u08aa\u08ad\u08af\u08b4\u08b8"+
		"\u08bc\u08c5\u08c9\u08cb\u08cf\u08d3\u08da\u08df\u08e4\u08f1\u08f4\u08fb"+
		"\u0902\u0915\u091b\u0920\u0925\u0927\u092d\u0933\u0938\u093c\u0940\u0947"+
		"\u094f\u0953\u0959\u095d\u0967\u0969\u0972\u0974\u098a\u0991\u0993\u0999"+
		"\u09a1\u09a4\u09ab\u09b0\u09b7\u09bd\u09c3\u09c6\u09c9\u09d5\u09d7\u09db"+
		"\u09df\u09e2\u09e8\u09ec\u09ef\u09f4\u09f7\u09fc\u0a00\u0a03\u0a0b\u0a0e"+
		"\u0a19\u0a1e\u0a25\u0a28\u0a31\u0a33\u0a3d\u0a42\u0a46\u0a4b\u0a4f\u0a56"+
		"\u0a5c\u0a5f\u0a75\u0a78\u0a7a\u0a7c\u0a84\u0a8b\u0a8d\u0a91\u0a96\u0a99"+
		"\u0a9c\u0a9f\u0aa4\u0aa9\u0ab3\u0ab5\u0ac2\u0ac4\u0ac6\u0aca\u0ace\u0ad1"+
		"\u0ad8\u0add\u0ae4\u0aea\u0aec\u0af2\u0af6\u0afd\u0b02\u0b0e\u0b1c\u0b21"+
		"\u0b25\u0b27\u0b2b\u0b2f\u0b36\u0b3f\u0b44\u0b49\u0b4c\u0b50\u0b54\u0b56"+
		"\u0b5b\u0b65\u0b69\u0b70\u0b74\u0b79\u0b7e\u0b81\u0b8b\u0b99\u0b9e\u0ba2"+
		"\u0ba4\u0ba9\u0bad\u0bb2\u0bbb\u0bc4\u0bca\u0bcf\u0bd2\u0bd7\u0bda\u0bdf"+
		"\u0be1\u0be6\u0bea\u0bee\u0bf2\u0bf6\u0bfa\u0bfd\u0c0b\u0c10\u0c14\u0c17"+
		"\u0c1b\u0c21\u0c26\u0c29\u0c2e\u0c31\u0c36\u0c38\u0c3d\u0c3f\u0c47\u0c4c"+
		"\u0c50\u0c5b\u0c5f\u0c64\u0c6a\u0c70\u0c75\u0c78\u0c7d\u0c80\u0c85\u0c87"+
		"\u0c8c\u0c8e\u0c98\u0c9e\u0ca2\u0cac\u0cb1\u0cb5\u0cb9\u0cc3\u0cc8\u0cca"+
		"\u0cce\u0cd6\u0cd9\u0cdc\u0cdf\u0ce3\u0cea\u0cf5\u0cfa\u0cfe\u0d03\u0d07"+
		"\u0d0d\u0d10\u0d13\u0d16\u0d19\u0d1c\u0d1f\u0d26\u0d29\u0d2c\u0d31\u0d33"+
		"\u0d36\u0d39\u0d3c\u0d4a\u0d4e\u0d54\u0d56\u0d60\u0d64\u0d67\u0d6a\u0d70"+
		"\u0d73\u0d76\u0d79\u0d7c\u0d7f\u0d82\u0d89\u0d8c\u0d8f\u0d94\u0d96\u0d99"+
		"\u0d9c\u0da2\u0dac\u0db4\u0db8\u0dc1\u0dce\u0de1\u0de3\u0de6\u0dea\u0df0"+
		"\u0df4\u0df9\u0e00\u0e04\u0e07\u0e12\u0e14\u0e17\u0e1d\u0e21\u0e29\u0e31"+
		"\u0e37\u0e3a\u0e3f\u0e43\u0e47\u0e4f\u0e51\u0e53\u0e58\u0e5c\u0e60\u0e64"+
		"\u0e67\u0e6c\u0e6f\u0e75\u0e7c\u0e80\u0e87\u0e8b\u0e94\u0e98\u0ea3\u0ea5"+
		"\u0eb2\u0eb5\u0eb8\u0ebd\u0ebf\u0ec5\u0ecf\u0ed2\u0ed4\u0ed8\u0edc\u0ee0"+
		"\u0ee3\u0ee5\u0eeb\u0eed\u0ef0\u0ef5\u0efa\u0f00\u0f04\u0f0e\u0f10\u0f14"+
		"\u0f18\u0f1d\u0f22\u0f26\u0f2b\u0f32\u0f3a\u0f3f\u0f43\u0f48\u0f4a\u0f52"+
		"\u0f57\u0f5b\u0f60\u0f62\u0f67\u0f6e\u0f72\u0f76\u0fa3\u0fa6\u0fab\u0fad"+
		"\u0fb8\u0fbd\u0fc2\u0fc7\u0fc9\u0fd3\u0fd8\u0fe0\u0fe2\u0fe6\u0fea\u0fef"+
		"\u0ff4\u0ff9\u0ffd\u100b\u1010\u1013\u1019\u1022\u1030\u1038\u1041\u1044"+
		"\u1049\u104e\u1053\u1058\u1060\u1067\u1069\u106d\u1073\u1078\u1083\u108d"+
		"\u1092\u109e\u10a3\u10a8\u10ab\u10b9\u10c4\u10c9\u10ce\u10d3\u10d5\u10df"+
		"\u10e4\u10e7\u10eb\u10f0\u10f6\u1105\u110a\u110f\u1111\u1116\u111d\u1120"+
		"\u1123\u1126\u1130\u113c\u1140\u1143\u114c\u1154\u115c\u115f\u1166\u116a"+
		"\u1171\u1177\u11a0\u11bc\u11c3\u11c8\u11d3\u11d6\u11e1\u11e9\u11ed\u11f7"+
		"\u11fa\u11fe\u1201\u1206\u120b\u120f\u1219\u1223\u1229\u1234\u1239\u123d"+
		"\u1245\u124d\u1252\u1255\u1257\u125a\u1263\u1268\u126d\u1270\u1273\u1277"+
		"\u127a\u1282\u1287\u128c\u1293\u129d\u12ad\u12b3\u12bd\u12c7\u12ce\u12d3"+
		"\u12d9\u12e3\u12e8\u12ef\u12f4\u12fa\u12fd\u1300\u1311\u1316\u131f\u1324"+
		"\u132a\u132d\u1334\u1337\u133e\u1343\u1347\u134c\u1351\u135b\u1361\u136b"+
		"\u1370\u1377\u137d\u1381\u1384\u1387\u1398\u139d\u13a5\u13b3\u13ba\u13c9"+
		"\u13d0\u13d2\u13e5\u13f5\u13fe\u1403\u1407\u140a\u1414\u1420\u1426\u142e"+
		"\u1432\u1435\u1443\u1447\u144c\u144f\u145c\u1460\u146c\u1471\u1475\u1479"+
		"\u147f\u1482\u1485\u14a0\u14a6\u14aa\u14b0\u14bc\u14c5\u14c7\u14cd\u14d1"+
		"\u14d4\u14dd\u14e8\u14ec\u14ef\u14f3\u14fb\u1504\u150d\u150f\u151d\u1531"+
		"\u1535\u153c\u1540\u1544\u1548\u1554\u1558\u1566\u156c\u1573\u1578\u1582"+
		"\u1588\u158a\u1593\u159d\u15a2\u15b1\u15b5\u15b8\u15bc\u15c4\u15c6\u15ca"+
		"\u15d2\u15d9\u15de\u15e0\u15e5\u15ea\u15f2\u15f9\u15fd\u1600\u160c\u1612"+
		"\u161a\u1624\u162f\u1632\u1639\u163c\u1643\u164e\u1654\u1658\u1662\u1665"+
		"\u166b\u1676\u1678\u167a\u167d\u1681\u1684\u1688\u168c\u1691\u169c\u16a0"+
		"\u16a8\u16ab\u16b5\u16ba\u16c0\u16c4\u16c7\u16cf\u16d2\u16d6\u16da\u16df"+
		"\u16e2\u16e6\u16ea\u16ee\u16fa\u170a\u1710\u1714\u1719\u171d\u1724\u1728"+
		"\u172b\u172e\u1731\u1735\u1737\u173b\u1740\u1742\u174d\u174f\u1757\u175d"+
		"\u1764\u176b\u176f\u1771\u1777\u177d\u1784\u1787\u178a\u178f\u1793\u179f"+
		"\u17a6\u17ab\u17ad\u17af\u17bd\u17c0\u17ca\u17ce\u17d6\u17e2\u17ec\u17f1"+
		"\u17fb\u1803\u1806\u180c\u1810\u1815\u181f\u1824\u1831\u183d\u1842\u184c"+
		"\u1851\u1853\u1858\u185c\u1862\u1866\u1873\u1879\u1882\u188f\u1897\u18a0"+
		"\u18a4\u18a9\u18b4\u18b6\u18c6\u18cb\u18d1\u18d7\u18e9\u18f0\u18f3\u18fb"+
		"\u1904\u1906\u190a\u190d\u1912\u1914\u1918\u1924\u192d\u1935\u193a\u193e"+
		"\u1943\u1946\u194e\u1956\u195f\u1962\u1965\u1968\u1970\u197a\u1984\u1988"+
		"\u198c\u198f\u1992\u1997\u199c\u199f\u19a2\u19a8\u19ab\u19b1\u19b4\u19b7"+
		"\u19bc\u19bf\u19c7\u19cd\u19d2\u19da\u19e1\u19eb\u19ef\u19f1\u19f4\u1a00"+
		"\u1a04\u1a07\u1a16\u1a1b\u1a22\u1a25\u1a2e\u1a35\u1a3a\u1a3e\u1a46\u1a4c"+
		"\u1a54\u1a57\u1a5f\u1a67\u1a6a\u1a6d\u1a76\u1a7c\u1a82\u1a84\u1a91\u1a93"+
		"\u1a9c\u1a9e\u1aa2\u1aa8\u1aac\u1aba\u1ac0\u1ad1\u1ad5\u1aeb\u1af3\u1af7"+
		"\u1afd\u1b02\u1b05\u1b07\u1b0b\u1b16\u1b1a\u1b21\u1b26\u1b34\u1b47\u1b5b"+
		"\u1b5e\u1b60\u1b62\u1b6a\u1b72\u1b79\u1b7d\u1b86\u1b8b\u1b8f\u1b97\u1b9b"+
		"\u1ba2\u1bab\u1bb9\u1bc6\u1bcb\u1be0\u1be9\u1bee\u1bf1\u1bf8\u1bfb\u1bff"+
		"\u1c02\u1c09\u1c0c\u1c12\u1c15\u1c19\u1c1c\u1c23\u1c28\u1c3a\u1c3c\u1c40"+
		"\u1c48\u1c54\u1c5b\u1c66\u1c6e\u1c7d\u1c81\u1c8a\u1c90\u1c98\u1ca1\u1cac"+
		"\u1cb0\u1cb3\u1cc3\u1cc9\u1cd3\u1cdb\u1cde\u1ce1\u1cea\u1cef\u1cf8\u1cfe"+
		"\u1d03\u1d06\u1d0b\u1d10\u1d14\u1d1a\u1d20\u1d29\u1d2e\u1d36\u1d3a\u1d3f"+
		"\u1d45\u1d4c\u1d51\u1d58\u1d5c\u1d61\u1d69\u1d6c\u1d6f\u1d72\u1d76\u1d7b"+
		"\u1d80\u1d84\u1d8b\u1d90\u1d92\u1d99\u1d9f\u1da5\u1da8\u1dac\u1dae\u1db9"+
		"\u1dbd\u1dbf\u1dca\u1dd5\u1dde\u1de1\u1de5\u1de8\u1dec\u1df9\u1dfe\u1e06"+
		"\u1e0d\u1e12\u1e16\u1e1b\u1e20\u1e23\u1e2a\u1e34\u1e3c\u1e40\u1e4a\u1e4d"+
		"\u1e4f\u1e59\u1e5b\u1e61\u1e67\u1e69\u1e77\u1e79\u1e81\u1e8a\u1e93\u1e9d"+
		"\u1ea1\u1ea6\u1eaa\u1ead\u1eb0\u1eb4\u1ebb\u1ec7\u1ed2\u1ed5\u1ed9\u1eec"+
		"\u1ef1\u1ef8\u1f05\u1f0f\u1f14\u1f1d\u1f25\u1f2d\u1f33\u1f38\u1f3d\u1f41"+
		"\u1f47\u1f4b\u1f50\u1f59\u1f62\u1f69\u1f75\u1f79\u1f7f\u1f84\u1f89\u1f8b"+
		"\u1f90\u1f94\u1f99\u1fa0\u1fa5\u1fa7\u1fa9\u1fb3\u1fb8\u1fbc\u1fbf\u1fc3"+
		"\u1fcc\u1fd2\u1fd6\u1fd8\u1fdc\u1fe0\u1fe4\u1fec\u1ff4\u1ff6\u1ffc\u1fff"+
		"\u2017\u201e\u203f\u2044\u2047\u204c\u204e\u2054\u205b\u2062\u2068\u206e"+
		"\u2074\u2079\u207b\u207e\u2088\u208b\u208d\u208f\u209d\u20aa\u20b3\u20b8"+
		"\u20bd\u20c2";
	public static final String _serializedATN = Utils.join(
		new String[] {
			_serializedATNSegment0,
			_serializedATNSegment1,
			_serializedATNSegment2,
			_serializedATNSegment3
		},
		""
	);
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}